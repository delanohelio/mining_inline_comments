{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyNzU5OTAw", "number": 3383, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1Mjo0MlrOEP_3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMzowOVrOEQAbBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjEwMzg2OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1Mjo0MlrOGz7mgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjo1Mjo0MlrOGz7mgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEwNzA3Mw==", "bodyText": "Thanks alot @achilep  for your great , there are some failing tests that are breaking the ci ,could you first run your new changes", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457107073", "createdAt": "2020-07-20T06:52:42Z", "author": {"login": "sherrif10"}, "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -11,41 +11,45 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.openmrs.web.Listener;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.reflect.Whitebox;\n import org.springframework.mock.web.MockHttpServletRequest;\n \n /**\n  * Tests {@link StartupErrorFilter}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(Listener.class)\n-@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\"})\n-public class StartupErrorFilterTest {\n+public class StartupErrorFilterTest extends BaseContextSensitiveTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f1f661029842328275e42cbe419d8429936dc36"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE2MTUzOnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNTo0OVrOGz8GQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoyNjowMFrOGz84-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNTIwMg==", "bodyText": "we dont need to have a field for this one", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457115202", "createdAt": "2020-07-20T07:05:49Z", "author": {"login": "teleivo"}, "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -11,41 +11,45 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.openmrs.web.Listener;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.reflect.Whitebox;\n import org.springframework.mock.web.MockHttpServletRequest;\n \n /**\n  * Tests {@link StartupErrorFilter}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(Listener.class)\n-@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\"})\n-public class StartupErrorFilterTest {\n+public class StartupErrorFilterTest extends BaseContextSensitiveTest {\n+\n+\tprivate StartupErrorFilter filter;\n \t\n-\t@Before\n+\tprivate Throwable errorAtStartup ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f1f661029842328275e42cbe419d8429936dc36"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyODE4NA==", "bodyText": "Thanks for this @teleivo", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457128184", "createdAt": "2020-07-20T07:26:00Z", "author": {"login": "sherrif10"}, "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -11,41 +11,45 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.openmrs.web.Listener;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.reflect.Whitebox;\n import org.springframework.mock.web.MockHttpServletRequest;\n \n /**\n  * Tests {@link StartupErrorFilter}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(Listener.class)\n-@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\"})\n-public class StartupErrorFilterTest {\n+public class StartupErrorFilterTest extends BaseContextSensitiveTest {\n+\n+\tprivate StartupErrorFilter filter;\n \t\n-\t@Before\n+\tprivate Throwable errorAtStartup ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNTIwMg=="}, "originalCommit": {"oid": "0f1f661029842328275e42cbe419d8429936dc36"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE2ODE2OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNzoxM1rOGz8Jsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNzoxM1rOGz8Jsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNjA4Mg==", "bodyText": "please inline the variable", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457116082", "createdAt": "2020-07-20T07:07:13Z", "author": {"login": "teleivo"}, "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -11,41 +11,45 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.openmrs.web.Listener;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.reflect.Whitebox;\n import org.springframework.mock.web.MockHttpServletRequest;\n \n /**\n  * Tests {@link StartupErrorFilter}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(Listener.class)\n-@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\"})\n-public class StartupErrorFilterTest {\n+public class StartupErrorFilterTest extends BaseContextSensitiveTest {\n+\n+\tprivate StartupErrorFilter filter;\n \t\n-\t@Before\n+\tprivate Throwable errorAtStartup ;\n+\n+\t@BeforeEach\n \tpublic void setUp() {\n-\t\tmockStatic(Listener.class);\n+\t\tfilter = new StartupErrorFilter();\n+\t}\n+\t\n+\t@AfterEach\n+\tpublic void reverterrorAtStartup() {\n+\t\terrorAtStartup = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f1f661029842328275e42cbe419d8429936dc36"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE3Njc5OnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowOToxNFrOGz8OTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowOToxNFrOGz8OTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNzI2MA==", "bodyText": "I think we don't need to mock the throwable. You can just create any Exception as they are Throwable", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457117260", "createdAt": "2020-07-20T07:09:14Z", "author": {"login": "teleivo"}, "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -11,41 +11,45 @@\n \n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mockStatic;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n import org.openmrs.web.Listener;\n-import org.powermock.core.classloader.annotations.PowerMockIgnore;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n+import org.powermock.reflect.Whitebox;\n import org.springframework.mock.web.MockHttpServletRequest;\n \n /**\n  * Tests {@link StartupErrorFilter}.\n  */\n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest(Listener.class)\n-@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"javax.xml.*\", \"org.xml.*\", \"javax.management.*\", \"org.w3c.dom.*\"})\n-public class StartupErrorFilterTest {\n+public class StartupErrorFilterTest extends BaseContextSensitiveTest {\n+\n+\tprivate StartupErrorFilter filter;\n \t\n-\t@Before\n+\tprivate Throwable errorAtStartup ;\n+\n+\t@BeforeEach\n \tpublic void setUp() {\n-\t\tmockStatic(Listener.class);\n+\t\tfilter = new StartupErrorFilter();\n+\t}\n+\t\n+\t@AfterEach\n+\tpublic void reverterrorAtStartup() {\n+\t\terrorAtStartup = null;\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", errorAtStartup);\n+\t\t\n \t}\n \t\n \t@Test\n \tpublic void getModel_shouldReturnAStartupErrorFilterModelContainingTheStartupError() {\n \t\t\n \t\tThrowable t = mock(Throwable.class);\n-\t\twhen(Listener.getErrorAtStartup()).thenReturn(t);\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f1f661029842328275e42cbe419d8429936dc36"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE4ODUzOnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMTozN1rOGz8UUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMTozN1rOGz8UUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExODgwMw==", "bodyText": "remove this line, you are setting the errors to null in the after each , so there are no errors by default for this test. the test will then pass.", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457118803", "createdAt": "2020-07-20T07:11:37Z", "author": {"login": "teleivo"}, "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -55,20 +59,18 @@ public void getModel_shouldReturnAStartupErrorFilterModelContainingTheStartupErr\n \t@Test\n \tpublic void skipFilter_shouldReturnTrueIfNoErrorHasOccuredOnStartup() {\n \t\t\n-\t\twhen(Listener.errorOccurredAtStartup()).thenReturn(false);\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f1f661029842328275e42cbe419d8429936dc36"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE5NTkxOnYy", "diffSide": "RIGHT", "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMzowOVrOGz8YIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMzowOVrOGz8YIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExOTc3Ng==", "bodyText": "you will need to set the errors field to a Throwable (for example an Exception) for the getter to return true", "url": "https://github.com/openmrs/openmrs-core/pull/3383#discussion_r457119776", "createdAt": "2020-07-20T07:13:09Z", "author": {"login": "teleivo"}, "path": "web/src/test/java/org/openmrs/web/filter/startuperror/StartupErrorFilterTest.java", "diffHunk": "@@ -55,20 +59,18 @@ public void getModel_shouldReturnAStartupErrorFilterModelContainingTheStartupErr\n \t@Test\n \tpublic void skipFilter_shouldReturnTrueIfNoErrorHasOccuredOnStartup() {\n \t\t\n-\t\twhen(Listener.errorOccurredAtStartup()).thenReturn(false);\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", false);\n \t\t\n-\t\tStartupErrorFilter filter = new StartupErrorFilter();\n \t\t\n-\t\tassertTrue(\"should be true on start without error\", filter.skipFilter(new MockHttpServletRequest()));\n+\t\tassertTrue(filter.skipFilter(new MockHttpServletRequest()), \"should be true on start without error\");\n \t}\n \t\n \t@Test\n \tpublic void skipFilter_shouldReturnFalseIfAnErrorHasOccuredOnStartup() {\n \t\t\n-\t\twhen(Listener.errorOccurredAtStartup()).thenReturn(true);\n+\t\tWhitebox.setInternalState(Listener.class, \"errorAtStartup\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f1f661029842328275e42cbe419d8429936dc36"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1315, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}