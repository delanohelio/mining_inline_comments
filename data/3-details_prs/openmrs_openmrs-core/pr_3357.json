{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTY4NTQw", "number": 3357, "title": "TRUNK-5862: Condition and Obs to implement FormRecordable.", "bodyText": "TRUNK-5862: Add a pointer for form_field in Condition\n\n\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/TRUNK-5862\nChecklist: I completed these\n\n\n\n\n My IDE is configured to follow the code style of this project.\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\n\n\n All new and existing tests passed.\n\n\n My pull request is based on the latest changes of the master branch.", "createdAt": "2020-07-14T15:55:05Z", "url": "https://github.com/openmrs/openmrs-core/pull/3357", "merged": true, "mergeCommit": {"oid": "3c34c43fa1d1451d5e9d947870320aa10ef8594d"}, "closed": true, "closedAt": "2020-07-21T09:36:29Z", "author": {"login": "icrc-loliveira"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc02gTVAH2gAyNDQ4OTY4NTQwOmI4NzUyZjkzODk4OGVmNjAyZTZkYWY0NjkwMzk0M2YxY2I0NDBkY2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3VMJ8AFqTQ1MzAzOTEyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b8752f938988ef602e6daf46903943f1cb440dcd", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/b8752f938988ef602e6daf46903943f1cb440dcd", "committedDate": "2020-07-14T14:00:18Z", "message": "Created abstract class to handle a bridge between an OpenMrsObject and is position in the form.\n\nExtended conditions and obs from this new class.\n\nupdated liquibase-update-to-latest-2.4.x.xml to add the new column form_namespace_path to the table conditions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40053f8d52556064ed52833e5dce1b4d32093ba0", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/40053f8d52556064ed52833e5dce1b4d32093ba0", "committedDate": "2020-07-14T14:03:22Z", "message": "Updated changeset id."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/a83975187495d8e438dc2cc74b4da2fc00838adb", "committedDate": "2020-07-14T15:53:43Z", "message": "Added unitary tests for Conditions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzM5Mjg3", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-448339287", "createdAt": "2020-07-14T17:59:49Z", "commit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1OTo0OVrOGxfCQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowNDozOFrOGxfNqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTg4OA==", "bodyText": "We need an interface FormRecordable. In the end you'll have something like:\n\nFormRecordable: an interface\nBaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable: a (maybe abstract) class that will be subclassed by Obs and Condition in a way that they share as much as possible from the original code that currently lives in Obs.\nObs extends BaseFormRecordableOpenmrsData\nCondition extends BaseFormRecordableOpenmrsData", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454541888", "createdAt": "2020-07-14T17:59:49Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ */\n+@MappedSuperclass\n+public abstract class FormRecordable extends BaseChangeableOpenmrsData{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0Mjk3Nw==", "bodyText": "<comment>Adding \"form_namespace_path\" column to conditions table</comment>", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454542977", "createdAt": "2020-07-14T18:01:31Z", "author": {"login": "mks-d"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -142,4 +142,19 @@\n     \t<dropForeignKeyConstraint baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\"/>\n \t\t<addForeignKeyConstraint baseColumnNames=\"order_id\" baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\" deferrable=\"false\" initiallyDeferred=\"false\" onDelete=\"CASCADE\" onUpdate=\"NO ACTION\" referencedColumnNames=\"order_id\" referencedTableName=\"orders\"/>\n \t</changeSet>\n+\n+\t<changeSet id=\"20200714-Trunk-5862\" author=\"loliveira\">\n+\t\t<preConditions onFail=\"MARK_RAN\">\n+\t\t\t<not>\n+\t\t\t\t<columnExists tableName=\"conditions\" columnName=\"form_namespace_path\"/>\n+\t\t\t</not>\n+\t\t</preConditions>\n+\t\t<comment>Adding \"order_group_reason\" column to order_group table</comment>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzkyNQ==", "bodyText": "There's tons of Java string utils to generate strings of a certain length no?", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454543925", "createdAt": "2020-07-14T18:03:04Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/ConditionTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the Condition java object TODO: finish\n+ * this test class for Condition\n+ * \n+ * @see Condition\n+ */\n+public class ConditionTest {\n+\t\t\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\t\n+\t/**\n+\t * @see Condition#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = FormRecordable.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(condition));\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(\"\", \"my path\");\n+\t\tassertNull(condition.getFormFieldNamespace());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);\n+\t\tassertEquals(ns, condition.getFormFieldNamespace());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, null);\n+\t\tassertEquals(ns, condition.getFormFieldNamespace());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(\"my ns\", \"\");\n+\t\tassertNull(condition.getFormFieldPath());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);\n+\t\tassertEquals(path, condition.getFormFieldPath());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(\"\", path);\n+\t\tassertEquals(path, condition.getFormFieldPath());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\t\tStringBuilder nsBuffer = new StringBuilder(125);\n+\t\tfor (int i = 0; i < 125; i++) {\n+\t\t\tnsBuffer.append(\"n\");\n+\t\t}\n+\t\tfor (int i = 0; i < 130; i++) {\n+\t\t\tnsBuffer.append(\"p\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NDgxMA==", "bodyText": "Rather than all this I'd add a couple of test cases in ConditionServiceImplTest.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454544810", "createdAt": "2020-07-14T18:04:38Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/ConditionTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the Condition java object TODO: finish\n+ * this test class for Condition\n+ * \n+ * @see Condition\n+ */\n+public class ConditionTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bad8cc2ea259b4f63c63518c8c238f12bf779632", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/bad8cc2ea259b4f63c63518c8c238f12bf779632", "committedDate": "2020-07-15T07:41:33Z", "message": "Created interface FormRecordable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df34f90d85607e12d8efc3588b8b29d8167f1c9", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/8df34f90d85607e12d8efc3588b8b29d8167f1c9", "committedDate": "2020-07-15T07:43:24Z", "message": "Fix comment on changeSet to add the column form_namespace_path to the table conditions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f63a9738a8be7c6aaa87857102e165917956aa0", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/1f63a9738a8be7c6aaa87857102e165917956aa0", "committedDate": "2020-07-15T07:52:36Z", "message": "Optimize tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/fcb43daebaf4a5234c61ae89e20ae6f51a749eae", "committedDate": "2020-07-15T11:04:42Z", "message": "Organize BaseFormRecordableOpenmrsData tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4ODU4NTA5", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-448858509", "createdAt": "2020-07-15T11:19:06Z", "commit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyMjo0N1rOGx5tgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTozNDowNVrOGx6C5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3ODk0NA==", "bodyText": "This will probably be the implementation for Obs, by this I mean when the setter that needs to call markAsDirty(..).\nThe base implementation will be the same, without the calls to markAsDirty(..).", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454978944", "createdAt": "2020-07-15T11:22:47Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTc5NQ==", "bodyText": "In light of the above you'll be able to remove this. The reason being that from recordable OpenMRS data and dirty-able OpenMRS data are two different things, I don't think we should conflate them there. @dkayiwa, @ibacher thoughts?", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454979795", "createdAt": "2020-07-15T11:24:39Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}\n+\n+\tprotected abstract void markAsDirty(Object oldValue, Object newValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDAyNA==", "bodyText": "In light of the above, this will not be necessary either.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454980024", "createdAt": "2020-07-15T11:25:08Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Condition.java", "diffHunk": "@@ -396,4 +396,10 @@ public boolean equals(Object o) {\n \t\t}\n \t\treturn Objects.equals(endReason, conditionToBeChecked.endReason);\n \t}\n+\t\n+\t@Override\n+\tprotected void markAsDirty(Object oldValue, Object newValue) {\n+\t\t// Do nothing\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDIxMQ==", "bodyText": "@since 2.4.0", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454980211", "createdAt": "2020-07-15T11:25:29Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+/**\n+ * Defines the methods to make a bridge between an OpenMrsObject and is position in the form.\n+ *\n+ * @since 1.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDQ3OA==", "bodyText": "Same here, and same for other methods.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454980478", "createdAt": "2020-07-15T11:26:01Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+/**\n+ * Defines the methods to make a bridge between an OpenMrsObject and is position in the form.\n+ *\n+ * @since 1.4\n+ */\n+public interface FormRecordable {\n+\n+\t/**\n+\t * Gets the namespace for the form field that was used to capture the obs details in the form\n+\t *\n+\t * @return the namespace\n+\t * @since 1.11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA==", "bodyText": "Why not just use an Obs? That'd be the more backward compatible approach.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454984420", "createdAt": "2020-07-15T11:34:05Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the BaseFormRecordableOpenmrsDataImpl java object this test class for BaseFormRecordableOpenmrsDataImpl\n+ *\n+ * @see BaseFormRecordableOpenmrsDataImpl\n+ */\n+public class BaseFormRecordableOpenmrsDataTest {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = BaseFormRecordableOpenmrsData.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(impl));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", \"my path\");\n+\t\tassertNull(impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, null);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"my ns\", \"\");\n+\t\tassertNull(impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\n+\t\tfinal String ns = StringUtils.repeat(\"x\", 255);\n+\t\tfinal String path = \"\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, path));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceContainingTheSeparator() throws Exception {\n+\t\tfinal String ns = \"my ns\" + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, \"\"));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectAPathContainingTheSeparator() throws Exception {\n+\t\tfinal String path = FORM_NAMESPACE_PATH_SEPARATOR + \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(\"\", path));\n+\t}\n+\n+\tpublic class BaseFormRecordableOpenmrsDataImpl extends BaseFormRecordableOpenmrsData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "338d72c2a09322c5e8d9ddf57351bdeb109e48cf", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/338d72c2a09322c5e8d9ddf57351bdeb109e48cf", "committedDate": "2020-07-15T14:49:14Z", "message": "Added updated test saveCondition_shouldSaveNewCondition to test condition.getFormNamespaceAndPath."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5166ad661423e9492d3d18129bf53552c343bd9f", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/5166ad661423e9492d3d18129bf53552c343bd9f", "committedDate": "2020-07-15T14:54:47Z", "message": "Added updated test saveCondition_shouldSaveNewCondition to test condition.getFormNamespaceAndPath."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffb2b057c3daa5b5ac4f55079c0f29a1f039388a", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/ffb2b057c3daa5b5ac4f55079c0f29a1f039388a", "committedDate": "2020-07-15T15:10:28Z", "message": "Updated method comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "331017cb26ec2c9a1359b2421135c4d0ed4cb124", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/331017cb26ec2c9a1359b2421135c4d0ed4cb124", "committedDate": "2020-07-15T15:15:08Z", "message": "Change exception message to refer `BaseFormRecordableOpenmrsDatainsted` of `obs`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35bf446b52ec5dcfeef55bcc952894c45163610b", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/35bf446b52ec5dcfeef55bcc952894c45163610b", "committedDate": "2020-07-15T16:00:40Z", "message": "Renamed form_namespace_path to form_namespace_and_path to be consistent with Obs old value."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/f26fa6ec52b727928e886c5a8d969d23416dae70", "committedDate": "2020-07-15T16:01:28Z", "message": "Remove field formNamespaceAndPath."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NzA5OTg0", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-449709984", "createdAt": "2020-07-16T10:13:08Z", "commit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoxMzowOFrOGykZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoxNDo1MVrOGykcnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3ODIyNw==", "bodyText": "Are you sure it's 100% ok, unfortunately there is also this piece:\nif (namespace == null && formFieldPath == null) {\n  markAsDirty(formNamespaceAndPath, null);\n  formNamespaceAndPath = null;\n  return;\n}", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455678227", "createdAt": "2020-07-16T10:13:08Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the path was specified\n-\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Gets the path for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the the form field path\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the path for a form field that has no namespace\n-\t * <strong>Should</strong> return the correct path for a form field with a namespace\n-\t * <strong>Should</strong> return null if the path is not specified\n-\t */\n-\tpublic String getFormFieldPath() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the namespace was specified\n-\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Sets the namespace and path of the form field that was used to capture the obs details in the\n-\t * form.<br>\n-\t * <b>Note:</b> Namespace and formFieldPath together must not exceed 254 characters in length,\n-\t * form applications can subtract the length of their namespace from 254 to determine the\n-\t * maximum length they can use for a form field path.\n-\t * \n-\t * @param namespace the namespace of the form field\n-\t * @param formFieldPath the path of the form field\n-\t * @since 1.11\n-\t * <strong>Should</strong> set the underlying formNamespaceAndPath in the correct pattern\n-\t * <strong>Should</strong> reject a namepace containing the separator\n-\t * <strong>Should</strong> reject a path containing the separator\n-\t * <strong>Should</strong> reject a namepace and path combination longer than the max length\n-\t * <strong>Should</strong> not mark the obs as dirty when the value has not been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value has been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a null to a non null value\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a non null to a null value\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n \t */\n+\t@Override\n \tpublic void setFormField(String namespace, String formFieldPath) {\n-\t\tif (namespace == null && formFieldPath == null) {\n-\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n-\t\t\tformNamespaceAndPath = null;\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tString nsAndPathTemp = \"\";\n-\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t} else if (StringUtils.isNotBlank(namespace)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n-\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t}\n-\t\t\n-\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n-\t\t}\n-\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n-\t\t}\n-\t\t\n-\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n-\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t\tString oldValue = formNamespaceAndPath;\n+\t\tsuper.setFormField(namespace, formFieldPath);\n+\t\tmarkAsDirty(oldValue, formNamespaceAndPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3OTEzNQ==", "bodyText": "@dkayiwa @ibacher any preference/convention for the changeset ID?\nThere seems to be none.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455679135", "createdAt": "2020-07-16T10:14:51Z", "author": {"login": "mks-d"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -142,4 +142,19 @@\n     \t<dropForeignKeyConstraint baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\"/>\n \t\t<addForeignKeyConstraint baseColumnNames=\"order_id\" baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\" deferrable=\"false\" initiallyDeferred=\"false\" onDelete=\"CASCADE\" onUpdate=\"NO ACTION\" referencedColumnNames=\"order_id\" referencedTableName=\"orders\"/>\n \t</changeSet>\n+\n+\t<changeSet id=\"20200714-Trunk-5862\" author=\"loliveira\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTI0NDYz", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-449924463", "createdAt": "2020-07-16T14:48:46Z", "commit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTI0OTEw", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-449924910", "createdAt": "2020-07-16T14:49:15Z", "commit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjUyMTE2", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-450252116", "createdAt": "2020-07-16T22:12:45Z", "commit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxMjo0NVrOGy-n0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxNzozOVrOGy-u7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwNzk4Ng==", "bodyText": "I think this new code still takes care of that use case properly... ie marking as dirty if the formNamespaceAndPath goes from something to null, if I'm understanding it correctly.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456107986", "createdAt": "2020-07-16T22:12:45Z", "author": {"login": "mogoodrich"}, "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the path was specified\n-\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Gets the path for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the the form field path\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the path for a form field that has no namespace\n-\t * <strong>Should</strong> return the correct path for a form field with a namespace\n-\t * <strong>Should</strong> return null if the path is not specified\n-\t */\n-\tpublic String getFormFieldPath() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the namespace was specified\n-\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Sets the namespace and path of the form field that was used to capture the obs details in the\n-\t * form.<br>\n-\t * <b>Note:</b> Namespace and formFieldPath together must not exceed 254 characters in length,\n-\t * form applications can subtract the length of their namespace from 254 to determine the\n-\t * maximum length they can use for a form field path.\n-\t * \n-\t * @param namespace the namespace of the form field\n-\t * @param formFieldPath the path of the form field\n-\t * @since 1.11\n-\t * <strong>Should</strong> set the underlying formNamespaceAndPath in the correct pattern\n-\t * <strong>Should</strong> reject a namepace containing the separator\n-\t * <strong>Should</strong> reject a path containing the separator\n-\t * <strong>Should</strong> reject a namepace and path combination longer than the max length\n-\t * <strong>Should</strong> not mark the obs as dirty when the value has not been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value has been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a null to a non null value\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a non null to a null value\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n \t */\n+\t@Override\n \tpublic void setFormField(String namespace, String formFieldPath) {\n-\t\tif (namespace == null && formFieldPath == null) {\n-\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n-\t\t\tformNamespaceAndPath = null;\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tString nsAndPathTemp = \"\";\n-\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t} else if (StringUtils.isNotBlank(namespace)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n-\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t}\n-\t\t\n-\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n-\t\t}\n-\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n-\t\t}\n-\t\t\n-\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n-\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t\tString oldValue = formNamespaceAndPath;\n+\t\tsuper.setFormField(namespace, formFieldPath);\n+\t\tmarkAsDirty(oldValue, formNamespaceAndPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3ODIyNw=="}, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwODM1Mg==", "bodyText": "Minor point, but by convention we don't use wildcard imports.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456108352", "createdAt": "2020-07-16T22:13:50Z", "author": {"login": "mogoodrich"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTU5MQ==", "bodyText": "Where is this being used?", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456109591", "createdAt": "2020-07-16T22:17:10Z", "author": {"login": "mogoodrich"}, "path": "api/src/test/java/org/openmrs/ObsTest.java", "diffHunk": "@@ -35,6 +35,7 @@\n import java.util.Locale;\n import java.util.Set;\n \n+import liquibase.util.StringUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTcyNw==", "bodyText": "More wildcard imports.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456109727", "createdAt": "2020-07-16T22:17:30Z", "author": {"login": "mogoodrich"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -9,40 +9,32 @@\n  */\n package org.openmrs.api.impl;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n import java.util.List;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.CodedOrFreeText;\n-import org.openmrs.Condition;\n-import org.openmrs.ConditionClinicalStatus;\n-import org.openmrs.ConditionVerificationStatus;\n-import org.openmrs.Encounter;\n-import org.openmrs.Patient;\n+import org.openmrs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTgwNQ==", "bodyText": "Another wildcard import", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456109805", "createdAt": "2020-07-16T22:17:39Z", "author": {"login": "mogoodrich"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -9,40 +9,32 @@\n  */\n package org.openmrs.api.impl;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n import java.util.List;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.CodedOrFreeText;\n-import org.openmrs.Condition;\n-import org.openmrs.ConditionClinicalStatus;\n-import org.openmrs.ConditionVerificationStatus;\n-import org.openmrs.Encounter;\n-import org.openmrs.Patient;\n+import org.openmrs.*;\n import org.openmrs.api.ConditionService;\n import org.openmrs.api.PatientService;\n import org.openmrs.api.context.Context;\n import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n \n+import static org.junit.jupiter.api.Assertions.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60011a60bc902800ddef16ce6105d70b390afd03", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/60011a60bc902800ddef16ce6105d70b390afd03", "committedDate": "2020-07-17T07:29:56Z", "message": "Fixed imports with wildcard."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/6766e5380342f8335f97eae686e30c86653121e9", "committedDate": "2020-07-17T07:55:36Z", "message": "Merge branch 'master' of https://github.com/icrc-loliveira/openmrs-core into TRUNK-5862\n\n\u0001 Conflicts:\n\u0001\tapi/src/main/java/org/openmrs/Obs.java\n\u0001\tapi/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDg3NTI0", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-450487524", "createdAt": "2020-07-17T08:54:15Z", "commit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1NDoxNlrOGzLEFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1NDoxNlrOGzLEFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTgzMQ==", "bodyText": "Instead of removing, shouldn't we deprecate these public methods? https://wiki.openmrs.org/display/docs/Java+Conventions#JavaConventions-Deprecation", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456311831", "createdAt": "2020-07-17T08:54:16Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDkzNTcw", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-450493570", "createdAt": "2020-07-17T09:03:04Z", "commit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowMzowNFrOGzLV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowMzowNFrOGzLV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNjM4OA==", "bodyText": "Modifying an existing test to set the form field creates an impression that it is required field. If not, i would rather create a new test.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456316388", "createdAt": "2020-07-17T09:03:04Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,21 +62,31 @@ public void setup (){\n \t */\n \t@Test\n \tpublic void saveCondition_shouldSaveNewCondition(){\n+\t\t\n+\t\t// Create Condition to test\n+\t\tString ns = \"my ns\";\n+\t\tString path = \"my path\";\n \t\tInteger patientId = 2;\n \t\tString uuid = \"08002000-4469-12q3-551f-0339000c9a76\";\n \t\tCodedOrFreeText codedOrFreeText = new CodedOrFreeText();\n \t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNTYwMTQz", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-450560143", "createdAt": "2020-07-17T10:48:48Z", "commit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6a3ac3d9580d14ec2045fbb74de412fea9b6d0d", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/b6a3ac3d9580d14ec2045fbb74de412fea9b6d0d", "committedDate": "2020-07-17T11:01:20Z", "message": "Add a new test `saveCondition_shouldSaveNewCondition` instead of touching the existing one."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "378b95f4afce1125bd162cb1f9dc6cfe994e3a6c", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/378b95f4afce1125bd162cb1f9dc6cfe994e3a6c", "committedDate": "2020-07-17T11:51:35Z", "message": "Incremented CHANGE_SET_COUNT_FOR_2_1_X"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNTk1MjIw", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-450595220", "createdAt": "2020-07-17T11:55:26Z", "commit": {"oid": "378b95f4afce1125bd162cb1f9dc6cfe994e3a6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzI2NjM0", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-450726634", "createdAt": "2020-07-17T14:54:25Z", "commit": {"oid": "378b95f4afce1125bd162cb1f9dc6cfe994e3a6c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1NDoyNVrOGzWMfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1NDoyNVrOGzWMfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NDIwNA==", "bodyText": "@icrc-loliveira... you'll have to use Obs ;-)\nSee here:\n\n@mks-d i still have a problem with replacing obs with a dummy BaseFormRecordableOpenmrsDataImpl class in the tests.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456494204", "createdAt": "2020-07-17T14:54:25Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the BaseFormRecordableOpenmrsDataImpl java object this test class for BaseFormRecordableOpenmrsDataImpl\n+ *\n+ * @see BaseFormRecordableOpenmrsDataImpl\n+ */\n+public class BaseFormRecordableOpenmrsDataTest {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = BaseFormRecordableOpenmrsData.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(impl));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", \"my path\");\n+\t\tassertNull(impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, null);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"my ns\", \"\");\n+\t\tassertNull(impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\n+\t\tfinal String ns = StringUtils.repeat(\"x\", 255);\n+\t\tfinal String path = \"\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, path));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceContainingTheSeparator() throws Exception {\n+\t\tfinal String ns = \"my ns\" + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, \"\"));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectAPathContainingTheSeparator() throws Exception {\n+\t\tfinal String path = FORM_NAMESPACE_PATH_SEPARATOR + \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(\"\", path));\n+\t}\n+\n+\tpublic class BaseFormRecordableOpenmrsDataImpl extends BaseFormRecordableOpenmrsData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/41d9c9f6486eb5fc6064eb38fe708d2692a21e7a", "committedDate": "2020-07-17T15:10:20Z", "message": "Replace dummy class BaseFormRecordableOpenmrsDataImpl by Obs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwODA4Nzc4", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-450808778", "createdAt": "2020-07-17T16:47:00Z", "commit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDc5MzMw", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-451079330", "createdAt": "2020-07-18T20:03:20Z", "commit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzYxNTcz", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-451361573", "createdAt": "2020-07-20T07:34:04Z", "commit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozNDowNFrOGz9Nlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozNDowNFrOGz9Nlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzQ2Mg==", "bodyText": "Just minor comment here on the wording.\n'This is a super class to make a bridge between an OpenMrsObject and is position in the form.' -> 'This is a super class to make a bridge between an OpenMrsObject and its position in the form.'", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r457133462", "createdAt": "2020-07-20T07:34:04Z", "author": {"login": "samuelmale"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * \n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMDM5MTI3", "url": "https://github.com/openmrs/openmrs-core/pull/3357#pullrequestreview-453039127", "createdAt": "2020-07-22T06:51:34Z", "commit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjo1MTozNFrOG1VCvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjo1MTozNFrOG1VCvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3MjQ3Ng==", "bodyText": "please replace the JUnit 4 assertions in this test import org.junit.Assert since we migrated to JUnit 5. JUnit 5 ones are in the Jupiter package https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Assertions.html", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r458572476", "createdAt": "2020-07-22T06:51:34Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.Assert;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4725, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}