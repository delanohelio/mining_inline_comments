{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NzI5MzA0", "number": 3398, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxODoxODowOVrOESLAiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowMjoyOFrOESjoIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDkwMTg3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "isResolved": false, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxODoxODowOVrOG3ONGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDozNzoyOFrOG3ypqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw==", "bodyText": "Aren't we going to have to do this in many places? Did you evaluate other options? Like switching the file size to 36?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460557593", "createdAt": "2020-07-26T18:18:09Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDE2MQ==", "bodyText": "@dkayiwa , yes and as I am testing and getting validation errors, I am making the changes. One another ticket I raised today holds a similar problem.\nMaking uuid columns char(36) or varchar(38) did come in my mind, but isn't there any reason that why in OpenMRS we have set UUID columns as char(38) everywhere?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460560161", "createdAt": "2020-07-26T18:45:04Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2MDk3MQ==", "bodyText": "https://issues.openmrs.org/browse/TRUNK-1283", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460560971", "createdAt": "2020-07-26T18:53:42Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2NDM4MQ==", "bodyText": "Oh now I see the reason. So dropping to char(36) is never an option. One solution I found of creating custom char type like this here but then if our main concern is the amount of code changes that will be needed then we will have to map uuid types to this custom type that we create everywhere. So, I went with the trim option.", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460564381", "createdAt": "2020-07-26T19:30:02Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2NTI3OA==", "bodyText": "Can we write the custom liquibase class that automatically maps to char(36) for PostgreSQL?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460565278", "createdAt": "2020-07-26T19:39:45Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2NTYwMQ==", "bodyText": "Let me look into it. I know something similar has been done for boolean conversion to tinyint(1) for MySQL.", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460565601", "createdAt": "2020-07-26T19:43:09Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5Nzg1Ng==", "bodyText": "I'd actually think that we'd want to just change all UUID columns to 36 characters. The likelihood that we need to contend with Microsoft-generated UUIDs seems to me exceedingly small (and in those cases, we should just be removing the curly-braces anyways).", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460897856", "createdAt": "2020-07-27T13:41:52Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwODgzMA==", "bodyText": "@ibacher , setting UUID to 36 chars gives an error :\nCaused by: java.sql.BatchUpdateException: Batch entry 0 insert into appointmentscheduling_appointment_type (name, description, duration, confidential, visit_type_id, uuid, date_created, date_changed, date_retired, retired, retire_reason, creator, changed_by, retired_by, appointment_type_id) values ('Urology (New Patient)', NULL, 20, 'FALSE', NULL, '4d85dda4-c437-11e4-a470-82b0ea87e2d8e', '2020-07-27 15:33:49+05:30', NULL, NULL, 'FALSE', NULL, 2, NULL, NULL, 22) was aborted: ERROR: value too long for type character(36)  Call getNextException to see other errors in the batch.\nIf you see length of '4d85dda4-c437-11e4-a470-82b0ea87e2d8e' is 37, even though there are no curly braces. Thus I shifted to using VARCHAR(38) instead. Link to logs: https://pastebin.com/3i3L2N7a", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460908830", "createdAt": "2020-07-27T13:57:13Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1NDgzMw==", "bodyText": "@Am-Coder Do examples like that exist outside of the referencedemodata module? If not, shouldn't we just fix that module?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r460954833", "createdAt": "2020-07-27T14:59:22Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxMTM2OQ==", "bodyText": "@ibacher , Let me check after correcting this uuid if I get error refering to uuid in other modules while initializing Reference Application.", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461011369", "createdAt": "2020-07-27T16:22:12Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzNzI2MA==", "bodyText": "@ibacher , I just corrected it here and there is no other error in any other module or reference demo data module related to uuid being more then 36 characters. But for correction I just removed the last extra character. So, we are good to go with char(36) for PostgreSQL after this correction.\n@dkayiwa , what is your say on this to keep uuid to char(36) or varchar(38) and whether this be done for MySQL as well ?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461037260", "createdAt": "2020-07-27T17:03:24Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NDA4OQ==", "bodyText": "Doing a uuid of 36 characters makes more sense.", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461084089", "createdAt": "2020-07-27T18:24:47Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NDcyOA==", "bodyText": "@dkayiwa  @ibacher , Made the changes to convert char(38) to char(36) for PostgreSQL. Once this issue gets resolved we are good to go to initialize Reference Application on PostgreSQL. Currently, with these changes, I am able to run Reference Application on PostgreSQL \ud83d\ude42", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461154728", "createdAt": "2020-07-27T20:37:28Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/validator/OrderFrequencyValidator.java", "diffHunk": "@@ -61,7 +61,7 @@ public void validate(Object obj, Errors errors) {\n \t\t\t\n \t\t\tConcept concept = orderFrequency.getConcept();\n \t\t\tif (concept != null) {\n-\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid())) {\n+\t\t\t\tif (!ConceptClass.FREQUENCY_UUID.equals(concept.getConceptClass().getUuid().trim())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1NzU5Mw=="}, "originalCommit": {"oid": "40d9fad8c0be583d63ad314ee10d709be0913b63"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODkzNTM4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowMjoyOFrOG3zdTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjozNTozOVrOG4Kcmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA==", "bodyText": "What if it is another char(38) field which is not a uuid?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461167948", "createdAt": "2020-07-27T21:02:28Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNjYxOQ==", "bodyText": "@dkayiwa  @ibacher , I couldn't find a way to get access to column name within the scope of this method. Apparently, what I have understood is we will have to make the changes in diferent change classes here and this does not seem right.\nIf we hold a possibility of having any other fields with char(38), what if we apparently make change to using varchar(38) and if we finally are ready to revert https://issues.openmrs.org/browse/TRUNK-1283 , then we make char(36) directly into liquibase changesets for both MySQL and PostgreSQL rather then going this way ?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461506619", "createdAt": "2020-07-28T11:21:51Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, "originalCommit": {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyNzk3NQ==", "bodyText": "Would the revert require touching all existing changesets?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461527975", "createdAt": "2020-07-28T12:05:48Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, "originalCommit": {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyOTk2NA==", "bodyText": "Yes, that is what I have in mind.", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461529964", "createdAt": "2020-07-28T12:09:41Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, "originalCommit": {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzMDg2OA==", "bodyText": "Would that require a validation checksum for the so many changesets?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461530868", "createdAt": "2020-07-28T12:11:26Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, "originalCommit": {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzMjc1Ng==", "bodyText": "Apparently, Yes.", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461532756", "createdAt": "2020-07-28T12:15:02Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, "originalCommit": {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNTk2MQ==", "bodyText": "That would be too many changes.", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461535961", "createdAt": "2020-07-28T12:20:52Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, "originalCommit": {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzODEzOQ==", "bodyText": "Rather than reverting (which isn't really the way to go) would it make sense to just add a new changeset downsizing the UUID fields?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461538139", "createdAt": "2020-07-28T12:24:48Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, "originalCommit": {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NDYwMw==", "bodyText": "A changeset like this ( I took it from the docs ) :\n<changeSet  author=\"liquibase-docs\"  id=\"modifyDataType-example\">  \n    <modifyDataType  catalogName=\"cat\"  \n            columnName=\"id\"  \n            newDataType=\"int\"  \n            schemaName=\"public\"  \n            tableName=\"person\"/>  \n</changeSet>\n\nwould then need to be added for each table present in core as well as all the ref. application modules. Wouldn't it be adding some overhead ?", "url": "https://github.com/openmrs/openmrs-core/pull/3398#discussion_r461544603", "createdAt": "2020-07-28T12:35:39Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/liquibase/ext/datatype/core/PostgreSQLUuidType.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package liquibase.ext.datatype.core;\n+\n+import liquibase.database.Database;\n+import liquibase.database.core.PostgresDatabase;\n+import liquibase.datatype.DatabaseDataType;\n+import liquibase.datatype.core.CharType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * PostgreSQL returns white spaces for UUIDs since their actual length is 36 and we have set it\n+ * everywhere as 38 in consideration to ticket https://issues.openmrs.org/browse/TRUNK-1283. This\n+ * leads to validation issues. Thus we convert it to CHAR(36).\n+ * \n+ * @since 2.4\n+ */\n+public class PostgreSQLUuidType extends CharType {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(PostgreSQLUuidType.class);\n+\t\n+\t@Override\n+\tpublic DatabaseDataType toDatabaseDataType(Database database) {\n+\t\tif (database instanceof PostgresDatabase && getSize() == 38) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Nzk0OA=="}, "originalCommit": {"oid": "1224b8ab5bbfbbdaaa968d0b029a1bd5435966d3"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1334, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}