{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2Mjc1MjA1", "number": 3184, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo0MDoxMVrOD0ONIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzowNTo1OVrOD-AIpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDg1MjgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/Condition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo0MDoxMVrOGJDiig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo0MDoxMVrOGJDiig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0ODM2Mg==", "bodyText": "@since 2.4.0, 2.3.1\nAnd everywhere where you did use @since.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412148362", "createdAt": "2020-04-21T12:40:11Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Condition.java", "diffHunk": "@@ -328,6 +332,28 @@ public void setPatient(Patient patient) {\n \t\tthis.patient = patient;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for encounter\n+\t * \n+\t * @return encounter - the associated encounter\n+\t * @since 2.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDg3ODA1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/Encounter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo0NTozOFrOGJDxUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTowOTo1OVrOGUBmDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MjE0NQ==", "bodyText": "Then I would expect test showing that conditions can be set and gotten from an encounter.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412152145", "createdAt": "2020-04-21T12:45:38Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -486,6 +489,26 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t\tthis.diagnoses = diagnoses;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for conditions\n+\t * \n+\t * @return conditions - set of conditions\n+\t * @since 2.4.0\n+\t */\n+\tpublic Set<Condition> getConditions() {\n+\t\treturn conditions;\n+\t}\n+\n+\t/**\n+\t * Basic property setter for conditions\n+\t *  \n+\t * @param conditions - set of conditions\n+\t * @since 2.4.0\n+\t */\n+\tpublic void setConditions(Set<Condition> conditions) {\n+\t\tthis.conditions = conditions;\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MDgzMA==", "bodyText": "Added test cases for this", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r423650830", "createdAt": "2020-05-12T11:09:59Z", "author": {"login": "samuelmale"}, "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -486,6 +489,26 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t\tthis.diagnoses = diagnoses;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for conditions\n+\t * \n+\t * @return conditions - set of conditions\n+\t * @since 2.4.0\n+\t */\n+\tpublic Set<Condition> getConditions() {\n+\t\treturn conditions;\n+\t}\n+\n+\t/**\n+\t * Basic property setter for conditions\n+\t *  \n+\t * @param conditions - set of conditions\n+\t * @since 2.4.0\n+\t */\n+\tpublic void setConditions(Set<Condition> conditions) {\n+\t\tthis.conditions = conditions;\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1MjE0NQ=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzAyNzY2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDo0Njo0MlrOGJXxow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxMDozN1rOGUBncA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw==", "bodyText": "Why change an existing test? Is it because this change made it fail?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412479907", "createdAt": "2020-04-21T20:46:42Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxMDYxNA==", "bodyText": "No,  I was just adding this basic case where a condition has an encounter, the saveCondition(...) should handle the encounter property as expected.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412810614", "createdAt": "2020-04-22T09:10:52Z", "author": {"login": "samuelmale"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0MjYwNw==", "bodyText": "When adding new features, changing existing tests creates the impression that the encounter is required and hence existing tests cannot pass without it being added.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r412942607", "createdAt": "2020-04-22T12:35:58Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2NzQ3Mw==", "bodyText": "Sure, I just thought that expanding this existing test is sufficient and appropriate enough for this new property. Wouldn't it be superfluous to have a new test case for this?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413067473", "createdAt": "2020-04-22T15:09:11Z", "author": {"login": "samuelmale"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3OTUxOQ==", "bodyText": "A new test like conditionShouldSaveWithoutEncounter? Or is it already covered?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413079519", "createdAt": "2020-04-22T15:23:42Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2MDA5OQ==", "bodyText": "I meant it's already covered as is \ud83d\udc4d", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413260099", "createdAt": "2020-04-22T19:29:34Z", "author": {"login": "samuelmale"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxMDE4NQ==", "bodyText": "Since you are assigning an encounter to a condition, how does it cover that a condition can save without an encounter?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413310185", "createdAt": "2020-04-22T20:34:31Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4Njc5Ng==", "bodyText": "Well, Iet's have a new case were a condition has an encounter and leave the existing test untouched. something like:\npublic void saveCondition_shouldSaveConditionWithAnEncounter() {\n    //...\n}", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413586796", "createdAt": "2020-04-23T07:43:43Z", "author": {"login": "samuelmale"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5Njk1NA==", "bodyText": "But does it make sense to you? \ud83d\ude0a", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413696954", "createdAt": "2020-04-23T10:23:11Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3NDMxNQ==", "bodyText": "Yah it makes sense.\nThanks!", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r413774315", "createdAt": "2020-04-23T12:30:31Z", "author": {"login": "samuelmale"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTE4NA==", "bodyText": "Resolved!\n@dkayiwa does the PR look any better? Like mergeable?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r423651184", "createdAt": "2020-05-12T11:10:37Z", "author": {"login": "samuelmale"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,13 +61,15 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tcondition.setClinicalStatus(ConditionClinicalStatus.ACTIVE);\n \t\tcondition.setUuid(uuid);\n \t\tcondition.setPatient(new Patient(patientId));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3OTkwNw=="}, "originalCommit": {"oid": "47c88f12bc30ace26157e1139732d2583a1e63ae"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcyMjk4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/Encounter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNzowM1rOGVVSiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNzowM1rOGVVSiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjA5MQ==", "bodyText": "@since 2.4.0, 2.3.1", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425022091", "createdAt": "2020-05-14T10:07:03Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -486,6 +489,26 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t\tthis.diagnoses = diagnoses;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for conditions\n+\t * \n+\t * @return conditions - set of conditions\n+\t * @since 2.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcyMzg1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/Encounter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNzoxOVrOGVVTKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNzoxOVrOGVVTKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjI0OA==", "bodyText": "@since 2.4.0, 2.3.1", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425022248", "createdAt": "2020-05-14T10:07:19Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -486,6 +489,26 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t\tthis.diagnoses = diagnoses;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for conditions\n+\t * \n+\t * @return conditions - set of conditions\n+\t * @since 2.4.0\n+\t */\n+\tpublic Set<Condition> getConditions() {\n+\t\treturn conditions;\n+\t}\n+\n+\t/**\n+\t * Basic property setter for conditions\n+\t *  \n+\t * @param conditions - set of conditions\n+\t * @since 2.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcyNTQxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/api/ConditionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNzozNlrOGVVUBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNzozNlrOGVVUBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMjQ2OA==", "bodyText": "@since 2.4.0, 2.3.1", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425022468", "createdAt": "2020-05-14T10:07:36Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/api/ConditionService.java", "diffHunk": "@@ -73,6 +74,16 @@\n \t@Authorized({ PrivilegeConstants.GET_CONDITIONS })\n \tList<Condition> getAllConditions(Patient patient) throws APIException;\n \n+\t/**\n+\t * Gets all conditions(not voided) of an encounter.\n+\t * \n+\t * @param encounter - the encounter to retrieve conditions for\n+\t * @return a list of encounter's conditions\n+\t * @throws APIException\n+\t * @since 2.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjczMjQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.3.x.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowOTozMlrOGVVYkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowOTozMlrOGVVYkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMzYzNA==", "bodyText": "Looks like you're touching more than you should, can you clean this up?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425023634", "createdAt": "2020-05-14T10:09:32Z", "author": {"login": "mks-d"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.3.x.xml", "diffHunk": "@@ -92,4 +92,54 @@\n \t\t\t<where>system_id='admin'</where>\n \t\t</update>\n \t</changeSet>\n+\t\n+\t<changeSet id=\"TRUNK-5671-20191017\" author=\"Wyclif\">\n+\t\t<preConditions onFail=\"MARK_RAN\">\n+\t\t\t<not>\n+\t\t\t\t<tableExists tableName=\"provider_unused_fields\" />\n+\t\t\t</not>\n+\t\t</preConditions>\n+\t\t<comment>Adding provider_unused_fields table</comment>\n+\t\t<createTable tableName=\"provider_unused_fields\">\n+\t\t\t<column name=\"provider_id\" type=\"int\" >\n+\t\t\t\t<constraints nullable=\"false\" unique=\"true\" />\n+\t\t\t</column>\n+\t\t\t<column name=\"description\" type=\"varchar(1)\" />\n+\t\t</createTable>\n+\t</changeSet>\n+\t <changeSet id=\"20190815-Trunk-5650\" author=\"gitacliff\">\n+\t\t<preConditions onFail=\"MARK_RAN\">\n+\t\t\t<not>\n+\t\t\t\t<columnExists tableName=\"order_group\" columnName=\"parent_order_group\"/>\t\t\t\t\n+\t\t\t</not>\n+\t\t</preConditions>\n+\t\t<comment>Adding \"parent_order_group\" column to order_group table</comment>\n+        <addColumn tableName=\"order_group\">\n+            <column name=\"parent_order_group\" type=\"int\">\n+            \t<constraints nullable=\"true\"/>\n+            </column>\n+        </addColumn><addForeignKeyConstraint baseTableName=\"order_group\"\n+\t\t\t\t\t\t\t\t baseColumnNames=\"parent_order_group\"\n+\t\t\t\t\t\t\t\t constraintName=\"order_group_parent_order_group_fk\"\n+\t\t\t\t\t\t\t\t referencedTableName=\"order_group\"\n+\t\t\t\t\t\t\t\t referencedColumnNames=\"order_group_id\" />\n+    </changeSet>\n+    \n+    <changeSet id=\"TRUNK-5728-2020-04-15\" author=\"samuel34\">\n+    \t<preConditions>\n+    \t\t<not>\n+    \t\t\t<columnExists tableName=\"conditions\" columnName=\"encounter_id\"/>\n+    \t\t</not>\n+    \t</preConditions>\n+    \t<comment>Adding 'encounter_id' column to 'conditions' table</comment>\n+    \t<addColumn tableName=\"conditions\">\n+    \t\t<column name=\"encounter_id\" type=\"int\">\n+    \t\t\t<constraints nullable=\"true\" />\n+    \t\t</column>\n+    \t</addColumn>\n+    \t<addForeignKeyConstraint constraintName=\"encounter_id_fk\"\n+\t\t\t\t\t\t\t\t baseTableName=\"conditions\" baseColumnNames=\"encounter_id\"\n+\t\t\t\t\t\t\t\t referencedTableName=\"encounter\" referencedColumnNames=\"encounter_id\" />\n+    </changeSet>\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjczNzM4OnYy", "diffSide": "RIGHT", "path": "api/.gitignore", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxMDo0MlrOGVVbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxMDo0MlrOGVVbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNDQyNA==", "bodyText": "Cleaning up .gitignore files should be done through an ad-hoc ticket/PRs.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425024424", "createdAt": "2020-05-14T10:10:42Z", "author": {"login": "mks-d"}, "path": "api/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+/target/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc1MDA0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/api/ConditionService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNDowOVrOGVVjsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOToxNDoxM1rOGVqpPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNjQ4MQ==", "bodyText": "@dkayiwa / @ibacher what do you think, should this just be getConditionsForEncounter(Encounter) or even getConditions(Encounter)?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425026481", "createdAt": "2020-05-14T10:14:09Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/api/ConditionService.java", "diffHunk": "@@ -73,6 +74,16 @@\n \t@Authorized({ PrivilegeConstants.GET_CONDITIONS })\n \tList<Condition> getAllConditions(Patient patient) throws APIException;\n \n+\t/**\n+\t * Gets all conditions(not voided) of an encounter.\n+\t * \n+\t * @param encounter - the encounter to retrieve conditions for\n+\t * @return a list of encounter's conditions\n+\t * @throws APIException\n+\t * @since 2.4.0\n+\t */\n+\tList<Condition> getConditionsByEncounter(Encounter encounter) throws APIException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEyMzU5MQ==", "bodyText": "I like the explicitness of getConditionsForEncounter().", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425123591", "createdAt": "2020-05-14T13:10:28Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/ConditionService.java", "diffHunk": "@@ -73,6 +74,16 @@\n \t@Authorized({ PrivilegeConstants.GET_CONDITIONS })\n \tList<Condition> getAllConditions(Patient patient) throws APIException;\n \n+\t/**\n+\t * Gets all conditions(not voided) of an encounter.\n+\t * \n+\t * @param encounter - the encounter to retrieve conditions for\n+\t * @return a list of encounter's conditions\n+\t * @throws APIException\n+\t * @since 2.4.0\n+\t */\n+\tList<Condition> getConditionsByEncounter(Encounter encounter) throws APIException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNjQ4MQ=="}, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3MTk2Nw==", "bodyText": "The undocumented convention is getConditionsByEncounter \ud83d\ude0a", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425371967", "createdAt": "2020-05-14T19:14:13Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/ConditionService.java", "diffHunk": "@@ -73,6 +74,16 @@\n \t@Authorized({ PrivilegeConstants.GET_CONDITIONS })\n \tList<Condition> getAllConditions(Patient patient) throws APIException;\n \n+\t/**\n+\t * Gets all conditions(not voided) of an encounter.\n+\t * \n+\t * @param encounter - the encounter to retrieve conditions for\n+\t * @return a list of encounter's conditions\n+\t * @throws APIException\n+\t * @since 2.4.0\n+\t */\n+\tList<Condition> getConditionsByEncounter(Encounter encounter) throws APIException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNjQ4MQ=="}, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc1NTgwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNTo0N1rOGVVnag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOToxNTozNlrOGVqsHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzQzNA==", "bodyText": "We need to assert that the conditions that are returned are actually those that are expected. Use two conditions as well to enforce the use of an actual \"collection\".", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425027434", "createdAt": "2020-05-14T10:15:47Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -382,6 +384,20 @@ public void saveEncounter_shouldSaveEncounterWithComplexObs() {\n \t\tassertEquals(2, encounter.getObsAtTopLevel(true).size());\n \t}\n \t\n+\t@Test\n+\tpublic void saveEncounter_shouldSaveEncounterWithCondition() {\n+\t\tEncounter encounter = buildEncounter();\n+\t\tCondition condition = new Condition();\n+\t\t\n+\t\tcondition.setPatient(encounter.getPatient());\n+\t\tencounter.setConditions(Collections.singleton(condition));\n+\t\tEncounterService es = Context.getEncounterService();\n+\t\tes.saveEncounter(encounter);\n+\t\t\n+\t\tencounter = es.getEncounter(encounter.getId());\n+\t\tassertEquals(1, encounter.getConditions().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODM5OQ==", "bodyText": "Always use the given/when/then pattern when writing tests. This makes easier for the reader to find what you actually replay.\nUnless @dkayiwa thinks differently?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425028399", "createdAt": "2020-05-14T10:17:30Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -382,6 +384,20 @@ public void saveEncounter_shouldSaveEncounterWithComplexObs() {\n \t\tassertEquals(2, encounter.getObsAtTopLevel(true).size());\n \t}\n \t\n+\t@Test\n+\tpublic void saveEncounter_shouldSaveEncounterWithCondition() {\n+\t\tEncounter encounter = buildEncounter();\n+\t\tCondition condition = new Condition();\n+\t\t\n+\t\tcondition.setPatient(encounter.getPatient());\n+\t\tencounter.setConditions(Collections.singleton(condition));\n+\t\tEncounterService es = Context.getEncounterService();\n+\t\tes.saveEncounter(encounter);\n+\t\t\n+\t\tencounter = es.getEncounter(encounter.getId());\n+\t\tassertEquals(1, encounter.getConditions().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzQzNA=="}, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3MjcwMw==", "bodyText": "I like conventions that make code easier to understand. \ud83d\udc4d", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425372703", "createdAt": "2020-05-14T19:15:36Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -382,6 +384,20 @@ public void saveEncounter_shouldSaveEncounterWithComplexObs() {\n \t\tassertEquals(2, encounter.getObsAtTopLevel(true).size());\n \t}\n \t\n+\t@Test\n+\tpublic void saveEncounter_shouldSaveEncounterWithCondition() {\n+\t\tEncounter encounter = buildEncounter();\n+\t\tCondition condition = new Condition();\n+\t\t\n+\t\tcondition.setPatient(encounter.getPatient());\n+\t\tencounter.setConditions(Collections.singleton(condition));\n+\t\tEncounterService es = Context.getEncounterService();\n+\t\tes.saveEncounter(encounter);\n+\t\t\n+\t\tencounter = es.getEncounter(encounter.getId());\n+\t\tassertEquals(1, encounter.getConditions().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzQzNA=="}, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc1NzY3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNjoxOVrOGVVonQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNjoxOVrOGVVonQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzc0MQ==", "bodyText": "saveCondition_shouldSaveConditionAssociatedWithAnEncounter", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425027741", "createdAt": "2020-05-14T10:16:19Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -70,6 +70,21 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tAssert.assertNotNull(savedCondition.getConditionId());\n \t}\n \n+\t/**\n+\t * @see ConditionService#saveCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void saveCondition_shouldSaveConditionWithAnEncounter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2NDg2OnYy", "diffSide": "RIGHT", "path": "tools/.gitignore", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxODozMFrOGVVteg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzoxMjowNFrOGVbjBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODk4Ng==", "bodyText": "Cleaning up .gitignore files should be done through an ad-hoc ticket/PRs.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425028986", "createdAt": "2020-05-14T10:18:30Z", "author": {"login": "mks-d"}, "path": "tools/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+/target/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEyNDYxNA==", "bodyText": "We should only have one .gitignore per repo, in the top level project.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425124614", "createdAt": "2020-05-14T13:12:04Z", "author": {"login": "ibacher"}, "path": "tools/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+/target/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODk4Ng=="}, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2NDk4OnYy", "diffSide": "RIGHT", "path": "web/.gitignore", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxODozM1rOGVVtiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxODozM1rOGVVtiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTAwMw==", "bodyText": "Cleaning up .gitignore files should be done through an ad-hoc ticket/PRs.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r425029003", "createdAt": "2020-05-14T10:18:33Z", "author": {"login": "mks-d"}, "path": "web/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+/target/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42ffcdc0545819ae52f126626e12b08a34997c4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjI3MzYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/api/impl/EncounterServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDoxNVrOGWvw_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1MDoxNVrOGWvw_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwNDQ0Ng==", "bodyText": "Using streams?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r426504446", "createdAt": "2020-05-18T09:50:15Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/api/impl/EncounterServiceImpl.java", "diffHunk": "@@ -196,6 +197,11 @@ public Encounter saveEncounter(Encounter encounter) throws APIException {\n \n \t\tremoveGivenObsAndTheirGroupMembersFromEncounter(obsToRemove, encounter);\n \t\taddGivenObsAndTheirGroupMembersToEncounter(obsToAdd, encounter);\n+\t\t\n+\t\t// save the conditions\n+\t\tfor (Condition condition : encounter.getConditions()) {\n+\t\t\tContext.getConditionService().saveCondition(condition);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177c79d8f10c9bc5470a28ddb6edd4c13a656d09"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjMwMDM2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1NzowMlrOGWwB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1NzowMlrOGWwB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwODc1OQ==", "bodyText": "This is part of the replay.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r426508759", "createdAt": "2020-05-18T09:57:02Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -382,6 +385,38 @@ public void saveEncounter_shouldSaveEncounterWithComplexObs() {\n \t\tassertEquals(2, encounter.getObsAtTopLevel(true).size());\n \t}\n \t\n+\t@Test\n+\tpublic void saveEncounter_shouldCascadeSaveToContainedConditions() {\n+\t\t// setup\n+\t\tEncounter encounter = buildEncounter();\n+\t\tCondition pregnancy = new Condition();\n+\t\tCodedOrFreeText freeTextForPregnancy = new CodedOrFreeText();\n+\t\tfreeTextForPregnancy.setNonCoded(\"Pregnancy\");\n+\t\tpregnancy.setCondition(freeTextForPregnancy);\n+\t\tpregnancy.setPatient(encounter.getPatient());\n+\t\tencounter.addCondition(pregnancy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177c79d8f10c9bc5470a28ddb6edd4c13a656d09"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjMwMTEwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1NzoxM1rOGWwCTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1NzoxM1rOGWwCTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwODg3OQ==", "bodyText": "This is part of the replay as well.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r426508879", "createdAt": "2020-05-18T09:57:13Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/api/EncounterServiceTest.java", "diffHunk": "@@ -382,6 +385,38 @@ public void saveEncounter_shouldSaveEncounterWithComplexObs() {\n \t\tassertEquals(2, encounter.getObsAtTopLevel(true).size());\n \t}\n \t\n+\t@Test\n+\tpublic void saveEncounter_shouldCascadeSaveToContainedConditions() {\n+\t\t// setup\n+\t\tEncounter encounter = buildEncounter();\n+\t\tCondition pregnancy = new Condition();\n+\t\tCodedOrFreeText freeTextForPregnancy = new CodedOrFreeText();\n+\t\tfreeTextForPregnancy.setNonCoded(\"Pregnancy\");\n+\t\tpregnancy.setCondition(freeTextForPregnancy);\n+\t\tpregnancy.setPatient(encounter.getPatient());\n+\t\tencounter.addCondition(pregnancy);\n+\t\t\n+\t\tCondition edema = new Condition();\n+\t\tCodedOrFreeText freeTextForEdema = new CodedOrFreeText();\n+\t\tfreeTextForEdema.setNonCoded(\"Edema\");\n+\t\tedema.setCondition(freeTextForEdema);\n+\t\tedema.setPatient(encounter.getPatient());\n+\t\tencounter.addCondition(edema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177c79d8f10c9bc5470a28ddb6edd4c13a656d09"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjMwNDg2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1ODoxM1rOGWwEuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwOTo1ODoxM1rOGWwEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUwOTQ5Nw==", "bodyText": "This is part of the replay.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r426509497", "createdAt": "2020-05-18T09:58:13Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -70,6 +70,26 @@ public void saveCondition_shouldSaveNewCondition(){\n \t\tAssert.assertNotNull(savedCondition.getConditionId());\n \t}\n \n+\t/**\n+\t * @see ConditionService#saveCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void saveCondition_shouldSaveConditionAssociatedWithAnEncounter() {\n+\t\t// setup\n+\t\tString uuid = \"fc281d91-cb1a-4cd1-b1ca-0f3cd5138fb2\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setUuid(uuid);\n+\t\tcondition.setPatient(new Patient(2));\n+\t\tcondition.setEncounter(new Encounter(2039));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177c79d8f10c9bc5470a28ddb6edd4c13a656d09"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjExMDY4OnYy", "diffSide": "LEFT", "path": "api/src/test/resources/org/openmrs/api/include/ConditionServiceImplTest-SetupCondition.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozMjo1MVrOGXo2JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTowNDozNVrOGXyk1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzOTY1Mg==", "bodyText": "I get scared when you add an encounter_id to existing conditions. It looks as if they no longer save without encounters, yet they are optional.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427439652", "createdAt": "2020-05-19T16:32:51Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/resources/org/openmrs/api/include/ConditionServiceImplTest-SetupCondition.xml", "diffHunk": "@@ -11,17 +11,21 @@\n \n -->\n <dataset>\n-\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n+\n+\t<encounter encounter_id=\"2039\" encounter_type=\"2\" patient_id=\"2\" location_id=\"1\" form_id=\"1\" encounter_datetime=\"2020-04-20 14:09:05.0\" \n+\t\t\t\tcreator=\"1\" date_created=\"2020-04-20 14:09:05.0\" voided=\"false\" uuid=\"0519d652-393b-4118-9c83-a3715b82d4av\"/>\n+\n+\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" encounter_id=\"2039\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n \t\t\t   voided=\"false\" onset_date=\"2017-01-12 00:00:00\" end_date=\"2017-01-15 00:00:00\" verification_status=\"PROVISIONAL\" \n \t\t\t   uuid=\"2cc6880e-2c46-15e4-9038-a6c5e4d22fb7\"/>\n \t<conditions condition_id=\"2\" patient_id=\"2\" clinical_status=\"ACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n \t\t\t   voided=\"false\" onset_date=\"2017-01-12 00:00:50\" verification_status=\"CONFIRMED\" \n \t\t\t   uuid=\"2cc6880e-2c46-11e4-9138-a6c5e4d20fb7\"/>\n-\t<conditions condition_id=\"4\" patient_id=\"2\" clinical_status=\"ACTIVE\" creator=\"1\" date_created=\"2016-01-12 00:00:00\" ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f09a7bbeb3ff0e75f569c6ac4614847a31c4af"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5OTA2Mg==", "bodyText": "Resolved @dkayiwa", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427599062", "createdAt": "2020-05-19T21:04:35Z", "author": {"login": "samuelmale"}, "path": "api/src/test/resources/org/openmrs/api/include/ConditionServiceImplTest-SetupCondition.xml", "diffHunk": "@@ -11,17 +11,21 @@\n \n -->\n <dataset>\n-\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n+\n+\t<encounter encounter_id=\"2039\" encounter_type=\"2\" patient_id=\"2\" location_id=\"1\" form_id=\"1\" encounter_datetime=\"2020-04-20 14:09:05.0\" \n+\t\t\t\tcreator=\"1\" date_created=\"2020-04-20 14:09:05.0\" voided=\"false\" uuid=\"0519d652-393b-4118-9c83-a3715b82d4av\"/>\n+\n+\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" encounter_id=\"2039\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n \t\t\t   voided=\"false\" onset_date=\"2017-01-12 00:00:00\" end_date=\"2017-01-15 00:00:00\" verification_status=\"PROVISIONAL\" \n \t\t\t   uuid=\"2cc6880e-2c46-15e4-9038-a6c5e4d22fb7\"/>\n \t<conditions condition_id=\"2\" patient_id=\"2\" clinical_status=\"ACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n \t\t\t   voided=\"false\" onset_date=\"2017-01-12 00:00:50\" verification_status=\"CONFIRMED\" \n \t\t\t   uuid=\"2cc6880e-2c46-11e4-9138-a6c5e4d20fb7\"/>\n-\t<conditions condition_id=\"4\" patient_id=\"2\" clinical_status=\"ACTIVE\" creator=\"1\" date_created=\"2016-01-12 00:00:00\" ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzOTY1Mg=="}, "originalCommit": {"oid": "93f09a7bbeb3ff0e75f569c6ac4614847a31c4af"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjE2MTI1OnYy", "diffSide": "RIGHT", "path": "api/src/test/resources/org/openmrs/api/include/ConditionServiceImplTest-SetupCondition.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0NTo0OFrOGXpWmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTowNDozMFrOGXykvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0Nzk2MQ==", "bodyText": "I get scared when you add an encounter_id to existing conditions. It looks as if they no longer save without encounters, yet they are optional.\n\n@dkayiwa I actually didn't touch all. This justifies that the changes are backwards compatible. The above entry doesn't have an encounter_id column. Does it still worry you?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427447961", "createdAt": "2020-05-19T16:45:48Z", "author": {"login": "samuelmale"}, "path": "api/src/test/resources/org/openmrs/api/include/ConditionServiceImplTest-SetupCondition.xml", "diffHunk": "@@ -11,17 +11,21 @@\n \n -->\n <dataset>\n-\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n+\n+\t<encounter encounter_id=\"2039\" encounter_type=\"2\" patient_id=\"2\" location_id=\"1\" form_id=\"1\" encounter_datetime=\"2020-04-20 14:09:05.0\" \n+\t\t\t\tcreator=\"1\" date_created=\"2020-04-20 14:09:05.0\" voided=\"false\" uuid=\"0519d652-393b-4118-9c83-a3715b82d4av\"/>\n+\n+\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" encounter_id=\"2039\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n \t\t\t   voided=\"false\" onset_date=\"2017-01-12 00:00:00\" end_date=\"2017-01-15 00:00:00\" verification_status=\"PROVISIONAL\" \n \t\t\t   uuid=\"2cc6880e-2c46-15e4-9038-a6c5e4d22fb7\"/>\n \t<conditions condition_id=\"2\" patient_id=\"2\" clinical_status=\"ACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93f09a7bbeb3ff0e75f569c6ac4614847a31c4af"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ1MDM0NQ==", "bodyText": "It appears as if, for some weird reason, the ones you touched were failing and is why you modified them.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427450345", "createdAt": "2020-05-19T16:49:36Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/resources/org/openmrs/api/include/ConditionServiceImplTest-SetupCondition.xml", "diffHunk": "@@ -11,17 +11,21 @@\n \n -->\n <dataset>\n-\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n+\n+\t<encounter encounter_id=\"2039\" encounter_type=\"2\" patient_id=\"2\" location_id=\"1\" form_id=\"1\" encounter_datetime=\"2020-04-20 14:09:05.0\" \n+\t\t\t\tcreator=\"1\" date_created=\"2020-04-20 14:09:05.0\" voided=\"false\" uuid=\"0519d652-393b-4118-9c83-a3715b82d4av\"/>\n+\n+\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" encounter_id=\"2039\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n \t\t\t   voided=\"false\" onset_date=\"2017-01-12 00:00:00\" end_date=\"2017-01-15 00:00:00\" verification_status=\"PROVISIONAL\" \n \t\t\t   uuid=\"2cc6880e-2c46-15e4-9038-a6c5e4d22fb7\"/>\n \t<conditions condition_id=\"2\" patient_id=\"2\" clinical_status=\"ACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0Nzk2MQ=="}, "originalCommit": {"oid": "93f09a7bbeb3ff0e75f569c6ac4614847a31c4af"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5OTAzOA==", "bodyText": "Resolved @dkayiwa", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427599038", "createdAt": "2020-05-19T21:04:30Z", "author": {"login": "samuelmale"}, "path": "api/src/test/resources/org/openmrs/api/include/ConditionServiceImplTest-SetupCondition.xml", "diffHunk": "@@ -11,17 +11,21 @@\n \n -->\n <dataset>\n-\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n+\n+\t<encounter encounter_id=\"2039\" encounter_type=\"2\" patient_id=\"2\" location_id=\"1\" form_id=\"1\" encounter_datetime=\"2020-04-20 14:09:05.0\" \n+\t\t\t\tcreator=\"1\" date_created=\"2020-04-20 14:09:05.0\" voided=\"false\" uuid=\"0519d652-393b-4118-9c83-a3715b82d4av\"/>\n+\n+\t<conditions condition_id=\"1\" patient_id=\"2\" clinical_status=\"INACTIVE\" encounter_id=\"2039\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" \n \t\t\t   voided=\"false\" onset_date=\"2017-01-12 00:00:00\" end_date=\"2017-01-15 00:00:00\" verification_status=\"PROVISIONAL\" \n \t\t\t   uuid=\"2cc6880e-2c46-15e4-9038-a6c5e4d22fb7\"/>\n \t<conditions condition_id=\"2\" patient_id=\"2\" clinical_status=\"ACTIVE\" creator=\"1\" date_created=\"2015-01-12 00:00:00\" ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0Nzk2MQ=="}, "originalCommit": {"oid": "93f09a7bbeb3ff0e75f569c6ac4614847a31c4af"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzEwNjg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/Encounter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMToxMDoyOFrOGXywFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMToxMDoyOFrOGXywFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYwMTk0Mg==", "bodyText": "I would not silently ignore one passing a null parameter. In other words, i would remove the if check and assume that the condition is not null. If it turns out to be null, better for the caller to automatically get a NullPointerException than chewing it quietly.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427601942", "createdAt": "2020-05-19T21:10:28Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/Encounter.java", "diffHunk": "@@ -486,6 +489,52 @@ public void setDiagnoses(Set<Diagnosis> diagnoses) {\n \t\tthis.diagnoses = diagnoses;\n \t}\n \t\n+\t/**\n+\t * Basic property getter for conditions\n+\t * \n+\t * @return conditions - set of conditions\n+\t * @since 2.4.0, 2.3.1\n+\t */\n+\tpublic Set<Condition> getConditions() {\n+\t\tif (conditions == null) {\n+\t\t\tconditions = new LinkedHashSet<>();\n+\t\t}\n+\t\treturn conditions;\n+\t}\n+\n+\t/**\n+\t * Basic property setter for conditions\n+\t *  \n+\t * @param conditions - set of conditions\n+\t * @since 2.4.0, 2.3.1\n+\t */\n+\tpublic void setConditions(Set<Condition> conditions) {\n+\t\tthis.conditions = conditions;\n+\t}\n+\n+\t/**\n+\t * Add the given Condition to the set of conditions for this Encounter\n+\t *\n+\t * @param condition - the condition to add\n+\t */\n+\tpublic void addCondition(Condition condition) {\n+\t\tif (condition != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a77adb72d1e81400e34195c7748fbcd5aff247"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzIxMjQ5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/EncounterTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0NTo1MVrOGXzydw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjowNDoxOVrOGX0STA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODkzNQ==", "bodyText": "I would not silently ignore one passing a null parameter. In other words, i would remove the if check and assume that the condition is not null. If it turns out to be null, better for the caller to automatically get a NullPointerException than chewing it quietly.\n\n@dkayiwa this was by design that the method addCondition(Condition) is null safe.\nI was simply following the behaviours  portrayed by existing addXxxx(Xxxx) methods in the codebase. An example is addObs(Observation)", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427618935", "createdAt": "2020-05-19T21:45:51Z", "author": {"login": "samuelmale"}, "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -954,6 +954,66 @@ public void removeOrder_shouldNotFailWhenRemovingNonExistentOrder() {\n \t\tencounter.removeOrder(new Order(123));\n \t}\n \t\n+\t/**\n+\t * @see Encounter#addCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void addCondition_shouldSetEncounterAttribute() {\n+\t\t// setup\n+\t\tEncounter encounter = new Encounter();\n+\t\tCondition condition = new Condition();\n+\t\t\n+\t\t// replay\n+\t\tencounter.addCondition(condition);\n+\t\t\n+\t\t// verify\n+\t\tassertTrue(condition.getEncounter().equals(encounter));\n+\t}\n+\t\n+\t/**\n+\t * @see Encounter#addCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void addCondition_shouldNotFailWithNullCondition() {\n+\t\t// setup\n+\t\tEncounter encounter = new Encounter();\n+\t\t\n+\t\t// replay\n+\t\tencounter.addCondition(null);\n+\t\t\n+\t\t// verify\n+\t\tassertEquals(0, encounter.getConditions().size());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05a77adb72d1e81400e34195c7748fbcd5aff247"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMDY4Ng==", "bodyText": "I feel that the existing behaviour is not a good one to copy. How can one add a null object and the api just silently ignore it?", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427620686", "createdAt": "2020-05-19T21:49:45Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -954,6 +954,66 @@ public void removeOrder_shouldNotFailWhenRemovingNonExistentOrder() {\n \t\tencounter.removeOrder(new Order(123));\n \t}\n \t\n+\t/**\n+\t * @see Encounter#addCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void addCondition_shouldSetEncounterAttribute() {\n+\t\t// setup\n+\t\tEncounter encounter = new Encounter();\n+\t\tCondition condition = new Condition();\n+\t\t\n+\t\t// replay\n+\t\tencounter.addCondition(condition);\n+\t\t\n+\t\t// verify\n+\t\tassertTrue(condition.getEncounter().equals(encounter));\n+\t}\n+\t\n+\t/**\n+\t * @see Encounter#addCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void addCondition_shouldNotFailWithNullCondition() {\n+\t\t// setup\n+\t\tEncounter encounter = new Encounter();\n+\t\t\n+\t\t// replay\n+\t\tencounter.addCondition(null);\n+\t\t\n+\t\t// verify\n+\t\tassertEquals(0, encounter.getConditions().size());\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODkzNQ=="}, "originalCommit": {"oid": "05a77adb72d1e81400e34195c7748fbcd5aff247"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNzA4NA==", "bodyText": "I agree with you here. The API shouldn't have back doors. Nice catch!", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427627084", "createdAt": "2020-05-19T22:04:19Z", "author": {"login": "samuelmale"}, "path": "api/src/test/java/org/openmrs/EncounterTest.java", "diffHunk": "@@ -954,6 +954,66 @@ public void removeOrder_shouldNotFailWhenRemovingNonExistentOrder() {\n \t\tencounter.removeOrder(new Order(123));\n \t}\n \t\n+\t/**\n+\t * @see Encounter#addCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void addCondition_shouldSetEncounterAttribute() {\n+\t\t// setup\n+\t\tEncounter encounter = new Encounter();\n+\t\tCondition condition = new Condition();\n+\t\t\n+\t\t// replay\n+\t\tencounter.addCondition(condition);\n+\t\t\n+\t\t// verify\n+\t\tassertTrue(condition.getEncounter().equals(encounter));\n+\t}\n+\t\n+\t/**\n+\t * @see Encounter#addCondition(Condition)\n+\t */\n+\t@Test\n+\tpublic void addCondition_shouldNotFailWithNullCondition() {\n+\t\t// setup\n+\t\tEncounter encounter = new Encounter();\n+\t\t\n+\t\t// replay\n+\t\tencounter.addCondition(null);\n+\t\t\n+\t\t// verify\n+\t\tassertEquals(0, encounter.getConditions().size());\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxODkzNQ=="}, "originalCommit": {"oid": "05a77adb72d1e81400e34195c7748fbcd5aff247"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzQwNTE5OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.3.x.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzowNTo1OVrOGX1pNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODoyMDowMFrOGYAbSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0OTMzNQ==", "bodyText": "The encounter_id_fk name is already taken.", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427649335", "createdAt": "2020-05-19T23:05:59Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.3.x.xml", "diffHunk": "@@ -92,4 +92,22 @@\n \t\t\t<where>system_id='admin'</where>\n \t\t</update>\n \t</changeSet>\n+    \n+    <changeSet id=\"TRUNK-5728-2020-04-15\" author=\"samuel34\">\n+    \t<preConditions onFail=\"MARK_RAN\">\n+    \t\t<not>\n+    \t\t\t<columnExists tableName=\"conditions\" columnName=\"encounter_id\"/>\n+    \t\t</not>\n+    \t</preConditions>\n+    \t<comment>Adding 'encounter_id' column to 'conditions' table</comment>\n+    \t<addColumn tableName=\"conditions\">\n+    \t\t<column name=\"encounter_id\" type=\"int\">\n+    \t\t\t<constraints nullable=\"true\" />\n+    \t\t</column>\n+    \t</addColumn>\n+    \t<addForeignKeyConstraint constraintName=\"encounter_id_fk\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6285ed96ec803bb6f778a4ac5745b675b2b6e7e9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyNTk5Mg==", "bodyText": "Sure", "url": "https://github.com/openmrs/openmrs-core/pull/3184#discussion_r427825992", "createdAt": "2020-05-20T08:20:00Z", "author": {"login": "samuelmale"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.3.x.xml", "diffHunk": "@@ -92,4 +92,22 @@\n \t\t\t<where>system_id='admin'</where>\n \t\t</update>\n \t</changeSet>\n+    \n+    <changeSet id=\"TRUNK-5728-2020-04-15\" author=\"samuel34\">\n+    \t<preConditions onFail=\"MARK_RAN\">\n+    \t\t<not>\n+    \t\t\t<columnExists tableName=\"conditions\" columnName=\"encounter_id\"/>\n+    \t\t</not>\n+    \t</preConditions>\n+    \t<comment>Adding 'encounter_id' column to 'conditions' table</comment>\n+    \t<addColumn tableName=\"conditions\">\n+    \t\t<column name=\"encounter_id\" type=\"int\">\n+    \t\t\t<constraints nullable=\"true\" />\n+    \t\t</column>\n+    \t</addColumn>\n+    \t<addForeignKeyConstraint constraintName=\"encounter_id_fk\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0OTMzNQ=="}, "originalCommit": {"oid": "6285ed96ec803bb6f778a4ac5745b675b2b6e7e9"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1444, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}