{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTY4NTQw", "number": 3357, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1OTo0OVrOEOXp-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjo1MTozNFrOEQ6bhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTAzMDk4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/FormRecordable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1OTo0OVrOGxfCQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1OTo0OVrOGxfCQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTg4OA==", "bodyText": "We need an interface FormRecordable. In the end you'll have something like:\n\nFormRecordable: an interface\nBaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable: a (maybe abstract) class that will be subclassed by Obs and Condition in a way that they share as much as possible from the original code that currently lives in Obs.\nObs extends BaseFormRecordableOpenmrsData\nCondition extends BaseFormRecordableOpenmrsData", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454541888", "createdAt": "2020-07-14T17:59:49Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ */\n+@MappedSuperclass\n+public abstract class FormRecordable extends BaseChangeableOpenmrsData{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTAzODMyOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMTozMVrOGxfGgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMTozMVrOGxfGgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0Mjk3Nw==", "bodyText": "<comment>Adding \"form_namespace_path\" column to conditions table</comment>", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454542977", "createdAt": "2020-07-14T18:01:31Z", "author": {"login": "mks-d"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -142,4 +142,19 @@\n     \t<dropForeignKeyConstraint baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\"/>\n \t\t<addForeignKeyConstraint baseColumnNames=\"order_id\" baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\" deferrable=\"false\" initiallyDeferred=\"false\" onDelete=\"CASCADE\" onUpdate=\"NO ACTION\" referencedColumnNames=\"order_id\" referencedTableName=\"orders\"/>\n \t</changeSet>\n+\n+\t<changeSet id=\"20200714-Trunk-5862\" author=\"loliveira\">\n+\t\t<preConditions onFail=\"MARK_RAN\">\n+\t\t\t<not>\n+\t\t\t\t<columnExists tableName=\"conditions\" columnName=\"form_namespace_path\"/>\n+\t\t\t</not>\n+\t\t</preConditions>\n+\t\t<comment>Adding \"order_group_reason\" column to order_group table</comment>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTA0NDY0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/ConditionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMzowNFrOGxfKNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMzowNFrOGxfKNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzkyNQ==", "bodyText": "There's tons of Java string utils to generate strings of a certain length no?", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454543925", "createdAt": "2020-07-14T18:03:04Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/ConditionTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the Condition java object TODO: finish\n+ * this test class for Condition\n+ * \n+ * @see Condition\n+ */\n+public class ConditionTest {\n+\t\t\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\t\n+\t/**\n+\t * @see Condition#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = FormRecordable.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(condition));\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(\"\", \"my path\");\n+\t\tassertNull(condition.getFormFieldNamespace());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);\n+\t\tassertEquals(ns, condition.getFormFieldNamespace());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, null);\n+\t\tassertEquals(ns, condition.getFormFieldNamespace());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(\"my ns\", \"\");\n+\t\tassertNull(condition.getFormFieldPath());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);\n+\t\tassertEquals(path, condition.getFormFieldPath());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(\"\", path);\n+\t\tassertEquals(path, condition.getFormFieldPath());\n+\t}\n+\t\n+\t/**\n+\t * @see Condition#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\t\tStringBuilder nsBuffer = new StringBuilder(125);\n+\t\tfor (int i = 0; i < 125; i++) {\n+\t\t\tnsBuffer.append(\"n\");\n+\t\t}\n+\t\tfor (int i = 0; i < 130; i++) {\n+\t\t\tnsBuffer.append(\"p\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTA0OTg2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/ConditionTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowNDozOFrOGxfNqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo1OTozMlrOGyCXOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NDgxMA==", "bodyText": "Rather than all this I'd add a couple of test cases in ConditionServiceImplTest.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454544810", "createdAt": "2020-07-14T18:04:38Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/ConditionTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the Condition java object TODO: finish\n+ * this test class for Condition\n+ * \n+ * @see Condition\n+ */\n+public class ConditionTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3Mjk3Mw==", "bodyText": "Hi @mks-d,\nI don't think that is the best approach. Since for that I will have to make changes in ConditionServiceImplTest to a test a code that is in another class.\nPoint can be made that I am not testing the correct class. So I made some search how o test an abstract class and find this and decide to try the 3.1. approach. Let me know your thoughts.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454972973", "createdAt": "2020-07-15T11:10:15Z", "author": {"login": "icrc-loliveira"}, "path": "api/src/test/java/org/openmrs/ConditionTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the Condition java object TODO: finish\n+ * this test class for Condition\n+ * \n+ * @see Condition\n+ */\n+public class ConditionTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NDgxMA=="}, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NTg4Mw==", "bodyText": "@icrc-loliveira ConditionServiceImplTest would validate that all is ok with Spring + Hibernate. But the Liquibase changeset can only be tested at app runtime.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454985883", "createdAt": "2020-07-15T11:37:08Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/ConditionTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the Condition java object TODO: finish\n+ * this test class for Condition\n+ * \n+ * @see Condition\n+ */\n+public class ConditionTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NDgxMA=="}, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDY5OQ==", "bodyText": "I updated the test saveCondition_shouldSaveNewCondition() in ConditionServiceImplTest  to test the formNamespaceAndPathfield.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455120699", "createdAt": "2020-07-15T14:59:32Z", "author": {"login": "icrc-loliveira"}, "path": "api/src/test/java/org/openmrs/ConditionTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the Condition java object TODO: finish\n+ * this test class for Condition\n+ * \n+ * @see Condition\n+ */\n+public class ConditionTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NDgxMA=="}, "originalCommit": {"oid": "a83975187495d8e438dc2cc74b4da2fc00838adb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzg3NDg3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyMjo0N1rOGx5tgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowNDoyOVrOGyCk4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3ODk0NA==", "bodyText": "This will probably be the implementation for Obs, by this I mean when the setter that needs to call markAsDirty(..).\nThe base implementation will be the same, without the calls to markAsDirty(..).", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454978944", "createdAt": "2020-07-15T11:22:47Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNDE5NA==", "bodyText": "Removed the markAsDirty(..) from the BaseFormRecordableOpenmrsData and re-implemented the obs.setFormField as:\npublic void setFormField(String namespace, String formFieldPath) {\n\tString oldValue = formNamespaceAndPath;\n\tsuper.setFormField(namespace, formFieldPath);\n\tmarkAsDirty(oldValue, formNamespaceAndPath);\n}", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455124194", "createdAt": "2020-07-15T15:04:29Z", "author": {"login": "icrc-loliveira"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3ODk0NA=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzg4MDIzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyNDozOVrOGx5w0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowNDo1N1rOGyCmDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTc5NQ==", "bodyText": "In light of the above you'll be able to remove this. The reason being that from recordable OpenMRS data and dirty-able OpenMRS data are two different things, I don't think we should conflate them there. @dkayiwa, @ibacher thoughts?", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454979795", "createdAt": "2020-07-15T11:24:39Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}\n+\n+\tprotected abstract void markAsDirty(Object oldValue, Object newValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyMTU0Mw==", "bodyText": "I agree. We don't really use this pattern outside of Obs, so it's hard to see why it would be a requirement for the formNamespaceAndPath functionality.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455021543", "createdAt": "2020-07-15T12:43:28Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}\n+\n+\tprotected abstract void markAsDirty(Object oldValue, Object newValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTc5NQ=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNTcxMg==", "bodyText": "I also agree!", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455025712", "createdAt": "2020-07-15T12:50:10Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}\n+\n+\tprotected abstract void markAsDirty(Object oldValue, Object newValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTc5NQ=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNDQ5NA==", "bodyText": "Removed.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455124494", "createdAt": "2020-07-15T15:04:57Z", "author": {"login": "icrc-loliveira"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.\n+ * \n+ * @since 1.4\n+ */\n+@MappedSuperclass\n+public abstract class BaseFormRecordableOpenmrsData extends BaseChangeableOpenmrsData implements FormRecordable {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\tprivate static final int FORM_NAMESPACE_PATH_MAX_LENGTH = 255;\n+\n+\t@Column(name = \"form_namespace_path\")\n+\tprotected String formNamespaceAndPath;\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldNamespace()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldNamespace() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the path was specified\n+\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#getFormFieldPath()\n+\t */\n+\t@Override\n+\tpublic String getFormFieldPath() {\n+\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n+\t\t\t//Only the namespace was specified\n+\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n+\t\t}\n+\n+\t\treturn formNamespaceAndPath;\n+\t}\n+\n+\t/**\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n+\t */\n+\t@Override\n+\tpublic void setFormField(String namespace, String formFieldPath) {\n+\t\tif (namespace == null && formFieldPath == null) {\n+\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n+\t\t\tformNamespaceAndPath = null;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tString nsAndPathTemp = \"\";\n+\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t} else if (StringUtils.isNotBlank(namespace)) {\n+\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n+\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n+\t\t}\n+\n+\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n+\t\t}\n+\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n+\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n+\t\t}\n+\n+\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n+\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t}\n+\n+\tprotected abstract void markAsDirty(Object oldValue, Object newValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTc5NQ=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzg4MTc2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/Condition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyNTowOFrOGx5xuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowODoxN1rOGyCufw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDAyNA==", "bodyText": "In light of the above, this will not be necessary either.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454980024", "createdAt": "2020-07-15T11:25:08Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Condition.java", "diffHunk": "@@ -396,4 +396,10 @@ public boolean equals(Object o) {\n \t\t}\n \t\treturn Objects.equals(endReason, conditionToBeChecked.endReason);\n \t}\n+\t\n+\t@Override\n+\tprotected void markAsDirty(Object oldValue, Object newValue) {\n+\t\t// Do nothing\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjY1NQ==", "bodyText": "Removed.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455126655", "createdAt": "2020-07-15T15:08:17Z", "author": {"login": "icrc-loliveira"}, "path": "api/src/main/java/org/openmrs/Condition.java", "diffHunk": "@@ -396,4 +396,10 @@ public boolean equals(Object o) {\n \t\t}\n \t\treturn Objects.equals(endReason, conditionToBeChecked.endReason);\n \t}\n+\t\n+\t@Override\n+\tprotected void markAsDirty(Object oldValue, Object newValue) {\n+\t\t// Do nothing\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDAyNA=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzg4Mjk4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/FormRecordable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyNToyOVrOGx5ycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowNToyOVrOGyCnlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDIxMQ==", "bodyText": "@since 2.4.0", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454980211", "createdAt": "2020-07-15T11:25:29Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+/**\n+ * Defines the methods to make a bridge between an OpenMrsObject and is position in the form.\n+ *\n+ * @since 1.4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNDg4Nw==", "bodyText": "Done.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455124887", "createdAt": "2020-07-15T15:05:29Z", "author": {"login": "icrc-loliveira"}, "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+/**\n+ * Defines the methods to make a bridge between an OpenMrsObject and is position in the form.\n+ *\n+ * @since 1.4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDIxMQ=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzg4NDYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/FormRecordable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyNjowMVrOGx5zfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMToyNjowMVrOGx5zfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MDQ3OA==", "bodyText": "Same here, and same for other methods.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454980478", "createdAt": "2020-07-15T11:26:01Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/FormRecordable.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * <p>\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+/**\n+ * Defines the methods to make a bridge between an OpenMrsObject and is position in the form.\n+ *\n+ * @since 1.4\n+ */\n+public interface FormRecordable {\n+\n+\t/**\n+\t * Gets the namespace for the form field that was used to capture the obs details in the form\n+\t *\n+\t * @return the namespace\n+\t * @since 1.11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzkxMDQwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTozNDowNVrOGx6C5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1NDoyNVrOGzWMfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA==", "bodyText": "Why not just use an Obs? That'd be the more backward compatible approach.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r454984420", "createdAt": "2020-07-15T11:34:05Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the BaseFormRecordableOpenmrsDataImpl java object this test class for BaseFormRecordableOpenmrsDataImpl\n+ *\n+ * @see BaseFormRecordableOpenmrsDataImpl\n+ */\n+public class BaseFormRecordableOpenmrsDataTest {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = BaseFormRecordableOpenmrsData.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(impl));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", \"my path\");\n+\t\tassertNull(impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, null);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"my ns\", \"\");\n+\t\tassertNull(impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\n+\t\tfinal String ns = StringUtils.repeat(\"x\", 255);\n+\t\tfinal String path = \"\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, path));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceContainingTheSeparator() throws Exception {\n+\t\tfinal String ns = \"my ns\" + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, \"\"));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectAPathContainingTheSeparator() throws Exception {\n+\t\tfinal String path = FORM_NAMESPACE_PATH_SEPARATOR + \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(\"\", path));\n+\t}\n+\n+\tpublic class BaseFormRecordableOpenmrsDataImpl extends BaseFormRecordableOpenmrsData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjMwNA==", "bodyText": "I prefer create a test class for this  (since is not to complicated) in order to the test be more independent.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455126304", "createdAt": "2020-07-15T15:07:47Z", "author": {"login": "icrc-loliveira"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the BaseFormRecordableOpenmrsDataImpl java object this test class for BaseFormRecordableOpenmrsDataImpl\n+ *\n+ * @see BaseFormRecordableOpenmrsDataImpl\n+ */\n+public class BaseFormRecordableOpenmrsDataTest {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = BaseFormRecordableOpenmrsData.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(impl));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", \"my path\");\n+\t\tassertNull(impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, null);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"my ns\", \"\");\n+\t\tassertNull(impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\n+\t\tfinal String ns = StringUtils.repeat(\"x\", 255);\n+\t\tfinal String path = \"\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, path));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceContainingTheSeparator() throws Exception {\n+\t\tfinal String ns = \"my ns\" + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, \"\"));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectAPathContainingTheSeparator() throws Exception {\n+\t\tfinal String path = FORM_NAMESPACE_PATH_SEPARATOR + \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(\"\", path));\n+\t}\n+\n+\tpublic class BaseFormRecordableOpenmrsDataImpl extends BaseFormRecordableOpenmrsData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMTQ5Mw==", "bodyText": "It feels safer doing tests for real existing classes. If independency is needed, then i would do such tests in addition to those that deal with the real existing classes, not minus. \ud83d\ude0a", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456331493", "createdAt": "2020-07-17T09:31:45Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the BaseFormRecordableOpenmrsDataImpl java object this test class for BaseFormRecordableOpenmrsDataImpl\n+ *\n+ * @see BaseFormRecordableOpenmrsDataImpl\n+ */\n+public class BaseFormRecordableOpenmrsDataTest {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = BaseFormRecordableOpenmrsData.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(impl));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", \"my path\");\n+\t\tassertNull(impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, null);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"my ns\", \"\");\n+\t\tassertNull(impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\n+\t\tfinal String ns = StringUtils.repeat(\"x\", 255);\n+\t\tfinal String path = \"\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, path));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceContainingTheSeparator() throws Exception {\n+\t\tfinal String ns = \"my ns\" + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, \"\"));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectAPathContainingTheSeparator() throws Exception {\n+\t\tfinal String path = FORM_NAMESPACE_PATH_SEPARATOR + \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(\"\", path));\n+\t}\n+\n+\tpublic class BaseFormRecordableOpenmrsDataImpl extends BaseFormRecordableOpenmrsData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzMzQwMg==", "bodyText": "FWIW, i have ever had a case where a dummy test class masked a bug in a real class. \ud83d\ude0a", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456333402", "createdAt": "2020-07-17T09:35:37Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the BaseFormRecordableOpenmrsDataImpl java object this test class for BaseFormRecordableOpenmrsDataImpl\n+ *\n+ * @see BaseFormRecordableOpenmrsDataImpl\n+ */\n+public class BaseFormRecordableOpenmrsDataTest {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = BaseFormRecordableOpenmrsData.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(impl));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", \"my path\");\n+\t\tassertNull(impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, null);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"my ns\", \"\");\n+\t\tassertNull(impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\n+\t\tfinal String ns = StringUtils.repeat(\"x\", 255);\n+\t\tfinal String path = \"\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, path));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceContainingTheSeparator() throws Exception {\n+\t\tfinal String ns = \"my ns\" + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, \"\"));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectAPathContainingTheSeparator() throws Exception {\n+\t\tfinal String path = FORM_NAMESPACE_PATH_SEPARATOR + \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(\"\", path));\n+\t}\n+\n+\tpublic class BaseFormRecordableOpenmrsDataImpl extends BaseFormRecordableOpenmrsData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NDIwNA==", "bodyText": "@icrc-loliveira... you'll have to use Obs ;-)\nSee here:\n\n@mks-d i still have a problem with replacing obs with a dummy BaseFormRecordableOpenmrsDataImpl class in the tests.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456494204", "createdAt": "2020-07-17T14:54:25Z", "author": {"login": "mks-d"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * This class tests all methods that are not getter or setters in the BaseFormRecordableOpenmrsDataImpl java object this test class for BaseFormRecordableOpenmrsDataImpl\n+ *\n+ * @see BaseFormRecordableOpenmrsDataImpl\n+ */\n+public class BaseFormRecordableOpenmrsDataTest {\n+\n+\tprivate static final String FORM_NAMESPACE_PATH_SEPARATOR = \"^\";\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldSetTheUnderlyingFormNamespaceAndPathInTheCorrectPattern() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tField formNamespaceAndPathProperty = BaseFormRecordableOpenmrsData.class.getDeclaredField(\"formNamespaceAndPath\");\n+\t\tformNamespaceAndPathProperty.setAccessible(true);\n+\t\tassertEquals(ns + FORM_NAMESPACE_PATH_SEPARATOR + path, formNamespaceAndPathProperty.get(impl));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnNullIfTheNamespaceIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", \"my path\");\n+\t\tassertNull(impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheCorrectNamespaceForAFormFieldWithAPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldNamespace()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldNamespace_shouldReturnTheNamespaceForAFormFieldThatHasNoPath() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, null);\n+\t\tassertEquals(ns, impl.getFormFieldNamespace());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnNullIfThePathIsNotSpecified() throws Exception {\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"my ns\", \"\");\n+\t\tassertNull(impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnTheCorrectPathForAFormFieldWithANamespace() throws Exception {\n+\t\tfinal String ns = \"my ns\";\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(ns, path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#getFormFieldPath()\n+\t */\n+\t@Test\n+\tpublic void getFormFieldPath_shouldReturnThePathForAFormFieldThatHasNoNamespace() throws Exception {\n+\t\tfinal String path = \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\timpl.setFormField(\"\", path);\n+\t\tassertEquals(path, impl.getFormFieldPath());\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceAndPathCombinationLongerThanTheMaxLength() throws Exception {\n+\n+\t\tfinal String ns = StringUtils.repeat(\"x\", 255);\n+\t\tfinal String path = \"\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, path));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectANamepaceContainingTheSeparator() throws Exception {\n+\t\tfinal String ns = \"my ns\" + FORM_NAMESPACE_PATH_SEPARATOR;\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(ns, \"\"));\n+\t}\n+\n+\t/**\n+\t * @see BaseFormRecordableOpenmrsDataImpl#setFormField(String,String)\n+\t */\n+\t@Test\n+\tpublic void setFormField_shouldRejectAPathContainingTheSeparator() throws Exception {\n+\t\tfinal String path = FORM_NAMESPACE_PATH_SEPARATOR + \"my path\";\n+\t\tBaseFormRecordableOpenmrsDataImpl impl = new BaseFormRecordableOpenmrsDataImpl();\n+\t\tassertThrows(APIException.class, () -> impl.setFormField(\"\", path));\n+\t}\n+\n+\tpublic class BaseFormRecordableOpenmrsDataImpl extends BaseFormRecordableOpenmrsData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4NDQyMA=="}, "originalCommit": {"oid": "fcb43daebaf4a5234c61ae89e20ae6f51a749eae"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjMxOTk4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/Obs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoxMzowOFrOGykZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxMjo0NVrOGy-n0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3ODIyNw==", "bodyText": "Are you sure it's 100% ok, unfortunately there is also this piece:\nif (namespace == null && formFieldPath == null) {\n  markAsDirty(formNamespaceAndPath, null);\n  formNamespaceAndPath = null;\n  return;\n}", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455678227", "createdAt": "2020-07-16T10:13:08Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the path was specified\n-\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Gets the path for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the the form field path\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the path for a form field that has no namespace\n-\t * <strong>Should</strong> return the correct path for a form field with a namespace\n-\t * <strong>Should</strong> return null if the path is not specified\n-\t */\n-\tpublic String getFormFieldPath() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the namespace was specified\n-\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Sets the namespace and path of the form field that was used to capture the obs details in the\n-\t * form.<br>\n-\t * <b>Note:</b> Namespace and formFieldPath together must not exceed 254 characters in length,\n-\t * form applications can subtract the length of their namespace from 254 to determine the\n-\t * maximum length they can use for a form field path.\n-\t * \n-\t * @param namespace the namespace of the form field\n-\t * @param formFieldPath the path of the form field\n-\t * @since 1.11\n-\t * <strong>Should</strong> set the underlying formNamespaceAndPath in the correct pattern\n-\t * <strong>Should</strong> reject a namepace containing the separator\n-\t * <strong>Should</strong> reject a path containing the separator\n-\t * <strong>Should</strong> reject a namepace and path combination longer than the max length\n-\t * <strong>Should</strong> not mark the obs as dirty when the value has not been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value has been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a null to a non null value\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a non null to a null value\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n \t */\n+\t@Override\n \tpublic void setFormField(String namespace, String formFieldPath) {\n-\t\tif (namespace == null && formFieldPath == null) {\n-\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n-\t\t\tformNamespaceAndPath = null;\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tString nsAndPathTemp = \"\";\n-\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t} else if (StringUtils.isNotBlank(namespace)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n-\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t}\n-\t\t\n-\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n-\t\t}\n-\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n-\t\t}\n-\t\t\n-\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n-\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t\tString oldValue = formNamespaceAndPath;\n+\t\tsuper.setFormField(namespace, formFieldPath);\n+\t\tmarkAsDirty(oldValue, formNamespaceAndPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwNzk4Ng==", "bodyText": "I think this new code still takes care of that use case properly... ie marking as dirty if the formNamespaceAndPath goes from something to null, if I'm understanding it correctly.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456107986", "createdAt": "2020-07-16T22:12:45Z", "author": {"login": "mogoodrich"}, "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the path was specified\n-\t\t\tif (formNamespaceAndPath.startsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(0, formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR));\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Gets the path for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the the form field path\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the path for a form field that has no namespace\n-\t * <strong>Should</strong> return the correct path for a form field with a namespace\n-\t * <strong>Should</strong> return null if the path is not specified\n-\t */\n-\tpublic String getFormFieldPath() {\n-\t\tif (StringUtils.isNotBlank(formNamespaceAndPath)) {\n-\t\t\t//Only the namespace was specified\n-\t\t\tif (formNamespaceAndPath.endsWith(FORM_NAMESPACE_PATH_SEPARATOR)) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\treturn formNamespaceAndPath.substring(formNamespaceAndPath.indexOf(FORM_NAMESPACE_PATH_SEPARATOR) + 1);\n-\t\t}\n-\t\t\n-\t\treturn formNamespaceAndPath;\n-\t}\n-\t\n-\t/**\n-\t * Sets the namespace and path of the form field that was used to capture the obs details in the\n-\t * form.<br>\n-\t * <b>Note:</b> Namespace and formFieldPath together must not exceed 254 characters in length,\n-\t * form applications can subtract the length of their namespace from 254 to determine the\n-\t * maximum length they can use for a form field path.\n-\t * \n-\t * @param namespace the namespace of the form field\n-\t * @param formFieldPath the path of the form field\n-\t * @since 1.11\n-\t * <strong>Should</strong> set the underlying formNamespaceAndPath in the correct pattern\n-\t * <strong>Should</strong> reject a namepace containing the separator\n-\t * <strong>Should</strong> reject a path containing the separator\n-\t * <strong>Should</strong> reject a namepace and path combination longer than the max length\n-\t * <strong>Should</strong> not mark the obs as dirty when the value has not been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value has been changed\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a null to a non null value\n-\t * <strong>Should</strong> mark the obs as dirty when the value is changed from a non null to a null value\n+\t * @see org.openmrs.FormRecordable#setFormField(String,String)\n \t */\n+\t@Override\n \tpublic void setFormField(String namespace, String formFieldPath) {\n-\t\tif (namespace == null && formFieldPath == null) {\n-\t\t\tmarkAsDirty(formNamespaceAndPath, null);\n-\t\t\tformNamespaceAndPath = null;\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tString nsAndPathTemp = \"\";\n-\t\tif (StringUtils.isNotBlank(namespace) && StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t} else if (StringUtils.isNotBlank(namespace)) {\n-\t\t\tnsAndPathTemp = namespace + FORM_NAMESPACE_PATH_SEPARATOR;\n-\t\t} else if (StringUtils.isNotBlank(formFieldPath)) {\n-\t\t\tnsAndPathTemp = FORM_NAMESPACE_PATH_SEPARATOR + formFieldPath;\n-\t\t}\n-\t\t\n-\t\tif (nsAndPathTemp.length() > FORM_NAMESPACE_PATH_MAX_LENGTH) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathTooLong\", (Object[]) null);\n-\t\t}\n-\t\tif (StringUtils.countMatches(nsAndPathTemp, FORM_NAMESPACE_PATH_SEPARATOR) > 1) {\n-\t\t\tthrow new APIException(\"Obs.namespaceAndPathNotContainSeparator\", (Object[]) null);\n-\t\t}\n-\t\t\n-\t\tmarkAsDirty(this.formNamespaceAndPath, nsAndPathTemp);\n-\t\tformNamespaceAndPath = nsAndPathTemp;\n+\t\tString oldValue = formNamespaceAndPath;\n+\t\tsuper.setFormField(namespace, formFieldPath);\n+\t\tmarkAsDirty(oldValue, formNamespaceAndPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3ODIyNw=="}, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjMyNTc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoxNDo1MVrOGykcnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoyMDoxMFrOGyyk1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3OTEzNQ==", "bodyText": "@dkayiwa @ibacher any preference/convention for the changeset ID?\nThere seems to be none.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455679135", "createdAt": "2020-07-16T10:14:51Z", "author": {"login": "mks-d"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -142,4 +142,19 @@\n     \t<dropForeignKeyConstraint baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\"/>\n \t\t<addForeignKeyConstraint baseColumnNames=\"order_id\" baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\" deferrable=\"false\" initiallyDeferred=\"false\" onDelete=\"CASCADE\" onUpdate=\"NO ACTION\" referencedColumnNames=\"order_id\" referencedTableName=\"orders\"/>\n \t</changeSet>\n+\n+\t<changeSet id=\"20200714-Trunk-5862\" author=\"loliveira\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc1NDU3NQ==", "bodyText": "This probably needs to be a longer conversation than just comments on a PR. We don't seem to have an established convention and this is at least in line with other IDs, so in that sense, it's fine.\nPersonally, I would prefer something like: Ticket-Short Description. So, for this case, something like TRUNK-5862-add_form_namespace_and_path_to_condition. The idea being that this is unique enough (i.e., every changeset is \"namespaced\" to a ticket), but descriptive enough that if it appears to an administrator during install, they might understand what failed.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455754575", "createdAt": "2020-07-16T12:39:49Z", "author": {"login": "ibacher"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -142,4 +142,19 @@\n     \t<dropForeignKeyConstraint baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\"/>\n \t\t<addForeignKeyConstraint baseColumnNames=\"order_id\" baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\" deferrable=\"false\" initiallyDeferred=\"false\" onDelete=\"CASCADE\" onUpdate=\"NO ACTION\" referencedColumnNames=\"order_id\" referencedTableName=\"orders\"/>\n \t</changeSet>\n+\n+\t<changeSet id=\"20200714-Trunk-5862\" author=\"loliveira\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3OTEzNQ=="}, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4MDcxMQ==", "bodyText": "Yeah, we should come up with a standard convention, might be worth a Talk post.\nBut, also, yeah, as we don't currently have a convention so as long as this is in line with existing IDs we can move forward with this one while we figure things out.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455780711", "createdAt": "2020-07-16T13:21:53Z", "author": {"login": "mogoodrich"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -142,4 +142,19 @@\n     \t<dropForeignKeyConstraint baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\"/>\n \t\t<addForeignKeyConstraint baseColumnNames=\"order_id\" baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\" deferrable=\"false\" initiallyDeferred=\"false\" onDelete=\"CASCADE\" onUpdate=\"NO ACTION\" referencedColumnNames=\"order_id\" referencedTableName=\"orders\"/>\n \t</changeSet>\n+\n+\t<changeSet id=\"20200714-Trunk-5862\" author=\"loliveira\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3OTEzNQ=="}, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMDYxNA==", "bodyText": "I also agree with a talk post, but which should not block this pull request from getting merged.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r455910614", "createdAt": "2020-07-16T16:20:10Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/resources/org/openmrs/liquibase/updates/liquibase-update-to-latest-2.4.x.xml", "diffHunk": "@@ -142,4 +142,19 @@\n     \t<dropForeignKeyConstraint baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\"/>\n \t\t<addForeignKeyConstraint baseColumnNames=\"order_id\" baseTableName=\"test_order\" constraintName=\"test_order_order_id_fk\" deferrable=\"false\" initiallyDeferred=\"false\" onDelete=\"CASCADE\" onUpdate=\"NO ACTION\" referencedColumnNames=\"order_id\" referencedTableName=\"orders\"/>\n \t</changeSet>\n+\n+\t<changeSet id=\"20200714-Trunk-5862\" author=\"loliveira\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY3OTEzNQ=="}, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTA0MjI2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxMzo1MFrOGy-pQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxMzo1MFrOGy-pQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwODM1Mg==", "bodyText": "Minor point, but by convention we don't use wildcard imports.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456108352", "createdAt": "2020-07-16T22:13:50Z", "author": {"login": "mogoodrich"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.jupiter.api.Test;\n+import org.openmrs.api.APIException;\n+\n+import java.lang.reflect.Field;\n+\n+import static org.junit.jupiter.api.Assertions.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTA1MDYyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/ObsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxNzoxMFrOGy-uFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxNzoxMFrOGy-uFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTU5MQ==", "bodyText": "Where is this being used?", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456109591", "createdAt": "2020-07-16T22:17:10Z", "author": {"login": "mogoodrich"}, "path": "api/src/test/java/org/openmrs/ObsTest.java", "diffHunk": "@@ -35,6 +35,7 @@\n import java.util.Locale;\n import java.util.Set;\n \n+import liquibase.util.StringUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTA1MTUxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxNzozMFrOGy-unw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxNzozMFrOGy-unw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTcyNw==", "bodyText": "More wildcard imports.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456109727", "createdAt": "2020-07-16T22:17:30Z", "author": {"login": "mogoodrich"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -9,40 +9,32 @@\n  */\n package org.openmrs.api.impl;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n import java.util.List;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.CodedOrFreeText;\n-import org.openmrs.Condition;\n-import org.openmrs.ConditionClinicalStatus;\n-import org.openmrs.ConditionVerificationStatus;\n-import org.openmrs.Encounter;\n-import org.openmrs.Patient;\n+import org.openmrs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTA1MjA5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxNzozOVrOGy-u7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMjoxNzozOVrOGy-u7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjEwOTgwNQ==", "bodyText": "Another wildcard import", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456109805", "createdAt": "2020-07-16T22:17:39Z", "author": {"login": "mogoodrich"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -9,40 +9,32 @@\n  */\n package org.openmrs.api.impl;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n import java.util.List;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import org.openmrs.CodedOrFreeText;\n-import org.openmrs.Condition;\n-import org.openmrs.ConditionClinicalStatus;\n-import org.openmrs.ConditionVerificationStatus;\n-import org.openmrs.Encounter;\n-import org.openmrs.Patient;\n+import org.openmrs.*;\n import org.openmrs.api.ConditionService;\n import org.openmrs.api.PatientService;\n import org.openmrs.api.context.Context;\n import org.openmrs.test.jupiter.BaseContextSensitiveTest;\n \n+import static org.junit.jupiter.api.Assertions.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26fa6ec52b727928e886c5a8d969d23416dae70"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQwMjg1OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/openmrs/Obs.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1NDoxNlrOGzLEFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowMjozNVrOGzLU-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTgzMQ==", "bodyText": "Instead of removing, shouldn't we deprecate these public methods? https://wiki.openmrs.org/display/docs/Java+Conventions#JavaConventions-Deprecation", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456311831", "createdAt": "2020-07-17T08:54:16Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNDQzMA==", "bodyText": "@dkayiwa this method doesn't really get removed from Obs, it's now coming from a new superclass.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456314430", "createdAt": "2020-07-17T08:59:07Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTgzMQ=="}, "originalCommit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNTAyOA==", "bodyText": "Oh cool \ud83d\ude0a", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456315028", "createdAt": "2020-07-17T09:00:21Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTgzMQ=="}, "originalCommit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNjE1Mw==", "bodyText": "@dkayiwa here: https://github.com/openmrs/openmrs-core/pull/3357/files#diff-26312f3ab88527f26370de68fc508603R64", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456316153", "createdAt": "2020-07-17T09:02:35Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/Obs.java", "diffHunk": "@@ -1177,91 +1171,13 @@ public void setDateCreated(Date dateCreated) {\n \t}\n \t\n \t/**\n-\t * Gets the namespace for the form field that was used to capture the obs details in the form\n-\t * \n-\t * @return the namespace\n-\t * @since 1.11\n-\t * <strong>Should</strong> return the namespace for a form field that has no path\n-\t * <strong>Should</strong> return the correct namespace for a form field with a path\n-\t * <strong>Should</strong> return null if the namespace is not specified\n-\t */\n-\tpublic String getFormFieldNamespace() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMTgzMQ=="}, "originalCommit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQzMTE0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowMzowNFrOGzLV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOTowMzowNFrOGzLV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxNjM4OA==", "bodyText": "Modifying an existing test to set the form field creates an impression that it is required field. If not, i would rather create a new test.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r456316388", "createdAt": "2020-07-17T09:03:04Z", "author": {"login": "dkayiwa"}, "path": "api/src/test/java/org/openmrs/api/impl/ConditionServiceImplTest.java", "diffHunk": "@@ -61,21 +62,31 @@ public void setup (){\n \t */\n \t@Test\n \tpublic void saveCondition_shouldSaveNewCondition(){\n+\t\t\n+\t\t// Create Condition to test\n+\t\tString ns = \"my ns\";\n+\t\tString path = \"my path\";\n \t\tInteger patientId = 2;\n \t\tString uuid = \"08002000-4469-12q3-551f-0339000c9a76\";\n \t\tCodedOrFreeText codedOrFreeText = new CodedOrFreeText();\n \t\tCondition condition = new Condition();\n+\t\tcondition.setFormField(ns, path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6766e5380342f8335f97eae686e30c86653121e9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjI4OTU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzozNDowNFrOGz9Nlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDozODo1MFrOG1cyUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzQ2Mg==", "bodyText": "Just minor comment here on the wording.\n'This is a super class to make a bridge between an OpenMrsObject and is position in the form.' -> 'This is a super class to make a bridge between an OpenMrsObject and its position in the form.'", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r457133462", "createdAt": "2020-07-20T07:34:04Z", "author": {"login": "samuelmale"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * \n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5OTM0Nw==", "bodyText": "@icrc-loliveira this maybe?\n\nBase implementation of FormRecordable that bridges between a saved BaseChangeableOpenmrsData entity and the path in a form where it was recorded.", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r458699347", "createdAt": "2020-07-22T10:38:50Z", "author": {"login": "mks-d"}, "path": "api/src/main/java/org/openmrs/BaseFormRecordableOpenmrsData.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ * \n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.openmrs.api.APIException;\n+\n+import javax.persistence.Column;\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This is a super class to make a bridge between an OpenMrsObject and is position in the form.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzQ2Mg=="}, "originalCommit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTY5OTkxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjo1MTozNFrOG1VCvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjo1MTozNFrOG1VCvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3MjQ3Ng==", "bodyText": "please replace the JUnit 4 assertions in this test import org.junit.Assert since we migrated to JUnit 5. JUnit 5 ones are in the Jupiter package https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/Assertions.html", "url": "https://github.com/openmrs/openmrs-core/pull/3357#discussion_r458572476", "createdAt": "2020-07-22T06:51:34Z", "author": {"login": "teleivo"}, "path": "api/src/test/java/org/openmrs/BaseFormRecordableOpenmrsDataTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs;\n+\n+import liquibase.util.StringUtils;\n+import org.junit.Assert;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41d9c9f6486eb5fc6064eb38fe708d2692a21e7a"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1421, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}