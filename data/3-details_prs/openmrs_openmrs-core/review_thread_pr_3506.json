{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3Mjc3ODc0", "number": 3506, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTowNTo1MlrOEYATDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjoyOVrOEY98KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjA2MTU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTowNTo1MlrOHAGwrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMToxMjo0NVrOHAG85g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3MjgxMw==", "bodyText": "If these are the only lines that have led to all these changes, then we should just put it in a database utility class and that should be all.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r469872813", "createdAt": "2020-08-13T11:05:52Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NTk0Mg==", "bodyText": "Oh I see. I was unaware of utility class. Let me look into that.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r469875942", "createdAt": "2020-08-13T11:12:45Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3MjgxMw=="}, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzg3NjM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoxNzo1NFrOHAX_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo1ODozOFrOHAbfKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTEwMg==", "bodyText": "@dkayiwa , as you can see here I am making use session to check for current database that is being used by OpenMRS via the set dialect, so the current change will never cause an issue on MySQL. I have checked it on both MySQL and PostgreSQL and everything is working fine.\nNow, to make use of database utility approach I am not able to figure out how to get access to this hibernate session in module's activator class. This session will be required so as to pass to this utility method.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470155102", "createdAt": "2020-08-13T18:17:54Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2MDE3Mg==", "bodyText": "Why I need the current change ?\nI need to update postgresql sequences here , after the insertion of all the concepts in Reference Metadata Activator. If I don't update the sequence here then an error with logs : https://pastebin.com/23mQFUk1 this is raised when inserting concept source via reference application on PostgreSQL. So, I need to make a call to the service I have created in this PR here.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470160172", "createdAt": "2020-08-13T18:27:45Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTEwMg=="}, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NzI2Ng==", "bodyText": "How about Context.getAdministrationService().executeSQL?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470187266", "createdAt": "2020-08-13T19:13:10Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTEwMg=="}, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5NTA0OQ==", "bodyText": "Thanks for pointing to the AdministrativeService. I don't think we can use the executeSQL directly without doing some major changes. But what I think can be done is shift this updateSequence method to AdministrativeService . Then there won't be any requirement of a separate service as I have done here. Just a call like Context.getAdministrationService().updatePostgreSQLsequence sequence will do the work. I think this will be right. @dkayiwa What do you think ?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470195049", "createdAt": "2020-08-13T19:25:53Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTEwMg=="}, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5OTIyOQ==", "bodyText": "Why can't we use executeSQL?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470199229", "createdAt": "2020-08-13T19:33:21Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTEwMg=="}, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwOTE5Nw==", "bodyText": "If we pass the update sequence queries directly to this method then error will arise for MySQL since it does not support sequences. Now if we are to make use of this method then we will have to pass an extra argument to decide whether the sent query is of update sequence or not and then handle accordingly. If it is of update sequence type then execute it only on PostgreSQL.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470209197", "createdAt": "2020-08-13T19:52:53Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTEwMg=="}, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMDU4NQ==", "bodyText": "What error do you get on MySQL?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470210585", "createdAt": "2020-08-13T19:55:25Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTEwMg=="}, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMjM5NA==", "bodyText": "If you execute the query \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\" on MySQL then you get an error :\n5000\tError Code: 1305. FUNCTION openmrs164.setval does not exist\t0.611 sec", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470212394", "createdAt": "2020-08-13T19:58:38Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/postgres/db/hibernate/HibernatePostgresDAO.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.postgres.db.hibernate;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.Session;\n+import org.openmrs.api.db.CohortDAO;\n+import org.openmrs.postgres.db.PostgresDAO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * Hibernate implementation of the PostgresDAO\n+ *\n+ * @see PostgresDAO\n+ * @see org.openmrs.api.context.Context\n+ * @see org.openmrs.postgres.PostgresService\n+ */\n+public class HibernatePostgresDAO implements PostgresDAO {\n+\t\n+\tprivate static final Logger log = LoggerFactory.getLogger(HibernatePostgresDAO.class);\n+\t\n+\t/**\n+\t * Hibernate session factory\n+\t */\n+\tprivate SessionFactory sessionFactory;\n+\t\n+\tpublic HibernatePostgresDAO() {\n+\t}\n+\t\n+\t/**\n+\t * Set session factory\n+\t *\n+\t * @param sessionFactory\n+\t */\n+\tpublic void setSessionFactory(SessionFactory sessionFactory) {\n+\t\tthis.sessionFactory = sessionFactory;\n+\t}\n+\t\n+\t/**\n+\t * @see org.openmrs.postgres.db.PostgresDAO#updateSequence()\n+\t */\n+\t@Override\n+\tpublic void updateSequence() {\n+\t\tString dialect = sessionFactory.getProperties().getOrDefault(\"hibernate.dialect\", \"\").toString();\n+\t\tif (StringUtils.containsIgnoreCase(dialect, \"postgresql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTEwMg=="}, "originalCommit": {"oid": "73485062772184f63eac6b474316129d3f33c314"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI1NzcwOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo0OTo1NVrOHA3lfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoyNzowMFrOHBfLJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw==", "bodyText": "Shouldn't we make this call only if we are running PostgreSQL?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470672767", "createdAt": "2020-08-14T14:49:55Z", "author": {"login": "dkayiwa"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjg3MA==", "bodyText": "How about the UpdateFIlter.java?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470672870", "createdAt": "2020-08-14T14:50:07Z", "author": {"login": "dkayiwa"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3MzE0Nw==", "bodyText": "Will this need to be called every time data is inserted?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470673147", "createdAt": "2020-08-14T14:50:34Z", "author": {"login": "dkayiwa"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0MzM2Nw==", "bodyText": "Shouldn't we make this call only if we are running PostgreSQL?\n\nYes We are supposed to make the call only when DB is PostgreSQL but since we do not have access to session at this level we cannot determine the DB. Two things come to my mind for this:\n\nIf it is regarding code readability then we can rename the method to UpdateSequenceIfDbIsPostgreSQL\nor\nWe can split this single call into two different calls to AdminService, one two determine if db is PostgreSQL and other to update the sequence if previous call returns true. To me two calls appeared overhead so I went with a single call approach.\n\n@dkayiwa , What do you think should be right ?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470743367", "createdAt": "2020-08-14T16:58:15Z", "author": {"login": "Am-Coder"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0NzQ0MA==", "bodyText": "Will this need to be called every time data is inserted?\n\nIf the data that we are inserting does not holds id values for different entities then this call won't be required. PostgreSQL automatically updates the sequence in this case. But if in the data that is getting inserted we specify the id values for different entities then PostgreSQL does not increment the sequences and then we need to make a call to this service. This is the case here", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470747440", "createdAt": "2020-08-14T17:06:14Z", "author": {"login": "Am-Coder"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0ODM3Nw==", "bodyText": "How about the UpdateFIlter.java?\n\nI'll look into it and see if there's a way.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470748377", "createdAt": "2020-08-14T17:08:14Z", "author": {"login": "Am-Coder"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NjYzOA==", "bodyText": "How about the UpdateFIlter.java?\n\nThe UpdateFilter is only called when there are insertions via liquibase . But consider here where insertions are not via liquibase of Covid-19 Numric Concepts, then we cannot do anything and will get issues. So, I don't think it will work.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r470766638", "createdAt": "2020-08-14T17:45:24Z", "author": {"login": "Am-Coder"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyMjgxNw==", "bodyText": "Could we automate this by making the call from OpenmrsObjectSaveHandler?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471022817", "createdAt": "2020-08-15T18:44:29Z", "author": {"login": "dkayiwa"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyMTM4Mw==", "bodyText": "@dkayiwa , OpenMRSObjectSaveHandler is called before the \"save__\" or \"void__\", \"unvoid_\", \"retire__\", or \"unretire___\" methods in all the service classes but not around the method importData in dataexhchange module. This method is called to save concepts from the xml dataset files using dbunit (see here).\nAlso, will it be alright to have the sequences updated even when PostgreSQL updates them automatically ?. There are only two cases where we will want to update the sequences via this service - First, when data is inserted via liquibase and second when a dataset is imported from an xml file ( in these two cases only id of object is specified).", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471321383", "createdAt": "2020-08-17T08:27:00Z", "author": {"login": "Am-Coder"}, "path": "web/src/main/java/org/openmrs/web/filter/initialization/InitializationFilter.java", "diffHunk": "@@ -1820,6 +1820,17 @@ public void executing(ChangeSet changeSet, int numChangeSetsToRun) {\n \t\t\t\t\t\t\treturn;\n \t\t\t\t\t\t}\n \t\t\t\t\t\t\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t// Update PostgreSQL Sequences after insertion of core data\n+\t\t\t\t\t\t\tContext.getAdministrationService().updatePostgresSequence();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3Mjc2Nw=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjE2MDAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjoxMVrOHBhKHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjoxMVrOHBhKHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1Mzg4Nw==", "bodyText": "instead of looping one by one, cant we submit them as a batch?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471353887", "createdAt": "2020-08-17T09:26:11Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "diffHunk": "@@ -301,4 +302,43 @@ public boolean isDatabaseStringComparisonCaseSensitive() {\n \t\t\treturn true;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Updates PostgreSQL Sequences after core data insertion\n+\t * \n+\t * @see org.openmrs.api.db.AdministrationDAO#updatePostgresSequence()\n+\t */\n+\t@Override\n+\tpublic void updatePostgresSequence() throws DAOException {\n+\t\t\n+\t\tif (HibernateUtil.isPostgreSQLDialect(sessionFactory)) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"\n+\t\t\t        + \"SELECT setval('concept_concept_id_seq', (SELECT MAX(concept_id) FROM concept)+1);\"\n+\t\t\t        + \"SELECT setval('concept_name_concept_name_id_seq', (SELECT MAX(concept_name_id) FROM concept_name)+1);\"\n+\t\t\t        + \"SELECT setval('concept_class_concept_class_id_seq', (SELECT MAX(concept_class_id) FROM concept_class)+1);\"\n+\t\t\t        + \"SELECT setval('concept_reference_source_concept_source_id_seq', (SELECT MAX(concept_source_id) FROM concept_reference_source)+1);\"\n+\t\t\t        + \"SELECT setval('encounter_role_encounter_role_id_seq', (SELECT MAX(encounter_role_id) FROM encounter_role)+1);\"\n+\t\t\t        + \"SELECT setval('field_type_field_type_id_seq', (SELECT MAX(field_type_id) FROM field_type)+1);\"\n+\t\t\t        + \"SELECT setval('hl7_source_hl7_source_id_seq', (SELECT MAX(hl7_source_id) FROM hl7_source)+1);\"\n+\t\t\t        + \"SELECT setval('location_location_id_seq', (SELECT MAX(location_id) FROM location)+1);\"\n+\t\t\t        + \"SELECT setval('order_type_order_type_id_seq', (SELECT MAX(order_type_id) FROM order_type)+1);\"\n+\t\t\t        + \"SELECT setval('patient_identifier_type_patient_identifier_type_id_seq', (SELECT MAX(patient_identifier_type_id) FROM patient_identifier_type)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_task_config_id_seq', (SELECT MAX(task_config_id) FROM scheduler_task_config)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_property_task_config_property_id_seq', (SELECT MAX(task_config_property_id) FROM scheduler_task_config_property)+1)\"\n+\t\t\t        + \"\";\n+\t\t\tSession session = sessionFactory.getCurrentSession();\n+\t\t\tfor (String postgresSequence : postgresSequences.split(\";\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjE2MTA0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjoyOVrOHBhKug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDo1MjowMlrOHBj5rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDA0Mg==", "bodyText": "Why .list()?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471354042", "createdAt": "2020-08-17T09:26:29Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "diffHunk": "@@ -301,4 +302,43 @@ public boolean isDatabaseStringComparisonCaseSensitive() {\n \t\t\treturn true;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Updates PostgreSQL Sequences after core data insertion\n+\t * \n+\t * @see org.openmrs.api.db.AdministrationDAO#updatePostgresSequence()\n+\t */\n+\t@Override\n+\tpublic void updatePostgresSequence() throws DAOException {\n+\t\t\n+\t\tif (HibernateUtil.isPostgreSQLDialect(sessionFactory)) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"\n+\t\t\t        + \"SELECT setval('concept_concept_id_seq', (SELECT MAX(concept_id) FROM concept)+1);\"\n+\t\t\t        + \"SELECT setval('concept_name_concept_name_id_seq', (SELECT MAX(concept_name_id) FROM concept_name)+1);\"\n+\t\t\t        + \"SELECT setval('concept_class_concept_class_id_seq', (SELECT MAX(concept_class_id) FROM concept_class)+1);\"\n+\t\t\t        + \"SELECT setval('concept_reference_source_concept_source_id_seq', (SELECT MAX(concept_source_id) FROM concept_reference_source)+1);\"\n+\t\t\t        + \"SELECT setval('encounter_role_encounter_role_id_seq', (SELECT MAX(encounter_role_id) FROM encounter_role)+1);\"\n+\t\t\t        + \"SELECT setval('field_type_field_type_id_seq', (SELECT MAX(field_type_id) FROM field_type)+1);\"\n+\t\t\t        + \"SELECT setval('hl7_source_hl7_source_id_seq', (SELECT MAX(hl7_source_id) FROM hl7_source)+1);\"\n+\t\t\t        + \"SELECT setval('location_location_id_seq', (SELECT MAX(location_id) FROM location)+1);\"\n+\t\t\t        + \"SELECT setval('order_type_order_type_id_seq', (SELECT MAX(order_type_id) FROM order_type)+1);\"\n+\t\t\t        + \"SELECT setval('patient_identifier_type_patient_identifier_type_id_seq', (SELECT MAX(patient_identifier_type_id) FROM patient_identifier_type)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_task_config_id_seq', (SELECT MAX(task_config_id) FROM scheduler_task_config)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_property_task_config_property_id_seq', (SELECT MAX(task_config_property_id) FROM scheduler_task_config_property)+1)\"\n+\t\t\t        + \"\";\n+\t\t\tSession session = sessionFactory.getCurrentSession();\n+\t\t\tfor (String postgresSequence : postgresSequences.split(\";\"))\n+\t\t\t\tsession.createNativeQuery(postgresSequence).list();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3OTQwOQ==", "bodyText": "Because each of the query is a \"SELECT\" query I used .list() . We can also use .uniqueResult() since each of these queries return single value. I have not mad use of ALTER sequence statement here since it was not allowing the subqueries in it as it is a DDL statement.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471379409", "createdAt": "2020-08-17T10:13:55Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "diffHunk": "@@ -301,4 +302,43 @@ public boolean isDatabaseStringComparisonCaseSensitive() {\n \t\t\treturn true;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Updates PostgreSQL Sequences after core data insertion\n+\t * \n+\t * @see org.openmrs.api.db.AdministrationDAO#updatePostgresSequence()\n+\t */\n+\t@Override\n+\tpublic void updatePostgresSequence() throws DAOException {\n+\t\t\n+\t\tif (HibernateUtil.isPostgreSQLDialect(sessionFactory)) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"\n+\t\t\t        + \"SELECT setval('concept_concept_id_seq', (SELECT MAX(concept_id) FROM concept)+1);\"\n+\t\t\t        + \"SELECT setval('concept_name_concept_name_id_seq', (SELECT MAX(concept_name_id) FROM concept_name)+1);\"\n+\t\t\t        + \"SELECT setval('concept_class_concept_class_id_seq', (SELECT MAX(concept_class_id) FROM concept_class)+1);\"\n+\t\t\t        + \"SELECT setval('concept_reference_source_concept_source_id_seq', (SELECT MAX(concept_source_id) FROM concept_reference_source)+1);\"\n+\t\t\t        + \"SELECT setval('encounter_role_encounter_role_id_seq', (SELECT MAX(encounter_role_id) FROM encounter_role)+1);\"\n+\t\t\t        + \"SELECT setval('field_type_field_type_id_seq', (SELECT MAX(field_type_id) FROM field_type)+1);\"\n+\t\t\t        + \"SELECT setval('hl7_source_hl7_source_id_seq', (SELECT MAX(hl7_source_id) FROM hl7_source)+1);\"\n+\t\t\t        + \"SELECT setval('location_location_id_seq', (SELECT MAX(location_id) FROM location)+1);\"\n+\t\t\t        + \"SELECT setval('order_type_order_type_id_seq', (SELECT MAX(order_type_id) FROM order_type)+1);\"\n+\t\t\t        + \"SELECT setval('patient_identifier_type_patient_identifier_type_id_seq', (SELECT MAX(patient_identifier_type_id) FROM patient_identifier_type)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_task_config_id_seq', (SELECT MAX(task_config_id) FROM scheduler_task_config)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_property_task_config_property_id_seq', (SELECT MAX(task_config_property_id) FROM scheduler_task_config_property)+1)\"\n+\t\t\t        + \"\";\n+\t\t\tSession session = sessionFactory.getCurrentSession();\n+\t\t\tfor (String postgresSequence : postgresSequences.split(\";\"))\n+\t\t\t\tsession.createNativeQuery(postgresSequence).list();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDA0Mg=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4MTUwOA==", "bodyText": "Did you explore createSQLQuery().executeUpdate()?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471381508", "createdAt": "2020-08-17T10:18:09Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "diffHunk": "@@ -301,4 +302,43 @@ public boolean isDatabaseStringComparisonCaseSensitive() {\n \t\t\treturn true;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Updates PostgreSQL Sequences after core data insertion\n+\t * \n+\t * @see org.openmrs.api.db.AdministrationDAO#updatePostgresSequence()\n+\t */\n+\t@Override\n+\tpublic void updatePostgresSequence() throws DAOException {\n+\t\t\n+\t\tif (HibernateUtil.isPostgreSQLDialect(sessionFactory)) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"\n+\t\t\t        + \"SELECT setval('concept_concept_id_seq', (SELECT MAX(concept_id) FROM concept)+1);\"\n+\t\t\t        + \"SELECT setval('concept_name_concept_name_id_seq', (SELECT MAX(concept_name_id) FROM concept_name)+1);\"\n+\t\t\t        + \"SELECT setval('concept_class_concept_class_id_seq', (SELECT MAX(concept_class_id) FROM concept_class)+1);\"\n+\t\t\t        + \"SELECT setval('concept_reference_source_concept_source_id_seq', (SELECT MAX(concept_source_id) FROM concept_reference_source)+1);\"\n+\t\t\t        + \"SELECT setval('encounter_role_encounter_role_id_seq', (SELECT MAX(encounter_role_id) FROM encounter_role)+1);\"\n+\t\t\t        + \"SELECT setval('field_type_field_type_id_seq', (SELECT MAX(field_type_id) FROM field_type)+1);\"\n+\t\t\t        + \"SELECT setval('hl7_source_hl7_source_id_seq', (SELECT MAX(hl7_source_id) FROM hl7_source)+1);\"\n+\t\t\t        + \"SELECT setval('location_location_id_seq', (SELECT MAX(location_id) FROM location)+1);\"\n+\t\t\t        + \"SELECT setval('order_type_order_type_id_seq', (SELECT MAX(order_type_id) FROM order_type)+1);\"\n+\t\t\t        + \"SELECT setval('patient_identifier_type_patient_identifier_type_id_seq', (SELECT MAX(patient_identifier_type_id) FROM patient_identifier_type)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_task_config_id_seq', (SELECT MAX(task_config_id) FROM scheduler_task_config)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_property_task_config_property_id_seq', (SELECT MAX(task_config_property_id) FROM scheduler_task_config_property)+1)\"\n+\t\t\t        + \"\";\n+\t\t\tSession session = sessionFactory.getCurrentSession();\n+\t\t\tfor (String postgresSequence : postgresSequences.split(\";\"))\n+\t\t\t\tsession.createNativeQuery(postgresSequence).list();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDA0Mg=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM5MzEzMQ==", "bodyText": "Since the statements are of \"SELECT\" type , executeUpdate() raises exception. Link to logs: https://pastebin.com/WAYJznU2", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471393131", "createdAt": "2020-08-17T10:39:59Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "diffHunk": "@@ -301,4 +302,43 @@ public boolean isDatabaseStringComparisonCaseSensitive() {\n \t\t\treturn true;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Updates PostgreSQL Sequences after core data insertion\n+\t * \n+\t * @see org.openmrs.api.db.AdministrationDAO#updatePostgresSequence()\n+\t */\n+\t@Override\n+\tpublic void updatePostgresSequence() throws DAOException {\n+\t\t\n+\t\tif (HibernateUtil.isPostgreSQLDialect(sessionFactory)) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"\n+\t\t\t        + \"SELECT setval('concept_concept_id_seq', (SELECT MAX(concept_id) FROM concept)+1);\"\n+\t\t\t        + \"SELECT setval('concept_name_concept_name_id_seq', (SELECT MAX(concept_name_id) FROM concept_name)+1);\"\n+\t\t\t        + \"SELECT setval('concept_class_concept_class_id_seq', (SELECT MAX(concept_class_id) FROM concept_class)+1);\"\n+\t\t\t        + \"SELECT setval('concept_reference_source_concept_source_id_seq', (SELECT MAX(concept_source_id) FROM concept_reference_source)+1);\"\n+\t\t\t        + \"SELECT setval('encounter_role_encounter_role_id_seq', (SELECT MAX(encounter_role_id) FROM encounter_role)+1);\"\n+\t\t\t        + \"SELECT setval('field_type_field_type_id_seq', (SELECT MAX(field_type_id) FROM field_type)+1);\"\n+\t\t\t        + \"SELECT setval('hl7_source_hl7_source_id_seq', (SELECT MAX(hl7_source_id) FROM hl7_source)+1);\"\n+\t\t\t        + \"SELECT setval('location_location_id_seq', (SELECT MAX(location_id) FROM location)+1);\"\n+\t\t\t        + \"SELECT setval('order_type_order_type_id_seq', (SELECT MAX(order_type_id) FROM order_type)+1);\"\n+\t\t\t        + \"SELECT setval('patient_identifier_type_patient_identifier_type_id_seq', (SELECT MAX(patient_identifier_type_id) FROM patient_identifier_type)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_task_config_id_seq', (SELECT MAX(task_config_id) FROM scheduler_task_config)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_property_task_config_property_id_seq', (SELECT MAX(task_config_property_id) FROM scheduler_task_config_property)+1)\"\n+\t\t\t        + \"\";\n+\t\t\tSession session = sessionFactory.getCurrentSession();\n+\t\t\tfor (String postgresSequence : postgresSequences.split(\";\"))\n+\t\t\t\tsession.createNativeQuery(postgresSequence).list();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDA0Mg=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM5NTcyMw==", "bodyText": "How about using it with ALTER SEQUENCE?", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471395723", "createdAt": "2020-08-17T10:45:16Z", "author": {"login": "dkayiwa"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "diffHunk": "@@ -301,4 +302,43 @@ public boolean isDatabaseStringComparisonCaseSensitive() {\n \t\t\treturn true;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Updates PostgreSQL Sequences after core data insertion\n+\t * \n+\t * @see org.openmrs.api.db.AdministrationDAO#updatePostgresSequence()\n+\t */\n+\t@Override\n+\tpublic void updatePostgresSequence() throws DAOException {\n+\t\t\n+\t\tif (HibernateUtil.isPostgreSQLDialect(sessionFactory)) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"\n+\t\t\t        + \"SELECT setval('concept_concept_id_seq', (SELECT MAX(concept_id) FROM concept)+1);\"\n+\t\t\t        + \"SELECT setval('concept_name_concept_name_id_seq', (SELECT MAX(concept_name_id) FROM concept_name)+1);\"\n+\t\t\t        + \"SELECT setval('concept_class_concept_class_id_seq', (SELECT MAX(concept_class_id) FROM concept_class)+1);\"\n+\t\t\t        + \"SELECT setval('concept_reference_source_concept_source_id_seq', (SELECT MAX(concept_source_id) FROM concept_reference_source)+1);\"\n+\t\t\t        + \"SELECT setval('encounter_role_encounter_role_id_seq', (SELECT MAX(encounter_role_id) FROM encounter_role)+1);\"\n+\t\t\t        + \"SELECT setval('field_type_field_type_id_seq', (SELECT MAX(field_type_id) FROM field_type)+1);\"\n+\t\t\t        + \"SELECT setval('hl7_source_hl7_source_id_seq', (SELECT MAX(hl7_source_id) FROM hl7_source)+1);\"\n+\t\t\t        + \"SELECT setval('location_location_id_seq', (SELECT MAX(location_id) FROM location)+1);\"\n+\t\t\t        + \"SELECT setval('order_type_order_type_id_seq', (SELECT MAX(order_type_id) FROM order_type)+1);\"\n+\t\t\t        + \"SELECT setval('patient_identifier_type_patient_identifier_type_id_seq', (SELECT MAX(patient_identifier_type_id) FROM patient_identifier_type)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_task_config_id_seq', (SELECT MAX(task_config_id) FROM scheduler_task_config)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_property_task_config_property_id_seq', (SELECT MAX(task_config_property_id) FROM scheduler_task_config_property)+1)\"\n+\t\t\t        + \"\";\n+\t\t\tSession session = sessionFactory.getCurrentSession();\n+\t\t\tfor (String postgresSequence : postgresSequences.split(\";\"))\n+\t\t\t\tsession.createNativeQuery(postgresSequence).list();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDA0Mg=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM5ODgzMQ==", "bodyText": "We cannot make use of ALTER sequence statement here since it was not allowing the subqueries in it as it is a DDL statement. We require a subquery to get max id from table.", "url": "https://github.com/openmrs/openmrs-core/pull/3506#discussion_r471398831", "createdAt": "2020-08-17T10:52:02Z", "author": {"login": "Am-Coder"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernateAdministrationDAO.java", "diffHunk": "@@ -301,4 +302,43 @@ public boolean isDatabaseStringComparisonCaseSensitive() {\n \t\t\treturn true;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Updates PostgreSQL Sequences after core data insertion\n+\t * \n+\t * @see org.openmrs.api.db.AdministrationDAO#updatePostgresSequence()\n+\t */\n+\t@Override\n+\tpublic void updatePostgresSequence() throws DAOException {\n+\t\t\n+\t\tif (HibernateUtil.isPostgreSQLDialect(sessionFactory)) {\n+\t\t\t\n+\t\t\t// All the required PostgreSQL sequences that need to be updated\n+\t\t\tString postgresSequences = \"SELECT setval('person_person_id_seq', (SELECT MAX(person_id) FROM person)+1);\"\n+\t\t\t        + \"SELECT setval('person_name_person_name_id_seq', (SELECT MAX(person_name_id) FROM person_name)+1);\"\n+\t\t\t        + \"SELECT setval('person_attribute_type_person_attribute_type_id_seq', (SELECT MAX(person_attribute_type_id) FROM person_attribute_type)+1);\"\n+\t\t\t        + \"SELECT setval('relationship_type_relationship_type_id_seq', (SELECT MAX(relationship_type_id) FROM relationship_type)+1);\"\n+\t\t\t        + \"SELECT setval('users_user_id_seq', (SELECT MAX(user_id) FROM users)+1);\"\n+\t\t\t        + \"SELECT setval('care_setting_care_setting_id_seq', (SELECT MAX(care_setting_id) FROM care_setting)+1);\"\n+\t\t\t        + \"SELECT setval('concept_datatype_concept_datatype_id_seq', (SELECT MAX(concept_datatype_id) FROM concept_datatype)+1);\"\n+\t\t\t        + \"SELECT setval('concept_map_type_concept_map_type_id_seq', (SELECT MAX(concept_map_type_id) FROM concept_map_type)+1);\"\n+\t\t\t        + \"SELECT setval('concept_stop_word_concept_stop_word_id_seq', (SELECT MAX(concept_stop_word_id) FROM concept_stop_word)+1);\"\n+\t\t\t        + \"SELECT setval('concept_concept_id_seq', (SELECT MAX(concept_id) FROM concept)+1);\"\n+\t\t\t        + \"SELECT setval('concept_name_concept_name_id_seq', (SELECT MAX(concept_name_id) FROM concept_name)+1);\"\n+\t\t\t        + \"SELECT setval('concept_class_concept_class_id_seq', (SELECT MAX(concept_class_id) FROM concept_class)+1);\"\n+\t\t\t        + \"SELECT setval('concept_reference_source_concept_source_id_seq', (SELECT MAX(concept_source_id) FROM concept_reference_source)+1);\"\n+\t\t\t        + \"SELECT setval('encounter_role_encounter_role_id_seq', (SELECT MAX(encounter_role_id) FROM encounter_role)+1);\"\n+\t\t\t        + \"SELECT setval('field_type_field_type_id_seq', (SELECT MAX(field_type_id) FROM field_type)+1);\"\n+\t\t\t        + \"SELECT setval('hl7_source_hl7_source_id_seq', (SELECT MAX(hl7_source_id) FROM hl7_source)+1);\"\n+\t\t\t        + \"SELECT setval('location_location_id_seq', (SELECT MAX(location_id) FROM location)+1);\"\n+\t\t\t        + \"SELECT setval('order_type_order_type_id_seq', (SELECT MAX(order_type_id) FROM order_type)+1);\"\n+\t\t\t        + \"SELECT setval('patient_identifier_type_patient_identifier_type_id_seq', (SELECT MAX(patient_identifier_type_id) FROM patient_identifier_type)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_task_config_id_seq', (SELECT MAX(task_config_id) FROM scheduler_task_config)+1);\"\n+\t\t\t        + \"SELECT setval('scheduler_task_config_property_task_config_property_id_seq', (SELECT MAX(task_config_property_id) FROM scheduler_task_config_property)+1)\"\n+\t\t\t        + \"\";\n+\t\t\tSession session = sessionFactory.getCurrentSession();\n+\t\t\tfor (String postgresSequence : postgresSequences.split(\";\"))\n+\t\t\t\tsession.createNativeQuery(postgresSequence).list();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDA0Mg=="}, "originalCommit": {"oid": "38d306910c2a0fdc840c9205f3271656f32b5377"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1283, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}