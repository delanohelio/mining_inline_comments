{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDU1NTE4", "number": 3152, "title": "TRUNK-5724: Refactor getSimilarPeople to use Lucene", "bodyText": "Description of what I changed\n\n\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/TRUNK-5724\nwhich is a sub-task of https://issues.openmrs.org/browse/TRUNK-5680 to make everything deployable easier and introduce smaller changes\nThe talk thread discussing approach logic and so on can be found here: https://talk.openmrs.org/t/soundex-search-in-lucenequeries/26068\nPlease have a look there before asking for my changes!\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My pull request only contains ONE single commit\n(the number above, next to the 'Commits' tab is 1).\nNo? -> read here on how to squash multiple commits into one\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n[X ] I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n[X ] All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-03-22T19:10:21Z", "url": "https://github.com/openmrs/openmrs-core/pull/3152", "merged": true, "mergeCommit": {"oid": "74b3ef8ef03954c59b5dfd57ca318453da49b3c8"}, "closed": true, "closedAt": "2020-07-20T14:49:05Z", "author": {"login": "fruether"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQhL8ZgBqjMxNTYxMTgxOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2yub7AFqTQ1MTU2MTcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65256a855f3232a1a7853acf56a9f21ac5ff93b2", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/65256a855f3232a1a7853acf56a9f21ac5ff93b2", "committedDate": "2020-03-22T19:00:04Z", "message": "Solving TRUNK-5724 - Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "5d410e9b2f47c3e31da92111c5ca2658a604b068", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/5d410e9b2f47c3e31da92111c5ca2658a604b068", "committedDate": "2020-03-22T19:07:25Z", "message": "Solving TRUNK-5724 - Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d410e9b2f47c3e31da92111c5ca2658a604b068", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/5d410e9b2f47c3e31da92111c5ca2658a604b068", "committedDate": "2020-03-22T19:07:25Z", "message": "Solving TRUNK-5724 - Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "c094fe164751004fe471ad8e5d7e4fceb136edb5", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/c094fe164751004fe471ad8e5d7e4fceb136edb5", "committedDate": "2020-03-23T20:45:21Z", "message": "TRUNK-5274: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODY3NjYy", "url": "https://github.com/openmrs/openmrs-core/pull/3152#pullrequestreview-379867662", "createdAt": "2020-03-23T22:24:02Z", "commit": {"oid": "c094fe164751004fe471ad8e5d7e4fceb136edb5"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyNDowMlrOF6aUmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMzo1OFrOF6akig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5Mjk4Nw==", "bodyText": "Sorry to be really picky, but don't add a new space here", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r396792987", "createdAt": "2020-03-23T22:24:02Z", "author": {"login": "ibacher"}, "path": "api/pom.xml", "diffHunk": "@@ -12,7 +12,7 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <parent>\n       <groupId>org.openmrs</groupId>\n-      <artifactId>openmrs</artifactId>\n+      <artifactId>openmrs</artifactId> ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c094fe164751004fe471ad8e5d7e4fceb136edb5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MzExMA==", "bodyText": "I would remove this from your commit altogether", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r396793110", "createdAt": "2020-03-23T22:24:19Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/ConceptName.java", "diffHunk": "@@ -13,7 +13,6 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Locale;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c094fe164751004fe471ad8e5d7e4fceb136edb5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5Mzk4Mg==", "bodyText": "x ->", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r396793982", "createdAt": "2020-03-23T22:26:19Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "diffHunk": "@@ -72,6 +73,121 @@ public void setSessionFactory(SessionFactory sessionFactory) {\n \t\tthis.sessionFactory = sessionFactory;\n \t}\n \t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with one search name given\n+\t * \n+\t * @param name a person should match using soundex representation\n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria \n+\t */\n+\tprivate Set<Person> executeSoundexOnePersonNameQuery(String name, Integer birthyear, boolean includeVoided , String gender) {\n+\t\t// Use the Soundex Search Mode for each query\n+\t\tString matchMode = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE);\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX);\n+\t\t\n+\t\t\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tString query = LuceneQuery.escapeQuery(name);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\tLinkedHashSet<Person> people = new LinkedHashSet<>();\n+\t\t\n+\t\tLuceneQuery<PersonName> luceneQuery = personLuceneQuery.getSoundexPersonNameQuery(query, birthyear, false, gender);;\n+\t\tListPart<Object[]> names = luceneQuery.listPartProjection(0, maxResults, \"person.personId\");\n+\t\tnames.getList().forEach(x-> people.add(getPerson((Integer) x[0])));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c094fe164751004fe471ad8e5d7e4fceb136edb5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NDY0NQ==", "bodyText": "if (firstName) {", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r396794645", "createdAt": "2020-03-23T22:27:49Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "diffHunk": "@@ -72,6 +73,121 @@ public void setSessionFactory(SessionFactory sessionFactory) {\n \t\tthis.sessionFactory = sessionFactory;\n \t}\n \t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with one search name given\n+\t * \n+\t * @param name a person should match using soundex representation\n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria \n+\t */\n+\tprivate Set<Person> executeSoundexOnePersonNameQuery(String name, Integer birthyear, boolean includeVoided , String gender) {\n+\t\t// Use the Soundex Search Mode for each query\n+\t\tString matchMode = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE);\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX);\n+\t\t\n+\t\t\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tString query = LuceneQuery.escapeQuery(name);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\tLinkedHashSet<Person> people = new LinkedHashSet<>();\n+\t\t\n+\t\tLuceneQuery<PersonName> luceneQuery = personLuceneQuery.getSoundexPersonNameQuery(query, birthyear, false, gender);;\n+\t\tListPart<Object[]> names = luceneQuery.listPartProjection(0, maxResults, \"person.personId\");\n+\t\tnames.getList().forEach(x-> people.add(getPerson((Integer) x[0])));\n+\t\t\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, matchMode);\n+\t\t\n+\t\treturn people; \n+\t}\n+\t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with two search names given\n+\t * \n+\t * @param name1 firstName to be searched\n+\t * @param name2 last name to be searched \n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria\n+\t */\n+\tprivate Set<Person> executeSoundexTwoPersonNameQuery(String name1, String name2,  Integer birthyear, boolean includeVoided , String gender) {\n+\t\t// Use the Soundex Search Mode for each query\n+\t\tString matchMode = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE);\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX);\n+\t\t\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\t\n+\t\t// Execute a search on all names of a person with the given criteria\n+\t\tLuceneQuery<PersonName> luceneQuery = personLuceneQuery.getSoundexPersonNameSearchOnAllNames(name1, name2, 0, false, \"M\");\n+\t\tLinkedHashSet<Person> people = new LinkedHashSet<>();\n+\t\tListPart<Object[]> names = luceneQuery.listPartProjection(0, maxResults, \"person.personId\");\n+\t\tnames.getList().forEach(x-> people.add(getPerson((Integer) x[0])));\n+\t\t\n+\t\tSet<Person> firstNamesMatch = new HashSet<>();\n+\t\tSet<Person> secondNamesMatch = new HashSet<>();\n+\t\tSet<Person> secondNamesMatchFirstName = new HashSet<>();\n+\t\tSet<Person> firstNamesMatchSecondName = new HashSet<>();\n+\t\t\n+\t\t\n+\t\t// Executed Filter Logic: \n+\t\t// People whose first name matches n1 and second part of the name (givenName, familyName, familyName2) matches at least once n2\n+\t\tfirstNamesMatch = execSoundexLuceneQueryByNames(true, name1, birthyear, includeVoided, gender);\n+\t\tsecondNamesMatch = execSoundexLuceneQueryByNames(false, name2, birthyear, includeVoided, gender);\n+\t\t\n+\t\tfirstNamesMatch.retainAll(secondNamesMatch);\n+\t\tpeople.addAll(firstNamesMatch);\n+\t\t\n+\t\t// Executed Filter Logic: \n+\t\t// People who have second part of the name(givenName, familyName, familyName2) matching n2 and n1 (at least once)\n+\t\tsecondNamesMatchFirstName = execSoundexLuceneQueryByNames(false, name1, birthyear, includeVoided, gender);\n+\t\tsecondNamesMatch.retainAll(secondNamesMatchFirstName);\n+\t\tpeople.addAll(secondNamesMatch);\n+\t\tsecondNamesMatch.clear();\n+\t\t\n+\t\t// Executed Filter Logic:\n+\t\t// People who have given_name matching n2, second name matching n1, and another part of second name matching \u201c\u201d\n+\t\tfirstNamesMatchSecondName = execSoundexLuceneQueryByNames(true, name2, birthyear, includeVoided, gender);\n+\t\tsecondNamesMatch = execSoundexLuceneQueryByNames(false, \"\", birthyear, includeVoided, gender);\n+\t\t\n+\t\tfirstNamesMatchSecondName.retainAll(secondNamesMatchFirstName);\n+\t\tfirstNamesMatchSecondName.retainAll(secondNamesMatch);\n+\t\tpeople.addAll(firstNamesMatchSecondName);\n+\t\t\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, matchMode);\n+\t\treturn people;\n+\t}\n+\t\n+\t/**\n+\t * This method executes a search on either firstName or lastName attributes of person\n+\t * \n+\t * @param firstName true if search should be executed on firstname only\n+\t * @param name to be searched in soundex representation\n+\t * @param birthyear to be matched\n+\t * @param includeVoided true if voided persons should be matched\n+\t * @param gender of the person to search for \n+\t * @return the persons that match the search criteria as defined\n+\t */\n+\tprivate Set<Person> execSoundexLuceneQueryByNames(boolean firstName, String name, Integer birthyear, boolean includeVoided , String gender) {\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\tSet<Person> results = new HashSet<>();\n+\t\tLuceneQuery<PersonName> luceneQuery;\n+\t\t\n+\t\tif(firstName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c094fe164751004fe471ad8e5d7e4fceb136edb5"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NTA0MQ==", "bodyText": "Is there a reason this case isn't covered?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r396795041", "createdAt": "2020-03-23T22:28:48Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "diffHunk": "@@ -84,35 +200,19 @@ public void setSessionFactory(SessionFactory sessionFactory) {\n \t\tif (birthyear == null) {\n \t\t\tbirthyear = 0;\n \t\t}\n-\n+\t\t\n \t\tname = name.replaceAll(\"  \", \" \");\n \t\tname = name.replace(\", \", \" \");\n \t\tString[] names = name.split(\" \");\n+\t\tSet<Person> result;\n \t\t\n \t\tStringBuilder q = new StringBuilder(\n \t\t        \"select p from Person p left join p.names as pname where p.personVoided = false and pname.voided = false and \");\n \t\t\n \t\tif (names.length == 1) {\n-\t\t\tq.append(\"(\").append(\" soundex(pname.givenName) = soundex(:n1)\").append(\n-\t\t\t    \" or soundex(pname.middleName) = soundex(:n1)\").append(\" or soundex(pname.familyName) = soundex(:n1) \")\n-\t\t\t        .append(\" or soundex(pname.familyName2) = soundex(:n1) \").append(\")\");\n+\t\t\treturn  executeSoundexOnePersonNameQuery(name, birthyear, false, gender);\n \t\t} else if (names.length == 2) {\n-\t\t\tq.append(\"(\").append(\" case\").append(\"  when pname.givenName is null then 1\").append(\n-\t\t\t    \"  when pname.givenName = '' then 1\").append(\"  when soundex(pname.givenName) = soundex(:n1) then 4\")\n-\t\t\t        .append(\"  when soundex(pname.givenName) = soundex(:n2) then 3\").append(\"  else 0 \").append(\" end\")\n-\t\t\t        .append(\" + \").append(\" case\").append(\"  when pname.middleName is null then 1\").append(\n-\t\t\t            \"  when pname.middleName = '' then 1\").append(\n-\t\t\t            \"  when soundex(pname.middleName) = soundex(:n1) then 3\").append(\n-\t\t\t            \"  when soundex(pname.middleName) = soundex(:n2) then 4\").append(\"  else 0 \").append(\" end\").append(\n-\t\t\t            \" + \").append(\" case\").append(\"  when pname.familyName is null then 1\").append(\n-\t\t\t            \"  when pname.familyName = '' then 1\").append(\n-\t\t\t            \"  when soundex(pname.familyName) = soundex(:n1) then 3\").append(\n-\t\t\t            \"  when soundex(pname.familyName) = soundex(:n2) then 4\").append(\"  else 0 \").append(\" end\").append(\n-\t\t\t            \" +\").append(\" case\").append(\"  when pname.familyName2 is null then 1\").append(\n-\t\t\t            \"  when pname.familyName2 = '' then 1\").append(\n-\t\t\t            \"  when soundex(pname.familyName2) = soundex(:n1) then 3\").append(\n-\t\t\t            \"  when soundex(pname.familyName2) = soundex(:n2) then 4\").append(\"  else 0 \").append(\" end\")\n-\t\t\t        .append(\") > 6\");\n+\t\t\treturn executeSoundexTwoPersonNameQuery(names[0], names[1], birthyear, false, gender);\n \t\t} else if (names.length == 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c094fe164751004fe471ad8e5d7e4fceb136edb5"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NjUwMQ==", "bodyText": "I don't particularly love converting the leading white space to tabs here. Is it possible to undo it?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r396796501", "createdAt": "2020-03-23T22:32:36Z", "author": {"login": "ibacher"}, "path": "api/src/test/resources/org/openmrs/api/include/PersonServiceTest-extranames.xml", "diffHunk": "@@ -11,26 +11,26 @@\n \n -->\n <dataset>\n-  <person person_id=\"2\" gender=\"M\" dead=\"false\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"1716432a-4bf9-436c-baad-f03236e960e1\"/>\n-  <person person_id=\"3\" gender=\"M\" dead=\"true\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"true\" uuid=\"d707fad8-dbe4-40bb-bd25-321477ca18b0\"/>\n-  <person person_id=\"4\" gender=\"M\" dead=\"false\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"81ba5d12-3b3d-4eb2-ae6c-52970b37939a\"/>\n-  <person person_id=\"5\" gender=\"F\" dead=\"false\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"cea3d39a-99a5-4224-9936-8c8c134035d4\"/>\n-  <users user_id=\"2\" person_id=\"2\" creator=\"1\" system_id=\"\" date_created=\"2005-01-01 00:00:00.0\" retired=\"false\" uuid=\"9670a7aa-e135-11de-babe-001e378eb67e\"/>\n-  <users user_id=\"3\" person_id=\"3\" creator=\"1\" system_id=\"\" date_created=\"2005-01-01 00:00:00.0\" retired=\"true\" uuid=\"9afcecb6-e135-11de-babe-001e378eb67e\"/>\n-  <users user_id=\"4\" person_id=\"4\" creator=\"1\" system_id=\"\" date_created=\"2005-01-01 00:00:00.0\" retired=\"false\" uuid=\"9f6bf698-e135-11de-babe-001e378eb67e\"/>\n-  <users user_id=\"5\" person_id=\"5\" creator=\"1\" system_id=\"\" date_created=\"2005-01-01 00:00:00.0\" retired=\"false\" uuid=\"a2e2e4da-e135-11de-babe-001e378eb67e\"/>\n-  <person_name person_name_id=\"2\" preferred=\"true\" person_id=\"2\" prefix=\"Dr.\" given_name=\"John\" middle_name=\"Andrew\" family_name=\"Smith\" family_name2=\"Johnson\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"54fdf8e8-1a80-45cf-a3fd-4fabd1b8ffab\"/>\n-  <person_name person_name_id=\"3\" preferred=\"true\" person_id=\"3\" prefix=\"\" given_name=\"I\" middle_name=\"am\" family_name=\"voided\" family_name2=\"Johnson\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"true\" uuid=\"1be83481-5ace-4a97-8510-d2e1257b6f6a\"/>\n-  <person_name person_name_id=\"4\" preferred=\"true\" person_id=\"4\" prefix=\"Mr.\" given_name=\"John\" middle_name=\"Andrew\" family_name=\"Johnson\" family_name2=\"\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"23da3d4a-9a12-44b7-bcc0-7ed72664adda\"/>\n-  <person_name person_name_id=\"5\" preferred=\"true\" person_id=\"5\" prefix=\"Mrs.\" given_name=\"Jean\" middle_name=\"Joan\" family_name=\"Claude\" family_name2=\"Johnson\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"5e6571cc-c7f2-41de-b289-f55f8fe79c6f\"/>\n-  <person_name person_name_id=\"6\" preferred=\"false\" person_id=\"5\" prefix=\"Mrs.\" given_name=\"Jean\" middle_name=\"Foobar\" family_name=\"Claude\" family_name2=\"Johnson\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"5e6571cc-c7f2-41de-b289-f55f8fe79ddd\"/>\n-  <patient patient_id=\"2\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\"/>\n-  <patient patient_id=\"3\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"true\"/>\n-  <patient patient_id=\"4\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\"/>\n-  <patient patient_id=\"5\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\"/>\n-  <patient_identifier patient_identifier_id=\"51\" patient_id=\"2\" identifier=\"1234\" identifier_type=\"1\" preferred=\"1\" location_id=\"1\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"64020a1a-4dc8-417b-b12a-0e91518f68f2\"/>\n-  <patient_identifier patient_identifier_id=\"41\" patient_id=\"2\" identifier=\"12345\" identifier_type=\"1\" preferred=\"0\" location_id=\"1\" creator=\"1\" date_created=\"2004-01-01 00:00:00.0\" voided=\"false\" uuid=\"42236d1a-0b5e-43bd-a562-973104f1484e\"/>\n-  <patient_identifier patient_identifier_id=\"31\" patient_id=\"3\" identifier=\"4567\" identifier_type=\"1\" preferred=\"1\" location_id=\"1\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"2d7c3067-346a-4cc8-9f67-66bb5b149153\"/>\n-  <patient_identifier patient_identifier_id=\"21\" patient_id=\"4\" identifier=\"5634\" identifier_type=\"1\" preferred=\"1\" location_id=\"1\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"true\" uuid=\"df6633a5-3896-498f-97bd-3160ffa05d0e\"/>\n-  <patient_identifier patient_identifier_id=\"11\" patient_id=\"5\" identifier=\"563422\" identifier_type=\"1\" preferred=\"1\" location_id=\"1\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"f6e43b2a-e331-496b-87f7-27b64d84a015\"/>\n+\t<person person_id=\"2\" gender=\"M\" dead=\"false\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"1716432a-4bf9-436c-baad-f03236e960e1\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c094fe164751004fe471ad8e5d7e4fceb136edb5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NzA2Ng==", "bodyText": "I'm not particularly a fan of having a blank line after the last executable statement in a function, but we definitely shouldn't have two.", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r396797066", "createdAt": "2020-03-23T22:33:58Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/api/PersonServiceTest.java", "diffHunk": "@@ -478,27 +485,92 @@ public void getSimilarPeople_shouldMatchSingleSearchToAnyNamePart() throws Excep\n \t@Test\n \tpublic void getSimilarPeople_shouldMatchTwoWordSearchToAnyNamePart() throws Exception {\n \t\texecuteDataSet(\"org/openmrs/api/include/PersonServiceTest-names.xml\");\n+\t\tupdateSearchIndex();\n+\t\t\n \t\tSet<Person> matches = Context.getPersonService().getSimilarPeople(\"Darius Graham\", 1979, \"M\");\n-\t\tAssert.assertEquals(6, matches.size());\n+\t\tAssert.assertEquals(11, matches.size());\n \t\tassertTrue(containsId(matches, 1000));\n \t\tassertTrue(containsId(matches, 1003));\n-\t\tassertTrue(containsId(matches, 1004));\n-\t\tassertTrue(containsId(matches, 1005));\n+\t\tassertTrue(containsId(matches, 1004)); \n+\t\tassertTrue(containsId(matches, 1005)); \n \t\tassertTrue(containsId(matches, 1006));\n \t\tassertTrue(containsId(matches, 1007));\n+\t\t\n+\t\tassertTrue(containsId(matches, 1009));\n+\t\tassertTrue(containsId(matches, 1010));\n+\t\tassertTrue(containsId(matches, 1011));\n+\t\tassertTrue(containsId(matches, 1012));\n+\t\tassertTrue(containsId(matches, 1013));\n+\t\t\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c094fe164751004fe471ad8e5d7e4fceb136edb5"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "693f0796e56750e7f8551f11901acd4497e4565d", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/693f0796e56750e7f8551f11901acd4497e4565d", "committedDate": "2020-03-24T20:06:12Z", "message": "Fixing ibacher's comments"}, "afterCommit": {"oid": "30dd6b31e8376da57c0ffe2e8f3a174af4d8cf22", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/30dd6b31e8376da57c0ffe2e8f3a174af4d8cf22", "committedDate": "2020-03-24T20:07:14Z", "message": "TRUNK-5274: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjYwNzA4", "url": "https://github.com/openmrs/openmrs-core/pull/3152#pullrequestreview-380660708", "createdAt": "2020-03-24T20:12:46Z", "commit": {"oid": "30dd6b31e8376da57c0ffe2e8f3a174af4d8cf22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxMjo0NlrOF7BSpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxMjo0NlrOF7BSpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzMTQ2Mw==", "bodyText": "I will fix this space in next commit", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r397431463", "createdAt": "2020-03-24T20:12:46Z", "author": {"login": "fruether"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/PersonLuceneQuery.java", "diffHunk": "@@ -49,7 +49,7 @@ public PersonLuceneQuery(SessionFactory sessionFactory) {\n \t}\n \n \tpublic LuceneQuery<PersonName> getPatientNameQuery(String query, boolean includeVoided, LuceneQuery<?> skipSame) {\n-\t\treturn getPersonNameQuery(query, false, includeVoided, true, skipSame);\n+\t\treturn   getPersonNameQuery(query, false, includeVoided, true, skipSame);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30dd6b31e8376da57c0ffe2e8f3a174af4d8cf22"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ddbfb5f6ec8aee4ca7157976dea87fbc26a9933", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/1ddbfb5f6ec8aee4ca7157976dea87fbc26a9933", "committedDate": "2020-03-28T11:08:48Z", "message": "Merge branch 'TRUNK-5724' of https://github.com/fruether/openmrs-core into TRUNK-5724"}, "afterCommit": {"oid": "550408266685ac854c2d58428ccd3c223714527f", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/550408266685ac854c2d58428ccd3c223714527f", "committedDate": "2020-03-28T13:05:09Z", "message": "TRUNK-5274: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "550408266685ac854c2d58428ccd3c223714527f", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/550408266685ac854c2d58428ccd3c223714527f", "committedDate": "2020-03-28T13:05:09Z", "message": "TRUNK-5274: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "55097604f75e76d5ea5e78da5a22ba9eff423f32", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/55097604f75e76d5ea5e78da5a22ba9eff423f32", "committedDate": "2020-03-28T13:23:52Z", "message": "TRUNK-5274: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55097604f75e76d5ea5e78da5a22ba9eff423f32", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/55097604f75e76d5ea5e78da5a22ba9eff423f32", "committedDate": "2020-03-28T13:23:52Z", "message": "TRUNK-5274: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "ae1b592d482d31c5907d60f25041be65ed31d088", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/ae1b592d482d31c5907d60f25041be65ed31d088", "committedDate": "2020-03-28T13:28:45Z", "message": "TRUNK-5274: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae1b592d482d31c5907d60f25041be65ed31d088", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/ae1b592d482d31c5907d60f25041be65ed31d088", "committedDate": "2020-03-28T13:28:45Z", "message": "TRUNK-5274: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/4a54a1953af632db5bb21b754bebe02c1aea6349", "committedDate": "2020-03-28T13:45:57Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTE3MjE3", "url": "https://github.com/openmrs/openmrs-core/pull/3152#pullrequestreview-384117217", "createdAt": "2020-03-30T18:23:53Z", "commit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "state": "DISMISSED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoyMzo1M1rOF92kPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozNTowMlrOF92_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwMTQ2OA==", "bodyText": "Is there any value to this comment here?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400401468", "createdAt": "2020-03-30T18:23:53Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/search/LuceneAnalyzerFactory.java", "diffHunk": "@@ -58,6 +60,12 @@ public SearchMapping getSearchMapping() {\n \t\t\t.filter(NGramFilterFactory.class)\n \t\t\t.param(\"minGramSize\", \"2\")\n \t\t\t.param(\"maxGramSize\", \"20\");\n+\t\tmapping.analyzerDef(LuceneAnalyzers.SOUNDEX_ANALYZER, StandardTokenizerFactory.class)\n+\t\t\t.filter(ClassicFilterFactory.class) //StandardTokenizerFactory https://www.programcreek.com/java-api-examples/index.php?api=org.apache.lucene.analysis.phonetic.PhoneticFilterFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwMTk3Mg==", "bodyText": "\"soundexExactAnalyzer\" sounds like a weird descriptor to me... SOUNDEX is, by its very nature, not an exact match, unless I'm missing something?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400401972", "createdAt": "2020-03-30T18:24:44Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/search/LuceneAnalyzers.java", "diffHunk": "@@ -26,4 +26,6 @@ private LuceneAnalyzers() {\n \tpublic static final String EXACT_ANALYZER = \"exactAnalyzer\";\n \t\n \tpublic static final String PHRASE_ANALYZER = \"phraseAnalyzer\";\n+\t\n+\tpublic static final String SOUNDEX_ANALYZER = \"soundexExactAnalyzer\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNDE0MA==", "bodyText": "Shouldn't this be \"SOUNDEX\" to match the other types here?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400404140", "createdAt": "2020-03-30T18:28:05Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/util/OpenmrsConstants.java", "diffHunk": "@@ -339,6 +339,8 @@ public static String getOpenmrsProperty(String property) {\n \t\n \tpublic static final String GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_START = \"START\";\n \t\n+\tpublic static final String GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX = \"Soundex\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNTk5MQ==", "bodyText": "Do we really want such a high boost for a SOUNDEX match? I would suggest the boost should be left at 1.0.", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400405991", "createdAt": "2020-03-30T18:30:59Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/PersonName.java", "diffHunk": "@@ -58,15 +58,17 @@\n \t@Fields({\n \t\t\t@Field(name = \"givenNameExact\", analyzer = @Analyzer(definition = LuceneAnalyzers.EXACT_ANALYZER), boost = @Boost(8f)),\n \t\t\t@Field(name = \"givenNameStart\", analyzer = @Analyzer(definition = LuceneAnalyzers.START_ANALYZER), boost = @Boost(4f)),\n-\t\t\t@Field(name = \"givenNameAnywhere\", analyzer = @Analyzer(definition = LuceneAnalyzers.ANYWHERE_ANALYZER), boost = @Boost(2f))\n+\t\t\t@Field(name = \"givenNameAnywhere\", analyzer = @Analyzer(definition = LuceneAnalyzers.ANYWHERE_ANALYZER), boost = @Boost(2f)),\n+\t\t\t@Field(name = \"givenNameSoundex\", analyzer =  @Analyzer(definition = LuceneAnalyzers.SOUNDEX_ANALYZER), boost = @Boost(16f))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNjA0Mw==", "bodyText": "Do we really want such a high boost for a SOUNDEX match? I would suggest the boost should be 0.5.", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400406043", "createdAt": "2020-03-30T18:31:04Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/PersonName.java", "diffHunk": "@@ -58,15 +58,17 @@\n \t@Fields({\n \t\t\t@Field(name = \"givenNameExact\", analyzer = @Analyzer(definition = LuceneAnalyzers.EXACT_ANALYZER), boost = @Boost(8f)),\n \t\t\t@Field(name = \"givenNameStart\", analyzer = @Analyzer(definition = LuceneAnalyzers.START_ANALYZER), boost = @Boost(4f)),\n-\t\t\t@Field(name = \"givenNameAnywhere\", analyzer = @Analyzer(definition = LuceneAnalyzers.ANYWHERE_ANALYZER), boost = @Boost(2f))\n+\t\t\t@Field(name = \"givenNameAnywhere\", analyzer = @Analyzer(definition = LuceneAnalyzers.ANYWHERE_ANALYZER), boost = @Boost(2f)),\n+\t\t\t@Field(name = \"givenNameSoundex\", analyzer =  @Analyzer(definition = LuceneAnalyzers.SOUNDEX_ANALYZER), boost = @Boost(16f))\n \t})\n \tprivate String givenName;\n \tprivate String prefix;\n \n \t@Fields({\n \t\t\t@Field(name = \"middleNameExact\", analyzer = @Analyzer(definition = LuceneAnalyzers.EXACT_ANALYZER), boost = @Boost(4f)),\n \t\t\t@Field(name = \"middleNameStart\", analyzer = @Analyzer(definition = LuceneAnalyzers.START_ANALYZER), boost = @Boost(2f)),\n-\t\t\t@Field(name = \"middleNameAnywhere\", analyzer = @Analyzer(definition = LuceneAnalyzers.ANYWHERE_ANALYZER))\n+\t\t\t@Field(name = \"middleNameAnywhere\", analyzer = @Analyzer(definition = LuceneAnalyzers.ANYWHERE_ANALYZER)),\n+\t\t\t@Field(name = \"middleNameSoundex\", analyzer =  @Analyzer(definition = LuceneAnalyzers.SOUNDEX_ANALYZER), boost = @Boost(8f))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNjIyMw==", "bodyText": "Do we really want such a high boost for a SOUNDEX match? I would suggest the boost should be left at 1.0.", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400406223", "createdAt": "2020-03-30T18:31:22Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/PersonName.java", "diffHunk": "@@ -76,13 +78,15 @@\n \t\t\t@Field(name = \"familyNameExact\", analyzer = @Analyzer(definition = LuceneAnalyzers.EXACT_ANALYZER), boost = @Boost(8f)),\n \t\t\t@Field(name = \"familyNameStart\", analyzer = @Analyzer(definition = LuceneAnalyzers.START_ANALYZER), boost = @Boost(4f)),\n \t\t\t@Field(name = \"familyNameAnywhere\", analyzer = @Analyzer(definition = LuceneAnalyzers.ANYWHERE_ANALYZER), boost = @Boost(2f)),\n+\t\t\t@Field(name = \"familyNameSoundex\", analyzer =  @Analyzer(definition = LuceneAnalyzers.SOUNDEX_ANALYZER), boost = @Boost(16f))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNjM0MQ==", "bodyText": "Do we really want such a high boost for a SOUNDEX match? I would suggest the boost should be 0.5.", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400406341", "createdAt": "2020-03-30T18:31:34Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/PersonName.java", "diffHunk": "@@ -76,13 +78,15 @@\n \t\t\t@Field(name = \"familyNameExact\", analyzer = @Analyzer(definition = LuceneAnalyzers.EXACT_ANALYZER), boost = @Boost(8f)),\n \t\t\t@Field(name = \"familyNameStart\", analyzer = @Analyzer(definition = LuceneAnalyzers.START_ANALYZER), boost = @Boost(4f)),\n \t\t\t@Field(name = \"familyNameAnywhere\", analyzer = @Analyzer(definition = LuceneAnalyzers.ANYWHERE_ANALYZER), boost = @Boost(2f)),\n+\t\t\t@Field(name = \"familyNameSoundex\", analyzer =  @Analyzer(definition = LuceneAnalyzers.SOUNDEX_ANALYZER), boost = @Boost(16f))\n \t})\n \tprivate String familyName;\n \n \t@Fields({\n \t\t\t@Field(name = \"familyName2Exact\", analyzer = @Analyzer(definition = LuceneAnalyzers.EXACT_ANALYZER), boost = @Boost(4f)),\n \t\t\t@Field(name = \"familyName2Start\", analyzer = @Analyzer(definition = LuceneAnalyzers.START_ANALYZER), boost = @Boost(2f)),\n \t\t\t@Field(name = \"familyName2Anywhere\", analyzer = @Analyzer(definition = LuceneAnalyzers.ANYWHERE_ANALYZER)),\n+\t\t\t@Field(name = \"familyName2Soundex\", analyzer =  @Analyzer(definition = LuceneAnalyzers.SOUNDEX_ANALYZER), boost = @Boost(8f))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNjU0Ng==", "bodyText": "Does this change need to be in this PR?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400406546", "createdAt": "2020-03-30T18:31:54Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernatePatientDAO.java", "diffHunk": "@@ -787,8 +787,8 @@ public Long getCountOfPatients(String query, boolean includeVoided) {\n \t\t}\n \n \t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n-\n \t\tLuceneQuery<PersonName> nameQuery = personLuceneQuery.getPatientNameQuery(query, includeVoided, identifierQuery);\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwODA2MA==", "bodyText": "What happens when two people search for patients at the same time in different browsers?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400408060", "createdAt": "2020-03-30T18:34:35Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "diffHunk": "@@ -72,6 +73,121 @@ public void setSessionFactory(SessionFactory sessionFactory) {\n \t\tthis.sessionFactory = sessionFactory;\n \t}\n \t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with one search name given\n+\t * \n+\t * @param name a person should match using soundex representation\n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria \n+\t */\n+\tprivate Set<Person> executeSoundexOnePersonNameQuery(String name, Integer birthyear, boolean includeVoided , String gender) {\n+\t\t// Use the Soundex Search Mode for each query\n+\t\tString matchMode = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE);\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwODExMg==", "bodyText": "What happens when two people search for patients at the same time in different browsers?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400408112", "createdAt": "2020-03-30T18:34:42Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "diffHunk": "@@ -72,6 +73,121 @@ public void setSessionFactory(SessionFactory sessionFactory) {\n \t\tthis.sessionFactory = sessionFactory;\n \t}\n \t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with one search name given\n+\t * \n+\t * @param name a person should match using soundex representation\n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria \n+\t */\n+\tprivate Set<Person> executeSoundexOnePersonNameQuery(String name, Integer birthyear, boolean includeVoided , String gender) {\n+\t\t// Use the Soundex Search Mode for each query\n+\t\tString matchMode = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE);\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX);\n+\t\t\n+\t\t\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tString query = LuceneQuery.escapeQuery(name);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\tLinkedHashSet<Person> people = new LinkedHashSet<>();\n+\t\t\n+\t\tLuceneQuery<PersonName> luceneQuery = personLuceneQuery.getSoundexPersonNameQuery(query, birthyear, false, gender);;\n+\t\tListPart<Object[]> names = luceneQuery.listPartProjection(0, maxResults, \"person.personId\");\n+\t\tnames.getList().forEach(x -> people.add(getPerson((Integer) x[0])));\n+\t\t\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, matchMode);\n+\t\t\n+\t\treturn people; \n+\t}\n+\t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with two search names given\n+\t * \n+\t * @param name1 firstName to be searched\n+\t * @param name2 last name to be searched \n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria\n+\t */\n+\tprivate Set<Person> executeSoundexTwoPersonNameQuery(String name1, String name2,  Integer birthyear, boolean includeVoided , String gender) {\n+\t\t// Use the Soundex Search Mode for each query\n+\t\tString matchMode = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE);\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwODIzMA==", "bodyText": "What happens when two people search for patients at the same time in different browsers?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400408230", "createdAt": "2020-03-30T18:34:51Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "diffHunk": "@@ -72,6 +73,121 @@ public void setSessionFactory(SessionFactory sessionFactory) {\n \t\tthis.sessionFactory = sessionFactory;\n \t}\n \t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with one search name given\n+\t * \n+\t * @param name a person should match using soundex representation\n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria \n+\t */\n+\tprivate Set<Person> executeSoundexOnePersonNameQuery(String name, Integer birthyear, boolean includeVoided , String gender) {\n+\t\t// Use the Soundex Search Mode for each query\n+\t\tString matchMode = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE);\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX);\n+\t\t\n+\t\t\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tString query = LuceneQuery.escapeQuery(name);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\tLinkedHashSet<Person> people = new LinkedHashSet<>();\n+\t\t\n+\t\tLuceneQuery<PersonName> luceneQuery = personLuceneQuery.getSoundexPersonNameQuery(query, birthyear, false, gender);;\n+\t\tListPart<Object[]> names = luceneQuery.listPartProjection(0, maxResults, \"person.personId\");\n+\t\tnames.getList().forEach(x -> people.add(getPerson((Integer) x[0])));\n+\t\t\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, matchMode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwODMzNQ==", "bodyText": "What happens when two people search for patients at the same time in different browsers?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r400408335", "createdAt": "2020-03-30T18:35:02Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "diffHunk": "@@ -72,6 +73,121 @@ public void setSessionFactory(SessionFactory sessionFactory) {\n \t\tthis.sessionFactory = sessionFactory;\n \t}\n \t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with one search name given\n+\t * \n+\t * @param name a person should match using soundex representation\n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria \n+\t */\n+\tprivate Set<Person> executeSoundexOnePersonNameQuery(String name, Integer birthyear, boolean includeVoided , String gender) {\n+\t\t// Use the Soundex Search Mode for each query\n+\t\tString matchMode = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE);\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX);\n+\t\t\n+\t\t\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tString query = LuceneQuery.escapeQuery(name);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\tLinkedHashSet<Person> people = new LinkedHashSet<>();\n+\t\t\n+\t\tLuceneQuery<PersonName> luceneQuery = personLuceneQuery.getSoundexPersonNameQuery(query, birthyear, false, gender);;\n+\t\tListPart<Object[]> names = luceneQuery.listPartProjection(0, maxResults, \"person.personId\");\n+\t\tnames.getList().forEach(x -> people.add(getPerson((Integer) x[0])));\n+\t\t\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, matchMode);\n+\t\t\n+\t\treturn people; \n+\t}\n+\t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with two search names given\n+\t * \n+\t * @param name1 firstName to be searched\n+\t * @param name2 last name to be searched \n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria\n+\t */\n+\tprivate Set<Person> executeSoundexTwoPersonNameQuery(String name1, String name2,  Integer birthyear, boolean includeVoided , String gender) {\n+\t\t// Use the Soundex Search Mode for each query\n+\t\tString matchMode = Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE);\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_SOUNDEX);\n+\t\t\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\t\n+\t\t// Execute a search on all names of a person with the given criteria\n+\t\tLuceneQuery<PersonName> luceneQuery = personLuceneQuery.getSoundexPersonNameSearchOnAllNames(name1, name2, 0, false, \"M\");\n+\t\tLinkedHashSet<Person> people = new LinkedHashSet<>();\n+\t\tListPart<Object[]> names = luceneQuery.listPartProjection(0, maxResults, \"person.personId\");\n+\t\tnames.getList().forEach(x -> people.add(getPerson((Integer) x[0])));\n+\t\t\n+\t\tSet<Person> firstNamesMatch = new HashSet<>();\n+\t\tSet<Person> secondNamesMatch = new HashSet<>();\n+\t\tSet<Person> secondNamesMatchFirstName = new HashSet<>();\n+\t\tSet<Person> firstNamesMatchSecondName = new HashSet<>();\n+\t\t\n+\t\t\n+\t\t// Executed Filter Logic: \n+\t\t// People whose first name matches n1 and second part of the name (givenName, familyName, familyName2) matches at least once n2\n+\t\tfirstNamesMatch = execSoundexLuceneQueryByNames(true, name1, birthyear, includeVoided, gender);\n+\t\tsecondNamesMatch = execSoundexLuceneQueryByNames(false, name2, birthyear, includeVoided, gender);\n+\t\t\n+\t\tfirstNamesMatch.retainAll(secondNamesMatch);\n+\t\tpeople.addAll(firstNamesMatch);\n+\t\t\n+\t\t// Executed Filter Logic: \n+\t\t// People who have second part of the name(givenName, familyName, familyName2) matching n2 and n1 (at least once)\n+\t\tsecondNamesMatchFirstName = execSoundexLuceneQueryByNames(false, name1, birthyear, includeVoided, gender);\n+\t\tsecondNamesMatch.retainAll(secondNamesMatchFirstName);\n+\t\tpeople.addAll(secondNamesMatch);\n+\t\tsecondNamesMatch.clear();\n+\t\t\n+\t\t// Executed Filter Logic:\n+\t\t// People who have given_name matching n2, second name matching n1, and another part of second name matching \u201c\u201d\n+\t\tfirstNamesMatchSecondName = execSoundexLuceneQueryByNames(true, name2, birthyear, includeVoided, gender);\n+\t\tsecondNamesMatch = execSoundexLuceneQueryByNames(false, \"\", birthyear, includeVoided, gender);\n+\t\t\n+\t\tfirstNamesMatchSecondName.retainAll(secondNamesMatchFirstName);\n+\t\tfirstNamesMatchSecondName.retainAll(secondNamesMatch);\n+\t\tpeople.addAll(firstNamesMatchSecondName);\n+\t\t\n+\t\tContext.getAdministrationService().setGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE, matchMode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349"}, "originalPosition": 95}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a54a1953af632db5bb21b754bebe02c1aea6349", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/4a54a1953af632db5bb21b754bebe02c1aea6349", "committedDate": "2020-03-28T13:45:57Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "948d5763a809fc8e3316803fda33c6fcf0010bd1", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/948d5763a809fc8e3316803fda33c6fcf0010bd1", "committedDate": "2020-03-30T20:13:36Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "948d5763a809fc8e3316803fda33c6fcf0010bd1", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/948d5763a809fc8e3316803fda33c6fcf0010bd1", "committedDate": "2020-03-30T20:13:36Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "5618482f024500f26b07e06f7b2e1e1b9f5e0fd3", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/5618482f024500f26b07e06f7b2e1e1b9f5e0fd3", "committedDate": "2020-03-31T19:42:35Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5618482f024500f26b07e06f7b2e1e1b9f5e0fd3", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/5618482f024500f26b07e06f7b2e1e1b9f5e0fd3", "committedDate": "2020-03-31T19:42:35Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "d31bd4fb8c250826437e487bb906b7e1e3ebfa70", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/d31bd4fb8c250826437e487bb906b7e1e3ebfa70", "committedDate": "2020-03-31T20:05:30Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d31bd4fb8c250826437e487bb906b7e1e3ebfa70", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/d31bd4fb8c250826437e487bb906b7e1e3ebfa70", "committedDate": "2020-03-31T20:05:30Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "ae619c234743f0d8ab298693cce1e2abb1226c4b", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/ae619c234743f0d8ab298693cce1e2abb1226c4b", "committedDate": "2020-03-31T20:15:19Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae619c234743f0d8ab298693cce1e2abb1226c4b", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/ae619c234743f0d8ab298693cce1e2abb1226c4b", "committedDate": "2020-03-31T20:15:19Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "b40cf43f3cbf6881479fa66426f7399f48bedd0b", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/b40cf43f3cbf6881479fa66426f7399f48bedd0b", "committedDate": "2020-04-04T12:17:13Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b40cf43f3cbf6881479fa66426f7399f48bedd0b", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/b40cf43f3cbf6881479fa66426f7399f48bedd0b", "committedDate": "2020-04-04T12:17:13Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "8940c8db4cd055dbe5f9eeb59e6c08bd654bfd28", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/8940c8db4cd055dbe5f9eeb59e6c08bd654bfd28", "committedDate": "2020-04-04T12:20:01Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "babe8a15ad4f865671dedbb61caff242a4022f20", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/babe8a15ad4f865671dedbb61caff242a4022f20", "committedDate": "2020-04-14T22:34:21Z", "message": "Merge conflict"}, "afterCommit": {"oid": "e82b6f645eea4d22c6a35296732be5db4ea1a64b", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/e82b6f645eea4d22c6a35296732be5db4ea1a64b", "committedDate": "2020-04-14T22:45:11Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e82b6f645eea4d22c6a35296732be5db4ea1a64b", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/e82b6f645eea4d22c6a35296732be5db4ea1a64b", "committedDate": "2020-04-14T22:45:11Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "4a652c81d2620eb4a572ade4d6ed754a4f3b3562", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/4a652c81d2620eb4a572ade4d6ed754a4f3b3562", "committedDate": "2020-04-14T22:49:32Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a652c81d2620eb4a572ade4d6ed754a4f3b3562", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/4a652c81d2620eb4a572ade4d6ed754a4f3b3562", "committedDate": "2020-04-14T22:49:32Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "e875b7254033dd45985c6f748d92c857b5f96091", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/e875b7254033dd45985c6f748d92c857b5f96091", "committedDate": "2020-04-15T13:01:31Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c35f0f8f76ede034021061191792c8a77fdec226", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/c35f0f8f76ede034021061191792c8a77fdec226", "committedDate": "2020-05-09T18:24:32Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "0f9d265483aa349d695abb2fb3941f3a54a30481", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/0f9d265483aa349d695abb2fb3941f3a54a30481", "committedDate": "2020-05-09T18:16:37Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjkzNjc5", "url": "https://github.com/openmrs/openmrs-core/pull/3152#pullrequestreview-417293679", "createdAt": "2020-05-23T17:10:57Z", "commit": {"oid": "0f9d265483aa349d695abb2fb3941f3a54a30481"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNzoxMDo1N1rOGZqawg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNzoxMDo1N1rOGZqawg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2MjU2Mg==", "bodyText": "Remove this", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r429562562", "createdAt": "2020-05-23T17:10:57Z", "author": {"login": "fruether"}, "path": "api/src/main/java/org/openmrs/api/db/hibernate/HibernatePersonDAO.java", "diffHunk": "@@ -72,6 +73,109 @@ public void setSessionFactory(SessionFactory sessionFactory) {\n \t\tthis.sessionFactory = sessionFactory;\n \t}\n \t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with one search name given\n+\t * \n+\t * @param name a person should match using soundex representation\n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria \n+\t */\n+\tprivate Set<Person> executeSoundexOnePersonNameQuery(String name, Integer birthyear, boolean includeVoided , String gender) {\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tString query = LuceneQuery.escapeQuery(name);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\tLinkedHashSet<Person> people = new LinkedHashSet<>();\n+\t\t\n+\t\tLuceneQuery<PersonName> luceneQuery = personLuceneQuery.getSoundexPersonNameQuery(query, birthyear, false, gender);;\n+\t\tListPart<Object[]> names = luceneQuery.listPartProjection(0, maxResults, \"person.personId\");\n+\t\tnames.getList().forEach(x -> people.add(getPerson((Integer) x[0])));\n+\t\t\n+\t\treturn people; \n+\t}\n+\t\n+\t/**\n+\t * This method executes a Lucene search on persons based on the soundex filter with two search names given\n+\t * \n+\t * @param name1 firstName to be searched\n+\t * @param name2 last name to be searched \n+\t * @param birthyear the birthyear the searched person should have \n+\t * @param includeVoided true if voided person should be included \n+\t * @param gender of the person to search for \n+\t * @return the set of Persons that match the search criteria\n+\t */\n+\tprivate Set<Person> executeSoundexTwoPersonNameQuery(String name1, String name2,  Integer birthyear, boolean includeVoided , String gender) {\n+\t\tPersonLuceneQuery personLuceneQuery = new PersonLuceneQuery(sessionFactory);\n+\t\tint maxResults = HibernatePersonDAO.getMaximumSearchResults();\n+\t\t\n+\t\t// Execute a search on all names of a person with the given criteria\n+\t\tLuceneQuery<PersonName> luceneQuery = personLuceneQuery.getSoundexPersonNameSearchOnAllNames(name1, name2, 0, false, \"M\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f9d265483aa349d695abb2fb3941f3a54a30481"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f9d265483aa349d695abb2fb3941f3a54a30481", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/0f9d265483aa349d695abb2fb3941f3a54a30481", "committedDate": "2020-05-09T18:16:37Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "320e92f180ec3dcbf90e3ccc04a89610b47bcc92", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/320e92f180ec3dcbf90e3ccc04a89610b47bcc92", "committedDate": "2020-05-23T18:04:55Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDc4Mzcz", "url": "https://github.com/openmrs/openmrs-core/pull/3152#pullrequestreview-435078373", "createdAt": "2020-06-22T16:15:46Z", "commit": {"oid": "320e92f180ec3dcbf90e3ccc04a89610b47bcc92"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxNTo0N1rOGnHxkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxNTo1OFrOGnHx-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTAyNg==", "bodyText": "As a general rule, we'd actually want to store the resolution of the birth date as a DAY rather than a YEAR (even for the purposes of getSimilarPeople(), the resolution isn't quite a year, but a fuzzy \"3 year period either side of this given year).", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r443675026", "createdAt": "2020-06-22T16:15:47Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/Person.java", "diffHunk": "@@ -59,6 +62,9 @@\n \t@Field\n \tprivate String gender;\n \t\n+\n+\t@Field(analyze = Analyze.YES)\n+\t@DateBridge(encoding = EncodingType.STRING, resolution = Resolution.YEAR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "320e92f180ec3dcbf90e3ccc04a89610b47bcc92"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTEyOQ==", "bodyText": "I can see we do explicitly need a year. If we cannot construct a year query in Lucene, I think we should add a new calculated Lucene-only field of birthyear or something.", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r443675129", "createdAt": "2020-06-22T16:15:58Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/Person.java", "diffHunk": "@@ -59,6 +62,9 @@\n \t@Field\n \tprivate String gender;\n \t\n+\n+\t@Field(analyze = Analyze.YES)\n+\t@DateBridge(encoding = EncodingType.STRING, resolution = Resolution.YEAR)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTAyNg=="}, "originalCommit": {"oid": "320e92f180ec3dcbf90e3ccc04a89610b47bcc92"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "320e92f180ec3dcbf90e3ccc04a89610b47bcc92", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/320e92f180ec3dcbf90e3ccc04a89610b47bcc92", "committedDate": "2020-05-23T18:04:55Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "d55aaba6322a3a4b63fc212f41ab077560792944", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/d55aaba6322a3a4b63fc212f41ab077560792944", "committedDate": "2020-07-02T19:28:06Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTY3NDA4", "url": "https://github.com/openmrs/openmrs-core/pull/3152#pullrequestreview-441967408", "createdAt": "2020-07-02T19:30:00Z", "commit": {"oid": "d55aaba6322a3a4b63fc212f41ab077560792944"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTozMDowMFrOGsak1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTozMDowMFrOGsak1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyNTk0Mg==", "bodyText": "@ibacher I changed it to DAY and it is still working as expected. Is this concern of yours then adressed?", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r449225942", "createdAt": "2020-07-02T19:30:00Z", "author": {"login": "fruether"}, "path": "api/src/main/java/org/openmrs/Person.java", "diffHunk": "@@ -59,6 +62,9 @@\n \t@Field\n \tprivate String gender;\n \t\n+\n+\t@Field(analyze = Analyze.YES)\n+\t@DateBridge(encoding = EncodingType.STRING, resolution = Resolution.DAY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d55aaba6322a3a4b63fc212f41ab077560792944"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ff71accd7f035964ca0c7506a21556e3b30eced", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/2ff71accd7f035964ca0c7506a21556e3b30eced", "committedDate": "2020-07-19T21:03:08Z", "message": "merge"}, "afterCommit": {"oid": "411f20b1f6d39c0f163ceb6957e485d16540b70a", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/411f20b1f6d39c0f163ceb6957e485d16540b70a", "committedDate": "2020-07-19T21:09:40Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "411f20b1f6d39c0f163ceb6957e485d16540b70a", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/411f20b1f6d39c0f163ceb6957e485d16540b70a", "committedDate": "2020-07-19T21:09:40Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "f0c1d406444d7c2c3cee2bd4d34400f772feaf8e", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/f0c1d406444d7c2c3cee2bd4d34400f772feaf8e", "committedDate": "2020-07-19T21:12:13Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0c1d406444d7c2c3cee2bd4d34400f772feaf8e", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/f0c1d406444d7c2c3cee2bd4d34400f772feaf8e", "committedDate": "2020-07-19T21:12:13Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "396e27314431bec52bed4de8c88f9ce24799b921", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/396e27314431bec52bed4de8c88f9ce24799b921", "committedDate": "2020-07-19T21:21:51Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47c8cd95f66a320ae153b27a61e05a4f7b239e34", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/47c8cd95f66a320ae153b27a61e05a4f7b239e34", "committedDate": "2020-07-19T21:23:19Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "396e27314431bec52bed4de8c88f9ce24799b921", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/396e27314431bec52bed4de8c88f9ce24799b921", "committedDate": "2020-07-19T21:21:51Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}, "afterCommit": {"oid": "47c8cd95f66a320ae153b27a61e05a4f7b239e34", "author": {"user": null}, "url": "https://github.com/openmrs/openmrs-core/commit/47c8cd95f66a320ae153b27a61e05a4f7b239e34", "committedDate": "2020-07-19T21:23:19Z", "message": "TRUNK-5724: Refactor getSimilarPeople to use Lucene"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc1c1ef9e1604c59923b7219aa60a042929aa0d", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-core/commit/2dc1c1ef9e1604c59923b7219aa60a042929aa0d", "committedDate": "2020-07-20T12:36:04Z", "message": "Remove unnecessary whitespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "196237256eb477db3f659c8167ea093940e4a76d", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-core/commit/196237256eb477db3f659c8167ea093940e4a76d", "committedDate": "2020-07-20T12:37:41Z", "message": "Normalise whitespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e65aff2cbdb25a89422b3c2ed841fbf9b9d4a174", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-core/commit/e65aff2cbdb25a89422b3c2ed841fbf9b9d4a174", "committedDate": "2020-07-20T12:39:14Z", "message": "Modify indentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNTYxNzEz", "url": "https://github.com/openmrs/openmrs-core/pull/3152#pullrequestreview-451561713", "createdAt": "2020-07-20T12:32:07Z", "commit": {"oid": "47c8cd95f66a320ae153b27a61e05a4f7b239e34"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjozMjowOFrOG0JzBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMjozMjowOFrOG0JzBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMzOTY1Mw==", "bodyText": "That should be fine. Thanks!", "url": "https://github.com/openmrs/openmrs-core/pull/3152#discussion_r457339653", "createdAt": "2020-07-20T12:32:08Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/Person.java", "diffHunk": "@@ -59,6 +62,9 @@\n \t@Field\n \tprivate String gender;\n \t\n+\n+\t@Field(analyze = Analyze.YES)\n+\t@DateBridge(encoding = EncodingType.STRING, resolution = Resolution.DAY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIyNTk0Mg=="}, "originalCommit": {"oid": "d55aaba6322a3a4b63fc212f41ab077560792944"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4972, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}