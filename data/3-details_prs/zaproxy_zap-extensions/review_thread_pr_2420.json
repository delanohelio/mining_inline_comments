{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MjE1Njc4", "number": 2420, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjo1MTozN1rOECI6MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDowMDoyMVrOEC98hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjc4NTc3OnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromFileDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjo1MTozN1rOGeaWuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzoyMDozMFrOGebdrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MjI2Nw==", "bodyText": "Is this still a TODO? If so some more details might help you remember whats TODO in the future ;)", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r434542267", "createdAt": "2020-06-03T12:51:37Z", "author": {"login": "psiinon"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromFileDialog.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.awt.GridBagConstraints;\n+import java.io.IOException;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.view.View;\n+\n+public class ImportFromFileDialog extends ImportFromAbstractDialog {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final String MESSAGE_PREFIX = \"graphql.importfromfiledialog.\";\n+\n+    private JButton buttonChooseFile;\n+\n+    public ImportFromFileDialog(JFrame parent, ExtensionGraphQl caller) {\n+        super(\n+                parent,\n+                caller,\n+                Constant.messages.getString(MESSAGE_PREFIX + \"title\"),\n+                Constant.messages.getString(MESSAGE_PREFIX + \"labelfile\"));\n+    }\n+\n+    @Override\n+    protected void addFromFields(GridBagConstraints constraints) {\n+        constraints.gridwidth = 2;\n+        super.addFromFields(constraints);\n+\n+        constraints.gridx = 3;\n+        constraints.gridwidth = 1;\n+        add(getButtonChooseFile(), constraints);\n+    }\n+\n+    private JButton getButtonChooseFile() {\n+        if (buttonChooseFile == null) {\n+            buttonChooseFile =\n+                    new JButton(Constant.messages.getString(MESSAGE_PREFIX + \"choosefilebutton\"));\n+\n+            buttonChooseFile.addActionListener(\n+                    e -> {\n+                        JFileChooser filechooser =\n+                                new JFileChooser(\n+                                        Model.getSingleton().getOptionsParam().getUserDirectory());\n+                        int state = filechooser.showOpenDialog(View.getSingleton().getMainFrame());\n+                        if (state == JFileChooser.APPROVE_OPTION) {\n+                            try {\n+                                getFromField()\n+                                        .setText(filechooser.getSelectedFile().getCanonicalPath());\n+                                Model.getSingleton()\n+                                        .getOptionsParam()\n+                                        .setUserDirectory(filechooser.getCurrentDirectory());\n+                            } catch (IOException ex) {\n+                                showWarningDialog(\n+                                        Constant.messages.getString(MESSAGE_PREFIX + \"badfile\"));\n+                            }\n+                        }\n+                    });\n+        }\n+        return buttonChooseFile;\n+    }\n+\n+    @Override\n+    protected boolean importDefinition() {\n+        // Import and parse schema if file path is provided\n+        if (!getFromField().getText().isEmpty()) {\n+            // TO DO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454fcd82a3a7e85cb49d3c2d01625b5f21086250"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MDQyOQ==", "bodyText": "Yes it is. Updated :).", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r434560429", "createdAt": "2020-06-03T13:20:30Z", "author": {"login": "ricekot"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromFileDialog.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.awt.GridBagConstraints;\n+import java.io.IOException;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.view.View;\n+\n+public class ImportFromFileDialog extends ImportFromAbstractDialog {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final String MESSAGE_PREFIX = \"graphql.importfromfiledialog.\";\n+\n+    private JButton buttonChooseFile;\n+\n+    public ImportFromFileDialog(JFrame parent, ExtensionGraphQl caller) {\n+        super(\n+                parent,\n+                caller,\n+                Constant.messages.getString(MESSAGE_PREFIX + \"title\"),\n+                Constant.messages.getString(MESSAGE_PREFIX + \"labelfile\"));\n+    }\n+\n+    @Override\n+    protected void addFromFields(GridBagConstraints constraints) {\n+        constraints.gridwidth = 2;\n+        super.addFromFields(constraints);\n+\n+        constraints.gridx = 3;\n+        constraints.gridwidth = 1;\n+        add(getButtonChooseFile(), constraints);\n+    }\n+\n+    private JButton getButtonChooseFile() {\n+        if (buttonChooseFile == null) {\n+            buttonChooseFile =\n+                    new JButton(Constant.messages.getString(MESSAGE_PREFIX + \"choosefilebutton\"));\n+\n+            buttonChooseFile.addActionListener(\n+                    e -> {\n+                        JFileChooser filechooser =\n+                                new JFileChooser(\n+                                        Model.getSingleton().getOptionsParam().getUserDirectory());\n+                        int state = filechooser.showOpenDialog(View.getSingleton().getMainFrame());\n+                        if (state == JFileChooser.APPROVE_OPTION) {\n+                            try {\n+                                getFromField()\n+                                        .setText(filechooser.getSelectedFile().getCanonicalPath());\n+                                Model.getSingleton()\n+                                        .getOptionsParam()\n+                                        .setUserDirectory(filechooser.getCurrentDirectory());\n+                            } catch (IOException ex) {\n+                                showWarningDialog(\n+                                        Constant.messages.getString(MESSAGE_PREFIX + \"badfile\"));\n+                            }\n+                        }\n+                    });\n+        }\n+        return buttonChooseFile;\n+    }\n+\n+    @Override\n+    protected boolean importDefinition() {\n+        // Import and parse schema if file path is provided\n+        if (!getFromField().getText().isEmpty()) {\n+            // TO DO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MjI2Nw=="}, "originalCommit": {"oid": "454fcd82a3a7e85cb49d3c2d01625b5f21086250"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjc4NjkxOnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromUrlDialog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjo1MTo1NVrOGeaXcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjo1MTo1NVrOGeaXcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MjQ1MQ==", "bodyText": "Ditto", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r434542451", "createdAt": "2020-06-03T12:51:55Z", "author": {"login": "psiinon"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromUrlDialog.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import javax.swing.JFrame;\n+import org.parosproxy.paros.Constant;\n+\n+public class ImportFromUrlDialog extends ImportFromAbstractDialog {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final String MESSAGE_PREFIX = \"graphql.importfromurldialog.\";\n+\n+    public ImportFromUrlDialog(JFrame parent, ExtensionGraphQl caller) {\n+        super(\n+                parent,\n+                caller,\n+                Constant.messages.getString(MESSAGE_PREFIX + \"title\"),\n+                Constant.messages.getString(MESSAGE_PREFIX + \"labelurl\"));\n+    }\n+\n+    @Override\n+    protected boolean importDefinition() {\n+        // Import and parse schema if schema URL is provided\n+        if (!getFromField().getText().isEmpty()) {\n+            if (validateUrl(getFromField())) {\n+                // TO DO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454fcd82a3a7e85cb49d3c2d01625b5f21086250"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTI5MzYzOnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxMzo0MVrOGft8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoxMzo0MVrOGft8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMTg2MA==", "bodyText": "I believe this can simply be this instead of Class.this? (Same below)", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r435911860", "createdAt": "2020-06-05T13:13:41Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -66,11 +66,8 @@ private ZapMenuItem getMenuImportLocalGraphQl() {\n                     Constant.messages.getString(\"graphql.topmenu.import.importgraphql.tooltip\"));\n             menuImportLocalGraphQl.addActionListener(\n                     e ->\n-                            View.getSingleton()\n-                                    .showMessageDialog(\n-                                            Constant.messages.getString(\n-                                                    \"graphql.importfromdialog.message\")));\n-            ;\n+                            new ImportFromFileDialog(\n+                                    View.getSingleton().getMainFrame(), ExtensionGraphQl.this));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f5dc0b87d53879d3765c0990db40ff73ff9c40"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTMxNjQ2OnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzoyMDoyMlrOGfuK9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToyODoyNFrOGf6vkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNTUxMA==", "bodyText": "addPath needs to be done in the Event Dispatch Thread (this PR might help secdec/attack-surface-detector-zap#14). addHistory doesn't need to be done in EDT but can't hurt.\nThis class will probably be used by the API so it might be worth wrapping the site tree addition in a view check.", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r435915510", "createdAt": "2020-06-05T13:20:22Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.awt.EventQueue;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.history.ExtensionHistory;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+\n+public class GraphQlParser {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+\n+    public static void persistMessage(final HttpMessage message) {\n+        // Add the message to the history panel and sites tree\n+        final HistoryReference historyRef;\n+\n+        try {\n+            historyRef =\n+                    new HistoryReference(\n+                            Model.getSingleton().getSession(),\n+                            HistoryReference.TYPE_ZAP_USER,\n+                            message);\n+        } catch (Exception e) {\n+            LOG.error(e.getMessage(), e);\n+            return;\n+        }\n+\n+        final ExtensionHistory extHistory =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class);\n+        if (extHistory != null) {\n+            EventQueue.invokeLater(\n+                    new Runnable() {\n+\n+                        @Override\n+                        public void run() {\n+                            extHistory.addHistory(historyRef);\n+                            Model.getSingleton()\n+                                    .getSession()\n+                                    .getSiteTree()\n+                                    .addPath(historyRef, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f5dc0b87d53879d3765c0990db40ff73ff9c40"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0MzY0Nw==", "bodyText": "There's a core method ThreadUtils#invokeAndWait that handles that (it's synchronous but this methods should be as well?).", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r435943647", "createdAt": "2020-06-05T14:02:45Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.awt.EventQueue;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.history.ExtensionHistory;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+\n+public class GraphQlParser {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+\n+    public static void persistMessage(final HttpMessage message) {\n+        // Add the message to the history panel and sites tree\n+        final HistoryReference historyRef;\n+\n+        try {\n+            historyRef =\n+                    new HistoryReference(\n+                            Model.getSingleton().getSession(),\n+                            HistoryReference.TYPE_ZAP_USER,\n+                            message);\n+        } catch (Exception e) {\n+            LOG.error(e.getMessage(), e);\n+            return;\n+        }\n+\n+        final ExtensionHistory extHistory =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class);\n+        if (extHistory != null) {\n+            EventQueue.invokeLater(\n+                    new Runnable() {\n+\n+                        @Override\n+                        public void run() {\n+                            extHistory.addHistory(historyRef);\n+                            Model.getSingleton()\n+                                    .getSession()\n+                                    .getSiteTree()\n+                                    .addPath(historyRef, message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNTUxMA=="}, "originalCommit": {"oid": "29f5dc0b87d53879d3765c0990db40ff73ff9c40"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMTQ4OQ==", "bodyText": "I used invokeAndWait to do addPath in the EDT, but getting this error: Exception in thread \"AWT-EventQueue-0\"java.lang.Error: Cannot call invokeAndWait from the event dispatcher thread. It seems that it is already in the EDT, so there is no need to use invokeAndWait... What should be done instead?", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r436121489", "createdAt": "2020-06-05T19:28:24Z", "author": {"login": "ricekot"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.awt.EventQueue;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.history.ExtensionHistory;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+\n+public class GraphQlParser {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+\n+    public static void persistMessage(final HttpMessage message) {\n+        // Add the message to the history panel and sites tree\n+        final HistoryReference historyRef;\n+\n+        try {\n+            historyRef =\n+                    new HistoryReference(\n+                            Model.getSingleton().getSession(),\n+                            HistoryReference.TYPE_ZAP_USER,\n+                            message);\n+        } catch (Exception e) {\n+            LOG.error(e.getMessage(), e);\n+            return;\n+        }\n+\n+        final ExtensionHistory extHistory =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class);\n+        if (extHistory != null) {\n+            EventQueue.invokeLater(\n+                    new Runnable() {\n+\n+                        @Override\n+                        public void run() {\n+                            extHistory.addHistory(historyRef);\n+                            Model.getSingleton()\n+                                    .getSession()\n+                                    .getSiteTree()\n+                                    .addPath(historyRef, message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxNTUxMA=="}, "originalCommit": {"oid": "29f5dc0b87d53879d3765c0990db40ff73ff9c40"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTQ2NzUyOnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo1OTowMlrOGfvsRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo1OTowMlrOGfvsRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0MDQyMg==", "bodyText": "parse?", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r435940422", "createdAt": "2020-06-05T13:59:02Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.awt.EventQueue;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.history.ExtensionHistory;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+\n+public class GraphQlParser {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+\n+    public static void persistMessage(final HttpMessage message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f5dc0b87d53879d3765c0990db40ff73ff9c40"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTQ2ODkwOnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromFileDialog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo1OToxOFrOGfvtKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo1OToxOFrOGfvtKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0MDY1MQ==", "bodyText": "These comments should not be needed, code is clear.", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r435940651", "createdAt": "2020-06-05T13:59:18Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromFileDialog.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.awt.GridBagConstraints;\n+import java.io.IOException;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.view.View;\n+\n+public class ImportFromFileDialog extends ImportFromAbstractDialog {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final String MESSAGE_PREFIX = \"graphql.importfromfiledialog.\";\n+\n+    private JButton buttonChooseFile;\n+\n+    public ImportFromFileDialog(JFrame parent, ExtensionGraphQl caller) {\n+        super(\n+                parent,\n+                caller,\n+                Constant.messages.getString(MESSAGE_PREFIX + \"title\"),\n+                Constant.messages.getString(MESSAGE_PREFIX + \"labelfile\"));\n+    }\n+\n+    @Override\n+    protected void addFromFields(GridBagConstraints constraints) {\n+        constraints.gridwidth = 2;\n+        super.addFromFields(constraints);\n+\n+        constraints.gridx = 3;\n+        constraints.gridwidth = 1;\n+        add(getButtonChooseFile(), constraints);\n+    }\n+\n+    private JButton getButtonChooseFile() {\n+        if (buttonChooseFile == null) {\n+            buttonChooseFile =\n+                    new JButton(Constant.messages.getString(MESSAGE_PREFIX + \"choosefilebutton\"));\n+\n+            buttonChooseFile.addActionListener(\n+                    e -> {\n+                        JFileChooser filechooser =\n+                                new JFileChooser(\n+                                        Model.getSingleton().getOptionsParam().getUserDirectory());\n+                        int state = filechooser.showOpenDialog(View.getSingleton().getMainFrame());\n+                        if (state == JFileChooser.APPROVE_OPTION) {\n+                            try {\n+                                getFromField()\n+                                        .setText(filechooser.getSelectedFile().getCanonicalPath());\n+                                Model.getSingleton()\n+                                        .getOptionsParam()\n+                                        .setUserDirectory(filechooser.getCurrentDirectory());\n+                            } catch (IOException ex) {\n+                                showWarningDialog(\n+                                        Constant.messages.getString(MESSAGE_PREFIX + \"badfile\"));\n+                            }\n+                        }\n+                    });\n+        }\n+        return buttonChooseFile;\n+    }\n+\n+    @Override\n+    protected boolean importDefinition() {\n+        // Import and parse schema if file path is provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f5dc0b87d53879d3765c0990db40ff73ff9c40"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTQ3MDk2OnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromFileDialog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo1OTo0MVrOGfvulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo1OTo0MVrOGfvulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0MTAxNQ==", "bodyText": "We should require the file, if the user wants to import from URL it can use the other dialogue.", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r435941015", "createdAt": "2020-06-05T13:59:41Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromFileDialog.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.awt.GridBagConstraints;\n+import java.io.IOException;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.view.View;\n+\n+public class ImportFromFileDialog extends ImportFromAbstractDialog {\n+\n+    private static final long serialVersionUID = 1L;\n+    private static final String MESSAGE_PREFIX = \"graphql.importfromfiledialog.\";\n+\n+    private JButton buttonChooseFile;\n+\n+    public ImportFromFileDialog(JFrame parent, ExtensionGraphQl caller) {\n+        super(\n+                parent,\n+                caller,\n+                Constant.messages.getString(MESSAGE_PREFIX + \"title\"),\n+                Constant.messages.getString(MESSAGE_PREFIX + \"labelfile\"));\n+    }\n+\n+    @Override\n+    protected void addFromFields(GridBagConstraints constraints) {\n+        constraints.gridwidth = 2;\n+        super.addFromFields(constraints);\n+\n+        constraints.gridx = 3;\n+        constraints.gridwidth = 1;\n+        add(getButtonChooseFile(), constraints);\n+    }\n+\n+    private JButton getButtonChooseFile() {\n+        if (buttonChooseFile == null) {\n+            buttonChooseFile =\n+                    new JButton(Constant.messages.getString(MESSAGE_PREFIX + \"choosefilebutton\"));\n+\n+            buttonChooseFile.addActionListener(\n+                    e -> {\n+                        JFileChooser filechooser =\n+                                new JFileChooser(\n+                                        Model.getSingleton().getOptionsParam().getUserDirectory());\n+                        int state = filechooser.showOpenDialog(View.getSingleton().getMainFrame());\n+                        if (state == JFileChooser.APPROVE_OPTION) {\n+                            try {\n+                                getFromField()\n+                                        .setText(filechooser.getSelectedFile().getCanonicalPath());\n+                                Model.getSingleton()\n+                                        .getOptionsParam()\n+                                        .setUserDirectory(filechooser.getCurrentDirectory());\n+                            } catch (IOException ex) {\n+                                showWarningDialog(\n+                                        Constant.messages.getString(MESSAGE_PREFIX + \"badfile\"));\n+                            }\n+                        }\n+                    });\n+        }\n+        return buttonChooseFile;\n+    }\n+\n+    @Override\n+    protected boolean importDefinition() {\n+        // Import and parse schema if file path is provided\n+        if (!getFromField().getText().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f5dc0b87d53879d3765c0990db40ff73ff9c40"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTQ3NTI3OnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/Introspection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDowMDoyMVrOGfvxPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDowMDoyMVrOGfvxPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0MTY5NQ==", "bodyText": "Move to GraphQlParser? (e.g. GraphQlParser#parse(URI)`)", "url": "https://github.com/zaproxy/zap-extensions/pull/2420#discussion_r435941695", "createdAt": "2020-06-05T14:00:21Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/Introspection.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpSender;\n+\n+public class Introspection {\n+    private static final Logger LOG = Logger.getLogger(Introspection.class);\n+\n+    public static void sendIntrospectionQuery(URI uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f5dc0b87d53879d3765c0990db40ff73ff9c40"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 695, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}