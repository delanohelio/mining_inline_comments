{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDA3ODY4", "number": 2669, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoxNDoxMFrOFJqU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToyMzowOVrOFS3nxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc0OTkwOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/PopupMenuEvidence.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoxNDoxMFrOIMFeJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoxNDoxMFrOIMFeJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0MzQ2Mg==", "bodyText": "I'm not sure this is going to work properly, I suspect that too many messages will be matched because the assembled property pattern won't match as specifically as the whole DOM selector.\nNote I haven't tested IRL, that's just based on reading.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549543462", "createdAt": "2020-12-29T02:14:10Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/PopupMenuEvidence.java", "diffHunk": "@@ -75,6 +75,23 @@ public boolean isEnableForComponent(Component invoker) {\n                         addMenuItem(p, ExtensionSearch.Type.Response);\n                     }\n                 }\n+                for (Map<String, Map<String, Map<String, AppPattern>>> map : app.getDom()) {\n+                    for (Map.Entry<String, Map<String, Map<String, AppPattern>>> ap :\n+                            map.entrySet()) {\n+                        for (Map.Entry<String, Map<String, AppPattern>> p :\n+                                ap.getValue().entrySet()) {\n+                            for (Map.Entry<String, AppPattern> pa : p.getValue().entrySet()) {\n+                                Pattern pat =\n+                                        Pattern.compile(\n+                                                pa.getKey()\n+                                                        + \".*\"\n+                                                        + pa.getValue().getJavaPattern().pattern());\n+                                addMenuItem(pat, ExtensionSearch.Type.Response);\n+                            }\n+                        }\n+                    }\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc1NzIxOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoyMDowNFrOIMFh8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoyMDowNFrOIMFh8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDQzMg==", "bodyText": "Please restore this to not use a wildcard import.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549544432", "createdAt": "2020-12-29T02:20:04Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -19,14 +19,14 @@\n  */\n package org.zaproxy.zap.extension.wappalyzer;\n \n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc1ODAxOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoyMDo1N1rOIMFiXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMDoyMzozNFrOIUso4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDU0MA==", "bodyText": "It would be better to pass in HttpMessage msg, then use msg.getResponseBody().toString().", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549544540", "createdAt": "2020-12-29T02:20:57Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +166,38 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(Source source) {\n+        Document doc = Jsoup.parse(String.valueOf(source));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3Mzc5Mg==", "bodyText": "This wasn't changed, or was reverted at some point. Source is a jericho class, it's already derived from the msg. Since we're specifically not using jericho here I believe it makes more sense to pass the message and access the body's toString method. Ex:\n    private void checkDomElementMatches(HttpMessage message) {\n        Document doc = Jsoup.parse(message.getResponseBody().toString());", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r558573792", "createdAt": "2021-01-15T20:23:34Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +166,38 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(Source source) {\n+        Document doc = Jsoup.parse(String.valueOf(source));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDU0MA=="}, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc2MTQ2OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoyNDowMVrOIMFkFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoyNDowMVrOIMFkFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NDk4MQ==", "bodyText": "Could you make the variable names a bit more meaningful here? Ex:\n\nmap \u27a1\ufe0f domSelectorMap\nlink & links \u27a1\ufe0f selectedElement & selectedElements\netc", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549544981", "createdAt": "2020-12-29T02:24:01Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +166,38 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(Source source) {\n+        Document doc = Jsoup.parse(String.valueOf(source));\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> map : currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> ap : map.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> p : ap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> pa : p.getValue().entrySet()) {\n+                        Elements links = doc.select(ap.getKey());\n+                        for (org.jsoup.nodes.Element link : links) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc2MTk2OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoyNDoyNFrOIMFkUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjoyNDoyNFrOIMFkUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NTA0Mg==", "bodyText": "Can be removed?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549545042", "createdAt": "2020-12-29T02:24:24Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "diffHunk": "@@ -50,6 +50,8 @@ public void shouldParseExample() {\n         assertEquals(2, app.getScript().size());\n         assertEquals(0, app.getMetas().size());\n         assertEquals(0, app.getImplies().size());\n+        assertEquals(2, app.getDom().size());\n+        // app.getDom();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc3MjA0OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjozMzoyNVrOIMFpmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjozMzoyNVrOIMFpmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NjM5NA==", "bodyText": "Throughout, could you remove the blank lines leading the comments?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549546394", "createdAt": "2020-12-29T02:33:25Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "diffHunk": "@@ -113,6 +113,56 @@ public void shouldNotMatchScriptElementContentIfNotOnScriptElement()\n         assertNull(getDefaultHolder().getAppsForSite(\"https://www.example.com\"));\n     }\n \n+    @Test\n+    public void shouldMatchDomElementWithText() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc4MDkxOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0MDoyNFrOIMFuAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0MDoyNFrOIMFuAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NzUyMg==", "bodyText": "If the pattern selector defines both, shouldn't both be required for a match?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549547522", "createdAt": "2020-12-29T02:40:24Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "diffHunk": "@@ -113,6 +113,56 @@ public void shouldNotMatchScriptElementContentIfNotOnScriptElement()\n         assertNull(getDefaultHolder().getAppsForSite(\"https://www.example.com\"));\n     }\n \n+    @Test\n+    public void shouldMatchDomElementWithText() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When\n+        scan(msg);\n+\n+        // Then\n+        assertFoundAppCount(\"https://www.example.com\", 1);\n+        assertFoundApp(\"https://www.example.com\", \"Test Entry\");\n+    }\n+\n+    @Test\n+    public void shouldMatchDomElementWithAttribute() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version 1\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When\n+        scan(msg);\n+\n+        // Then\n+        assertFoundAppCount(\"https://www.example.com\", 1);\n+        assertFoundApp(\"https://www.example.com\", \"Test Entry\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc4MTc3OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0MToxOVrOIMFueg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0MToxOVrOIMFueg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0NzY0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldNotMatchDomElement() throws HttpMalformedHeaderException {\n          \n          \n            \n                public void shouldNotMatchDomElementIfNoContentMatches() throws HttpMalformedHeaderException {", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549547642", "createdAt": "2020-12-29T02:41:19Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "diffHunk": "@@ -113,6 +113,56 @@ public void shouldNotMatchScriptElementContentIfNotOnScriptElement()\n         assertNull(getDefaultHolder().getAppsForSite(\"https://www.example.com\"));\n     }\n \n+    @Test\n+    public void shouldMatchDomElementWithText() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When\n+        scan(msg);\n+\n+        // Then\n+        assertFoundAppCount(\"https://www.example.com\", 1);\n+        assertFoundApp(\"https://www.example.com\", \"Test Entry\");\n+    }\n+\n+    @Test\n+    public void shouldMatchDomElementWithAttribute() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = makeHttpMessage();\n+        msg.setResponseBody(\n+                \"<html><body>\"\n+                        + \"<a href=\\\"https://www.example.com\\\" title=\\\"version 1\\\" style=\\\"border: 5px groove rgb(244, 250, 88);\\\">Example</a>\"\n+                        + \"</body></html>\");\n+\n+        // When\n+        scan(msg);\n+\n+        // Then\n+        assertFoundAppCount(\"https://www.example.com\", 1);\n+        assertFoundApp(\"https://www.example.com\", \"Test Entry\");\n+    }\n+\n+    @Test\n+    public void shouldNotMatchDomElement() throws HttpMalformedHeaderException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc4MzUxOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0MzowOVrOIMFvdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0MzowOVrOIMFvdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0Nzg5NQ==", "bodyText": "Could you make the variable names in here a bit more meaningful as well?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549547895", "createdAt": "2020-12-29T02:43:09Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +283,73 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc4NTEzOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0NDozMVrOIMFwTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0NDozMVrOIMFwTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0ODEwOA==", "bodyText": "This seems to be unused.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549548108", "createdAt": "2020-12-29T02:44:31Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -58,6 +58,8 @@\n     private final PatternErrorHandler patternErrorHandler;\n     private final ParsingExceptionHandler parsingExceptionHandler;\n \n+    private org.jsoup.nodes.Element javaelement;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1Njc5MDcxOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0ODo0MFrOIMFy9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMjo0ODo0MFrOIMFy9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0ODc4OQ==", "bodyText": "This should be moved up to line 7, under the \"Unreleased\" heading, as:\n### Added\n- Support for DOM patterns, aligning with the upstream project (Issue 6180).", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549548789", "createdAt": "2020-12-29T02:48:40Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/CHANGELOG.md", "diffHunk": "@@ -15,6 +15,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n \n ### Added\n - Added support for CSS patterns, aligning with upstream project.\n+- Added support for Dom patterns.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzU0ODExOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/wappalyzer.gradle.kts", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDoyNToxMFrOIMMEdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNjoyNjoxOFrOIMwrXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MTU3Mg==", "bodyText": "Is this really needed? The WappalyzerPassiveScanner is already using Jericho to parse the contents.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549651572", "createdAt": "2020-12-29T10:25:10Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/wappalyzer.gradle.kts", "diffHunk": "@@ -38,5 +38,7 @@ dependencies {\n     implementation(\"org.apache.xmlgraphics:batik-gvt:$batikVersion\")\n     implementation(\"org.apache.xmlgraphics:batik-util:$batikVersion\")\n \n+    implementation(\"org.jsoup:jsoup:1.13.1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2MDQ5OA==", "bodyText": "Jericho lacks jquery-like selector capabilities that's why I used Jsoup.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549660498", "createdAt": "2020-12-29T10:54:15Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/wappalyzer.gradle.kts", "diffHunk": "@@ -38,5 +38,7 @@ dependencies {\n     implementation(\"org.apache.xmlgraphics:batik-gvt:$batikVersion\")\n     implementation(\"org.apache.xmlgraphics:batik-util:$batikVersion\")\n \n+    implementation(\"org.jsoup:jsoup:1.13.1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MTU3Mg=="}, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2NDUxNw==", "bodyText": "OK, this should be mentioned in the commit message, otherwise going forward one has to wonder why the add-on is using two parsing libraries.\nThere's jericho-selector library that provides that, although does not seem to be maintained anymore.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549664517", "createdAt": "2020-12-29T11:07:57Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/wappalyzer.gradle.kts", "diffHunk": "@@ -38,5 +38,7 @@ dependencies {\n     implementation(\"org.apache.xmlgraphics:batik-gvt:$batikVersion\")\n     implementation(\"org.apache.xmlgraphics:batik-util:$batikVersion\")\n \n+    implementation(\"org.jsoup:jsoup:1.13.1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MTU3Mg=="}, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1OTgyMw==", "bodyText": "OK, I have updated the commit message.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549759823", "createdAt": "2020-12-29T16:06:48Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/wappalyzer.gradle.kts", "diffHunk": "@@ -38,5 +38,7 @@ dependencies {\n     implementation(\"org.apache.xmlgraphics:batik-gvt:$batikVersion\")\n     implementation(\"org.apache.xmlgraphics:batik-util:$batikVersion\")\n \n+    implementation(\"org.jsoup:jsoup:1.13.1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MTU3Mg=="}, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEyODMzMg==", "bodyText": "None of the commit messages mention that yet.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550128332", "createdAt": "2020-12-30T10:37:52Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/wappalyzer.gradle.kts", "diffHunk": "@@ -38,5 +38,7 @@ dependencies {\n     implementation(\"org.apache.xmlgraphics:batik-gvt:$batikVersion\")\n     implementation(\"org.apache.xmlgraphics:batik-util:$batikVersion\")\n \n+    implementation(\"org.jsoup:jsoup:1.13.1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MTU3Mg=="}, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MTM1Nw==", "bodyText": "I will add it to the latest commit", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550251357", "createdAt": "2020-12-30T16:26:18Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/wappalyzer.gradle.kts", "diffHunk": "@@ -38,5 +38,7 @@ dependencies {\n     implementation(\"org.apache.xmlgraphics:batik-gvt:$batikVersion\")\n     implementation(\"org.apache.xmlgraphics:batik-util:$batikVersion\")\n \n+    implementation(\"org.jsoup:jsoup:1.13.1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1MTU3Mg=="}, "originalCommit": {"oid": "8e8becd7611cff28e26a72b1b2e1392fb68aecfa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODY0Nzg1OnYy", "diffSide": "LEFT", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxODo0NzoxNFrOIMVv1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDowNDoyMFrOIMXBrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDEzMg==", "bodyText": "I just meant the commented line.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549810132", "createdAt": "2020-12-29T18:47:14Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "diffHunk": "@@ -50,8 +50,6 @@ public void shouldParseExample() {\n         assertEquals(2, app.getScript().size());\n         assertEquals(0, app.getMetas().size());\n         assertEquals(0, app.getImplies().size());\n-        assertEquals(2, app.getDom().size());\n-        // app.getDom();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ab49d2cf6df1d31dd3a64443e706a465c97adbf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgzMTA4NQ==", "bodyText": "Made changes in the previous commit itself.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549831085", "createdAt": "2020-12-29T20:04:20Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "diffHunk": "@@ -50,8 +50,6 @@ public void shouldParseExample() {\n         assertEquals(2, app.getScript().size());\n         assertEquals(0, app.getMetas().size());\n         assertEquals(0, app.getImplies().size());\n-        assertEquals(2, app.getDom().size());\n-        // app.getDom();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDEzMg=="}, "originalCommit": {"oid": "9ab49d2cf6df1d31dd3a64443e706a465c97adbf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODY1MDMxOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxODo0ODoyOFrOIMVxNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxOToxNjoxMVrOIMWPSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDQ4NQ==", "bodyText": "Source is no longer necessary here, right?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549810485", "createdAt": "2020-12-29T18:48:28Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -166,29 +170,33 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n-    private void checkDomElementMatches(Source source) {\n-        Document doc = Jsoup.parse(String.valueOf(source));\n+    private void checkDomElementMatches(HttpMessage msg, Source source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ab49d2cf6df1d31dd3a64443e706a465c97adbf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMTU1Ng==", "bodyText": "no, it is not required.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549811556", "createdAt": "2020-12-29T18:52:07Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -166,29 +170,33 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n-    private void checkDomElementMatches(Source source) {\n-        Document doc = Jsoup.parse(String.valueOf(source));\n+    private void checkDomElementMatches(HttpMessage msg, Source source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDQ4NQ=="}, "originalCommit": {"oid": "9ab49d2cf6df1d31dd3a64443e706a465c97adbf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxODE4NA==", "bodyText": "I have made changes in the previous commit itself.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r549818184", "createdAt": "2020-12-29T19:16:11Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -166,29 +170,33 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n-    private void checkDomElementMatches(Source source) {\n-        Document doc = Jsoup.parse(String.valueOf(source));\n+    private void checkDomElementMatches(HttpMessage msg, Source source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgxMDQ4NQ=="}, "originalCommit": {"oid": "9ab49d2cf6df1d31dd3a64443e706a465c97adbf"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDc0NzUwOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDozODozM1rOIMpNBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDozODozM1rOIMpNBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEyODkwMA==", "bodyText": "Should be reverted.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550128900", "createdAt": "2020-12-30T10:38:33Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/CHANGELOG.md", "diffHunk": "@@ -16,6 +17,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n ### Added\n - Added support for CSS patterns, aligning with upstream project.\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDc0NzU0OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/Application.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDozODozNlrOIMpNDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDozODozNlrOIMpNDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEyODkwOA==", "bodyText": "dom", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550128908", "createdAt": "2020-12-30T10:38:36Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/Application.java", "diffHunk": "@@ -36,6 +36,7 @@\n     private List<AppPattern> url = new ArrayList<AppPattern>();\n     private List<AppPattern> html = new ArrayList<AppPattern>();\n     private List<Map<String, AppPattern>> metas;\n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> doms;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDc0OTU1OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/Application.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDozOTowMlrOIMpORg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDozOTowMlrOIMpORg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEyOTIyMg==", "bodyText": "Does not seem to be used.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550129222", "createdAt": "2020-12-30T10:39:02Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/Application.java", "diffHunk": "@@ -145,6 +150,14 @@ public void addMetas(Map<String, AppPattern> meta) {\n         this.metas.add(meta);\n     }\n \n+    public List<Map<String, Map<String, Map<String, AppPattern>>>> getDom() {\n+        return doms;\n+    }\n+\n+    public void addDom(Map<String, Map<String, Map<String, AppPattern>>> dom) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDc1NzY0OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/PopupMenuEvidence.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDo0MTowMlrOIMpTpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMDo0MTowMlrOIMpTpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEzMDU5OA==", "bodyText": "ap and pa is confusing.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550130598", "createdAt": "2020-12-30T10:41:02Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/PopupMenuEvidence.java", "diffHunk": "@@ -75,6 +75,42 @@ public boolean isEnableForComponent(Component invoker) {\n                         addMenuItem(p, ExtensionSearch.Type.Response);\n                     }\n                 }\n+                for (Map<String, Map<String, Map<String, AppPattern>>> map : app.getDom()) {\n+                    for (Map.Entry<String, Map<String, Map<String, AppPattern>>> ap :\n+                            map.entrySet()) {\n+                        for (Map.Entry<String, Map<String, AppPattern>> p :\n+                                ap.getValue().entrySet()) {\n+                            for (Map.Entry<String, AppPattern> pa : p.getValue().entrySet()) {\n+                                if (p.getKey() == \"text\") {\n+                                    Pattern pat =\n+                                            Pattern.compile(\n+                                                    ap.getKey()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDkyNTQ5OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxOToxOFrOIMrBkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxOToxOFrOIMrBkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1ODczOA==", "bodyText": "Type arguments could be removed.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550158738", "createdAt": "2020-12-30T11:19:18Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +281,74 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<String, Map<String, AppPattern>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDkyNTYxOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxOToyMFrOIMrBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxOToyMFrOIMrBog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1ODc1NA==", "bodyText": "Type arguments could be removed.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550158754", "createdAt": "2020-12-30T11:19:20Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +281,74 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<String, Map<String, AppPattern>>();\n+                                Map<String, AppPattern> value = new HashMap<String, AppPattern>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDkyNTk2OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxOToyNVrOIMrB2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxOToyNVrOIMrB2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1ODgwOQ==", "bodyText": "Type arguments could be removed.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550158809", "createdAt": "2020-12-30T11:19:25Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +281,74 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<String, Map<String, AppPattern>>();\n+                                Map<String, AppPattern> value = new HashMap<String, AppPattern>();\n+                                appPat = this.strToAppPattern(type, (String) ent.getValue());\n+                                value.put((String) ent.getKey(), appPat);\n+                                nodeSelectorMap.put((String) entr.getKey(), value);\n+                                domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);\n+                                list.add(domSelectorMap);\n+                            } catch (NumberFormatException e) {\n+                                logger.error(\n+                                        \"Invalid field syntax \"\n+                                                + ent.getKey()\n+                                                + \" : \"\n+                                                + ent.getValue(),\n+                                        e);\n+                            } catch (PatternSyntaxException e) {\n+                                patternErrorHandler.handleError((String) ent.getValue(), e);\n+                            }\n+                        }\n+                    } else {\n+                        try {\n+                            Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                    new HashMap<>();\n+                            Map<String, Map<String, AppPattern>> nodeSelectorMap = new HashMap<>();\n+                            Map<String, AppPattern> value = new HashMap<String, AppPattern>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDkyNjIzOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxOToyOVrOIMrCEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToxOToyOVrOIMrCEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1ODg2NA==", "bodyText": "This check could be done earlier and return (Collections.emptyList()) to avoid nesting.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550158864", "createdAt": "2020-12-30T11:19:29Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +281,74 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<String, Map<String, AppPattern>>();\n+                                Map<String, AppPattern> value = new HashMap<String, AppPattern>();\n+                                appPat = this.strToAppPattern(type, (String) ent.getValue());\n+                                value.put((String) ent.getKey(), appPat);\n+                                nodeSelectorMap.put((String) entr.getKey(), value);\n+                                domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);\n+                                list.add(domSelectorMap);\n+                            } catch (NumberFormatException e) {\n+                                logger.error(\n+                                        \"Invalid field syntax \"\n+                                                + ent.getKey()\n+                                                + \" : \"\n+                                                + ent.getValue(),\n+                                        e);\n+                            } catch (PatternSyntaxException e) {\n+                                patternErrorHandler.handleError((String) ent.getValue(), e);\n+                            }\n+                        }\n+                    } else {\n+                        try {\n+                            Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                    new HashMap<>();\n+                            Map<String, Map<String, AppPattern>> nodeSelectorMap = new HashMap<>();\n+                            Map<String, AppPattern> value = new HashMap<String, AppPattern>();\n+                            appPat = this.strToAppPattern(type, (String) entr.getValue());\n+                            value.put((String) entr.getKey(), appPat);\n+                            nodeSelectorMap.put((String) entr.getKey(), value);\n+                            domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);\n+                            list.add(domSelectorMap);\n+                        } catch (NumberFormatException e) {\n+                            logger.error(\n+                                    \"Invalid field syntax \"\n+                                            + entr.getKey()\n+                                            + \" : \"\n+                                            + entr.getValue(),\n+                                    e);\n+                        } catch (PatternSyntaxException e) {\n+                            patternErrorHandler.handleError((String) entr.getValue(), e);\n+                        }\n+                    }\n+                }\n+            }\n+        } else if (json != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDkyODUzOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToyMDowOVrOIMrDrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToyMDowOVrOIMrDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1OTI3Ng==", "bodyText": "The key is already a string.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550159276", "createdAt": "2020-12-30T11:20:09Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDkzMjUxOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToyMTo1NlrOIMrGBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToyMTo1NlrOIMrGBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1OTg3Ng==", "bodyText": "This could be done in the above if, same logic.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550159876", "createdAt": "2020-12-30T11:21:56Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDkzMzE2OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToyMjoxM1rOIMrGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMToyMjoxM1rOIMrGXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1OTk2Ng==", "bodyText": "Should start with lower case (same for following if).", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550159966", "createdAt": "2020-12-30T11:22:13Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDk1MTQ4OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozMToyNlrOIMrQWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMDoyMDoyMlrOIUsj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjUyMg==", "bodyText": "Could you add a test for this case?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550162522", "createdAt": "2020-12-30T11:31:26Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MjUzMA==", "bodyText": "shouldMatchDomElementWithText I guess.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r558572530", "createdAt": "2021-01-15T20:20:22Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjUyMg=="}, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDk1Mjg1OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozMjowNFrOIMrRDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozMjowNFrOIMrRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjcwMw==", "bodyText": "Could you add a test that does not have the attribute?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550162703", "createdAt": "2020-12-30T11:32:04Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MDk1MzE3OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMTozMjowOFrOIMrROQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxMzoyNTo0N1rOINXJ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ==", "bodyText": "Could you add test for this case?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550162745", "createdAt": "2020-12-30T11:32:08Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MjQ3MQ==", "bodyText": "There only one dom selector having properties in apps.json and I can't seem to find any example for it.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550252471", "createdAt": "2020-12-30T16:29:38Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MzU5Nw==", "bodyText": "Check the upstream linked earlier for examples, or just make something up.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550263597", "createdAt": "2020-12-30T17:05:54Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMjkxOQ==", "bodyText": "Jsoup is not able to extract react-dom properties. Can you suggest a fix for that?\nMaybe some other library.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550432919", "createdAt": "2020-12-31T08:55:51Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ0ODE1NQ==", "bodyText": "Could you provide an example?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550448155", "createdAt": "2020-12-31T10:11:12Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDUwNTg1NA==", "bodyText": "Jsoup is unable to access \"_reactRootContainer\" property of \"body > div\"", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550505854", "createdAt": "2020-12-31T15:33:42Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MTc3OQ==", "bodyText": "Can I use selenium for detecting property?", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r550881779", "createdAt": "2021-01-02T13:25:47Z", "author": {"login": "bettercalln1ck"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -165,6 +170,42 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(HttpMessage msg) {\n+        Document doc = Jsoup.parse(msg.getResponseBody().toString());\n+\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern Ap = value.getValue();\n+                                addIfMatches(Ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")) {\n+                                AppPattern Ap = value.getValue();\n+                                if (selectedElement.hasAttr(String.valueOf(value.getKey()))) {\n+                                    addIfMatches(Ap, selectedElement.attr(value.getKey()));\n+                                }\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2Mjc0NQ=="}, "originalCommit": {"oid": "a058b3863d4e44a2ea36d4396bb1f629904567f5"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNjU5NzU4OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMDoxOTo0N1rOIUsiuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMDoxOTo0N1rOIUsiuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MjIxNw==", "bodyText": "There doesn't seem to be UnitTests that cover properties (with or without attributes).", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r558572217", "createdAt": "2021-01-15T20:19:47Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScanner.java", "diffHunk": "@@ -162,6 +167,36 @@ private void checkMetaElementsMatches(Source source) {\n         }\n     }\n \n+    private void checkDomElementMatches(Source source) {\n+        Document doc = Jsoup.parse(String.valueOf(source));\n+        for (Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap :\n+                currentApp.getDom()) {\n+            for (Map.Entry<String, Map<String, Map<String, AppPattern>>> selectorMap :\n+                    domSelectorMap.entrySet()) {\n+                for (Map.Entry<String, Map<String, AppPattern>> nodeSelectorMap :\n+                        selectorMap.getValue().entrySet()) {\n+                    for (Map.Entry<String, AppPattern> value :\n+                            nodeSelectorMap.getValue().entrySet()) {\n+                        Elements selectedElements = doc.select(selectorMap.getKey());\n+                        for (org.jsoup.nodes.Element selectedElement : selectedElements) {\n+                            if (Objects.equals(value.getKey(), \"text\")) {\n+                                AppPattern ap = value.getValue();\n+                                addIfMatches(ap, selectedElement.text());\n+                            }\n+                            if (Objects.equals(nodeSelectorMap.getKey(), \"attributes\")\n+                                    || Objects.equals(nodeSelectorMap.getKey(), \"properties\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50ea5c8f49758ba9aef183a33f8eb3df5484958"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxNjU5ODkyOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMDoyMDowNVrOIUsjcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQyMDoyMDowNVrOIUsjcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MjQwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void shouldMatchDomElementWithTextandAttribute() throws HttpMalformedHeaderException {\n          \n          \n            \n                public void shouldMatchDomElementWithTextAndAttribute() throws HttpMalformedHeaderException {", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r558572402", "createdAt": "2021-01-15T20:20:05Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerPassiveScannerUnitTest.java", "diffHunk": "@@ -105,10 +103,67 @@ public void shouldNotMatchScriptElementContentIfNotOnScriptElement()\n         // Given\n         HttpMessage msg = makeHttpMessage();\n         msg.setResponseBody(\"<html><body>libs/modernizr.min.js?ver=4.1.1</body></html>\");\n+        // When\n+        scan(msg);\n+        // Then\n+        assertNull(getDefaultHolder().getAppsForSite(\"https://www.example.com\"));\n+    }\n \n+    @Test\n+    public void shouldMatchDomElementWithTextandAttribute() throws HttpMalformedHeaderException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c50ea5c8f49758ba9aef183a33f8eb3df5484958"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDAyOTUzOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjoyMDoyMFrOIVv_Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjoyMDoyMFrOIVv_Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3NzIzNA==", "bodyText": "The extra parentheses can be removed, it would be better to rename entr and entry.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r559677234", "createdAt": "2021-01-18T16:20:20Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/main/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParser.java", "diffHunk": "@@ -280,6 +282,77 @@ private static ImageIcon createSvgIcon(URL url) throws Exception {\n         return list;\n     }\n \n+    private List<Map<String, Map<String, Map<String, AppPattern>>>> jsonToAppPatternNestedMapList(\n+            String type, Object json) {\n+        List<Map<String, Map<String, Map<String, AppPattern>>>> list = new ArrayList<>();\n+        AppPattern appPat;\n+        if (json == null) {\n+            return Collections.emptyList();\n+        }\n+        if (json instanceof JSONObject) {\n+            for (Object domSelectorObject : ((JSONObject) json).entrySet()) {\n+                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) domSelectorObject;\n+                for (Object nodeSelectorObject : ((JSONObject) entry.getValue()).entrySet()) {\n+                    Map.Entry<?, ?> entr = (Map.Entry<?, ?>) nodeSelectorObject;\n+                    if (((Map.Entry<?, ?>) nodeSelectorObject).getValue() instanceof JSONObject) {\n+                        for (Object objvalue : ((JSONObject) entr.getValue()).entrySet()) {\n+                            Map.Entry<?, ?> ent = (Map.Entry<?, ?>) objvalue;\n+                            try {\n+                                Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, Map<String, AppPattern>> nodeSelectorMap =\n+                                        new HashMap<>();\n+                                Map<String, AppPattern> value = new HashMap<>();\n+                                appPat = this.strToAppPattern(type, (String) ent.getValue());\n+                                value.put((String) ent.getKey(), appPat);\n+                                nodeSelectorMap.put((String) entr.getKey(), value);\n+                                domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);\n+                                list.add(domSelectorMap);\n+                            } catch (NumberFormatException e) {\n+                                logger.error(\n+                                        \"Invalid field syntax \"\n+                                                + ent.getKey()\n+                                                + \" : \"\n+                                                + ent.getValue(),\n+                                        e);\n+                            } catch (PatternSyntaxException e) {\n+                                patternErrorHandler.handleError((String) ent.getValue(), e);\n+                            }\n+                        }\n+                    } else {\n+                        try {\n+                            Map<String, Map<String, Map<String, AppPattern>>> domSelectorMap =\n+                                    new HashMap<>();\n+                            Map<String, Map<String, AppPattern>> nodeSelectorMap = new HashMap<>();\n+                            Map<String, AppPattern> value = new HashMap<>();\n+                            appPat = this.strToAppPattern(type, (String) entr.getValue());\n+                            value.put((String) entr.getKey(), appPat);\n+                            nodeSelectorMap.put((String) entr.getKey(), value);\n+                            domSelectorMap.put((String) (entry).getKey(), nodeSelectorMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3787113ccbd5f711c59acce7740e31ee4764bce3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDAzMDIyOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjoyMDozNVrOIVv_rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQxNjoyMDozNVrOIVv_rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY3NzM1Nw==", "bodyText": "This should be removed.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r559677357", "createdAt": "2021-01-18T16:20:35Z", "author": {"login": "thc202"}, "path": "addOns/wappalyzer/src/test/java/org/zaproxy/zap/extension/wappalyzer/WappalyzerJsonParserUnitTest.java", "diffHunk": "@@ -50,6 +50,8 @@ public void shouldParseExample() {\n         assertEquals(2, app.getScript().size());\n         assertEquals(0, app.getMetas().size());\n         assertEquals(0, app.getImplies().size());\n+        assertEquals(2, app.getDom().size());\n+        System.out.println(app.getDom());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3787113ccbd5f711c59acce7740e31ee4764bce3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NzczNjg3OnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/javahelp/org/zaproxy/zap/extension/wappalyzer/resources/help/contents/wappalyzer.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxNTozNzozN1rOIZNstQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxNTozODowMFrOIZNtBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwOTc0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <li>It does not not show the confidence - this is still todo</li>\n          \n          \n            \n            <li>It allows you to see the 'evidence' used to detect the technologies</li>\n          \n          \n            \n            <li>It does not match technologies on the basis of dom properties as some properties are set by javascript after response is received</li>\n          \n          \n            \n            <li>It does not not show the confidence - this is still todo</li>\n          \n          \n            \n            <li>It does not match technologies on the basis of DOM properties as some properties are set by JavaScript in the browser after response has passed through ZAP</li>\n          \n          \n            \n            <li>It allows you to see the 'evidence' used to detect the technologies</li>", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r563309749", "createdAt": "2021-01-24T15:37:37Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/javahelp/org/zaproxy/zap/extension/wappalyzer/resources/help/contents/wappalyzer.html", "diffHunk": "@@ -13,6 +13,7 @@ <H1>Technology Detection Using Wappalyzer</H1>\n <li>It does not use the 'Global JavaScript variables' as these are difficult to test without a 'full' browser</li>\n <li>It does not not show the confidence - this is still todo</li>\n <li>It allows you to see the 'evidence' used to detect the technologies</li>\n+<li>It does not match technologies on the basis of dom properties as some properties are set by javascript after response is received</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1adf11c1a136ba45454be9a3ce0cd0c2663a679c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwOTgzMA==", "bodyText": "Changed the li ordering and adjusted the text.", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r563309830", "createdAt": "2021-01-24T15:38:00Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/javahelp/org/zaproxy/zap/extension/wappalyzer/resources/help/contents/wappalyzer.html", "diffHunk": "@@ -13,6 +13,7 @@ <H1>Technology Detection Using Wappalyzer</H1>\n <li>It does not use the 'Global JavaScript variables' as these are difficult to test without a 'full' browser</li>\n <li>It does not not show the confidence - this is still todo</li>\n <li>It allows you to see the 'evidence' used to detect the technologies</li>\n+<li>It does not match technologies on the basis of dom properties as some properties are set by javascript after response is received</li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMwOTc0OQ=="}, "originalCommit": {"oid": "1adf11c1a136ba45454be9a3ce0cd0c2663a679c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MzI5OTkwOnYy", "diffSide": "RIGHT", "path": "addOns/wappalyzer/src/main/javahelp/org/zaproxy/zap/extension/wappalyzer/resources/help/contents/wappalyzer.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToyMzowOVrOIaBJfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToyMzowOVrOIaBJfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE1MjcwMQ==", "bodyText": "Sorry I think I missed this last time:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <li>It does not match technologies on the basis of DOM properties as some properties are set by JavaScript in the browser after response has passed through ZAP</li>\n          \n          \n            \n            <li>It does not match technologies on the basis of DOM properties as some properties are set by JavaScript in the browser after the response has passed through ZAP</li>", "url": "https://github.com/zaproxy/zap-extensions/pull/2669#discussion_r564152701", "createdAt": "2021-01-26T01:23:09Z", "author": {"login": "kingthorin"}, "path": "addOns/wappalyzer/src/main/javahelp/org/zaproxy/zap/extension/wappalyzer/resources/help/contents/wappalyzer.html", "diffHunk": "@@ -12,6 +12,7 @@ <H1>Technology Detection Using Wappalyzer</H1>\n <ul>\n <li>It does not use the 'Global JavaScript variables' as these are difficult to test without a 'full' browser</li>\n <li>It does not not show the confidence - this is still todo</li>\n+<li>It does not match technologies on the basis of DOM properties as some properties are set by JavaScript in the browser after response has passed through ZAP</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2d2be00c3133c45fda56ab0631a83e2282fbe5"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 663, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}