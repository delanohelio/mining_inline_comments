{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODk2MjY1", "number": 2493, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NTo1OVrOEPgMtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NzowMVrOEPgN8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjkxNjM2OnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NTo1OVrOGzP6gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NTo1OVrOGzP6gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5MTI5Nw==", "bodyText": "I'd remove all HTML content, it could be an empty string and just the evidence string (in the handlers), no other parts of the content are being analysed/used by the scan rule (e.g. swapping FORBIDDEN_RESPONSE with VALID_RESPONSE_WITHOUT_CONTENT yields the same result).", "url": "https://github.com/zaproxy/zap-extensions/pull/2493#discussion_r456391297", "createdAt": "2020-07-17T11:45:59Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.core.scanner.Plugin;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.utils.ZapXmlConfiguration;\n+\n+/** Unit test for {@link ElmahScanRule}. */\n+public class ElmahScanRuleUnitTest extends ActiveScannerTest<ElmahScanRule> {\n+\n+    private static final String URL = \"/elmah.axd\";\n+    private static final String FORBIDDEN_RESPONSE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ae8455a71a3a60f3b751d2a64a3eab3eb2d1c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjkxNzI1OnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NjoxN1rOGzP7AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NjoxN1rOGzP7AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5MTQyNQ==", "bodyText": "Merge this with the following and call it shouldNotAlertIfNon200CodeStdThreshold? (and test with e.g. 401, 403, 404, 500?) Move closer to shouldAlertIfForbiddenResponseLowThreshold?", "url": "https://github.com/zaproxy/zap-extensions/pull/2493#discussion_r456391425", "createdAt": "2020-07-17T11:46:17Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.core.scanner.Plugin;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.utils.ZapXmlConfiguration;\n+\n+/** Unit test for {@link ElmahScanRule}. */\n+public class ElmahScanRuleUnitTest extends ActiveScannerTest<ElmahScanRule> {\n+\n+    private static final String URL = \"/elmah.axd\";\n+    private static final String FORBIDDEN_RESPONSE =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>403 Forbidden</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Forbidden</h1>\\n\"\n+                    + \"<p>You don't have permission to access \"\n+                    + URL\n+                    + \"\\n\"\n+                    + \"on this server.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITH_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Error Log</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITHOUT_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Something else</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Possibly a custom 404</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected ElmahScanRule createScanner() {\n+        ElmahScanRule rule = new ElmahScanRule();\n+        rule.setConfig(new ZapXmlConfiguration());\n+        return rule;\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInLowStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.LOW);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_LOW)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInMediumStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.MEDIUM);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_MED)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInHighStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.HIGH);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_HIGH)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInInsaneStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.INSANE);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(\n+                httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_INSANE)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonExistingElmahFileReturnsNon404Code() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ae8455a71a3a60f3b751d2a64a3eab3eb2d1c"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjkxNzQ2OnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NjoyMlrOGzP7IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NjoyMlrOGzP7IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5MTQ1Ng==", "bodyText": "shouldAlertIfBehindAuthLowThreshold and test with 401 as well?", "url": "https://github.com/zaproxy/zap-extensions/pull/2493#discussion_r456391456", "createdAt": "2020-07-17T11:46:22Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.core.scanner.Plugin;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.utils.ZapXmlConfiguration;\n+\n+/** Unit test for {@link ElmahScanRule}. */\n+public class ElmahScanRuleUnitTest extends ActiveScannerTest<ElmahScanRule> {\n+\n+    private static final String URL = \"/elmah.axd\";\n+    private static final String FORBIDDEN_RESPONSE =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>403 Forbidden</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Forbidden</h1>\\n\"\n+                    + \"<p>You don't have permission to access \"\n+                    + URL\n+                    + \"\\n\"\n+                    + \"on this server.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITH_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Error Log</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITHOUT_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Something else</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Possibly a custom 404</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected ElmahScanRule createScanner() {\n+        ElmahScanRule rule = new ElmahScanRule();\n+        rule.setConfig(new ZapXmlConfiguration());\n+        return rule;\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInLowStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.LOW);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_LOW)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInMediumStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.MEDIUM);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_MED)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInHighStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.HIGH);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_HIGH)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInInsaneStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.INSANE);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(\n+                httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_INSANE)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonExistingElmahFileReturnsNon404Code() throws Exception {\n+        // Given\n+        nano.addHandler(new ForbiddenResponse(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfOriginalFileNorElmahReturnsNon200Code() throws Exception {\n+        // Given\n+        String test = \"/\";\n+        nano.addHandler(new ForbiddenResponse(test));\n+        HttpMessage message = getHttpMessage(URL);\n+        message.setResponseHeader(\"HTTP/1.1 403 Forbidden\\r\\n\");\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfElmahFileFound() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_HIGH)));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonElmahFileFoundStdThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfNonElmahFileFoundLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_LOW)));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfForbiddenResponseLowThreshold() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ae8455a71a3a60f3b751d2a64a3eab3eb2d1c"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjkxNzU0OnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NjoyNFrOGzP7Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NjoyNFrOGzP7Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5MTQ3MQ==", "bodyText": "Remove? (Not relevant.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2493#discussion_r456391471", "createdAt": "2020-07-17T11:46:24Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.core.scanner.Plugin;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.utils.ZapXmlConfiguration;\n+\n+/** Unit test for {@link ElmahScanRule}. */\n+public class ElmahScanRuleUnitTest extends ActiveScannerTest<ElmahScanRule> {\n+\n+    private static final String URL = \"/elmah.axd\";\n+    private static final String FORBIDDEN_RESPONSE =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>403 Forbidden</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Forbidden</h1>\\n\"\n+                    + \"<p>You don't have permission to access \"\n+                    + URL\n+                    + \"\\n\"\n+                    + \"on this server.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITH_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Error Log</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITHOUT_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Something else</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Possibly a custom 404</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected ElmahScanRule createScanner() {\n+        ElmahScanRule rule = new ElmahScanRule();\n+        rule.setConfig(new ZapXmlConfiguration());\n+        return rule;\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInLowStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.LOW);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_LOW)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInMediumStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.MEDIUM);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_MED)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInHighStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.HIGH);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_HIGH)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInInsaneStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.INSANE);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(\n+                httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_INSANE)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonExistingElmahFileReturnsNon404Code() throws Exception {\n+        // Given\n+        nano.addHandler(new ForbiddenResponse(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfOriginalFileNorElmahReturnsNon200Code() throws Exception {\n+        // Given\n+        String test = \"/\";\n+        nano.addHandler(new ForbiddenResponse(test));\n+        HttpMessage message = getHttpMessage(URL);\n+        message.setResponseHeader(\"HTTP/1.1 403 Forbidden\\r\\n\");\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfElmahFileFound() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_HIGH)));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonElmahFileFoundStdThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfNonElmahFileFoundLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_LOW)));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfForbiddenResponseLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ForbiddenResponse(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        message.setResponseHeader(\"HTTP/1.1 403 Forbidden\\r\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ae8455a71a3a60f3b751d2a64a3eab3eb2d1c"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjkxOTIyOnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0Njo1M1rOGzP8DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0Njo1M1rOGzP8DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5MTY5Mw==", "bodyText": "StatusCodeResponse? And allow to pass the status code (to test with other status codes, 401, 404..).", "url": "https://github.com/zaproxy/zap-extensions/pull/2493#discussion_r456391693", "createdAt": "2020-07-17T11:46:53Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.core.scanner.Plugin;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.utils.ZapXmlConfiguration;\n+\n+/** Unit test for {@link ElmahScanRule}. */\n+public class ElmahScanRuleUnitTest extends ActiveScannerTest<ElmahScanRule> {\n+\n+    private static final String URL = \"/elmah.axd\";\n+    private static final String FORBIDDEN_RESPONSE =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>403 Forbidden</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Forbidden</h1>\\n\"\n+                    + \"<p>You don't have permission to access \"\n+                    + URL\n+                    + \"\\n\"\n+                    + \"on this server.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITH_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Error Log</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITHOUT_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Something else</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Possibly a custom 404</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected ElmahScanRule createScanner() {\n+        ElmahScanRule rule = new ElmahScanRule();\n+        rule.setConfig(new ZapXmlConfiguration());\n+        return rule;\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInLowStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.LOW);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_LOW)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInMediumStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.MEDIUM);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_MED)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInHighStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.HIGH);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_HIGH)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInInsaneStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.INSANE);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(\n+                httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_INSANE)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonExistingElmahFileReturnsNon404Code() throws Exception {\n+        // Given\n+        nano.addHandler(new ForbiddenResponse(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfOriginalFileNorElmahReturnsNon200Code() throws Exception {\n+        // Given\n+        String test = \"/\";\n+        nano.addHandler(new ForbiddenResponse(test));\n+        HttpMessage message = getHttpMessage(URL);\n+        message.setResponseHeader(\"HTTP/1.1 403 Forbidden\\r\\n\");\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfElmahFileFound() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_HIGH)));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonElmahFileFoundStdThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfNonElmahFileFoundLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_LOW)));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfForbiddenResponseLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ForbiddenResponse(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        message.setResponseHeader(\"HTTP/1.1 403 Forbidden\\r\\n\");\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_INFO)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_LOW)));\n+    }\n+\n+    private static class ForbiddenResponse extends NanoServerHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ae8455a71a3a60f3b751d2a64a3eab3eb2d1c"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjkxOTI5OnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0Njo1NlrOGzP8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0Njo1NlrOGzP8Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5MTcwMw==", "bodyText": "OkResponseWithEvidence?", "url": "https://github.com/zaproxy/zap-extensions/pull/2493#discussion_r456391703", "createdAt": "2020-07-17T11:46:56Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.core.scanner.Plugin;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.utils.ZapXmlConfiguration;\n+\n+/** Unit test for {@link ElmahScanRule}. */\n+public class ElmahScanRuleUnitTest extends ActiveScannerTest<ElmahScanRule> {\n+\n+    private static final String URL = \"/elmah.axd\";\n+    private static final String FORBIDDEN_RESPONSE =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>403 Forbidden</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Forbidden</h1>\\n\"\n+                    + \"<p>You don't have permission to access \"\n+                    + URL\n+                    + \"\\n\"\n+                    + \"on this server.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITH_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Error Log</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITHOUT_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Something else</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Possibly a custom 404</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected ElmahScanRule createScanner() {\n+        ElmahScanRule rule = new ElmahScanRule();\n+        rule.setConfig(new ZapXmlConfiguration());\n+        return rule;\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInLowStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.LOW);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_LOW)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInMediumStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.MEDIUM);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_MED)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInHighStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.HIGH);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_HIGH)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInInsaneStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.INSANE);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(\n+                httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_INSANE)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonExistingElmahFileReturnsNon404Code() throws Exception {\n+        // Given\n+        nano.addHandler(new ForbiddenResponse(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfOriginalFileNorElmahReturnsNon200Code() throws Exception {\n+        // Given\n+        String test = \"/\";\n+        nano.addHandler(new ForbiddenResponse(test));\n+        HttpMessage message = getHttpMessage(URL);\n+        message.setResponseHeader(\"HTTP/1.1 403 Forbidden\\r\\n\");\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfElmahFileFound() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_HIGH)));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonElmahFileFoundStdThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfNonElmahFileFoundLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_LOW)));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfForbiddenResponseLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ForbiddenResponse(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        message.setResponseHeader(\"HTTP/1.1 403 Forbidden\\r\\n\");\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_INFO)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_LOW)));\n+    }\n+\n+    private static class ForbiddenResponse extends NanoServerHandler {\n+\n+        public ForbiddenResponse(String name) {\n+            super(name);\n+        }\n+\n+        @Override\n+        protected Response serve(IHTTPSession session) {\n+            return newFixedLengthResponse(\n+                    Response.Status.FORBIDDEN, \"text/html\", FORBIDDEN_RESPONSE);\n+        }\n+    }\n+\n+    private static class ValidResponseWithContent extends NanoServerHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ae8455a71a3a60f3b751d2a64a3eab3eb2d1c"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjkxOTU1OnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NzowMVrOGzP8OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTo0NzowMVrOGzP8OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM5MTczNg==", "bodyText": "OkResponseWithoutEvidence? (Which could extend StatusCodeResponse.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2493#discussion_r456391736", "createdAt": "2020-07-17T11:47:01Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.core.scanner.Plugin;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+import org.zaproxy.zap.utils.ZapXmlConfiguration;\n+\n+/** Unit test for {@link ElmahScanRule}. */\n+public class ElmahScanRuleUnitTest extends ActiveScannerTest<ElmahScanRule> {\n+\n+    private static final String URL = \"/elmah.axd\";\n+    private static final String FORBIDDEN_RESPONSE =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>403 Forbidden</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Forbidden</h1>\\n\"\n+                    + \"<p>You don't have permission to access \"\n+                    + URL\n+                    + \"\\n\"\n+                    + \"on this server.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITH_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Error Log</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    private static final String VALID_RESPONSE_WITHOUT_CONTENT =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head>\\n\"\n+                    + \"<title>Something else</title>\\n\"\n+                    + \"</head><body>\\n\"\n+                    + \"<h1>Possibly a custom 404</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected ElmahScanRule createScanner() {\n+        ElmahScanRule rule = new ElmahScanRule();\n+        rule.setConfig(new ZapXmlConfiguration());\n+        return rule;\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInLowStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.LOW);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_LOW)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInMediumStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.MEDIUM);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_MED)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInHighStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.HIGH);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_HIGH)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldSendReasonableNumberOfMessagesInInsaneStrength() throws Exception {\n+        // Given\n+        rule.setAttackStrength(Plugin.AttackStrength.INSANE);\n+        rule.init(getHttpMessage(URL), parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(\n+                httpMessagesSent, hasSize(lessThanOrEqualTo(NUMBER_MSGS_ATTACK_PER_PAGE_INSANE)));\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonExistingElmahFileReturnsNon404Code() throws Exception {\n+        // Given\n+        nano.addHandler(new ForbiddenResponse(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfOriginalFileNorElmahReturnsNon200Code() throws Exception {\n+        // Given\n+        String test = \"/\";\n+        nano.addHandler(new ForbiddenResponse(test));\n+        HttpMessage message = getHttpMessage(URL);\n+        message.setResponseHeader(\"HTTP/1.1 403 Forbidden\\r\\n\");\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfElmahFileFound() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_HIGH)));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonElmahFileFoundStdThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfNonElmahFileFoundLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ValidResponseWithoutContent(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_MEDIUM)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_LOW)));\n+    }\n+\n+    @Test\n+    public void shouldAlertIfForbiddenResponseLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new ForbiddenResponse(\"/\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        message.setResponseHeader(\"HTTP/1.1 403 Forbidden\\r\\n\");\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertThat(alertsRaised.get(0).getRisk(), is(equalTo(Alert.RISK_INFO)));\n+        assertThat(alertsRaised.get(0).getConfidence(), is(equalTo(Alert.CONFIDENCE_LOW)));\n+    }\n+\n+    private static class ForbiddenResponse extends NanoServerHandler {\n+\n+        public ForbiddenResponse(String name) {\n+            super(name);\n+        }\n+\n+        @Override\n+        protected Response serve(IHTTPSession session) {\n+            return newFixedLengthResponse(\n+                    Response.Status.FORBIDDEN, \"text/html\", FORBIDDEN_RESPONSE);\n+        }\n+    }\n+\n+    private static class ValidResponseWithContent extends NanoServerHandler {\n+\n+        public ValidResponseWithContent(String name) {\n+            super(name);\n+        }\n+\n+        @Override\n+        protected Response serve(IHTTPSession session) {\n+            return newFixedLengthResponse(\n+                    Response.Status.OK, \"text/html\", VALID_RESPONSE_WITH_CONTENT);\n+        }\n+    }\n+\n+    private static class ValidResponseWithoutContent extends NanoServerHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ae8455a71a3a60f3b751d2a64a3eab3eb2d1c"}, "originalPosition": 238}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 665, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}