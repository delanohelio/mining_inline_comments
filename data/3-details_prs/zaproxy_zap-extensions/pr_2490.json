{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1ODI4MzE3", "number": 2490, "title": "Some improvements for the FrontEndScanner", "bodyText": "3 features in 1 PR:\n\nsolution for zaproxy/zaproxy#4897\nbrutal easy fix for zaproxy/zaproxy#4893\ndeal with \"corner cases\" in <head>: when it's not present, and when it's empty", "createdAt": "2020-07-08T01:26:09Z", "url": "https://github.com/zaproxy/zap-extensions/pull/2490", "merged": true, "mergeCommit": {"oid": "bca32f0b745e3652cafd1bf475a28b9ee9b38688"}, "closed": true, "closedAt": "2020-07-20T16:09:09Z", "author": {"login": "Pamplemousse"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcywJm7ABqjM1MjI5NTgyODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2zaG2AFqTQ1MTcyMDQ1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "732c2992697efb924f815988be82b90bc0cb453d", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/732c2992697efb924f815988be82b90bc0cb453d", "committedDate": "2020-07-08T01:17:50Z", "message": "frontendscanner: Disable CSP so it always work\n\nRelates to zaproxy/zaproxy#4893 ."}, "afterCommit": {"oid": "2e004e219ec2a72a9fa047e498b86069fcb00ce1", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/2e004e219ec2a72a9fa047e498b86069fcb00ce1", "committedDate": "2020-07-08T01:27:31Z", "message": "frontendscanner: Disable CSP so it always work\n\nRelates to zaproxy/zaproxy#4893 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzY4NDYx", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#pullrequestreview-444368461", "createdAt": "2020-07-08T02:21:27Z", "commit": {"oid": "cd4c2e3273125e17e69971c17ba490cac16a8198"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoyMToyN1rOGuVxvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoyMToyN1rOGuVxvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NDQ3Nw==", "bodyText": "Should a head be injected before the body start tag if one doesn't exist or would that break other things?", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451244477", "createdAt": "2020-07-08T02:21:27Z", "author": {"login": "kingthorin"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.awt.EventQueue;\n+import java.awt.event.ItemEvent;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.swing.ImageIcon;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/**\n+ * The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on.\n+ */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private Logger LOGGER;\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options, Logger logger) {\n+        this.api = api;\n+        this.options = options;\n+        this.LOGGER = logger;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (head != null && msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    StringBuilder injectedContentBuilder =\n+                            new StringBuilder(200)\n+                                    .append(\"<script src='\")\n+                                    .append(frontEndApiUrl)\n+                                    .append(\"?action=getFile\")\n+                                    .append(\"&filename=front-end-scanner.js\")\n+                                    .append(\"&historyReferenceId=\")\n+                                    .append(historyReferenceId)\n+                                    .append(\"'></script>\");\n+\n+                    String injectedContent = injectedContentBuilder.toString();\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = head.getChildElements().get(0).getBegin();\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+                } else {\n+                    LOGGER.debug(\"<head></head> is missing in the response\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd4c2e3273125e17e69971c17ba490cac16a8198"}, "originalPosition": 100}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e004e219ec2a72a9fa047e498b86069fcb00ce1", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/2e004e219ec2a72a9fa047e498b86069fcb00ce1", "committedDate": "2020-07-08T01:27:31Z", "message": "frontendscanner: Disable CSP so it always work\n\nRelates to zaproxy/zaproxy#4893 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}, "afterCommit": {"oid": "af1f825ad9ea8111b82e85bd59b0cc466d3941a6", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/af1f825ad9ea8111b82e85bd59b0cc466d3941a6", "committedDate": "2020-07-08T02:57:31Z", "message": "frontendscanner: Disable CSP so it always work\n\nRelates to zaproxy/zaproxy#4893 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af1f825ad9ea8111b82e85bd59b0cc466d3941a6", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/af1f825ad9ea8111b82e85bd59b0cc466d3941a6", "committedDate": "2020-07-08T02:57:31Z", "message": "frontendscanner: Disable CSP so it always work\n\nRelates to zaproxy/zaproxy#4893 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}, "afterCommit": {"oid": "dee521cb49f6184dbc55162c2bc19154dcefd720", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/dee521cb49f6184dbc55162c2bc19154dcefd720", "committedDate": "2020-07-08T03:37:04Z", "message": "frontendscanner: Deal with absent and empty `<head>`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dee521cb49f6184dbc55162c2bc19154dcefd720", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/dee521cb49f6184dbc55162c2bc19154dcefd720", "committedDate": "2020-07-08T03:37:04Z", "message": "frontendscanner: Deal with absent and empty `<head>`"}, "afterCommit": {"oid": "069561123783819c651e075b87f6a2f7d084b778", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/069561123783819c651e075b87f6a2f7d084b778", "committedDate": "2020-07-08T14:16:33Z", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0ODkzOTEy", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#pullrequestreview-444893912", "createdAt": "2020-07-08T15:41:52Z", "commit": {"oid": "069561123783819c651e075b87f6a2f7d084b778"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo0MTo1MlrOGuuEWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjowNDoxMlrOGuu_Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MjQ1Ng==", "bodyText": "It seems a little strange to pass the LOGGER. Is there any reason the listener shouldn't have it's own LOGGER constant?", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451642456", "createdAt": "2020-07-08T15:41:52Z", "author": {"login": "kingthorin"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/ExtensionFrontEndScanner.java", "diffHunk": "@@ -105,6 +99,8 @@ public void init() {\n         this.api = new FrontEndScannerAPI(this);\n         this.api.addApiOptions(options);\n \n+        this.proxyListener = new FrontEndScannerProxyListener(api, options, LOGGER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069561123783819c651e075b87f6a2f7d084b778"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MzczOA==", "bodyText": "Aren't these only needed in the Extension?", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451643738", "createdAt": "2020-07-08T15:43:51Z", "author": {"login": "kingthorin"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private Logger LOGGER;\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(\n+            FrontEndScannerAPI api, FrontEndScannerOptions options, Logger logger) {\n+        this.api = api;\n+        this.options = options;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069561123783819c651e075b87f6a2f7d084b778"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0NDk1MA==", "bodyText": "Should this bail if there is no host header (or HTTP 1.0/ HTTP 0.9)?", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451644950", "createdAt": "2020-07-08T15:45:38Z", "author": {"login": "kingthorin"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private Logger LOGGER;\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(\n+            FrontEndScannerAPI api, FrontEndScannerOptions options, Logger logger) {\n+        this.api = api;\n+        this.options = options;\n+        this.LOGGER = logger;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069561123783819c651e075b87f6a2f7d084b778"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MTM2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */\n          \n          \n            \n            /** Unit test for {@link FrontEndScannerProxyListener}. */", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451651361", "createdAt": "2020-07-08T15:54:50Z", "author": {"login": "kingthorin"}, "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069561123783819c651e075b87f6a2f7d084b778"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MTUxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class FrontEndScannerProxyListenerTest extends TestUtils {\n          \n          \n            \n            public class FrontEndScannerProxyListenerUnitTest extends TestUtils {", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451651517", "createdAt": "2020-07-08T15:55:05Z", "author": {"login": "kingthorin"}, "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerTest extends TestUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069561123783819c651e075b87f6a2f7d084b778"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1NzU2Ng==", "bodyText": "These are null host because there's no request object?", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r451657566", "createdAt": "2020-07-08T16:04:12Z", "author": {"login": "kingthorin"}, "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extensions/frontendscanner/FrontEndScannerProxyListenerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link ExtensionFrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerTest extends TestUtils {\n+\n+    FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n+        FrontEndScannerOptions options = mock(FrontEndScannerOptions.class);\n+        when(options.isEnabled()).thenReturn(true);\n+\n+        HistoryReference ref = mock(HistoryReference.class);\n+        when(ref.getHistoryId()).thenReturn(42);\n+\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.setLevel(Level.OFF);\n+\n+        frontEndScannerProxyListener = new FrontEndScannerProxyListener(api, options, rootLogger);\n+\n+        msg = new HttpMessage();\n+        msg.setHistoryRef(ref);\n+    }\n+\n+    @Test\n+    public void testInjectTheFrontEndTrackerBeforeOtherScriptsInHeadTag() {\n+        // Given\n+        String htmlBody = \"<head><script></script></head><body></body>\";\n+        msg.getResponseHeader().setHeader(HttpResponseHeader.CONTENT_TYPE, \"text/html\");\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<head><script src='https:\\\\/\\\\/null\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><script><\\\\/script><\\\\/head><body><\\\\/body>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069561123783819c651e075b87f6a2f7d084b778"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "069561123783819c651e075b87f6a2f7d084b778", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/069561123783819c651e075b87f6a2f7d084b778", "committedDate": "2020-07-08T14:16:33Z", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}, "afterCommit": {"oid": "9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "committedDate": "2020-07-08T21:18:28Z", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/9618ceab901473fbf3c0a70f8fd4f1c0aba6908d", "committedDate": "2020-07-08T21:18:28Z", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}, "afterCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "committedDate": "2020-07-09T03:23:19Z", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1Njc1MjI3", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#pullrequestreview-445675227", "createdAt": "2020-07-09T14:31:59Z", "commit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Mzk4ODEy", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#pullrequestreview-447398812", "createdAt": "2020-07-13T16:14:20Z", "commit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoxNDoyMFrOGwvtnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjoyMDozMFrOGwv8zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NjU1Ng==", "bodyText": "final", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453766556", "createdAt": "2020-07-13T16:14:20Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NjU5Nw==", "bodyText": "static", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453766597", "createdAt": "2020-07-13T16:14:24Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NjYzMA==", "bodyText": "numberOfChildren", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453766630", "createdAt": "2020-07-13T16:14:27Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {\n+        // The payload needs to be inserted in front of as many elements as possible;\n+        // But still after the `<meta>` tag (if there is any).\n+        if (head == null) {\n+            return 0;\n+        }\n+\n+        List<Element> headChildren = head.getChildElements();\n+        int numberOfChilden = headChildren.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2Njk4Nw==", "bodyText": "head.getStartTag().getEnd()?\nCould you add a test with <head> not at the start? e.g.:\n<!doctype html>\n<html lang=\"en\">\n\n<head>", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453766987", "createdAt": "2020-07-13T16:15:02Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {\n+        // The payload needs to be inserted in front of as many elements as possible;\n+        // But still after the `<meta>` tag (if there is any).\n+        if (head == null) {\n+            return 0;\n+        }\n+\n+        List<Element> headChildren = head.getChildElements();\n+        int numberOfChilden = headChildren.size();\n+\n+        if (numberOfChilden == 0) {\n+            return \"<head>\".length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NzA1MQ==", "bodyText": "static", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453767051", "createdAt": "2020-07-13T16:15:07Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {\n+        // The payload needs to be inserted in front of as many elements as possible;\n+        // But still after the `<meta>` tag (if there is any).\n+        if (head == null) {\n+            return 0;\n+        }\n+\n+        List<Element> headChildren = head.getChildElements();\n+        int numberOfChilden = headChildren.size();\n+\n+        if (numberOfChilden == 0) {\n+            return \"<head>\".length();\n+        }\n+\n+        List<Element> metaElements = head.getAllElements(\"meta\");\n+        int numberOfMetaTags = metaElements.size();\n+\n+        if (numberOfMetaTags == 0) {\n+            return head.getChildElements().get(0).getBegin();\n+        } else {\n+            return metaElements.get(numberOfMetaTags - 1).getEnd();\n+        }\n+    }\n+\n+    private String getInjectedContent(String frontEndApiUrl, Element head, int historyReferenceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2NzI3MA==", "bodyText": "It would be more clear with a parameterized test, all headers would be tested regardless of one failing and the one failing would be more obvious.\nCould you move to before (or after) the tests that are checking the injections?", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453767270", "createdAt": "2020-07-13T16:15:28Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.setLevel(Level.OFF);\n+\n+        FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n+        FrontEndScannerOptions options = mock(FrontEndScannerOptions.class);\n+        when(options.isEnabled()).thenReturn(true);\n+\n+        HistoryReference ref = mock(HistoryReference.class);\n+        when(ref.getHistoryId()).thenReturn(42);\n+\n+        frontEndScannerProxyListener = new FrontEndScannerProxyListener(api, options);\n+\n+        msg = new HttpMessage(new URI(\"https\", HOSTNAME, \"/\", \"\"));\n+        msg.getResponseHeader().setHeader(HttpResponseHeader.CONTENT_TYPE, \"text/html\");\n+        msg.setHistoryRef(ref);\n+    }\n+\n+    @Test\n+    public void testInjectTheFrontEndTrackerBeforeOtherScriptsInHeadTag() {\n+        // Given\n+        String htmlBody = \"<head><script></script></head><body></body>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><script><\\\\/script><\\\\/head><body><\\\\/body>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterMetaTagInHeadTag() {\n+        // Given\n+        String htmlBody = \"<head><meta></head><body></body>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<head><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testRemovesCSPFromHttpResponsesIfInjecting() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2ODczOA==", "bodyText": "Could you add a test with several meta tags?", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453768738", "createdAt": "2020-07-13T16:17:46Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {\n+            try {\n+                String html = msg.getResponseBody().toString();\n+\n+                Source document = new Source(html);\n+                List<Element> heads = document.getAllElements(\"head\");\n+                Element head = heads.isEmpty() ? null : heads.get(0);\n+\n+                if (msg.getHistoryRef() != null) {\n+                    String host = msg.getRequestHeader().getHeader(\"host\");\n+                    String frontEndApiUrl =\n+                            API.getInstance().getCallBackUrl(this.api, \"https://\" + host);\n+\n+                    int historyReferenceId = msg.getHistoryRef().getHistoryId();\n+\n+                    String injectedContent =\n+                            getInjectedContent(frontEndApiUrl, head, historyReferenceId);\n+\n+                    OutputDocument newResponseBody = new OutputDocument(document);\n+                    int insertPosition = getInsertPosition(head);\n+                    newResponseBody.insert(insertPosition, injectedContent);\n+\n+                    msg.getResponseBody().setBody(newResponseBody.toString());\n+\n+                    int newLength = msg.getResponseBody().length();\n+                    msg.getResponseHeader().setContentLength(newLength);\n+\n+                    for (String header : CSP_HEADERS) {\n+                        msg.getResponseHeader().setHeader(header, null);\n+                    }\n+                } else {\n+                    LOGGER.debug(\"No historyRef found in the HttpMessage.\");\n+                }\n+            } catch (Exception e) {\n+                LOGGER.error(e.getMessage(), e);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private int getInsertPosition(Element head) {\n+        // The payload needs to be inserted in front of as many elements as possible;\n+        // But still after the `<meta>` tag (if there is any).\n+        if (head == null) {\n+            return 0;\n+        }\n+\n+        List<Element> headChildren = head.getChildElements();\n+        int numberOfChilden = headChildren.size();\n+\n+        if (numberOfChilden == 0) {\n+            return \"<head>\".length();\n+        }\n+\n+        List<Element> metaElements = head.getAllElements(\"meta\");\n+        int numberOfMetaTags = metaElements.size();\n+\n+        if (numberOfMetaTags == 0) {\n+            return head.getChildElements().get(0).getBegin();\n+        } else {\n+            return metaElements.get(numberOfMetaTags - 1).getEnd();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc2OTg2Nw==", "bodyText": "Could you add tests for when not enabled? (One for the CSP headers that should not be removed and another that the content remains the same.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453769867", "createdAt": "2020-07-13T16:19:36Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/main/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListener.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import java.util.List;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.OutputDocument;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.core.proxy.ProxyListener;\n+import org.parosproxy.paros.extension.history.ProxyListenerLog;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.api.API;\n+\n+/** The {@link ProxyListener} the {@link ExtensionFrontEndScanner} relies on. */\n+public class FrontEndScannerProxyListener implements ProxyListener {\n+    private static final Logger LOGGER = Logger.getLogger(FrontEndScannerProxyListener.class);\n+\n+    private FrontEndScannerAPI api;\n+    private FrontEndScannerOptions options;\n+\n+    private static final String[] CSP_HEADERS = {\n+        \"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"\n+    };\n+\n+    public FrontEndScannerProxyListener(FrontEndScannerAPI api, FrontEndScannerOptions options) {\n+        this.api = api;\n+        this.options = options;\n+    }\n+\n+    @Override\n+    public boolean onHttpRequestSend(HttpMessage msg) {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean onHttpResponseReceive(HttpMessage msg) {\n+        if (options.isEnabled() && msg.getResponseHeader().isHtml()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3MDA1Mw==", "bodyText": "private", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453770053", "createdAt": "2020-07-13T16:19:52Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    HttpMessage msg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3MDQ0Ng==", "bodyText": "Would be better to not turn off, this affects all tests.", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r453770446", "createdAt": "2020-07-13T16:20:30Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();\n+        rootLogger.setLevel(Level.OFF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/2be463fc58d9c2ed7d47d4372c32d427fdf8a34a", "committedDate": "2020-07-09T03:23:19Z", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}, "afterCommit": {"oid": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "committedDate": "2020-07-19T17:58:29Z", "message": "frontendscanner: Test when disabled in `options`\n\n  * ensure html is not modified\n  * ensure CSP headers are untouched\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNDgzOTE0", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#pullrequestreview-451483914", "createdAt": "2020-07-20T10:26:51Z", "commit": {"oid": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoyNjo1MVrOG0E5dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo0MzoyMlrOG0Fiaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1OTM4Mg==", "bodyText": "Could be removed, no longer used.", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r457259382", "createdAt": "2020-07-20T10:26:51Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    private FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    private FrontEndScannerOptions options;\n+    private HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1OTQyMQ==", "bodyText": "Was the closing head at the end on purpose?", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r457259421", "createdAt": "2020-07-20T10:26:55Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    private FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    private FrontEndScannerOptions options;\n+    private HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();\n+\n+        FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n+        options = mock(FrontEndScannerOptions.class);\n+\n+        HistoryReference ref = mock(HistoryReference.class, withSettings().lenient());\n+        when(ref.getHistoryId()).thenReturn(42);\n+\n+        frontEndScannerProxyListener = new FrontEndScannerProxyListener(api, options);\n+\n+        msg = new HttpMessage(new URI(\"https\", HOSTNAME, \"/\", \"\"));\n+        msg.getResponseHeader().setHeader(HttpResponseHeader.CONTENT_TYPE, \"text/html\");\n+        msg.setHistoryRef(ref);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"})\n+    public void testRemovesCSPFromHttpResponsesIfInjecting(String header) {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><script></script></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        msg.getResponseHeader().setHeader(header, \"value\");\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String result = msg.getResponseHeader().getHeader(header);\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void testInjectTheFrontEndTrackerBeforeOtherScriptsInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><script></script></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><script><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterMetaTagInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><head><meta></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterAllMetaTagsInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><meta><meta></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><meta><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectionShouldBeSuccessfulWithoutHead() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><body></body></head>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2OTg2Nw==", "bodyText": "This one is now somewhat redundant with the other tests, now that all are using the head not at the start. Would be great to restore one of the previous tests that had just head to keep covering that part.", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#discussion_r457269867", "createdAt": "2020-07-20T10:43:22Z", "author": {"login": "thc202"}, "path": "addOns/frontendscanner/src/test/java/org/zaproxy/zap/extension/frontendscanner/FrontEndScannerProxyListenerUnitTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.frontendscanner;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.log4j.Logger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+/** Unit test for {@link FrontEndScannerProxyListener}. */\n+public class FrontEndScannerProxyListenerUnitTest extends TestUtils {\n+\n+    private static final String HOSTNAME = \"example.com\";\n+\n+    private FrontEndScannerProxyListener frontEndScannerProxyListener;\n+    private FrontEndScannerOptions options;\n+    private HttpMessage msg;\n+\n+    @BeforeEach\n+    public void setUp() throws URIException, HttpMalformedHeaderException {\n+        Logger rootLogger = Logger.getRootLogger();\n+\n+        FrontEndScannerAPI api = mock(FrontEndScannerAPI.class);\n+        options = mock(FrontEndScannerOptions.class);\n+\n+        HistoryReference ref = mock(HistoryReference.class, withSettings().lenient());\n+        when(ref.getHistoryId()).thenReturn(42);\n+\n+        frontEndScannerProxyListener = new FrontEndScannerProxyListener(api, options);\n+\n+        msg = new HttpMessage(new URI(\"https\", HOSTNAME, \"/\", \"\"));\n+        msg.getResponseHeader().setHeader(HttpResponseHeader.CONTENT_TYPE, \"text/html\");\n+        msg.setHistoryRef(ref);\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"Content-Security-Policy\", \"X-Content-Security-Policy\", \"X-WebKit-CSP\"})\n+    public void testRemovesCSPFromHttpResponsesIfInjecting(String header) {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><script></script></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        msg.getResponseHeader().setHeader(header, \"value\");\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String result = msg.getResponseHeader().getHeader(header);\n+        assertNull(result);\n+    }\n+\n+    @Test\n+    public void testInjectTheFrontEndTrackerBeforeOtherScriptsInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><script></script></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><script><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterMetaTagInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><head><meta></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectAfterAllMetaTagsInHeadTag() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody =\n+                \"<!doctype html><html lang='en'><head><meta><meta></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><meta><meta><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectionShouldBeSuccessfulWithoutHead() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><body></body></head>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></head>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectionShouldBeSuccessfulWithEmptyHead() {\n+        // Given\n+        when(options.isEnabled()).thenReturn(true);\n+        String htmlBody = \"<!doctype html><html lang='en'><head></head><body></body></html>\";\n+        msg.setResponseBody(htmlBody);\n+\n+        // When\n+        frontEndScannerProxyListener.onHttpResponseReceive(msg);\n+\n+        // Then\n+        String expectedHtmlFormat =\n+                \"<!doctype html><html lang='en'><head><script src='https:\\\\/\\\\/\"\n+                        + HOSTNAME\n+                        + \"\\\\/zapCallBackUrl\\\\/-?[0-9]+\\\\?action=getFile&filename=front-end-scanner.js&historyReferenceId=42'><\\\\/script><\\\\/head><body><\\\\/body></html>\";\n+        String result = msg.getResponseBody().toString();\n+\n+        assertTrue(result.matches(expectedHtmlFormat));\n+    }\n+\n+    @Test\n+    public void testInjectionShouldBeSuccessfulWithHeadNotAtTheStartOfHtml() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb"}, "originalPosition": 190}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b70a8045952e13999ba644d08d984897894d4c8b", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/b70a8045952e13999ba644d08d984897894d4c8b", "committedDate": "2020-07-20T15:13:08Z", "message": "frontendscanner: Add some unit tests\n\nTo validate the behavior of `onHttpResponseReceive`.\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7db17b46e64ae91d097654cf06870ed40e652688", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/7db17b46e64ae91d097654cf06870ed40e652688", "committedDate": "2020-07-20T15:13:09Z", "message": "frontendscanner: Insert payload after `<meta>`\n\nCloses zaproxy/zaproxy#4897 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57ad809936d967254189466144eea8de6971503d", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/57ad809936d967254189466144eea8de6971503d", "committedDate": "2020-07-20T15:13:09Z", "message": "frontendscanner: Disable CSP so it always work\n\nRelates to zaproxy/zaproxy#4893 .\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcfc73f5e316f57dc9f6bf500eeaec86ec1a8785", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/fcfc73f5e316f57dc9f6bf500eeaec86ec1a8785", "committedDate": "2020-07-20T15:23:36Z", "message": "frontendscanner: Deal with absent and empty `<head>`\n\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa5f755ba553e4b9f7cf90e0957ffde7980eca96", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/fa5f755ba553e4b9f7cf90e0957ffde7980eca96", "committedDate": "2020-07-20T15:24:15Z", "message": "frontendscanner: Test when disabled in `options`\n\n  * ensure html is not modified\n  * ensure CSP headers are untouched\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/a77046b1ec5283665eebf2fbb0486d4f5b54d8bb", "committedDate": "2020-07-19T17:58:29Z", "message": "frontendscanner: Test when disabled in `options`\n\n  * ensure html is not modified\n  * ensure CSP headers are untouched\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}, "afterCommit": {"oid": "fa5f755ba553e4b9f7cf90e0957ffde7980eca96", "author": {"user": {"login": "Pamplemousse", "name": null}}, "url": "https://github.com/zaproxy/zap-extensions/commit/fa5f755ba553e4b9f7cf90e0957ffde7980eca96", "committedDate": "2020-07-20T15:24:15Z", "message": "frontendscanner: Test when disabled in `options`\n\n  * ensure html is not modified\n  * ensure CSP headers are untouched\nSigned-off-by: Pamplemousse <xav.maso@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzIwNDU3", "url": "https://github.com/zaproxy/zap-extensions/pull/2490#pullrequestreview-451720457", "createdAt": "2020-07-20T15:31:40Z", "commit": {"oid": "fa5f755ba553e4b9f7cf90e0957ffde7980eca96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 392, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}