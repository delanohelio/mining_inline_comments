{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NDE0MDg4", "number": 2554, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo0NTo1MlrOEo_gkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo0NTo1MlrOEo_gkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDE5MDI2OnYy", "diffSide": "RIGHT", "path": "addOns/scripts/src/main/java/org/zaproxy/zap/extension/scripts/CommandPanel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo0NTo1MlrOHaZo7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo0NjoyM1rOHaZqBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NTEwMg==", "bodyText": "Since this same code appears 3 times with the only difference being the object it's being applied to maybe just extract a method?", "url": "https://github.com/zaproxy/zap-extensions/pull/2554#discussion_r497445102", "createdAt": "2020-09-30T11:45:52Z", "author": {"login": "kingthorin"}, "path": "addOns/scripts/src/main/java/org/zaproxy/zap/extension/scripts/CommandPanel.java", "diffHunk": "@@ -94,10 +99,86 @@ private SyntaxHighlightTextArea getTxtOutput() {\n             if (listener != null) {\n                 this.syntaxTxtArea.addKeyListener(listener);\n             }\n+            if (isDarkLaF()) {\n+                darkLaF = true;\n+                try {\n+                    Theme theme =\n+                            Theme.load(\n+                                    HttpPanelSyntaxHighlightTextArea.class.getResourceAsStream(\n+                                            \"/org/fife/ui/rsyntaxtextarea/themes/dark.xml\"));\n+                    theme.apply(this.syntaxTxtArea);\n+                } catch (IOException e) {\n+                    // Ignore\n+                }\n+            } else {\n+                darkLaF = false;\n+            }\n         }\n         return this.syntaxTxtArea;\n     }\n \n+    private Boolean supportsDarkLaF;\n+    private Method isDarkLookAndFeelMethod;\n+    private boolean darkLaF;\n+\n+    private boolean isDarkLaF() {\n+        // TODO Update to calling the DisplayUtils.isDarkLookAndFeel() method directly once it is\n+        // available\n+        if (supportsDarkLaF == null) {\n+            supportsDarkLaF = false;\n+            try {\n+                Class<DisplayUtils> cls = DisplayUtils.class;\n+                isDarkLookAndFeelMethod = cls.getMethod(\"isDarkLookAndFeel\");\n+                if (isDarkLookAndFeelMethod != null) {\n+                    supportsDarkLaF = true;\n+                }\n+            } catch (Exception e) {\n+                // Ignore\n+            }\n+        }\n+        if (isDarkLookAndFeelMethod != null) {\n+            try {\n+                Object obj = isDarkLookAndFeelMethod.invoke(null);\n+                if (obj instanceof Boolean) {\n+                    return (Boolean) obj;\n+                }\n+            } catch (Exception e) {\n+                // Ignore\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void updateUI() {\n+        super.updateUI();\n+        if (darkLaF != isDarkLaF()) {\n+            if (isDarkLaF()) {\n+                try {\n+                    Theme theme =\n+                            Theme.load(\n+                                    HttpPanelSyntaxHighlightTextArea.class.getResourceAsStream(\n+                                            \"/org/fife/ui/rsyntaxtextarea/themes/dark.xml\"));\n+                    theme.apply(getTxtOutput());\n+                } catch (IOException e) {\n+                    // Ignore\n+                }\n+                darkLaF = true;\n+            } else {\n+                try {\n+                    Theme theme =\n+                            Theme.load(\n+                                    HttpPanelSyntaxHighlightTextArea.class.getResourceAsStream(\n+                                            \"/org/fife/ui/rsyntaxtextarea/themes/default.xml\"));\n+                    theme.apply(getTxtOutput());\n+                } catch (IOException e) {\n+                    // Ignore\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dfd4afaab93e23590c62d21822099ec1c0b7357"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NTM4MA==", "bodyText": "Maybe also extract the xml file path to a constant?", "url": "https://github.com/zaproxy/zap-extensions/pull/2554#discussion_r497445380", "createdAt": "2020-09-30T11:46:23Z", "author": {"login": "kingthorin"}, "path": "addOns/scripts/src/main/java/org/zaproxy/zap/extension/scripts/CommandPanel.java", "diffHunk": "@@ -94,10 +99,86 @@ private SyntaxHighlightTextArea getTxtOutput() {\n             if (listener != null) {\n                 this.syntaxTxtArea.addKeyListener(listener);\n             }\n+            if (isDarkLaF()) {\n+                darkLaF = true;\n+                try {\n+                    Theme theme =\n+                            Theme.load(\n+                                    HttpPanelSyntaxHighlightTextArea.class.getResourceAsStream(\n+                                            \"/org/fife/ui/rsyntaxtextarea/themes/dark.xml\"));\n+                    theme.apply(this.syntaxTxtArea);\n+                } catch (IOException e) {\n+                    // Ignore\n+                }\n+            } else {\n+                darkLaF = false;\n+            }\n         }\n         return this.syntaxTxtArea;\n     }\n \n+    private Boolean supportsDarkLaF;\n+    private Method isDarkLookAndFeelMethod;\n+    private boolean darkLaF;\n+\n+    private boolean isDarkLaF() {\n+        // TODO Update to calling the DisplayUtils.isDarkLookAndFeel() method directly once it is\n+        // available\n+        if (supportsDarkLaF == null) {\n+            supportsDarkLaF = false;\n+            try {\n+                Class<DisplayUtils> cls = DisplayUtils.class;\n+                isDarkLookAndFeelMethod = cls.getMethod(\"isDarkLookAndFeel\");\n+                if (isDarkLookAndFeelMethod != null) {\n+                    supportsDarkLaF = true;\n+                }\n+            } catch (Exception e) {\n+                // Ignore\n+            }\n+        }\n+        if (isDarkLookAndFeelMethod != null) {\n+            try {\n+                Object obj = isDarkLookAndFeelMethod.invoke(null);\n+                if (obj instanceof Boolean) {\n+                    return (Boolean) obj;\n+                }\n+            } catch (Exception e) {\n+                // Ignore\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void updateUI() {\n+        super.updateUI();\n+        if (darkLaF != isDarkLaF()) {\n+            if (isDarkLaF()) {\n+                try {\n+                    Theme theme =\n+                            Theme.load(\n+                                    HttpPanelSyntaxHighlightTextArea.class.getResourceAsStream(\n+                                            \"/org/fife/ui/rsyntaxtextarea/themes/dark.xml\"));\n+                    theme.apply(getTxtOutput());\n+                } catch (IOException e) {\n+                    // Ignore\n+                }\n+                darkLaF = true;\n+            } else {\n+                try {\n+                    Theme theme =\n+                            Theme.load(\n+                                    HttpPanelSyntaxHighlightTextArea.class.getResourceAsStream(\n+                                            \"/org/fife/ui/rsyntaxtextarea/themes/default.xml\"));\n+                    theme.apply(getTxtOutput());\n+                } catch (IOException e) {\n+                    // Ignore\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NTEwMg=="}, "originalCommit": {"oid": "3dfd4afaab93e23590c62d21822099ec1c0b7357"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 677, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}