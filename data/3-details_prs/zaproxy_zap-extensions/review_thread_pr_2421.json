{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MjMxNjEy", "number": 2421, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoyNTo0NlrOEBxTgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo0ODoyMlrOEB6jkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjkxODQyOnYy", "diffSide": "RIGHT", "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoyNTo0NlrOGd0TUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo1MjozNVrOGd1fCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxODgwMg==", "bodyText": "fuzzLocations.get(0).getMessageLocation().getClass()", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433918802", "createdAt": "2020-06-02T14:25:46Z", "author": {"login": "thc202"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +152,7 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(HttpMessage.class, this.getMessageLocationClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463e16b56d25a71d454ff2b600da7c31a934fec9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzODE4NQ==", "bodyText": "hmm makes sense. Will update this in HttpFuzzerHandler.", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433938185", "createdAt": "2020-06-02T14:52:35Z", "author": {"login": "preetkaran20"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +152,7 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(HttpMessage.class, this.getMessageLocationClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxODgwMg=="}, "originalCommit": {"oid": "463e16b56d25a71d454ff2b600da7c31a934fec9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzA0MTMwOnYy", "diffSide": "RIGHT", "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo1NDoyMVrOGd1kRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxMzo0MFrOGd2cjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzOTUyNw==", "bodyText": "Do i need to Overrider this method ? or it is ok to have same fuzzer name ?", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433939527", "createdAt": "2020-06-02T14:54:21Z", "author": {"login": "preetkaran20"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -176,7 +181,7 @@ private HttpFuzzer createFuzzer(\n                 processors);\n     }\n \n-    private String createFuzzerName(HttpMessage message) {\n+    protected String createFuzzerName(HttpMessage message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463e16b56d25a71d454ff2b600da7c31a934fec9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0MzgwMw==", "bodyText": "It's fine to have the default name, but if you think it would be better to show a custom one we can allow to specify one when showing the dialogue.", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433943803", "createdAt": "2020-06-02T14:59:53Z", "author": {"login": "thc202"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -176,7 +181,7 @@ private HttpFuzzer createFuzzer(\n                 processors);\n     }\n \n-    private String createFuzzerName(HttpMessage message) {\n+    protected String createFuzzerName(HttpMessage message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzOTUyNw=="}, "originalCommit": {"oid": "463e16b56d25a71d454ff2b600da7c31a934fec9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1MzkzMg==", "bodyText": "I think then it is ok to have same name for now.", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r433953932", "createdAt": "2020-06-02T15:13:40Z", "author": {"login": "preetkaran20"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -176,7 +181,7 @@ private HttpFuzzer createFuzzer(\n                 processors);\n     }\n \n-    private String createFuzzerName(HttpMessage message) {\n+    protected String createFuzzerName(HttpMessage message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzOTUyNw=="}, "originalCommit": {"oid": "463e16b56d25a71d454ff2b600da7c31a934fec9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI4Mjc5OnYy", "diffSide": "RIGHT", "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1ODoxMlrOGeB4sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo0ODo0M1rOGeDbgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MTM2MA==", "bodyText": "Why is this (and following) being changed?", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434141360", "createdAt": "2020-06-02T19:58:12Z", "author": {"login": "thc202"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -239,15 +240,15 @@ public HttpMessage getMessage(MessageContainer<HttpMessage> messageContainer) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T1 extends HttpFuzzerMessageProcessor, T2 extends HttpFuzzerMessageProcessorUI<T1>>\n+    public <T1 extends HttpFuzzerMessageProcessor, T2 extends HttpFuzzerMessageProcessorUI<T1>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjY1OA==", "bodyText": "I think these are not needed now. will change it.", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434166658", "createdAt": "2020-06-02T20:48:43Z", "author": {"login": "preetkaran20"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -239,15 +240,15 @@ public HttpMessage getMessage(MessageContainer<HttpMessage> messageContainer) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T1 extends HttpFuzzerMessageProcessor, T2 extends HttpFuzzerMessageProcessorUI<T1>>\n+    public <T1 extends HttpFuzzerMessageProcessor, T2 extends HttpFuzzerMessageProcessorUI<T1>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MTM2MA=="}, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDQzNDEwOnYy", "diffSide": "RIGHT", "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo0ODoyMlrOGeDa1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzowNDoxN1rOGea1YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA==", "bodyText": "Hi @thc202 ,\nI found that this has breaked the existing fuzzer reason being that fuzzLocations.get(0).getMessageLocation().getClass() returns the concrete instance class i.e. in case of HttpFuzzer DefaultHttpTextMessageLocation but HttpFuzzer registers the  TextHttpMessageLocationReplacerFactory which returns target class as interface and hence while getting replacer code fails.\nplease suggets.", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434166484", "createdAt": "2020-06-02T20:48:22Z", "author": {"login": "preetkaran20"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +146,9 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(\n+                                HttpMessage.class,\n+                                fuzzLocations.get(0).getMessageLocation().getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2OTc3OA==", "bodyText": "Did the above change to fix the issue. Please suggest.", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434169778", "createdAt": "2020-06-02T20:54:48Z", "author": {"login": "preetkaran20"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +146,9 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(\n+                                HttpMessage.class,\n+                                fuzzLocations.get(0).getMessageLocation().getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ3NDg1Ng==", "bodyText": "It's preferable (more extensible) to change MessageLocationReplacers to walk the class hierarchy of the message location when getting the factory, e.g.:\n--- a/addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/messagelocations/MessageLocationReplacers.java\n+++ b/addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/messagelocations/MessageLocationReplacers.java\n@@ -84,10 +84,35 @@ public class MessageLocationReplacers {\n         if (replacers != null) {\n             @SuppressWarnings(\"unchecked\")\n             MessageLocationReplacerFactory<T> replacerFactory =\n-                    (MessageLocationReplacerFactory<T>) replacers.get(messageLocationClass);\n+                    (MessageLocationReplacerFactory<T>) getFactory(replacers, messageLocationClass);\n             return replacerFactory.createReplacer();\n         }\n \n         return null;\n     }\n+\n+    private static <T> T getFactory(\n+            Map<Class<? extends MessageLocation>, T> factories, Class<?> clazz) {\n+        if (!MessageLocation.class.isAssignableFrom(clazz)) {\n+            return null;\n+        }\n+\n+        T factory = factories.get(clazz);\n+        if (factory != null) {\n+            return factory;\n+        }\n+\n+        factory = getFactory(factories, clazz.getSuperclass());\n+        if (factory != null) {\n+            return factory;\n+        }\n+\n+        for (Class<?> interfaceClazz : clazz.getInterfaces()) {\n+            factory = getFactory(factories, interfaceClazz);\n+            if (factory != null) {\n+                return factory;\n+            }\n+        }\n+        return null;\n+    }\n }", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434474856", "createdAt": "2020-06-03T10:42:30Z", "author": {"login": "thc202"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +146,9 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(\n+                                HttpMessage.class,\n+                                fuzzLocations.get(0).getMessageLocation().getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUxNTc4NQ==", "bodyText": "hmm I was also thinking about it but then i looked at the method name and it is  getTargetMessageLocation\nand from this it seems like it should be the target class. But makes sense if we do this way then there are no changes required in HttpFuzzer.\nthanks,\nKaran", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434515785", "createdAt": "2020-06-03T12:04:46Z", "author": {"login": "preetkaran20"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +146,9 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(\n+                                HttpMessage.class,\n+                                fuzzLocations.get(0).getMessageLocation().getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyNDYwNA==", "bodyText": "And it is, TextHttpMessageLocationReplacerFactory is targeting TextHttpMessageLocation (an interface), so it should handle any implementation of said location.\nDo you mean HttpFuzzerHandler? (There are no changes in HttpFuzzer.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434524604", "createdAt": "2020-06-03T12:21:06Z", "author": {"login": "thc202"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +146,9 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(\n+                                HttpMessage.class,\n+                                fuzzLocations.get(0).getMessageLocation().getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMTAzMw==", "bodyText": "Yes yes, i mean HttpFuzzerHandler", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434531033", "createdAt": "2020-06-03T12:32:29Z", "author": {"login": "preetkaran20"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +146,9 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(\n+                                HttpMessage.class,\n+                                fuzzLocations.get(0).getMessageLocation().getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMjEzOQ==", "bodyText": "That change is still needed though, the one in ExtensionHttpFuzzer would no longer be.", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434532139", "createdAt": "2020-06-03T12:34:34Z", "author": {"login": "thc202"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +146,9 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(\n+                                HttpMessage.class,\n+                                fuzzLocations.get(0).getMessageLocation().getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1MDExMg==", "bodyText": "oh sorry, i got the point. just misplaced the names.", "url": "https://github.com/zaproxy/zap-extensions/pull/2421#discussion_r434550112", "createdAt": "2020-06-03T13:04:17Z", "author": {"login": "preetkaran20"}, "path": "addOns/fuzz/src/main/java/org/zaproxy/zap/extension/fuzz/httpfuzzer/HttpFuzzerHandler.java", "diffHunk": "@@ -147,7 +146,9 @@ private HttpFuzzer createFuzzer(\n \n         MessageLocationReplacer<HttpMessage> replacer =\n                 MessageLocationReplacers.getInstance()\n-                        .getMLR(HttpMessage.class, TextHttpMessageLocation.class);\n+                        .getMLR(\n+                                HttpMessage.class,\n+                                fuzzLocations.get(0).getMessageLocation().getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2NjQ4NA=="}, "originalCommit": {"oid": "e0c0c2d54ca15ad64a7f71f28bc114be2d8e91a7"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 696, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}