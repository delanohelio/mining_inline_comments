{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNzQxNjUz", "number": 2525, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoyOToyM1rOFz_vBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjozMzo1MlrOFz_0-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkwMDY1OTI1OnYy", "diffSide": "RIGHT", "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoyOToyM1rOJL025Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoyOToyM1rOJL025Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjM4MDEzMw==", "bodyText": "URLs \u2192 data? It allows to import whole messages.", "url": "https://github.com/zaproxy/zap-extensions/pull/2525#discussion_r616380133", "createdAt": "2021-04-20T06:29:23Z", "author": {"login": "thc202"}, "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarApi.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.exim.har;\n+\n+import java.io.File;\n+import net.sf.json.JSONObject;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.zaproxy.zap.extension.api.ApiAction;\n+import org.zaproxy.zap.extension.api.ApiException;\n+import org.zaproxy.zap.extension.api.ApiException.Type;\n+import org.zaproxy.zap.extension.api.ApiImplementor;\n+import org.zaproxy.zap.extension.api.ApiResponse;\n+import org.zaproxy.zap.extension.api.ApiResponseElement;\n+import org.zaproxy.zap.utils.ApiUtils;\n+\n+/** The API for importing URLs from a file. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0648c8fce00d2fc9b228c00fe6ddda6c3e072c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkwMDY1OTM3OnYy", "diffSide": "RIGHT", "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoyOToyNVrOJL02-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoyOToyNVrOJL02-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjM4MDE1Mg==", "bodyText": "I'd suggest exim (the same as the add-on ID), to reduce the likelihood of conflicts with other add-ons.", "url": "https://github.com/zaproxy/zap-extensions/pull/2525#discussion_r616380152", "createdAt": "2021-04-20T06:29:25Z", "author": {"login": "thc202"}, "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarApi.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.exim.har;\n+\n+import java.io.File;\n+import net.sf.json.JSONObject;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.zaproxy.zap.extension.api.ApiAction;\n+import org.zaproxy.zap.extension.api.ApiException;\n+import org.zaproxy.zap.extension.api.ApiException.Type;\n+import org.zaproxy.zap.extension.api.ApiImplementor;\n+import org.zaproxy.zap.extension.api.ApiResponse;\n+import org.zaproxy.zap.extension.api.ApiResponseElement;\n+import org.zaproxy.zap.utils.ApiUtils;\n+\n+/** The API for importing URLs from a file. */\n+public class HarApi extends ApiImplementor {\n+\n+    private static final Logger LOG = LogManager.getLogger(HarApi.class);\n+    private static final String PREFIX = \"importexport\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0648c8fce00d2fc9b228c00fe6ddda6c3e072c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkwMDY1OTY5OnYy", "diffSide": "RIGHT", "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoyOTozM1rOJL03LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjoyOTozM1rOJL03LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjM4MDIwNQ==", "bodyText": "Can be removed.", "url": "https://github.com/zaproxy/zap-extensions/pull/2525#discussion_r616380205", "createdAt": "2021-04-20T06:29:33Z", "author": {"login": "thc202"}, "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarApi.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.exim.har;\n+\n+import java.io.File;\n+import net.sf.json.JSONObject;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.zaproxy.zap.extension.api.ApiAction;\n+import org.zaproxy.zap.extension.api.ApiException;\n+import org.zaproxy.zap.extension.api.ApiException.Type;\n+import org.zaproxy.zap.extension.api.ApiImplementor;\n+import org.zaproxy.zap.extension.api.ApiResponse;\n+import org.zaproxy.zap.extension.api.ApiResponseElement;\n+import org.zaproxy.zap.utils.ApiUtils;\n+\n+/** The API for importing URLs from a file. */\n+public class HarApi extends ApiImplementor {\n+\n+    private static final Logger LOG = LogManager.getLogger(HarApi.class);\n+    private static final String PREFIX = \"importexport\";\n+    private static final String ACTION_IMPORTHAR = \"importhar\";\n+    private static final String PARAM_FILE_PATH = \"filePath\";\n+\n+    /** Provided only for API client generator usage. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0648c8fce00d2fc9b228c00fe6ddda6c3e072c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkwMDY2NDEzOnYy", "diffSide": "RIGHT", "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarImporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjozMDo0OVrOJL05xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjozMDo0OVrOJL05xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjM4MDg3MQ==", "bodyText": "This needs to be changed, if the view is not initialised it should not execute in the EDT.", "url": "https://github.com/zaproxy/zap-extensions/pull/2525#discussion_r616380871", "createdAt": "2021-04-20T06:30:49Z", "author": {"login": "thc202"}, "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarImporter.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.exim.har;\n+\n+import edu.umass.cs.benchlab.har.HarContent;\n+import edu.umass.cs.benchlab.har.HarEntries;\n+import edu.umass.cs.benchlab.har.HarEntry;\n+import edu.umass.cs.benchlab.har.HarHeader;\n+import edu.umass.cs.benchlab.har.HarLog;\n+import edu.umass.cs.benchlab.har.HarResponse;\n+import edu.umass.cs.benchlab.har.tools.HarFileReader;\n+import java.awt.EventQueue;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.db.DatabaseException;\n+import org.parosproxy.paros.extension.history.ExtensionHistory;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.network.HttpResponseBody;\n+import org.zaproxy.zap.utils.HarUtils;\n+\n+public class HarImporter {\n+\n+    private static final Logger LOG = LogManager.getLogger(HarImporter.class);\n+\n+    public static List<HttpMessage> getHttpMessages(HarLog log)\n+            throws HttpMalformedHeaderException {\n+        List<HttpMessage> result = new ArrayList<>();\n+        HarEntries entries = log.getEntries();\n+        for (HarEntry entry : entries.getEntries()) {\n+            result.add(getHttpMessage(entry));\n+        }\n+        return result;\n+    }\n+\n+    private static HttpMessage getHttpMessage(HarEntry harEntry)\n+            throws HttpMalformedHeaderException {\n+        HttpMessage result = HarUtils.createHttpMessage(harEntry.getRequest());\n+        setHttpResponse(harEntry.getResponse(), result);\n+        setHistoryReference(harEntry, result);\n+        return result;\n+    }\n+\n+    private static void setHistoryReference(HarEntry harEntry, HttpMessage httpMessage) {\n+        if (harEntry.getCustomFields().getCustomFieldValue(HarUtils.MESSAGE_ID_CUSTOM_FIELD)\n+                == null) {\n+            return;\n+        }\n+\n+        Integer historyId =\n+                Integer.valueOf(\n+                        harEntry.getCustomFields()\n+                                .getCustomFieldValue(HarUtils.MESSAGE_ID_CUSTOM_FIELD));\n+        try {\n+            httpMessage.setHistoryRef(new HistoryReference(historyId.intValue()));\n+        } catch (DatabaseException | HttpMalformedHeaderException e) {\n+            // Ignore.\n+        }\n+    }\n+\n+    private static void setHttpResponse(HarResponse harResponse, HttpMessage message)\n+            throws HttpMalformedHeaderException {\n+        StringBuilder strBuilderResHeader = new StringBuilder();\n+\n+        // empty responses without status code are possible\n+        if (harResponse.getStatus() == 0) {\n+            return;\n+        }\n+\n+        strBuilderResHeader\n+                .append(harResponse.getHttpVersion())\n+                .append(' ')\n+                .append(harResponse.getStatus())\n+                .append(' ')\n+                .append(harResponse.getStatusText())\n+                .append(\"\\r\\n\");\n+\n+        for (HarHeader harHeader : harResponse.getHeaders().getHeaders()) {\n+            strBuilderResHeader\n+                    .append(harHeader.getName())\n+                    .append(\": \")\n+                    .append(harHeader.getValue())\n+                    .append(\"\\r\\n\");\n+        }\n+        strBuilderResHeader.append(\"\\r\\n\");\n+\n+        HarContent harContent = harResponse.getContent();\n+        message.setResponseHeader(new HttpResponseHeader(strBuilderResHeader.toString()));\n+        if (harContent != null) {\n+            message.setResponseBody(new HttpResponseBody(harContent.getText()));\n+        }\n+    }\n+\n+    static boolean importHarFile(File file) {\n+        try {\n+            processMessages(file);\n+            return true;\n+        } catch (IOException e) {\n+            LOG.error(e);\n+            return false;\n+        }\n+    }\n+\n+    public static void processMessages(File file) throws IOException {\n+        List<HttpMessage> messages =\n+                HarImporter.getHttpMessages(new HarFileReader().readHarFile(file));\n+        messages.forEach(message -> persistMessage(message));\n+    }\n+\n+    private static void persistMessage(HttpMessage message) {\n+        HistoryReference historyRef;\n+\n+        if (message.getHistoryRef() == null) {\n+            try {\n+                historyRef =\n+                        new HistoryReference(\n+                                Model.getSingleton().getSession(),\n+                                HistoryReference.TYPE_ZAP_USER,\n+                                message);\n+            } catch (Exception e) {\n+                LOG.warn(e.getMessage(), e);\n+                return;\n+            }\n+        } else {\n+            historyRef = message.getHistoryRef();\n+        }\n+\n+        ExtensionHistory extHistory =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class);\n+        if (extHistory != null) {\n+            EventQueue.invokeLater(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0648c8fce00d2fc9b228c00fe6ddda6c3e072c"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzkwMDY3NDQ4OnYy", "diffSide": "RIGHT", "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarImporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjozMzo1MlrOJL0_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yMFQwNjozMzo1MlrOJL0_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjM4MjQ0Ng==", "bodyText": "I'd suggest removing this (and related logic in persistMessage), it's very unlikely that the IDs would still match.", "url": "https://github.com/zaproxy/zap-extensions/pull/2525#discussion_r616382446", "createdAt": "2021-04-20T06:33:52Z", "author": {"login": "thc202"}, "path": "addOns/exim/src/main/java/org/zaproxy/addon/exim/har/HarImporter.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.exim.har;\n+\n+import edu.umass.cs.benchlab.har.HarContent;\n+import edu.umass.cs.benchlab.har.HarEntries;\n+import edu.umass.cs.benchlab.har.HarEntry;\n+import edu.umass.cs.benchlab.har.HarHeader;\n+import edu.umass.cs.benchlab.har.HarLog;\n+import edu.umass.cs.benchlab.har.HarResponse;\n+import edu.umass.cs.benchlab.har.tools.HarFileReader;\n+import java.awt.EventQueue;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.db.DatabaseException;\n+import org.parosproxy.paros.extension.history.ExtensionHistory;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpResponseHeader;\n+import org.zaproxy.zap.network.HttpResponseBody;\n+import org.zaproxy.zap.utils.HarUtils;\n+\n+public class HarImporter {\n+\n+    private static final Logger LOG = LogManager.getLogger(HarImporter.class);\n+\n+    public static List<HttpMessage> getHttpMessages(HarLog log)\n+            throws HttpMalformedHeaderException {\n+        List<HttpMessage> result = new ArrayList<>();\n+        HarEntries entries = log.getEntries();\n+        for (HarEntry entry : entries.getEntries()) {\n+            result.add(getHttpMessage(entry));\n+        }\n+        return result;\n+    }\n+\n+    private static HttpMessage getHttpMessage(HarEntry harEntry)\n+            throws HttpMalformedHeaderException {\n+        HttpMessage result = HarUtils.createHttpMessage(harEntry.getRequest());\n+        setHttpResponse(harEntry.getResponse(), result);\n+        setHistoryReference(harEntry, result);\n+        return result;\n+    }\n+\n+    private static void setHistoryReference(HarEntry harEntry, HttpMessage httpMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0648c8fce00d2fc9b228c00fe6ddda6c3e072c"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 671, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}