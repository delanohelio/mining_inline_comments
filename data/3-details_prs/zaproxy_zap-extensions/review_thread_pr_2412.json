{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDk4NzYz", "number": 2412, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozNToyMlrOEAQ_3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMjo0MTowMlrOEAV0Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzEzOTQ4OnYy", "diffSide": "RIGHT", "path": "addOns/encoder/src/main/java/org/zaproxy/addon/encoder/EncodeDecodeParamPanel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozNToyMlrOGbcJLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozNToyMlrOGbcJLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNTgzNw==", "bodyText": "I left this dated 2012. Since the only thing that changed was the key names and package declaration.\nI did re-date the Param class itself as it was essentially re-written.", "url": "https://github.com/zaproxy/zap-extensions/pull/2412#discussion_r431425837", "createdAt": "2020-05-27T20:35:22Z", "author": {"login": "kingthorin"}, "path": "addOns/encoder/src/main/java/org/zaproxy/addon/encoder/EncodeDecodeParamPanel.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2012 The ZAP Development Team", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d113600a9c9d6e8b8fc29cbfd24fbb4a4444b1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzkyODM5OnYy", "diffSide": "RIGHT", "path": "addOns/encoder/src/main/java/org/zaproxy/addon/encoder/processors/predefined/Base64Encoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMjo0MTowMlrOGbjwXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMjo0NDowOVrOGbjzTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MDU1OA==", "bodyText": "Per: https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html this wraps at 76, which is the same as: https://github.com/zaproxy/zaproxy/blob/baa415b72755cc5348de8a0259e780152d8e6345/zap/src/main/java/org/parosproxy/paros/extension/encoder/Base64.java#L212-L213", "url": "https://github.com/zaproxy/zap-extensions/pull/2412#discussion_r431550558", "createdAt": "2020-05-28T02:41:02Z", "author": {"login": "kingthorin"}, "path": "addOns/encoder/src/main/java/org/zaproxy/addon/encoder/processors/predefined/Base64Encoder.java", "diffHunk": "@@ -21,12 +21,26 @@\n \n import java.io.IOException;\n import java.util.Base64;\n+import org.parosproxy.paros.control.Control;\n+import org.zaproxy.addon.encoder.EncodeDecodeParam;\n+import org.zaproxy.addon.encoder.ExtensionEncoder;\n \n public class Base64Encoder extends DefaultEncodeDecodeProcessor {\n \n     @Override\n     protected String processInternal(String value) throws IOException {\n-        // Returns based on StandardCharsets.ISO_8859_1\n-        return Base64.getEncoder().encodeToString(value.getBytes());\n+        EncodeDecodeParam encDecParam =\n+                Control.getSingleton()\n+                        .getExtensionLoader()\n+                        .getExtension(ExtensionEncoder.class)\n+                        .getParams();\n+        if (encDecParam.isBase64DoBreakLines()) {\n+            return new String(\n+                    Base64.getMimeEncoder().encode(value.getBytes(encDecParam.getBase64Charset())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d113600a9c9d6e8b8fc29cbfd24fbb4a4444b1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MTMxMQ==", "bodyText": "Could use: https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html#getMimeEncoder-int-byte:A- if for some reason \\n is preferred vs \\r\\n.", "url": "https://github.com/zaproxy/zap-extensions/pull/2412#discussion_r431551311", "createdAt": "2020-05-28T02:44:09Z", "author": {"login": "kingthorin"}, "path": "addOns/encoder/src/main/java/org/zaproxy/addon/encoder/processors/predefined/Base64Encoder.java", "diffHunk": "@@ -21,12 +21,26 @@\n \n import java.io.IOException;\n import java.util.Base64;\n+import org.parosproxy.paros.control.Control;\n+import org.zaproxy.addon.encoder.EncodeDecodeParam;\n+import org.zaproxy.addon.encoder.ExtensionEncoder;\n \n public class Base64Encoder extends DefaultEncodeDecodeProcessor {\n \n     @Override\n     protected String processInternal(String value) throws IOException {\n-        // Returns based on StandardCharsets.ISO_8859_1\n-        return Base64.getEncoder().encodeToString(value.getBytes());\n+        EncodeDecodeParam encDecParam =\n+                Control.getSingleton()\n+                        .getExtensionLoader()\n+                        .getExtension(ExtensionEncoder.class)\n+                        .getParams();\n+        if (encDecParam.isBase64DoBreakLines()) {\n+            return new String(\n+                    Base64.getMimeEncoder().encode(value.getBytes(encDecParam.getBase64Charset())),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU1MDU1OA=="}, "originalCommit": {"oid": "b1d113600a9c9d6e8b8fc29cbfd24fbb4a4444b1"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 692, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}