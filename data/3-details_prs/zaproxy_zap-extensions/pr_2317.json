{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxODI0ODEx", "number": 2317, "title": "Add passive scan rule for dangerous js functions", "bodyText": "Resolves zaproxy/zaproxy#5673\nHello, I'm hoping to get feedback on my initial implementation of the pscan rule. I'm assuming converting the DOM source into a string and checking if it contains methods in the list should be sufficient?\nAdditionally, I don't know how to test the feature properly. The list of functions are loaded from a file and so whenever I try to test it in my dev environment the function list would be empty (since in deployment the files are loaded from Constant.getZapHome)", "createdAt": "2020-02-29T09:23:53Z", "url": "https://github.com/zaproxy/zap-extensions/pull/2317", "merged": true, "mergeCommit": {"oid": "d8e34ee4a71b08a619abda22da2e0dc08c0bdaee"}, "closed": true, "closedAt": "2020-03-20T21:59:56Z", "author": {"login": "madanalogy"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJA9bnAH2gAyMzgxODI0ODExOmE5M2MzYzI0NGY0NDkwMWUzODkyOThmOTg4YWNmMjk1M2I2ZDFlNWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPn05IgFqTM3ODgzNDc5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a93c3c244f44901e389298f988acf2953b6d1e5b", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/a93c3c244f44901e389298f988acf2953b6d1e5b", "committedDate": "2020-02-29T09:18:30Z", "message": "Draft implementation of pscan rule\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11a66a3139ff77f11375eda962c7ffbd167a686e", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/11a66a3139ff77f11375eda962c7ffbd167a686e", "committedDate": "2020-02-29T11:15:51Z", "message": "Finalised initial implementation\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c867368b1242ed890dbbb1ab4e5bb2b7b5a20e0e", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/c867368b1242ed890dbbb1ab4e5bb2b7b5a20e0e", "committedDate": "2020-02-29T11:19:46Z", "message": "Remove unused import\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34b050666023b208e9c395e989b60fc459c1ac1a", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/34b050666023b208e9c395e989b60fc459c1ac1a", "committedDate": "2020-03-01T05:01:09Z", "message": "Remove unnecessary call to getOtherInfo()\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/68238d11904705259903ff3b977c4b51c0e11298", "committedDate": "2020-03-01T05:04:08Z", "message": "Edit comments in raiseAlert method for clarity\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODg0ODE1", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-366884815", "createdAt": "2020-03-01T20:37:16Z", "commit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozNzoxNlrOFwQB0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDo1NjoxOFrOFwQHUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODU3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n          \n          \n            \n                public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n          \n          \n            \n                    if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386138578", "createdAt": "2020-03-01T20:37:16Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODY1Nw==", "bodyText": "At this point you'll need to check if it is a JavaScript file and use msg.getResponseBody().toString() or if it's HTML and use the loop through script elements as you already have.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386138657", "createdAt": "2020-03-01T20:38:24Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isText()) {\n+            StringBuilder evidence = new StringBuilder();\n+            // Check the scripts\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODc1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java\">JSFunctionPassiveScanner.java</a>\n          \n          \n            \n            Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java\">JSFunctionPassiveScanner.java</a>", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386138755", "createdAt": "2020-03-01T20:39:51Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/javahelp/org/zaproxy/zap/extension/pscanrulesAlpha/resources/help/contents/pscanalpha.html", "diffHunk": "@@ -83,5 +83,11 @@ <H2>Sub Resource Integrity Attribute Missing</H2>\n <p>\n Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SubResourceIntegrityAttributeScanner.java\">SubResourceIntegrityAttributeScanner.java</a>\n \n+<H2>Dangerous JS Functions</H2>\n+This scanner checks for any dangerous JS functions present in a site response.<br>\n+For more details see: https://github.com/zaproxy/zaproxy/issues/5673\n+<p>\n+ Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java\">JSFunctionPassiveScanner.java</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTIxOA==", "bodyText": "Please use specific imports not wildcard.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139218", "createdAt": "2020-03-01T20:46:01Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTMzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            pscanalpha.jsfunction.soln=\n          \n          \n            \n            pscanalpha.jsfunction.soln=See the references for security advice on the use of these functions.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139339", "createdAt": "2020-03-01T20:47:33Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/resources/org/zaproxy/zap/extension/pscanrulesAlpha/resources/Messages.properties", "diffHunk": "@@ -81,3 +81,8 @@ pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing\n pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. \n pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.\n pscanalpha.sri-integrity.refs=https://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity\n+\n+pscanalpha.jsfunction.name=Dangerous JS Functions\n+pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.\n+pscanalpha.jsfunction.soln=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTczMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            pscanalpha.jsfunction.refs=https://github.com/danielmiessler/SecLists/issues/367\n          \n          \n            \n            pscanalpha.jsfunction.refs=https://angular.io/guide/security", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139731", "createdAt": "2020-03-01T20:52:54Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/resources/org/zaproxy/zap/extension/pscanrulesAlpha/resources/Messages.properties", "diffHunk": "@@ -81,3 +81,8 @@ pscanalpha.sri-integrity.name=Sub Resource Integrity Attribute Missing\n pscanalpha.sri-integrity.desc=The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content. \n pscanalpha.sri-integrity.soln=Provide a valid integrity attribute to the tag.\n pscanalpha.sri-integrity.refs=https://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity\n+\n+pscanalpha.jsfunction.name=Dangerous JS Functions\n+pscanalpha.jsfunction.desc=A dangerous JS function seems to be in use that would leave the site vulnerable.\n+pscanalpha.jsfunction.soln=\n+pscanalpha.jsfunction.refs=https://github.com/danielmiessler/SecLists/issues/367", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTg1Ng==", "bodyText": "This seems limited to Angular functions.\nIt could include eval() (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) and likely functions from other major frameworks as well.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139856", "createdAt": "2020-03-01T20:54:55Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/zapHomeFiles/xml/js-function-list.txt", "diffHunk": "@@ -0,0 +1,9 @@\n+# This file lists all dangerous JS functions being scanned for\n+bypassSecurityTrustHtml\n+bypassSecurityTrustScript\n+bypassSecurityTrustStyle\n+bypassSecurityTrustUrl\n+bypassSecurityTrustResourceUrl\n+trustAsHtml\n+$eval\n+$evalAsync", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTk0OA==", "bodyText": "You should add a test for one of the functions that has a leading $ since that is a significant regex char.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139948", "createdAt": "2020-03-01T20:55:52Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.*;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.Test;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+public class JSFunctionPassiveScannerUnitTest extends PassiveScannerTest<JSFunctionPassiveScanner> {\n+\n+    @Override\n+    protected JSFunctionPassiveScanner createScanner() {\n+        return new JSFunctionPassiveScanner();\n+    }\n+\n+    @Override\n+    public void setUpZap() throws Exception {\n+        super.setUpZap();\n+\n+        Path xmlDir =\n+                Files.createDirectories(\n+                        Paths.get(Constant.getZapHome(), JSFunctionPassiveScanner.FUNC_LIST_DIR));\n+        Path testFile = xmlDir.resolve(JSFunctionPassiveScanner.FUNC_LIST_FILE);\n+        Files.write(\n+                testFile, Arrays.asList(\"# Test File\", \"bypassSecurityTrustScript\", \"trustAsHtml\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzOTk4Ng==", "bodyText": "You should add unit tests to check this behavior.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386139986", "createdAt": "2020-03-01T20:56:18Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODU3OA=="}, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODg2NDQz", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-366886443", "createdAt": "2020-03-01T21:02:43Z", "commit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTowMjo0M1rOFwQJQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTowMjo0M1rOFwQJQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MDQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            0, // CWE Id - return 0 if no relevant one\n          \n          \n            \n                            749, // CWE-749: Exposed Dangerous Method or Function\n          \n      \n    \n    \n  \n\nOr maybe: CWE-676: Use of Potentially Dangerous Function ?", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386140482", "createdAt": "2020-03-01T21:02:43Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isText()) {\n+            StringBuilder evidence = new StringBuilder();\n+            // Check the scripts\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+            if (evidence.length() > 0) {\n+                this.raiseAlert(msg, id, evidence.toString());\n+            }\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert =\n+                new Alert(getPluginId(), Alert.RISK_MEDIUM, Alert.CONFIDENCE_MEDIUM, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                0, // CWE Id - return 0 if no relevant one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODg2NjA1", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-366886605", "createdAt": "2020-03-01T21:04:28Z", "commit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTowNDoyOFrOFwQJ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTowNDoyOFrOFwQJ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MDY1Mg==", "bodyText": "Do we really feel this is Alert.RISK_MEDIUM we're not checking or suggesting that they're using user input. It's probably more realistic to put it as Alert.RISK_LOW or Alert.RISK_INFO and even Alert.CONFIDENCE_LOW", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386140652", "createdAt": "2020-03-01T21:04:28Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isText()) {\n+            StringBuilder evidence = new StringBuilder();\n+            // Check the scripts\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+            if (evidence.length() > 0) {\n+                this.raiseAlert(msg, id, evidence.toString());\n+            }\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert =\n+                new Alert(getPluginId(), Alert.RISK_MEDIUM, Alert.CONFIDENCE_MEDIUM, getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68238d11904705259903ff3b977c4b51c0e11298"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5fbc6a0e2d3fa75811c1ccdab55103aed36544", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/0b5fbc6a0e2d3fa75811c1ccdab55103aed36544", "committedDate": "2020-03-02T13:37:34Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: kingthorin <kingthorin@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjA0NDM4", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-367204438", "createdAt": "2020-03-02T13:40:42Z", "commit": {"oid": "0b5fbc6a0e2d3fa75811c1ccdab55103aed36544"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0MDo0MlrOFwf2HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0MDo0MlrOFwf2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NzcyNQ==", "bodyText": "This should be added to scanners.md", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r386397725", "createdAt": "2020-03-02T13:40:42Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fbc6a0e2d3fa75811c1ccdab55103aed36544"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa179cb3e68996041d3d93bf5216ad8867f8b796", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/aa179cb3e68996041d3d93bf5216ad8867f8b796", "committedDate": "2020-03-02T14:19:34Z", "message": "Updated CHANGELOG.md and js-function-list.txt\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cb72cf60978a7b5d24f86bec2a1c537a8cfdcc1", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/5cb72cf60978a7b5d24f86bec2a1c537a8cfdcc1", "committedDate": "2020-03-02T14:33:22Z", "message": "Add js file checker and adjust alert\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "addd136e349b37f8d23d65d8e3fd408e39d5deb2", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/addd136e349b37f8d23d65d8e3fd408e39d5deb2", "committedDate": "2020-03-02T16:31:22Z", "message": "Add test cases to unit test and renamed functions in list\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72fbe6ef017cedfa98721ab39602fcdb96c4ab25", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/72fbe6ef017cedfa98721ab39602fcdb96c4ab25", "committedDate": "2020-03-03T12:32:21Z", "message": "Add ExtensionPayloader to pscanrulesAlpha for use in JSFunctionPassiveScanner\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6f2047782e0f629fd1127d84fbbad00a065af20", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/b6f2047782e0f629fd1127d84fbbad00a065af20", "committedDate": "2020-03-03T12:44:45Z", "message": "Add unit test for custom payload\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTU0MzQ1", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-367954345", "createdAt": "2020-03-03T12:56:43Z", "commit": {"oid": "b6f2047782e0f629fd1127d84fbbad00a065af20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjo1Njo0M1rOFxEqGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjo1Njo0M1rOFxEqGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwMDg1OA==", "bodyText": "You'll need to modify the pscanrulesAlpha Messages.properties to setup these keys/values.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r387000858", "createdAt": "2020-03-03T12:56:43Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/payloader/ExtensionPayloader.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha.payloader;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.Extension;\n+import org.parosproxy.paros.extension.ExtensionAdaptor;\n+import org.parosproxy.paros.extension.ExtensionHook;\n+import org.zaproxy.zap.extension.custompayloads.ExtensionCustomPayloads;\n+import org.zaproxy.zap.extension.custompayloads.PayloadCategory;\n+import org.zaproxy.zap.extension.pscanrulesAlpha.JSFunctionPassiveScanner;\n+\n+public class ExtensionPayloader extends ExtensionAdaptor {\n+\n+    public static final String NAME = \"ExtensionPayloaderPscanRulesAlphaRelease\";\n+    private static final List<Class<? extends Extension>> DEPENDENCIES;\n+    private static ExtensionCustomPayloads ecp;\n+    private PayloadCategory jsFuncCategory;\n+\n+    static {\n+        List<Class<? extends Extension>> dependencies = new ArrayList<>(1);\n+        dependencies.add(ExtensionCustomPayloads.class);\n+        DEPENDENCIES = Collections.unmodifiableList(dependencies);\n+    }\n+\n+    public ExtensionPayloader() {\n+        super(NAME);\n+    }\n+\n+    @Override\n+    public void hook(ExtensionHook extensionHook) {\n+        super.hook(extensionHook);\n+\n+        ecp =\n+                Control.getSingleton()\n+                        .getExtensionLoader()\n+                        .getExtension(ExtensionCustomPayloads.class);\n+        jsFuncCategory =\n+                new PayloadCategory(\n+                        JSFunctionPassiveScanner.JS_FUNCTION_PAYLOAD_CATEGORY,\n+                        JSFunctionPassiveScanner.DEFAULT_FUNCTIONS);\n+        ecp.addPayloadCategory(jsFuncCategory);\n+        JSFunctionPassiveScanner.setPayloadProvider(() -> jsFuncCategory.getPayloadsIterator());\n+    }\n+\n+    @Override\n+    public boolean canUnload() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void unload() {\n+        JSFunctionPassiveScanner.setPayloadProvider(null);\n+        ecp.removePayloadCategory(jsFuncCategory);\n+    }\n+\n+    @Override\n+    public List<Class<? extends Extension>> getDependencies() {\n+        return DEPENDENCIES;\n+    }\n+\n+    @Override\n+    public String getAuthor() {\n+        return Constant.ZAP_TEAM;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return Constant.messages.getString(\"pscanrules.payloader.desc\");\n+    }\n+\n+    @Override\n+    public String getUIName() {\n+        return Constant.messages.getString(\"pscanrules.payloader.name\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f2047782e0f629fd1127d84fbbad00a065af20"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/2d44b24ddd06bd30299b5889b99e257a7be3b1a1", "committedDate": "2020-03-03T13:03:29Z", "message": "Add ExtensionPayloader key/value to Messages.properties\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNjUzMTYw", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-372653160", "createdAt": "2020-03-11T10:53:51Z", "commit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDo1Mzo1MVrOF0x_Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMToyMzoyMFrOF0y6UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4OTIxOQ==", "bodyText": "This is misleading, the method already initialises the patterns. Might be better to change to createPatterns and not assign there.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390889219", "createdAt": "2020-03-11T10:53:51Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5Mjg2MQ==", "bodyText": "The evidence field should not contain extraneous characters, it should match exactly what was found in the HTTP message. (It shouldn't be needed anyway, it's just using the first find.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390892861", "createdAt": "2020-03-11T11:00:33Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5Mzg0NQ==", "bodyText": "The length check could be added to the first if statement.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390893845", "createdAt": "2020-03-11T11:02:22Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDE2NA==", "bodyText": "Minimised files will/might not have newlines, we should ensure the line is not too big when adding to the evidence.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390894164", "createdAt": "2020-03-11T11:03:01Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isJavaScript()) {\n+            String[] lines = msg.getResponseBody().toString().split(\"\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDM3OA==", "bodyText": "Same comment regarding the evidence (this might be better for the other info field too).", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390894378", "createdAt": "2020-03-11T11:03:26Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isJavaScript()) {\n+            String[] lines = msg.getResponseBody().toString().split(\"\\n\");\n+            for (String line : lines) {\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(line).find()) {\n+                        evidence.append(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDU3NA==", "bodyText": "Needs update.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390894574", "createdAt": "2020-03-11T11:03:44Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isJavaScript()) {\n+            String[] lines = msg.getResponseBody().toString().split(\"\\n\");\n+            for (String line : lines) {\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(line).find()) {\n+                        evidence.append(\n+                                Constant.messages.getString(\n+                                        MESSAGE_PREFIX + \"otherinfo\", pattern, line));\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this line once\n+                    }\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static List<Pattern> getPatterns() {\n+        if (patterns == null) {\n+            patterns = new ArrayList<>();\n+\n+            try {\n+                File f =\n+                        new File(\n+                                Constant.getZapHome()\n+                                        + File.separator\n+                                        + FUNC_LIST_DIR\n+                                        + File.separator\n+                                        + FUNC_LIST_FILE);\n+                if (!f.exists()) {\n+                    throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+                }\n+                try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                    String line;\n+                    while ((line = reader.readLine()) != null) {\n+                        line = line.trim();\n+                        if (!line.startsWith(\"#\") && line.length() > 0) {\n+                            patterns.add(\n+                                    Pattern.compile(\n+                                            \"\\\\b\" + line + \"\\\\b\", Pattern.CASE_INSENSITIVE));\n+                        }\n+                    }\n+                }\n+            } catch (IOException e) {\n+                LOGGER.error(\n+                        \"Error on opening/reading suspicious comments file: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTUzOA==", "bodyText": "Ideally this should be handled outside this method, otherwise the scanner will miss changes done to the payloads once the patterns is initialised.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390899538", "createdAt": "2020-03-11T11:13:26Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static List<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript()) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            patterns = getPatterns();\n+        }\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseBody().length() > 0 && msg.getResponseHeader().isJavaScript()) {\n+            String[] lines = msg.getResponseBody().toString().split(\"\\n\");\n+            for (String line : lines) {\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(line).find()) {\n+                        evidence.append(\n+                                Constant.messages.getString(\n+                                        MESSAGE_PREFIX + \"otherinfo\", pattern, line));\n+                        evidence.append(\"\\n\");\n+                        break; // Only need to record this line once\n+                    }\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static List<Pattern> getPatterns() {\n+        if (patterns == null) {\n+            patterns = new ArrayList<>();\n+\n+            try {\n+                File f =\n+                        new File(\n+                                Constant.getZapHome()\n+                                        + File.separator\n+                                        + FUNC_LIST_DIR\n+                                        + File.separator\n+                                        + FUNC_LIST_FILE);\n+                if (!f.exists()) {\n+                    throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+                }\n+                try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                    String line;\n+                    while ((line = reader.readLine()) != null) {\n+                        line = line.trim();\n+                        if (!line.startsWith(\"#\") && line.length() > 0) {\n+                            patterns.add(\n+                                    Pattern.compile(\n+                                            \"\\\\b\" + line + \"\\\\b\", Pattern.CASE_INSENSITIVE));\n+                        }\n+                    }\n+                }\n+            } catch (IOException e) {\n+                LOGGER.error(\n+                        \"Error on opening/reading suspicious comments file: \"\n+                                + File.separator\n+                                + FUNC_LIST_DIR\n+                                + File.separator\n+                                + FUNC_LIST_FILE\n+                                + \" Error: \"\n+                                + e.getMessage());\n+            }\n+            for (String payload : getJsFunctionPayloads().get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTc2MA==", "bodyText": "We should provide the details here instead (if needed), in other alert descriptions we don't link to the issues.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390899760", "createdAt": "2020-03-11T11:13:50Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/javahelp/org/zaproxy/zap/extension/pscanrulesAlpha/resources/help/contents/pscanalpha.html", "diffHunk": "@@ -83,5 +83,13 @@ <H2>Sub Resource Integrity Attribute Missing</H2>\n <p>\n Latest code: <a href=\"https://github.com/zaproxy/zap-extensions/blob/master/addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/SubResourceIntegrityAttributeScanner.java\">SubResourceIntegrityAttributeScanner.java</a>\n \n+<H2>Dangerous JS Functions</H2>\n+This scanner checks for any dangerous JS functions present in a site response.<br>\n+For more details see: https://github.com/zaproxy/zaproxy/issues/5673", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTkzMA==", "bodyText": "Is the regex part relevant? That seems to be an implementation detail, or you mean these are to be interpreted as regular expressions as well? If the former we should quote the strings when creating the Pattern otherwise we should catch the exception when the regular expression is invalid.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390899930", "createdAt": "2020-03-11T11:14:15Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/zapHomeFiles/xml/js-function-list.txt", "diffHunk": "@@ -0,0 +1,10 @@\n+# This file lists all dangerous JS functions being scanned for.\n+# Searching is done via regex per whole word match on each line item [e.g. 'eval' will match with '$eval()'].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwNDQwMQ==", "bodyText": "I'd not add these, the test would fail anyway.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r390904401", "createdAt": "2020-03-11T11:23:20Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.Test;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+public class JSFunctionPassiveScannerUnitTest extends PassiveScannerTest<JSFunctionPassiveScanner> {\n+\n+    @Override\n+    protected JSFunctionPassiveScanner createScanner() {\n+        return new JSFunctionPassiveScanner();\n+    }\n+\n+    @Override\n+    public void setUpZap() throws Exception {\n+        super.setUpZap();\n+\n+        Path xmlDir =\n+                Files.createDirectories(\n+                        Paths.get(Constant.getZapHome(), JSFunctionPassiveScanner.FUNC_LIST_DIR));\n+        Path testFile = xmlDir.resolve(JSFunctionPassiveScanner.FUNC_LIST_FILE);\n+        Files.write(testFile, Arrays.asList(\"# Test File\", \"bypassSecurityTrustHtml\", \"eval\"));\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInJavaScriptResponse()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body = \"Some text <script>$eval()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/javascript;charset=ISO-8859-1\");\n+        Source source = createSource(msg);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, source);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInHtmlScriptElements()\n+            throws HttpMalformedHeaderException, URIException {\n+\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>Some Html Element bypassSecurityTrustHtml()</script></h1>\\n\"\n+                        + \"<b>No script here</b>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        assertTrue(msg.getResponseHeader().isText());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d44b24ddd06bd30299b5889b99e257a7be3b1a1"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebc60906a9d8ddd7c8d39338feceb027eade4b40", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/ebc60906a9d8ddd7c8d39338feceb027eade4b40", "committedDate": "2020-03-15T06:28:32Z", "message": "Redesign pattern creation logic\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1da7ed5458350bc2ce161cb92c18390f950d6fe3", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/1da7ed5458350bc2ce161cb92c18390f950d6fe3", "committedDate": "2020-03-15T06:29:31Z", "message": "Rephrase scanner help info\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/f7795d783b2729fe2b71f31218413575a52579f6", "committedDate": "2020-03-15T06:29:55Z", "message": "Add test cases\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NjM5NTMz", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-377639533", "createdAt": "2020-03-19T11:38:34Z", "commit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODY4Mjcx", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-377868271", "createdAt": "2020-03-19T16:06:15Z", "commit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowNjoxNVrOF41iPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjowOTowOVrOF41qiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MTY5Mg==", "bodyText": "Set", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395141692", "createdAt": "2020-03-19T16:06:15Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjEzMQ==", "bodyText": "defaultPatterns? (And rename createPatterns to createDefaultPatterns?)", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395142131", "createdAt": "2020-03-19T16:06:53Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MjM4NA==", "bodyText": "Worth extracting a method to have the same behaviour in both cases (also reduce some duplication).", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395142384", "createdAt": "2020-03-19T16:07:13Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0Mjg1Mw==", "bodyText": "This will include the \\bs also, we can use the group() from the Matcher which would return just the name of the function.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395142853", "createdAt": "2020-03-19T16:07:52Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {\n+                if (pattern.matcher(content).find()) {\n+                    evidence.append(pattern);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzE0OA==", "bodyText": "This should be extracted to a method, same for file and payloads.\nThe line needs to be quoted (Pattern#quote) to handle special regular expressions chars (worth adding a test for the file and custom payloads).", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395143148", "createdAt": "2020-03-19T16:08:14Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {\n+                if (pattern.matcher(content).find()) {\n+                    evidence.append(pattern);\n+                    break; // Only need to record one instance of vulnerability\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static void createPatterns() {\n+        patterns = new HashSet<>();\n+        defaultPatterns = new HashSet<>();\n+        try {\n+            File f =\n+                    new File(\n+                            Constant.getZapHome()\n+                                    + File.separator\n+                                    + FUNC_LIST_DIR\n+                                    + File.separator\n+                                    + FUNC_LIST_FILE);\n+            if (!f.exists()) {\n+                throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+            }\n+            try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    line = line.trim();\n+                    if (!line.startsWith(\"#\") && line.length() > 0) {\n+                        defaultPatterns.add(\n+                                Pattern.compile(\"\\\\b\" + line + \"\\\\b\", Pattern.CASE_INSENSITIVE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzM0OQ==", "bodyText": "Was this meant to be patterns = new HashSet(defaultPatterns);? Otherwise it will change the defaultPatterns.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395143349", "createdAt": "2020-03-19T16:08:30Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {\n+                if (pattern.matcher(content).find()) {\n+                    evidence.append(pattern);\n+                    break; // Only need to record one instance of vulnerability\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static void createPatterns() {\n+        patterns = new HashSet<>();\n+        defaultPatterns = new HashSet<>();\n+        try {\n+            File f =\n+                    new File(\n+                            Constant.getZapHome()\n+                                    + File.separator\n+                                    + FUNC_LIST_DIR\n+                                    + File.separator\n+                                    + FUNC_LIST_FILE);\n+            if (!f.exists()) {\n+                throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+            }\n+            try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    line = line.trim();\n+                    if (!line.startsWith(\"#\") && line.length() > 0) {\n+                        defaultPatterns.add(\n+                                Pattern.compile(\"\\\\b\" + line + \"\\\\b\", Pattern.CASE_INSENSITIVE));\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            LOGGER.error(\n+                    \"Error on opening/reading js functions file: \"\n+                            + File.separator\n+                            + FUNC_LIST_DIR\n+                            + File.separator\n+                            + FUNC_LIST_FILE\n+                            + \" Error: \"\n+                            + e.getMessage());\n+        }\n+    }\n+\n+    private static void loadPayload() {\n+        patterns = defaultPatterns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MzgxNg==", "bodyText": "We should assert the evidence as well to make sure it's the expected.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395143816", "createdAt": "2020-03-19T16:09:09Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.Test;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+public class JSFunctionPassiveScannerUnitTest extends PassiveScannerTest<JSFunctionPassiveScanner> {\n+\n+    @Override\n+    protected JSFunctionPassiveScanner createScanner() {\n+        return new JSFunctionPassiveScanner();\n+    }\n+\n+    @Override\n+    public void setUpZap() throws Exception {\n+        super.setUpZap();\n+\n+        Path xmlDir =\n+                Files.createDirectories(\n+                        Paths.get(Constant.getZapHome(), JSFunctionPassiveScanner.FUNC_LIST_DIR));\n+        Path testFile = xmlDir.resolve(JSFunctionPassiveScanner.FUNC_LIST_FILE);\n+        Files.write(testFile, Arrays.asList(\"# Test File\", \"bypassSecurityTrustHtml\", \"eval\"));\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInJavaScriptResponse()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body = \"Some text <script>$eval()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/javascript;charset=ISO-8859-1\");\n+        Source source = createSource(msg);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, source);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODcyMjc4", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-377872278", "createdAt": "2020-03-19T16:10:35Z", "commit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxMDozNlrOF41uPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoxMDozNlrOF41uPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NDc2NA==", "bodyText": "This could be removed since it's being assigned later.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395144764", "createdAt": "2020-03-19T16:10:36Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static HashSet<Pattern> defaultPatterns = null;\n+    private static HashSet<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (patterns == null) {\n+            createPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                for (Pattern pattern : patterns) {\n+                    if (pattern.matcher(elStr).find()) {\n+                        evidence.append(elStr);\n+                        break; // Only need to record this script once\n+                    }\n+                }\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            for (Pattern pattern : patterns) {\n+                if (pattern.matcher(content).find()) {\n+                    evidence.append(pattern);\n+                    break; // Only need to record one instance of vulnerability\n+                }\n+            }\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static void createPatterns() {\n+        patterns = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7795d783b2729fe2b71f31218413575a52579f6"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96f9a4ee4ed9201742304a669e213ce8bf752cec", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/96f9a4ee4ed9201742304a669e213ce8bf752cec", "committedDate": "2020-03-20T03:40:37Z", "message": "Extract methods for pattern creation and search\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3", "committedDate": "2020-03-20T08:41:41Z", "message": "Remove word boundary regex pattern\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MzY0MTYw", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-378364160", "createdAt": "2020-03-20T10:19:43Z", "commit": {"oid": "f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDoxOTo0M1rOF5OITQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDoxOTo0M1rOF5OITQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NDY1Mw==", "bodyText": "Should be singular, just adding one.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395544653", "createdAt": "2020-03-20T10:19:43Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/main/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScanner.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import net.htmlparser.jericho.Element;\n+import net.htmlparser.jericho.HTMLElementName;\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.extension.pscan.PassiveScanThread;\n+import org.zaproxy.zap.extension.pscan.PluginPassiveScanner;\n+\n+/** Passive Scan Rule for Dangerous JS Functions https://github.com/zaproxy/zaproxy/issues/5673 */\n+public class JSFunctionPassiveScanner extends PluginPassiveScanner {\n+\n+    /** Prefix for internationalized messages used by this rule */\n+    private static final String MESSAGE_PREFIX = \"pscanalpha.jsfunction.\";\n+\n+    public static final String FUNC_LIST_DIR = \"xml\";\n+    public static final String FUNC_LIST_FILE = \"js-function-list.txt\";\n+    private static final Logger LOGGER = Logger.getLogger(JSFunctionPassiveScanner.class);\n+    private static final int PLUGIN_ID = 10110;\n+\n+    public static final List<String> DEFAULT_FUNCTIONS = Collections.emptyList();;\n+    private static final Supplier<Iterable<String>> DEFAULT_PAYLOAD_PROVIDER =\n+            () -> DEFAULT_FUNCTIONS;\n+    public static final String JS_FUNCTION_PAYLOAD_CATEGORY = \"JS-Function\";\n+\n+    private static Supplier<Iterable<String>> payloadProvider = DEFAULT_PAYLOAD_PROVIDER;\n+\n+    private static Set<Pattern> defaultPatterns = null;\n+    private static Set<Pattern> patterns = null;\n+    private PassiveScanThread parent = null;\n+\n+    @Override\n+    public void scanHttpRequestSend(HttpMessage msg, int id) {\n+        // This rule only scans responses received\n+    }\n+\n+    @Override\n+    public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n+        if (msg.getResponseBody().length() <= 0\n+                || (!msg.getResponseHeader().isHtml() && !msg.getResponseHeader().isJavaScript())) {\n+            return;\n+        }\n+        if (defaultPatterns == null) {\n+            createDefaultPatterns();\n+        }\n+        loadPayload();\n+        StringBuilder evidence = new StringBuilder();\n+        if (msg.getResponseHeader().isHtml()) {\n+            // Check the scripts in HTML\n+            Element el;\n+            int offset = 0;\n+            while ((el = source.getNextElement(offset, HTMLElementName.SCRIPT)) != null) {\n+                String elStr = el.toString();\n+                searchPatterns(evidence, elStr);\n+                offset = el.getEnd();\n+            }\n+        } else if (msg.getResponseHeader().isJavaScript()) {\n+            // Raw search on response body\n+            String content = msg.getResponseBody().toString();\n+            searchPatterns(evidence, content);\n+        }\n+        if (evidence.length() > 0) {\n+            this.raiseAlert(msg, id, evidence.toString());\n+        }\n+    }\n+\n+    private void searchPatterns(StringBuilder evidence, String data) {\n+        for (Pattern pattern : patterns) {\n+            Matcher matcher = pattern.matcher(data);\n+            if (matcher.find()) {\n+                evidence.append(matcher.group());\n+                break; // Only need to record one instance of vulnerability\n+            }\n+        }\n+    }\n+\n+    private void raiseAlert(HttpMessage msg, int id, String evidence) {\n+        Alert alert = new Alert(getPluginId(), Alert.RISK_LOW, Alert.CONFIDENCE_LOW, getName());\n+        alert.setDetail(\n+                this.getDescription(),\n+                msg.getRequestHeader().getURI().toString(),\n+                \"\", // Param, not relevant for this vulnerability\n+                \"\", // Attack, not relevant for passive vulnerabilities\n+                \"\", // Other info not specified in message bundle\n+                this.getSolution(),\n+                this.getReference(),\n+                evidence,\n+                749, // CWE-749: Exposed Dangerous Method or Function\n+                0, // WASC Id - return 0 if no relevant one\n+                msg);\n+\n+        parent.raiseAlert(id, alert);\n+    }\n+\n+    private static void createDefaultPatterns() {\n+        defaultPatterns = new HashSet<>();\n+        try {\n+            File f =\n+                    new File(\n+                            Constant.getZapHome()\n+                                    + File.separator\n+                                    + FUNC_LIST_DIR\n+                                    + File.separator\n+                                    + FUNC_LIST_FILE);\n+            if (!f.exists()) {\n+                throw new IOException(\"Couldn't find resource: \" + f.getAbsolutePath());\n+            }\n+            try (BufferedReader reader = new BufferedReader(new FileReader(f))) {\n+                String line;\n+                while ((line = reader.readLine()) != null) {\n+                    line = line.trim();\n+                    if (!line.startsWith(\"#\") && line.length() > 0) {\n+                        addPatterns(line, defaultPatterns);\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            LOGGER.error(\n+                    \"Error on opening/reading js functions file: \"\n+                            + File.separator\n+                            + FUNC_LIST_DIR\n+                            + File.separator\n+                            + FUNC_LIST_FILE\n+                            + \" Error: \"\n+                            + e.getMessage());\n+        }\n+    }\n+\n+    private static void loadPayload() {\n+        patterns = new HashSet<>(defaultPatterns);\n+        for (String line : getJsFunctionPayloads().get()) {\n+            addPatterns(line, patterns);\n+        }\n+    }\n+\n+    private static void addPatterns(String line, Set<Pattern> set) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MzY1Nzcw", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-378365770", "createdAt": "2020-03-20T10:22:09Z", "commit": {"oid": "f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDoyMjowOVrOF5ONCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDoyMjowOVrOF5ONCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NTg2Ng==", "bodyText": "Could assert the evidence here too (and following test).", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395545866", "createdAt": "2020-03-20T10:22:09Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.pscanrulesAlpha;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.junit.Test;\n+import org.parosproxy.paros.Constant;\n+import org.parosproxy.paros.network.HttpMalformedHeaderException;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+\n+public class JSFunctionPassiveScannerUnitTest extends PassiveScannerTest<JSFunctionPassiveScanner> {\n+\n+    @Override\n+    protected JSFunctionPassiveScanner createScanner() {\n+        return new JSFunctionPassiveScanner();\n+    }\n+\n+    @Override\n+    public void setUpZap() throws Exception {\n+        super.setUpZap();\n+\n+        Path xmlDir =\n+                Files.createDirectories(\n+                        Paths.get(Constant.getZapHome(), JSFunctionPassiveScanner.FUNC_LIST_DIR));\n+        Path testFile = xmlDir.resolve(JSFunctionPassiveScanner.FUNC_LIST_FILE);\n+        Files.write(testFile, Arrays.asList(\"# Test File\", \"bypassSecurityTrustHtml\", \"eval\"));\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInJavaScriptResponse()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body = \"Some text <script>$eval()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/javascript;charset=ISO-8859-1\");\n+        Source source = createSource(msg);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, source);\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertEquals(alertsRaised.get(0).getEvidence(), \"eval\");\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenFunctionInHtmlScriptElements()\n+            throws HttpMalformedHeaderException, URIException {\n+\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>Some Html Element bypassSecurityTrustHtml()</script></h1>\\n\"\n+                        + \"<b>No script here</b>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertEquals(alertsRaised.get(0).getEvidence(), \"bypassSecurityTrustHtml\");\n+    }\n+\n+    @Test\n+    public void shouldNotAlertGivenNoMatch() throws URIException, HttpMalformedHeaderException {\n+        // Given\n+        String body = \"Some text <script>innocentFunction()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/javascript;charset=ISO-8859-1\");\n+        Source source = createSource(msg);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, source);\n+\n+        // Then\n+        assertThat(alertsRaised, empty());\n+    }\n+\n+    @Test\n+    public void shouldNotAlertGivenEmptyBody() throws HttpMalformedHeaderException, URIException {\n+\n+        // Given\n+        String body = \"\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, empty());\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenCustomPayloadFunctionMatch()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body = \"Some text <script>$badFunction()</script>\\nLine 2\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+        List<String> functions = Collections.singletonList(\"$badFunction\");\n+        JSFunctionPassiveScanner.setPayloadProvider(() -> functions);\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertEquals(alertsRaised.get(0).getEvidence(), \"$badFunction\");\n+    }\n+\n+    @Test\n+    public void shouldNotAlertGivenMatchOutsideScript()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>Something innocent happening here</script></h1>\\n\"\n+                        + \"<b>You should not use bypassSecurityTrustHtml()</b>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, empty());\n+    }\n+\n+    @Test\n+    public void shouldAlertGivenMatchInSecondScript()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>Something innocent happening here</script></h1>\\n\"\n+                        + \"<p><b>Just some words going on</b>\\n\"\n+                        + \"<script>$eval()</script></p>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));\n+        assertEquals(alertsRaised.get(0).getEvidence(), \"eval\");\n+    }\n+\n+    @Test\n+    public void shouldAlertOnceGivenMultipleMatchesHTML()\n+            throws HttpMalformedHeaderException, URIException {\n+        // Given\n+        String body =\n+                \"<h1>Some text <script>eval()</script></h1>\\n\"\n+                        + \"<p><b>Just some words going on</b>\\n\"\n+                        + \"<script>bypassSecurityTrustHtml()</script></p>\\n\";\n+        HttpMessage msg = createHttpMessageWithRespBody(body, \"text/html;charset=ISO-8859-1\");\n+\n+        // When\n+        rule.scanHttpResponseReceive(msg, -1, createSource(msg));\n+\n+        // Then\n+        assertThat(alertsRaised, hasSize(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87dabfd1dfbcfa9faa8e4cefe738be78791d2c3"}, "originalPosition": 187}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c9f92305dceb62eab29961189a15caef0f41eb6", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/2c9f92305dceb62eab29961189a15caef0f41eb6", "committedDate": "2020-03-20T13:29:02Z", "message": "Add evidence check after html pattern search\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c13f440b3565bafe984bc96c3d95b97a948b93c3", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/c13f440b3565bafe984bc96c3d95b97a948b93c3", "committedDate": "2020-03-20T13:38:37Z", "message": "Fix failing test\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ddbb550b5dd6615c8c7706a4feba507bbc10b10", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/4ddbb550b5dd6615c8c7706a4feba507bbc10b10", "committedDate": "2020-03-20T13:54:39Z", "message": "Add check for hash set non-deterministic iteration\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTMwMTQ5", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-378530149", "createdAt": "2020-03-20T14:27:38Z", "commit": {"oid": "4ddbb550b5dd6615c8c7706a4feba507bbc10b10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoyNzozOFrOF5V8ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoyNzozOFrOF5V8ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY3MjY5OQ==", "bodyText": "We could also use a list? I doubt we'll have many duplications that we require a set.", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#discussion_r395672699", "createdAt": "2020-03-20T14:27:38Z", "author": {"login": "thc202"}, "path": "addOns/pscanrulesAlpha/src/test/java/org/zaproxy/zap/extension/pscanrulesAlpha/JSFunctionPassiveScannerUnitTest.java", "diffHunk": "@@ -185,7 +186,9 @@ public void shouldAlertOnceGivenMultipleMatchesHTML()\n \n         // Then\n         assertThat(alertsRaised, hasSize(1));\n-        assertEquals(alertsRaised.get(0).getEvidence(), \"eval\");\n+        assertTrue(\n+                alertsRaised.get(0).getEvidence().equals(\"bypassSecurityTrustHtml\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ddbb550b5dd6615c8c7706a4feba507bbc10b10"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba659a69d44a9cf69b98c4ba9b5343ed5744555", "author": {"user": {"login": "madanalogy", "name": "Ahmed Bahajjaj"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/4ba659a69d44a9cf69b98c4ba9b5343ed5744555", "committedDate": "2020-03-20T15:56:29Z", "message": "Refactor HashSet to ArrayList\n\nSigned-off-by: madanalogy <Ahmed_Bahajjaj@u.nus.edu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODM0Nzk4", "url": "https://github.com/zaproxy/zap-extensions/pull/2317#pullrequestreview-378834798", "createdAt": "2020-03-20T21:59:01Z", "commit": {"oid": "4ba659a69d44a9cf69b98c4ba9b5343ed5744555"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 402, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}