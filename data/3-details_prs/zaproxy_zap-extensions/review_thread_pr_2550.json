{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDAwOTc3", "number": 2550, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMzo0MlrOEmxakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyODo0OVrOEsp_vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDkwOTYyOnYy", "diffSide": "RIGHT", "path": "addOns/graphql/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMzo0M1rOHW_6-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMDozMzo0M1rOHW_6-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3ODAwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Bug Fixes (Variable Names Clash)\n          \n          \n            \n            - Enhanced Support for Script Input Vectors\n          \n          \n            \n            ### Changed\n          \n          \n            \n            - Bug Fixes (Variable Names Clash).\n          \n          \n            \n            - Enhanced Support for Script Input Vectors.", "url": "https://github.com/zaproxy/zap-extensions/pull/2550#discussion_r493878008", "createdAt": "2020-09-23T20:33:43Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/CHANGELOG.md", "diffHunk": "@@ -4,7 +4,8 @@ All notable changes to this add-on will be documented in this file.\n The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/) and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n \n ## Unreleased\n-\n+- Bug Fixes (Variable Names Clash)\n+- Enhanced Support for Script Input Vectors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a3b32395c4217a181cd7e69d46f84c34419af6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDMzMzc1OnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo1NjoyNFrOHbVOMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDowNjoxMVrOHgAOWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTI5Ng==", "bodyText": "@psiinon / @thc202 is there a core constant or something that would be handier for add-ons (vs. hard coding the path)?", "url": "https://github.com/zaproxy/zap-extensions/pull/2550#discussion_r498421296", "createdAt": "2020-10-01T17:56:24Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -165,6 +181,33 @@ private void stopParserThreads() {\n         parserThreads.clear();\n     }\n \n+    private void addScript() throws IOException {\n+        ExtensionScript extScript =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);\n+        if (extScript != null) {\n+            ScriptType variantType =\n+                    extScript.getScriptType(ExtensionActiveScan.SCRIPT_TYPE_VARIANT);\n+            ScriptEngineWrapper engine =\n+                    extScript.getEngineWrapper(\n+                            Constant.messages.getString(\"graphql.script.engine\"));\n+            if (variantType != null && engine != null) {\n+                String scriptName = Constant.messages.getString(\"graphql.script.name\");\n+                File scriptPath =\n+                        new File(Constant.getZapHome(), \"scripts/scripts/variant/\" + scriptName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddf02e7314d4fcbd89171c9bfa6f5561eab3245"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMDE1NQ==", "bodyText": "Core provides several constants, e.g.:\nPaths.get(Constant.getZapHome(), ExtensionScript.SCRIPTS_DIR, ExtensionScript.SCRIPTS_DIR, ExtensionActiveScan.SCRIPT_TYPE_VARIANT, scriptName).toFile()", "url": "https://github.com/zaproxy/zap-extensions/pull/2550#discussion_r503320155", "createdAt": "2020-10-12T14:06:11Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -165,6 +181,33 @@ private void stopParserThreads() {\n         parserThreads.clear();\n     }\n \n+    private void addScript() throws IOException {\n+        ExtensionScript extScript =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);\n+        if (extScript != null) {\n+            ScriptType variantType =\n+                    extScript.getScriptType(ExtensionActiveScan.SCRIPT_TYPE_VARIANT);\n+            ScriptEngineWrapper engine =\n+                    extScript.getEngineWrapper(\n+                            Constant.messages.getString(\"graphql.script.engine\"));\n+            if (variantType != null && engine != null) {\n+                String scriptName = Constant.messages.getString(\"graphql.script.name\");\n+                File scriptPath =\n+                        new File(Constant.getZapHome(), \"scripts/scripts/variant/\" + scriptName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyMTI5Ng=="}, "originalCommit": {"oid": "0ddf02e7314d4fcbd89171c9bfa6f5561eab3245"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjU5Nzc4OnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNjozM1rOHgBBHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNjozM1rOHgBBHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMzE0OA==", "bodyText": "Does not seem to be used?", "url": "https://github.com/zaproxy/zap-extensions/pull/2550#discussion_r503333148", "createdAt": "2020-10-12T14:26:33Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -60,6 +65,7 @@\n     private static final int ARG_IMPORT_FILE_IDX = 0;\n     private static final int ARG_IMPORT_URL_IDX = 1;\n     private static final int ARG_END_URL_IDX = 2;\n+    private static final String FIELD_ENGINE = \"scripts.dialog.script.label.engine\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6003f56910995270df0db064f423a2e006076a18"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjYwMDA4OnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNzowMlrOHgBCdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNzowMlrOHgBCdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMzQ5NQ==", "bodyText": "&& extScript.getScript(scriptName) == null", "url": "https://github.com/zaproxy/zap-extensions/pull/2550#discussion_r503333495", "createdAt": "2020-10-12T14:27:02Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -165,6 +181,33 @@ private void stopParserThreads() {\n         parserThreads.clear();\n     }\n \n+    private void addScript() throws IOException {\n+        ExtensionScript extScript =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);\n+        if (extScript != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6003f56910995270df0db064f423a2e006076a18"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjYwMTA3OnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNzoxMVrOHgBDAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNzoxMVrOHgBDAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMzYzMw==", "bodyText": "Might be better to hardcode, otherwise the user might end up with several scripts (e.g. when changing language).", "url": "https://github.com/zaproxy/zap-extensions/pull/2550#discussion_r503333633", "createdAt": "2020-10-12T14:27:11Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -165,6 +181,33 @@ private void stopParserThreads() {\n         parserThreads.clear();\n     }\n \n+    private void addScript() throws IOException {\n+        ExtensionScript extScript =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);\n+        if (extScript != null) {\n+            ScriptType variantType =\n+                    extScript.getScriptType(ExtensionActiveScan.SCRIPT_TYPE_VARIANT);\n+            ScriptEngineWrapper engine =\n+                    extScript.getEngineWrapper(\n+                            Constant.messages.getString(\"graphql.script.engine\"));\n+            if (variantType != null && engine != null) {\n+                String scriptName = Constant.messages.getString(\"graphql.script.name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6003f56910995270df0db064f423a2e006076a18"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjYwMjE1OnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNzoyN1rOHgBDpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNzoyN1rOHgBDpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMzc5OA==", "bodyText": "The engine name can be hardcoded.", "url": "https://github.com/zaproxy/zap-extensions/pull/2550#discussion_r503333798", "createdAt": "2020-10-12T14:27:27Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -165,6 +181,33 @@ private void stopParserThreads() {\n         parserThreads.clear();\n     }\n \n+    private void addScript() throws IOException {\n+        ExtensionScript extScript =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);\n+        if (extScript != null) {\n+            ScriptType variantType =\n+                    extScript.getScriptType(ExtensionActiveScan.SCRIPT_TYPE_VARIANT);\n+            ScriptEngineWrapper engine =\n+                    extScript.getEngineWrapper(\n+                            Constant.messages.getString(\"graphql.script.engine\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6003f56910995270df0db064f423a2e006076a18"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjYwNDAwOnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNzo1MVrOHgBEyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyNzo1MVrOHgBEyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzNDA5MA==", "bodyText": "Could check it's null and return to avoid nesting.", "url": "https://github.com/zaproxy/zap-extensions/pull/2550#discussion_r503334090", "createdAt": "2020-10-12T14:27:51Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -64,21 +64,22 @@ public void introspect() throws IOException {\n                 requestor.sendQuery(\n                         IntrospectionQuery.INTROSPECTION_QUERY,\n                         GraphQlParam.RequestMethodOption.POST_JSON);\n-\n-        try {\n-            Map<String, Object> result =\n-                    new Gson()\n-                            .fromJson(\n-                                    importMessage.getResponseBody().toString(),\n-                                    new TypeToken<Map<String, Object>>() {}.getType());\n-            @SuppressWarnings(\"unchecked\")\n-            Document schema =\n-                    new IntrospectionResultToSchema()\n-                            .createSchemaDefinition((Map<String, Object>) result.get(\"data\"));\n-            String schemaSdl = new SchemaPrinter().print(schema);\n-            parse(schemaSdl);\n-        } catch (JsonSyntaxException e) {\n-            throw new IOException(\"The response was not valid JSON.\");\n+        if (importMessage != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6003f56910995270df0db064f423a2e006076a18"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjYwODYyOnYy", "diffSide": "RIGHT", "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/InlineInjector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyODo0OVrOHgBHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyODo0OVrOHgBHhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzNDc4OA==", "bodyText": "boolean", "url": "https://github.com/zaproxy/zap-extensions/pull/2550#discussion_r503334788", "createdAt": "2020-10-12T14:28:49Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/InlineInjector.java", "diffHunk": "@@ -0,0 +1,323 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import graphql.language.Argument;\n+import graphql.language.AstPrinter;\n+import graphql.language.Definition;\n+import graphql.language.Document;\n+import graphql.language.Field;\n+import graphql.language.FragmentDefinition;\n+import graphql.language.InlineFragment;\n+import graphql.language.OperationDefinition;\n+import graphql.language.Selection;\n+import graphql.language.Value;\n+import graphql.language.VariableDefinition;\n+import graphql.parser.Parser;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public final class InlineInjector {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public Map<String, String> extract(String query) {\n+        Document document = Parser.parse(query);\n+        HashMap<String, String> nameValueMap = new HashMap<>();\n+        List<Definition> definitions = document.getDefinitions();\n+        for (Definition definition : definitions) {\n+            // For queries, mutations and subscriptions.\n+            if (definition instanceof OperationDefinition) {\n+                OperationDefinition operation = (OperationDefinition) definition;\n+                StringBuilder variableName = new StringBuilder();\n+                if (operation.getName() != null && !operation.getName().isEmpty()) {\n+                    variableName.append(operation.getName()).append('.');\n+                }\n+                for (Selection<?> selection : operation.getSelectionSet().getSelections()) {\n+                    getArguments(selection, nameValueMap, variableName);\n+                }\n+            }\n+            // For fragment spreads.\n+            else if (definition instanceof FragmentDefinition) {\n+                FragmentDefinition fragment = (FragmentDefinition) definition;\n+                StringBuilder variableName = new StringBuilder(fragment.getName()).append('.');\n+                for (Selection<?> selection : fragment.getSelectionSet().getSelections()) {\n+                    getArguments(selection, nameValueMap, variableName);\n+                }\n+            }\n+        }\n+        return nameValueMap;\n+    }\n+\n+    private void getArguments(\n+            Selection<?> selection, Map<String, String> nameValueMap, StringBuilder variableName) {\n+        if (selection instanceof Field) {\n+            Field field = (Field) selection;\n+            variableName.append(field.getName()).append('.');\n+            List<Argument> args = field.getArguments();\n+            if (args != null && !args.isEmpty()) {\n+                for (Argument arg : args) {\n+                    String argName = variableName + arg.getName();\n+                    String argValue = AstPrinter.printAstCompact(arg.getValue());\n+                    nameValueMap.put(argName, argValue);\n+                }\n+            }\n+            if (field.getSelectionSet() != null) {\n+                for (Selection<?> subSelection : field.getSelectionSet().getSelections()) {\n+                    getArguments(subSelection, nameValueMap, variableName);\n+                }\n+            }\n+            variableName.setLength(variableName.length() - field.getName().length() - 1);\n+        } else if (selection instanceof InlineFragment) {\n+            InlineFragment inlineFragment = (InlineFragment) selection;\n+            variableName.append(inlineFragment.getTypeCondition().getName()).append('.');\n+            if (inlineFragment.getSelectionSet() != null) {\n+                for (Selection<?> subSelection : inlineFragment.getSelectionSet().getSelections()) {\n+                    getArguments(subSelection, nameValueMap, variableName);\n+                }\n+            }\n+            variableName.setLength(\n+                    variableName.length()\n+                            - inlineFragment.getTypeCondition().getName().length()\n+                            - 1);\n+        }\n+    }\n+\n+    public String inject(String query, String name, String value) {\n+        Document tempDocument = Parser.parse(query);\n+        // Reparse with AstPrinter.printAstCompact(...) to get the right source location later.\n+        Document document = Parser.parse(AstPrinter.printAstCompact(tempDocument));\n+        StringBuilder queryBuilder = new StringBuilder(AstPrinter.printAstCompact(document));\n+\n+        HashMap<String, String> nameValueMap = new HashMap<>();\n+        String definitionName = name.substring(0, name.indexOf('.'));\n+\n+        // First check fragment spreads.\n+        List<FragmentDefinition> fragments =\n+                document.getDefinitionsOfType(FragmentDefinition.class);\n+        for (FragmentDefinition fragment : fragments) {\n+            if (definitionName.equals(fragment.getName())) {\n+                for (Selection<?> selection : fragment.getSelectionSet().getSelections()) {\n+                    setPayload(\n+                            queryBuilder, selection, name.substring(name.indexOf('.') + 1), value);\n+                }\n+            }\n+        }\n+\n+        // Then check operations.\n+        // Checking operations later to avoid extra / unnecessary computations in some cases.\n+        List<OperationDefinition> operations =\n+                document.getDefinitionsOfType(OperationDefinition.class);\n+        for (OperationDefinition operation : operations) {\n+            if (operation.getName() != null && !operation.getName().isEmpty()) {\n+                if (definitionName.equals(operation.getName())) {\n+                    for (Selection<?> selection : operation.getSelectionSet().getSelections()) {\n+                        setPayload(\n+                                queryBuilder,\n+                                selection,\n+                                name.substring(name.indexOf('.') + 1),\n+                                value);\n+                    }\n+                }\n+            } else {\n+                for (Selection<?> selection : operation.getSelectionSet().getSelections()) {\n+                    setPayload(queryBuilder, selection, name, value);\n+                }\n+            }\n+\n+            // Remove variable definition of injected argument, if it exists.\n+            // This will only work if the query was generated by the add-on.\n+            List<VariableDefinition> vars = operation.getVariableDefinitions();\n+            if (vars != null && !vars.isEmpty()) {\n+                int startPos = vars.get(0).getSourceLocation().getColumn() - 1;\n+                VariableDefinition endVar = vars.get(vars.size() - 1);\n+                int endPos =\n+                        endVar.getSourceLocation().getColumn()\n+                                + AstPrinter.printAstCompact(endVar).length()\n+                                - 1;\n+\n+                String variableName = name.replace('.', '_');\n+                String csVars =\n+                        vars.stream()\n+                                .filter(var -> !variableName.equals(var.getName()))\n+                                .map(var -> AstPrinter.printAstCompact(var))\n+                                .collect(Collectors.joining(\", \"));\n+                if (csVars.isEmpty()) {\n+                    // Remove parantheses and extra whitespace.\n+                    startPos -= 2;\n+                    endPos++;\n+                }\n+                queryBuilder.replace(startPos, endPos, csVars);\n+            }\n+        }\n+\n+        return queryBuilder.toString();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private void setPayload(\n+            StringBuilder queryBuilder, Selection<?> selection, String name, String value) {\n+        String selectionName = name.substring(0, name.indexOf('.'));\n+        if (selection instanceof Field) {\n+            Field field = (Field) selection;\n+            if (selectionName.equals(field.getName())) {\n+                List<Argument> args = field.getArguments();\n+                if (args != null && !args.isEmpty()) {\n+                    String argName = name.substring(name.indexOf('.') + 1);\n+                    for (Argument arg : args) {\n+                        if (argName.equals(arg.getName())) {\n+                            Value argValue = arg.getValue();\n+                            // Start Location of argument value.\n+                            int ivStartPos = argValue.getSourceLocation().getColumn() - 1;\n+                            // End Location of argument value.\n+                            int ivEndPos =\n+                                    ivStartPos + AstPrinter.printAstCompact(argValue).length();\n+                            queryBuilder.replace(ivStartPos, ivEndPos, value);\n+                            return;\n+                        }\n+                    }\n+                }\n+                if (field.getSelectionSet() != null) {\n+                    for (Selection<?> subSelection : field.getSelectionSet().getSelections()) {\n+                        setPayload(\n+                                queryBuilder,\n+                                subSelection,\n+                                name.substring(name.indexOf('.') + 1),\n+                                value);\n+                    }\n+                }\n+            }\n+        } else if (selection instanceof InlineFragment) {\n+            InlineFragment inlineFragment = (InlineFragment) selection;\n+            if (selectionName.equals(inlineFragment.getTypeCondition().getName())) {\n+                for (Selection<?> subSelection : inlineFragment.getSelectionSet().getSelections()) {\n+                    setPayload(\n+                            queryBuilder,\n+                            subSelection,\n+                            name.substring(name.indexOf('.') + 1),\n+                            value);\n+                }\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public String getNodeName(String query) {\n+        Document tempDocument = Parser.parse(query);\n+        // Reparse to get the right source location.\n+        Document document = Parser.parse(AstPrinter.printAstCompact(tempDocument));\n+        StringBuilder queryBuilder = new StringBuilder(AstPrinter.printAstCompact(document));\n+        StringBuilder queryPrefix = new StringBuilder();\n+\n+        List<Definition> definitions = document.getDefinitions();\n+        for (int i = definitions.size() - 1; i >= 0; i--) {\n+            Definition definition = definitions.get(i);\n+            if (definition instanceof OperationDefinition) {\n+                OperationDefinition operation = (OperationDefinition) definition;\n+                List<Selection> selections = operation.getSelectionSet().getSelections();\n+                for (int j = selections.size() - 1; j >= 0; j--) {\n+                    removeArgs(queryBuilder, selections.get(j));\n+                }\n+\n+                // Remove variable definitions.\n+                List<VariableDefinition> vars = operation.getVariableDefinitions();\n+                if (vars != null && !vars.isEmpty()) {\n+                    // Add '1' if it has variables.\n+                    queryPrefix.insert(0, 1);\n+\n+                    // -1 for offset, -1 for paranthesis, -1 for whitespace.\n+                    int startPos = vars.get(0).getSourceLocation().getColumn() - 3;\n+                    VariableDefinition endVar = vars.get(vars.size() - 1);\n+                    int endPos =\n+                            endVar.getSourceLocation().getColumn()\n+                                    + AstPrinter.printAstCompact(endVar).length();\n+                    queryBuilder.replace(startPos, endPos, \"\");\n+                } else {\n+                    // Add '0' if it does not have variables.\n+                    queryPrefix.insert(0, 0);\n+                }\n+            } else if (definition instanceof FragmentDefinition) {\n+                FragmentDefinition fragment = (FragmentDefinition) definition;\n+                List<Selection> selections = fragment.getSelectionSet().getSelections();\n+                for (int j = selections.size() - 1; j >= 0; j--) {\n+                    removeArgs(queryBuilder, selections.get(j));\n+                }\n+            }\n+        }\n+\n+        queryBuilder.insert(0, queryPrefix.insert(0, '(').append(\") \"));\n+        return queryBuilder.toString();\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private void removeArgs(StringBuilder queryBuilder, Selection<?> selection) {\n+        if (selection instanceof Field) {\n+            Field field = (Field) selection;\n+            if (field.getSelectionSet() != null) {\n+                List<Selection> subSelections = field.getSelectionSet().getSelections();\n+                for (int i = subSelections.size() - 1; i >= 0; i--) {\n+                    removeArgs(queryBuilder, subSelections.get(i));\n+                }\n+            }\n+            List<Argument> args = field.getArguments();\n+            if (args != null && !args.isEmpty()) {\n+                // -1 for offset, -1 for paranthesis.\n+                int startPos = args.get(0).getSourceLocation().getColumn() - 2;\n+                Argument endArg = args.get(args.size() - 1);\n+                int endPos =\n+                        endArg.getSourceLocation().getColumn()\n+                                + AstPrinter.printAstCompact(endArg).length();\n+                queryBuilder.replace(startPos, endPos, \"\");\n+            }\n+        } else if (selection instanceof InlineFragment) {\n+            InlineFragment inlineFragment = (InlineFragment) selection;\n+            List<Selection> subSelections = inlineFragment.getSelectionSet().getSelections();\n+            for (int i = subSelections.size() - 1; i >= 0; i--) {\n+                removeArgs(queryBuilder, subSelections.get(i));\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public String extractOperations(String query) {\n+        Document document = Parser.parse(query);\n+        List<Definition> definitions = document.getDefinitions();\n+        return definitions.stream()\n+                .filter(defn -> defn instanceof OperationDefinition)\n+                .map(defn -> (OperationDefinition) defn)\n+                .map(OperationDefinition::getOperation)\n+                .map(Object::toString)\n+                .map(s -> s.toLowerCase(Locale.ROOT))\n+                .distinct()\n+                .sorted()\n+                .collect(Collectors.joining(\", \"));\n+    }\n+\n+    public Boolean validateQuery(String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6003f56910995270df0db064f423a2e006076a18"}, "originalPosition": 315}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 675, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}