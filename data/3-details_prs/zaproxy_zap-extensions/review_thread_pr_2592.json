{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODE5MjIx", "number": 2592, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1NzoxOVrOEy_2wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToxNTowN1rOEzAQjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTEwNDY1OnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1NzoxOVrOHp9H9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1NzoxOVrOHp9H9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1NTEyNA==", "bodyText": "There's a typo in scoped (also in the commit message/PR description).", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r513755124", "createdAt": "2020-10-28T20:57:19Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/CHANGELOG.md", "diffHunk": "@@ -10,6 +10,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - Maintenance changes.\n - Changed ViewState and XFrameOption rules to return example alerts for the docs\n - Handle an IllegalArgumentException that could occur in the CSP scan rule if multiple CSP headers were present and one (or more) had a report-uri directive when trying to merge them.\n+- Extend support for cookie ignore rule to same site and loosely scopped scan rules.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTEwNTYzOnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1NzozNFrOHp9IhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1NzozNFrOHp9IhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1NTI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void cookieOnIgnoreList() throws HttpMalformedHeaderException {\n          \n          \n            \n                public void shouldNotAlertWhenCookieOnIgnoreList() throws HttpMalformedHeaderException {", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r513755269", "createdAt": "2020-10-28T20:57:34Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRuleUnitTest.java", "diffHunk": "@@ -198,4 +216,39 @@ public void shouldScanHostWithoutTld() throws Exception {\n         // When / Then\n         assertDoesNotThrow(() -> scanHttpResponseReceive(msg));\n     }\n+\n+    @Test\n+    public void cookieOnIgnoreList() throws HttpMalformedHeaderException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTEwNjk1OnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1Nzo1N1rOHp9JRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1Nzo1N1rOHp9JRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1NTQ2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void cookieNotOnIgnoreList() throws HttpMalformedHeaderException {\n          \n          \n            \n                public void shouldAlertWhenCookieNotOnIgnoreList() throws HttpMalformedHeaderException {", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r513755461", "createdAt": "2020-10-28T20:57:57Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRuleUnitTest.java", "diffHunk": "@@ -198,4 +216,39 @@ public void shouldScanHostWithoutTld() throws Exception {\n         // When / Then\n         assertDoesNotThrow(() -> scanHttpResponseReceive(msg));\n     }\n+\n+    @Test\n+    public void cookieOnIgnoreList() throws HttpMalformedHeaderException {\n+        // Given\n+        HttpMessage msg = createBasicMessage();\n+        msg.setRequestHeader(\"GET http://test.example.com/admin/roles HTTP/1.1\");\n+        msg.getResponseHeader()\n+                .setHeader(HttpResponseHeader.SET_COOKIE, \"aaaa=b;domain=.example.com\");\n+        model.getOptionsParam()\n+                .getConfig()\n+                .setProperty(RuleConfigParam.RULE_COOKIE_IGNORE_LIST, \"aaaa,bbb,ccc\");\n+\n+        // When\n+        scanHttpResponseReceive(msg);\n+\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(0));\n+    }\n+\n+    @Test\n+    public void cookieNotOnIgnoreList() throws HttpMalformedHeaderException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTEwOTM3OnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1ODozOFrOHp9K1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1ODozOFrOHp9K1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1NTg2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void cookieOnIgnoreList() throws HttpMalformedHeaderException {\n          \n          \n            \n                public void shouldNotAlertWhenCookieOnIgnoreList() throws HttpMalformedHeaderException {", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r513755860", "createdAt": "2020-10-28T20:58:38Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRuleUnitTest.java", "diffHunk": "@@ -307,4 +324,52 @@ public void secondCookieNoSameSiteAttributeFirstExpired() throws HttpMalformedHe\n         assertThat(alertsRaised.get(0).getParam(), equalTo(\"test\"));\n         assertThat(alertsRaised.get(0).getEvidence(), equalTo(\"Set-Cookie: test\"));\n     }\n+\n+    @Test\n+    public void cookieOnIgnoreList() throws HttpMalformedHeaderException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTExMzEzOnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1OTozM1rOHp9NAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo1OTozM1rOHp9NAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc1NjQxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void cookieNotOnIgnoreList() throws HttpMalformedHeaderException {\n          \n          \n            \n                public void shouldAlertWhenCookieNotOnIgnoreList() throws HttpMalformedHeaderException {", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r513756418", "createdAt": "2020-10-28T20:59:33Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRuleUnitTest.java", "diffHunk": "@@ -307,4 +324,52 @@ public void secondCookieNoSameSiteAttributeFirstExpired() throws HttpMalformedHe\n         assertThat(alertsRaised.get(0).getParam(), equalTo(\"test\"));\n         assertThat(alertsRaised.get(0).getEvidence(), equalTo(\"Set-Cookie: test\"));\n     }\n+\n+    @Test\n+    public void cookieOnIgnoreList() throws HttpMalformedHeaderException {\n+        model.getOptionsParam()\n+                .getConfig()\n+                .setProperty(RuleConfigParam.RULE_COOKIE_IGNORE_LIST, \"aaaa,test,bbb\");\n+\n+        HttpMessage msg = new HttpMessage();\n+        msg.setRequestHeader(\"GET https://www.example.com/test/ HTTP/1.1\");\n+\n+        msg.setResponseBody(\"<html></html>\");\n+        msg.setResponseHeader(\n+                \"HTTP/1.1 200 OK\\r\\n\"\n+                        + \"Server: Apache-Coyote/1.1\\r\\n\"\n+                        + \"Set-Cookie: test=123; Path=/; HttpOnly\\r\\n\"\n+                        + \"Content-Type: text/html;charset=ISO-8859-1\\r\\n\"\n+                        + \"Content-Length: \"\n+                        + msg.getResponseBody().length()\n+                        + \"\\r\\n\");\n+        scanHttpResponseReceive(msg);\n+\n+        assertThat(alertsRaised.size(), equalTo(0));\n+    }\n+\n+    @Test\n+    public void cookieNotOnIgnoreList() throws HttpMalformedHeaderException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTE2NjIzOnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRule.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToxMzo1OVrOHp9tFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOTowMTo1MVrOHqSNAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NDYyOA==", "bodyText": "This should be done in the above if and before calling isLooselyScopedCookie, avoids doing all the work if the cookie is ignored.", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r513764628", "createdAt": "2020-10-28T21:13:59Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRule.java", "diffHunk": "@@ -58,11 +63,15 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n         // name of a host from which the response has been sent from\n         String host = msg.getRequestHeader().getHostName();\n \n+        Set<String> ignoreList = CookieUtils.getCookieIgnoreList(getModel());\n+\n         // find all loosely scoped cookies\n         List<HttpCookie> looselyScopedCookies = new LinkedList<HttpCookie>();\n         for (HttpCookie cookie : cookies) {\n             if (isLooselyScopedCookie(cookie, host)) {\n-                looselyScopedCookies.add(cookie);\n+                if (!ignoreList.contains(cookie.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2ODk2OA==", "bodyText": "Could you add the condition to the above if instead of nesting? (Same comment for the other scan rule.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r514068968", "createdAt": "2020-10-29T08:06:40Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRule.java", "diffHunk": "@@ -58,11 +63,15 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n         // name of a host from which the response has been sent from\n         String host = msg.getRequestHeader().getHostName();\n \n+        Set<String> ignoreList = CookieUtils.getCookieIgnoreList(getModel());\n+\n         // find all loosely scoped cookies\n         List<HttpCookie> looselyScopedCookies = new LinkedList<HttpCookie>();\n         for (HttpCookie cookie : cookies) {\n             if (isLooselyScopedCookie(cookie, host)) {\n-                looselyScopedCookies.add(cookie);\n+                if (!ignoreList.contains(cookie.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NDYyOA=="}, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NTIyMg==", "bodyText": "Done.\nThe other rule has if-elif nested structure. I'd suggest to not merge conditionals there.", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r514095222", "createdAt": "2020-10-29T08:53:22Z", "author": {"login": "dhruvil-93"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRule.java", "diffHunk": "@@ -58,11 +63,15 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n         // name of a host from which the response has been sent from\n         String host = msg.getRequestHeader().getHostName();\n \n+        Set<String> ignoreList = CookieUtils.getCookieIgnoreList(getModel());\n+\n         // find all loosely scoped cookies\n         List<HttpCookie> looselyScopedCookies = new LinkedList<HttpCookie>();\n         for (HttpCookie cookie : cookies) {\n             if (isLooselyScopedCookie(cookie, host)) {\n-                looselyScopedCookies.add(cookie);\n+                if (!ignoreList.contains(cookie.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NDYyOA=="}, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NjkyMw==", "bodyText": "I was suggesting adding to the if that continues, it does not add additional nesting and is straightforward to read.", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r514096923", "createdAt": "2020-10-29T08:56:10Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRule.java", "diffHunk": "@@ -58,11 +63,15 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n         // name of a host from which the response has been sent from\n         String host = msg.getRequestHeader().getHostName();\n \n+        Set<String> ignoreList = CookieUtils.getCookieIgnoreList(getModel());\n+\n         // find all loosely scoped cookies\n         List<HttpCookie> looselyScopedCookies = new LinkedList<HttpCookie>();\n         for (HttpCookie cookie : cookies) {\n             if (isLooselyScopedCookie(cookie, host)) {\n-                looselyScopedCookies.add(cookie);\n+                if (!ignoreList.contains(cookie.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NDYyOA=="}, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMDQ4MA==", "bodyText": "Makes sense. Updated.", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r514100480", "createdAt": "2020-10-29T09:01:51Z", "author": {"login": "dhruvil-93"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieLooselyScopedScanRule.java", "diffHunk": "@@ -58,11 +63,15 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n         // name of a host from which the response has been sent from\n         String host = msg.getRequestHeader().getHostName();\n \n+        Set<String> ignoreList = CookieUtils.getCookieIgnoreList(getModel());\n+\n         // find all loosely scoped cookies\n         List<HttpCookie> looselyScopedCookies = new LinkedList<HttpCookie>();\n         for (HttpCookie cookie : cookies) {\n             if (isLooselyScopedCookie(cookie, host)) {\n-                looselyScopedCookies.add(cookie);\n+                if (!ignoreList.contains(cookie.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NDYyOA=="}, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTE3MDY4OnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToxNTowN1rOHp9vnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTozOTowMVrOHrB5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NTI3Nw==", "bodyText": "This should be done in the above if, same reason as the previous comment.", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r513765277", "createdAt": "2020-10-28T21:15:07Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java", "diffHunk": "@@ -62,19 +66,30 @@ private void checkCookies(HttpMessage msg, int id, String cookieHeader) {\n         if (cookies.isEmpty()) {\n             return;\n         }\n+\n+        Set<String> ignoreList = CookieUtils.getCookieIgnoreList(getModel());\n+\n         for (String cookie : cookies) {\n             if (CookieUtils.isExpired(cookie)) {\n                 continue;\n             }\n+            boolean isInIgnoreList = ignoreList.contains(CookieUtils.getCookieName(cookie));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4MTgwNA==", "bodyText": "Updated PR", "url": "https://github.com/zaproxy/zap-extensions/pull/2592#discussion_r514881804", "createdAt": "2020-10-30T05:39:01Z", "author": {"login": "dhruvil-93"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanRule.java", "diffHunk": "@@ -62,19 +66,30 @@ private void checkCookies(HttpMessage msg, int id, String cookieHeader) {\n         if (cookies.isEmpty()) {\n             return;\n         }\n+\n+        Set<String> ignoreList = CookieUtils.getCookieIgnoreList(getModel());\n+\n         for (String cookie : cookies) {\n             if (CookieUtils.isExpired(cookie)) {\n                 continue;\n             }\n+            boolean isInIgnoreList = ignoreList.contains(CookieUtils.getCookieName(cookie));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NTI3Nw=="}, "originalCommit": {"oid": "ccfe3b32ae86a7f722f011f2c52754df8b315bd9"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 647, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}