{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDMyOTU3", "number": 2562, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMjo0OVrOEqbNow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMjo1NFrOEqbNvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTIxNTA3OnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/HtAccesScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMjo0OVrOHcn-qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMjo0OVrOHcn-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NzE5NA==", "bodyText": "Was the path meant to be URL? (It's giving 404 otherwise.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2562#discussion_r499777194", "createdAt": "2020-10-05T18:02:49Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/HtAccesScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.addon.commonlib.AbstractAppFilePluginUnitTest;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+\n+/** Unit test for {@link HtAccessScanRule}. */\n+public class HtAccesScanRuleUnitTest extends AbstractAppFilePluginUnitTest<HtAccessScanRule> {\n+\n+    private static final String URL = \"/.htaccess\";\n+    private static final String HTACCESS_BODY = \"order allow,deny\";\n+\n+    private static final String DEFAULT_BODY =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head></head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected HtAccessScanRule createScanner() {\n+        return new HtAccessScanRule();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.setBody(HTACCESS_BODY);\n+    }\n+\n+    @Override\n+    protected void setUpMessages() {\n+        mockMessages(new ExtensionAscanRulesBeta());\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonHtaccessFileFoundStdThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse());\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonHtaccessFileFoundLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse());\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings={\"application/json\", \"application/xml\"})\n+    public void shouldNotAlertIfResponseIsJsonOrXml(String contentType) throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse(\"//\", contentType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81402d264b4e16c501df9e5b67bca0f1701756c"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTIxNTIxOnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/HtAccesScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMjo1MVrOHcn-wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDoxMDo1OFrOHcsERw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NzIxNg==", "bodyText": "Missing @Test.", "url": "https://github.com/zaproxy/zap-extensions/pull/2562#discussion_r499777216", "createdAt": "2020-10-05T18:02:51Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/HtAccesScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.addon.commonlib.AbstractAppFilePluginUnitTest;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+\n+/** Unit test for {@link HtAccessScanRule}. */\n+public class HtAccesScanRuleUnitTest extends AbstractAppFilePluginUnitTest<HtAccessScanRule> {\n+\n+    private static final String URL = \"/.htaccess\";\n+    private static final String HTACCESS_BODY = \"order allow,deny\";\n+\n+    private static final String DEFAULT_BODY =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head></head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected HtAccessScanRule createScanner() {\n+        return new HtAccessScanRule();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.setBody(HTACCESS_BODY);\n+    }\n+\n+    @Override\n+    protected void setUpMessages() {\n+        mockMessages(new ExtensionAscanRulesBeta());\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonHtaccessFileFoundStdThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse());\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonHtaccessFileFoundLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse());\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings={\"application/json\", \"application/xml\"})\n+    public void shouldNotAlertIfResponseIsJsonOrXml(String contentType) throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse(\"//\", contentType));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    public void shouldNotAlertIfResponseIsEmpty() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81402d264b4e16c501df9e5b67bca0f1701756c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0NDE2Nw==", "bodyText": "This was not added in the latest push.", "url": "https://github.com/zaproxy/zap-extensions/pull/2562#discussion_r499844167", "createdAt": "2020-10-05T20:10:58Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/HtAccesScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.addon.commonlib.AbstractAppFilePluginUnitTest;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+\n+/** Unit test for {@link HtAccessScanRule}. */\n+public class HtAccesScanRuleUnitTest extends AbstractAppFilePluginUnitTest<HtAccessScanRule> {\n+\n+    private static final String URL = \"/.htaccess\";\n+    private static final String HTACCESS_BODY = \"order allow,deny\";\n+\n+    private static final String DEFAULT_BODY =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head></head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected HtAccessScanRule createScanner() {\n+        return new HtAccessScanRule();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.setBody(HTACCESS_BODY);\n+    }\n+\n+    @Override\n+    protected void setUpMessages() {\n+        mockMessages(new ExtensionAscanRulesBeta());\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonHtaccessFileFoundStdThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse());\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonHtaccessFileFoundLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse());\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings={\"application/json\", \"application/xml\"})\n+    public void shouldNotAlertIfResponseIsJsonOrXml(String contentType) throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse(\"//\", contentType));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    public void shouldNotAlertIfResponseIsEmpty() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NzIxNg=="}, "originalCommit": {"oid": "d81402d264b4e16c501df9e5b67bca0f1701756c"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTIxNTM0OnYy", "diffSide": "RIGHT", "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/HtAccesScanRuleUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMjo1NFrOHcn-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMjo1NFrOHcn-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NzI0MA==", "bodyText": "URL instead?", "url": "https://github.com/zaproxy/zap-extensions/pull/2562#discussion_r499777240", "createdAt": "2020-10-05T18:02:54Z", "author": {"login": "thc202"}, "path": "addOns/ascanrulesBeta/src/test/java/org/zaproxy/zap/extension/ascanrulesBeta/HtAccesScanRuleUnitTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.ascanrulesBeta;\n+\n+import static fi.iki.elonen.NanoHTTPD.newFixedLengthResponse;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+\n+import fi.iki.elonen.NanoHTTPD.IHTTPSession;\n+import fi.iki.elonen.NanoHTTPD.Response;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.addon.commonlib.AbstractAppFilePluginUnitTest;\n+import org.zaproxy.zap.testutils.NanoServerHandler;\n+\n+/** Unit test for {@link HtAccessScanRule}. */\n+public class HtAccesScanRuleUnitTest extends AbstractAppFilePluginUnitTest<HtAccessScanRule> {\n+\n+    private static final String URL = \"/.htaccess\";\n+    private static final String HTACCESS_BODY = \"order allow,deny\";\n+\n+    private static final String DEFAULT_BODY =\n+            \"<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n\"\n+                    + \"<html><head></head><body>\\n\"\n+                    + \"<h1>Error Log for testing</h1>\\n\"\n+                    + \"<p>Blah blah blah.</p>\\n\"\n+                    + \"</body></html>\";\n+\n+    @Override\n+    protected HtAccessScanRule createScanner() {\n+        return new HtAccessScanRule();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.setBody(HTACCESS_BODY);\n+    }\n+\n+    @Override\n+    protected void setUpMessages() {\n+        mockMessages(new ExtensionAscanRulesBeta());\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonHtaccessFileFoundStdThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse());\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @Test\n+    public void shouldNotAlertIfNonHtaccessFileFoundLowThreshold() throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse());\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        rule.setAlertThreshold(AlertThreshold.LOW);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings={\"application/json\", \"application/xml\"})\n+    public void shouldNotAlertIfResponseIsJsonOrXml(String contentType) throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse(\"//\", contentType));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    public void shouldNotAlertIfResponseIsEmpty() throws Exception {\n+        // Given\n+        nano.addHandler(new MiscOkResponse(\"\"));\n+        HttpMessage message = getHttpMessage(URL);\n+        rule.init(message, parent);\n+        // When\n+        rule.scan();\n+        // Then\n+        assertThat(alertsRaised, hasSize(0));\n+    }\n+\n+    private static class MiscOkResponse extends NanoServerHandler {\n+\n+        String contentType = \"text.html\";\n+        String content = DEFAULT_BODY;\n+\n+        public MiscOkResponse() {\n+            super(\"\\\\\");\n+        }\n+\n+        public MiscOkResponse(String content) {\n+            super(\"\\\\\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81402d264b4e16c501df9e5b67bca0f1701756c"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 678, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}