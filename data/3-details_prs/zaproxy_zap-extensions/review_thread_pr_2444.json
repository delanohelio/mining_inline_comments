{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NTY5NDIz", "number": 2444, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTowMFrOEF_EuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo1MDoyN1rOERFP6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzExNzM2OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTowMFrOGkgSSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTowMFrOGkgSSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMDg4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n          \n          \n            \n            The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)\n          \n          \n            \n            and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440930888", "createdAt": "2020-06-16T15:15:00Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/CHANGELOG.md", "diffHunk": "@@ -0,0 +1,8 @@\n+# Changelog\n+All notable changes to this add-on will be documented in this file.\n+\n+The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzExNzk1OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/kotlin.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTowNlrOGkgSmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTowNlrOGkgSmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMDk3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            plugins {\n          \n          \n            \n                kotlin(\"jvm\") version \"1.3.50\"\n          \n          \n            \n            }", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440930970", "createdAt": "2020-06-16T15:15:06Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/kotlin.gradle.kts", "diffHunk": "@@ -0,0 +1,27 @@\n+import org.zaproxy.gradle.addon.AddOnStatus\n+\n+plugins {\n+    kotlin(\"jvm\") version \"1.3.50\"\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzExODE1OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/kotlin.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTowOFrOGkgSuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTowOFrOGkgSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTAwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            description = \"Allows Kotlin to be used for ZAP scripting - (some) templates included\"\n          \n          \n            \n            description = \"Allows Kotlin to be used for ZAP scripting\"", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440931003", "createdAt": "2020-06-16T15:15:08Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/kotlin.gradle.kts", "diffHunk": "@@ -0,0 +1,27 @@\n+import org.zaproxy.gradle.addon.AddOnStatus\n+\n+plugins {\n+    kotlin(\"jvm\") version \"1.3.50\"\n+}\n+\n+version = \"1.0.0\"\n+description = \"Allows Kotlin to be used for ZAP scripting - (some) templates included\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzExODkyOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/kotlin.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNToxN1rOGkgTOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNToxN1rOGkgTOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTEzMA==", "bodyText": "Based on JetBrains/kotlin#2057 (comment) we should probably avoid using this one, and rely directly on JSR223 dependencies.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n          \n          \n            \n                implementation(\"org.jetbrains.kotlin:kotlin-compiler-embeddable\")\n          \n          \n            \n                implementation(\"org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable\")\n          \n          \n            \n                implementation(\"org.jetbrains.kotlin:kotlin-script-util\")\n          \n          \n            \n                val ktVersion = \"1.3.72\"\n          \n          \n            \n                api(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$ktVersion\")\n          \n          \n            \n                implementation(\"org.jetbrains.kotlin:kotlin-scripting-jsr223-embeddable:$ktVersion\")\n          \n          \n            \n                implementation(\"org.jetbrains.kotlin:kotlin-compiler-embeddable:$ktVersion\")", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440931130", "createdAt": "2020-06-16T15:15:17Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/kotlin.gradle.kts", "diffHunk": "@@ -0,0 +1,27 @@\n+import org.zaproxy.gradle.addon.AddOnStatus\n+\n+plugins {\n+    kotlin(\"jvm\") version \"1.3.50\"\n+}\n+\n+version = \"1.0.0\"\n+description = \"Allows Kotlin to be used for ZAP scripting - (some) templates included\"\n+\n+zapAddOn {\n+    addOnName.set(\"Kotlin Support\")\n+    addOnStatus.set(AddOnStatus.ALPHA)\n+    zapVersion.set(\"2.9.0\")\n+\n+    manifest {\n+        author.set(\"StackHawk Engineering\")\n+    }\n+}\n+\n+dependencies {\n+    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n+    implementation(\"org.jetbrains.kotlin:kotlin-compiler-embeddable\")\n+    implementation(\"org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable\")\n+    implementation(\"org.jetbrains.kotlin:kotlin-script-util\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzExOTkxOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTozMlrOGkgT6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTozMlrOGkgT6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final int EXTENSION_ORDER = 9999;\n          \n          \n            \n                public static final ImageIcon KOTLIN_ICON;\n          \n          \n            \n            \n          \n          \n            \n                static final ImageIcon KOTLIN_ICON;", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440931304", "createdAt": "2020-06-16T15:15:32Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.swing.*;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.Extension;\n+import org.parosproxy.paros.extension.ExtensionAdaptor;\n+import org.parosproxy.paros.extension.ExtensionHook;\n+import org.parosproxy.paros.view.View;\n+import org.zaproxy.zap.ZAP;\n+import org.zaproxy.zap.control.AddOnLoader;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.ExtensionScript;\n+\n+public class ExtensionKotlin extends ExtensionAdaptor {\n+\n+    public static final String NAME = \"ExtensionKotlin\";\n+    public static final int EXTENSION_ORDER = 9999;\n+    public static final ImageIcon KOTLIN_ICON;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzEyMDI0OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTozNlrOGkgUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTozNlrOGkgUFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTM1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                public ExtensionKotlin() {\n          \n          \n            \n                    super(NAME);\n          \n          \n            \n                    setOrder(EXTENSION_ORDER);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private KotlinEngineWrapper engineWrapper;\n          \n          \n            \n            \n          \n          \n            \n                public ExtensionKotlin() {\n          \n          \n            \n                    super(NAME);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public String getUIName() {\n          \n          \n            \n                    return Constant.messages.getString(\"kotlin.name\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public String getDescription() {\n          \n          \n            \n                    return Constant.messages.getString(\"kotlin.desc\");\n          \n          \n            \n                }", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440931350", "createdAt": "2020-06-16T15:15:36Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.swing.*;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.Extension;\n+import org.parosproxy.paros.extension.ExtensionAdaptor;\n+import org.parosproxy.paros.extension.ExtensionHook;\n+import org.parosproxy.paros.view.View;\n+import org.zaproxy.zap.ZAP;\n+import org.zaproxy.zap.control.AddOnLoader;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.ExtensionScript;\n+\n+public class ExtensionKotlin extends ExtensionAdaptor {\n+\n+    public static final String NAME = \"ExtensionKotlin\";\n+    public static final int EXTENSION_ORDER = 9999;\n+    public static final ImageIcon KOTLIN_ICON;\n+    private static final List<Class<? extends Extension>> EXTENSION_DEPENDENCIES;\n+    private static final Logger LOGGER = Logger.getLogger(ExtensionKotlin.class);\n+\n+    static {\n+        List<Class<? extends Extension>> dependencies = new ArrayList<>(1);\n+        dependencies.add(ExtensionScript.class);\n+        EXTENSION_DEPENDENCIES = Collections.unmodifiableList(dependencies);\n+\n+        KOTLIN_ICON =\n+                View.isInitialised()\n+                        ? new ImageIcon(\n+                                ExtensionKotlin.class.getResource(\n+                                        \"/org/zaproxy/zap/extension/kotlin/resources/kotlin.png\"))\n+                        : null;\n+    }\n+\n+    public ExtensionKotlin() {\n+        super(NAME);\n+        setOrder(EXTENSION_ORDER);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzEyMDQwOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTozOFrOGkgUKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTozOFrOGkgUKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTM3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.debug(\"Hooking Kotlin Scripting Extension\");\n          \n          \n            \n                    String zapJar = ZAP.class.getProtectionDomain().getCodeSource().getLocation().getFile();\n          \n          \n            \n            \n          \n          \n            \n                    LOGGER.debug(\"Loading Kotlin engine...\");\n          \n          \n            \n                    AddOnLoader addonLoader = ExtensionFactory.getAddOnLoader();\n          \n          \n            \n                    Arrays.stream(addonLoader.getURLs()).forEach(LOGGER::debug);\n          \n          \n            \n                    KotlinScriptEngineFactory factory = new KotlinScriptEngineFactory(addonLoader, zapJar);\n          \n          \n            \n                    getExtScript().registerScriptEngineWrapper(new KotlinEngineWrapper(factory));\n          \n          \n            \n                    LOGGER.debug(\"Kotlin engine loaded.\");\n          \n          \n            \n                    engineWrapper = new KotlinEngineWrapper();\n          \n          \n            \n                    getExtScript().registerScriptEngineWrapper(engineWrapper);", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440931370", "createdAt": "2020-06-16T15:15:38Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.swing.*;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.Extension;\n+import org.parosproxy.paros.extension.ExtensionAdaptor;\n+import org.parosproxy.paros.extension.ExtensionHook;\n+import org.parosproxy.paros.view.View;\n+import org.zaproxy.zap.ZAP;\n+import org.zaproxy.zap.control.AddOnLoader;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.ExtensionScript;\n+\n+public class ExtensionKotlin extends ExtensionAdaptor {\n+\n+    public static final String NAME = \"ExtensionKotlin\";\n+    public static final int EXTENSION_ORDER = 9999;\n+    public static final ImageIcon KOTLIN_ICON;\n+    private static final List<Class<? extends Extension>> EXTENSION_DEPENDENCIES;\n+    private static final Logger LOGGER = Logger.getLogger(ExtensionKotlin.class);\n+\n+    static {\n+        List<Class<? extends Extension>> dependencies = new ArrayList<>(1);\n+        dependencies.add(ExtensionScript.class);\n+        EXTENSION_DEPENDENCIES = Collections.unmodifiableList(dependencies);\n+\n+        KOTLIN_ICON =\n+                View.isInitialised()\n+                        ? new ImageIcon(\n+                                ExtensionKotlin.class.getResource(\n+                                        \"/org/zaproxy/zap/extension/kotlin/resources/kotlin.png\"))\n+                        : null;\n+    }\n+\n+    public ExtensionKotlin() {\n+        super(NAME);\n+        setOrder(EXTENSION_ORDER);\n+    }\n+\n+    @Override\n+    public void hook(ExtensionHook extensionHook) {\n+        super.hook(extensionHook);\n+\n+        LOGGER.debug(\"Hooking Kotlin Scripting Extension\");\n+        String zapJar = ZAP.class.getProtectionDomain().getCodeSource().getLocation().getFile();\n+\n+        LOGGER.debug(\"Loading Kotlin engine...\");\n+        AddOnLoader addonLoader = ExtensionFactory.getAddOnLoader();\n+        Arrays.stream(addonLoader.getURLs()).forEach(LOGGER::debug);\n+        KotlinScriptEngineFactory factory = new KotlinScriptEngineFactory(addonLoader, zapJar);\n+        getExtScript().registerScriptEngineWrapper(new KotlinEngineWrapper(factory));\n+        LOGGER.debug(\"Kotlin engine loaded.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzEyMDY3OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTo0MVrOGkgUVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTo0MVrOGkgUVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTQxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public boolean canUnload() {\n          \n          \n            \n                    return true;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public void unload() {\n          \n          \n            \n                    getExtScript().removeScriptEngineWrapper(engineWrapper);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public boolean supportsDb(String type) {\n          \n          \n            \n                    return true;\n          \n          \n            \n                }", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440931413", "createdAt": "2020-06-16T15:15:41Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.swing.*;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.Extension;\n+import org.parosproxy.paros.extension.ExtensionAdaptor;\n+import org.parosproxy.paros.extension.ExtensionHook;\n+import org.parosproxy.paros.view.View;\n+import org.zaproxy.zap.ZAP;\n+import org.zaproxy.zap.control.AddOnLoader;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.ExtensionScript;\n+\n+public class ExtensionKotlin extends ExtensionAdaptor {\n+\n+    public static final String NAME = \"ExtensionKotlin\";\n+    public static final int EXTENSION_ORDER = 9999;\n+    public static final ImageIcon KOTLIN_ICON;\n+    private static final List<Class<? extends Extension>> EXTENSION_DEPENDENCIES;\n+    private static final Logger LOGGER = Logger.getLogger(ExtensionKotlin.class);\n+\n+    static {\n+        List<Class<? extends Extension>> dependencies = new ArrayList<>(1);\n+        dependencies.add(ExtensionScript.class);\n+        EXTENSION_DEPENDENCIES = Collections.unmodifiableList(dependencies);\n+\n+        KOTLIN_ICON =\n+                View.isInitialised()\n+                        ? new ImageIcon(\n+                                ExtensionKotlin.class.getResource(\n+                                        \"/org/zaproxy/zap/extension/kotlin/resources/kotlin.png\"))\n+                        : null;\n+    }\n+\n+    public ExtensionKotlin() {\n+        super(NAME);\n+        setOrder(EXTENSION_ORDER);\n+    }\n+\n+    @Override\n+    public void hook(ExtensionHook extensionHook) {\n+        super.hook(extensionHook);\n+\n+        LOGGER.debug(\"Hooking Kotlin Scripting Extension\");\n+        String zapJar = ZAP.class.getProtectionDomain().getCodeSource().getLocation().getFile();\n+\n+        LOGGER.debug(\"Loading Kotlin engine...\");\n+        AddOnLoader addonLoader = ExtensionFactory.getAddOnLoader();\n+        Arrays.stream(addonLoader.getURLs()).forEach(LOGGER::debug);\n+        KotlinScriptEngineFactory factory = new KotlinScriptEngineFactory(addonLoader, zapJar);\n+        getExtScript().registerScriptEngineWrapper(new KotlinEngineWrapper(factory));\n+        LOGGER.debug(\"Kotlin engine loaded.\");\n+    }\n+\n+    public List<Class<? extends Extension>> getDependencies() {\n+        return EXTENSION_DEPENDENCIES;\n+    }\n+\n+    private ExtensionScript getExtScript() {\n+        return Control.getSingleton().getExtensionLoader().getExtension(ExtensionScript.class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzEyMTE4OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTo0NlrOGkgUoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTo0NlrOGkgUoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTQ4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                static {\n          \n          \n            \n                    System.setProperty(\n          \n          \n            \n                            KotlinJsr223DefaultScriptEngineFactoryKt\n          \n          \n            \n                                    .KOTLIN_JSR223_RESOLVE_FROM_CLASSLOADER_PROPERTY,\n          \n          \n            \n                            \"true\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private EngineClassLoader classLoader;\n          \n          \n            \n            \n          \n          \n            \n                public KotlinEngineWrapper() {\n          \n          \n            \n                    super(new KotlinJsr223DefaultScriptEngineFactory());\n          \n          \n            \n                    this.classLoader =\n          \n          \n            \n                            new EngineClassLoader(\n          \n          \n            \n                                    getClass().getClassLoader(), ExtensionFactory.getAddOnLoader());\n          \n          \n            \n                }", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440931488", "createdAt": "2020-06-16T15:15:46Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.script.ScriptEngineFactory;\n+import javax.swing.*;\n+import org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n+import org.zaproxy.zap.extension.script.DefaultEngineWrapper;\n+\n+public class KotlinEngineWrapper extends DefaultEngineWrapper {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzEyMTU5OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTo1MVrOGkgU4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNTo1MVrOGkgU4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public KotlinEngineWrapper(ScriptEngineFactory factory) {\n          \n          \n            \n                    super(factory);\n          \n          \n            \n                }\n          \n          \n            \n                @Override\n          \n          \n            \n                public ScriptEngine getEngine() {\n          \n          \n            \n                    return init(super.getEngine());\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                /**\n          \n          \n            \n                 * Initialises the script engine with custom class loader and function overrides.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param scriptEngine the script engine to initialise\n          \n          \n            \n                 * @return the script engine initialised\n          \n          \n            \n                 */\n          \n          \n            \n                private ScriptEngine init(ScriptEngine scriptEngine) {\n          \n          \n            \n                    ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();\n          \n          \n            \n                    Thread.currentThread().setContextClassLoader(classLoader);\n          \n          \n            \n                    try {\n          \n          \n            \n                        scriptEngine\n          \n          \n            \n                                .getBindings(ScriptContext.ENGINE_SCOPE)\n          \n          \n            \n                                .put(\"ZapScriptContext\", scriptEngine.getContext());\n          \n          \n            \n                        // Note that this also forces the initialisation/usage of the custom class loader.\n          \n          \n            \n                        scriptEngine.eval(\n          \n          \n            \n                                \"fun print(msg: Any) { ZapScriptContext.writer.write(\\\"$msg\\\") }\"\n          \n          \n            \n                                        + \"fun println(msg: Any) { print(\\\"$msg\\\\n\\\") }\");\n          \n          \n            \n                    } catch (ScriptException ignore) {\n          \n          \n            \n                    } finally {\n          \n          \n            \n                        Thread.currentThread().setContextClassLoader(currentClassLoader);\n          \n          \n            \n                    }\n          \n          \n            \n                    return scriptEngine;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private static class EngineClassLoader extends ClassLoader {\n          \n          \n            \n            \n          \n          \n            \n                    private final ClassLoader addOn;\n          \n          \n            \n                    private final ClassLoader fallback;\n          \n          \n            \n            \n          \n          \n            \n                    EngineClassLoader(ClassLoader addOn, ClassLoader fallback) {\n          \n          \n            \n                        this.addOn = addOn;\n          \n          \n            \n                        this.fallback = fallback;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    @Override\n          \n          \n            \n                    protected Class<?> findClass(String name) throws ClassNotFoundException {\n          \n          \n            \n                        try {\n          \n          \n            \n                            return addOn.loadClass(name);\n          \n          \n            \n                        } catch (ClassNotFoundException ignore) {\n          \n          \n            \n                        }\n          \n          \n            \n                        return fallback.loadClass(name);\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440931554", "createdAt": "2020-06-16T15:15:51Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.script.ScriptEngineFactory;\n+import javax.swing.*;\n+import org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n+import org.zaproxy.zap.extension.script.DefaultEngineWrapper;\n+\n+public class KotlinEngineWrapper extends DefaultEngineWrapper {\n+\n+    @Override\n+    public ImageIcon getIcon() {\n+        return ExtensionKotlin.KOTLIN_ICON;\n+    }\n+\n+    @Override\n+    public String getSyntaxStyle() {\n+        return SyntaxConstants.SYNTAX_STYLE_NONE;\n+    }\n+\n+    @Override\n+    public boolean isRawEngine() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getExtensions() {\n+        return Collections.singletonList(\"kts\");\n+    }\n+\n+    public KotlinEngineWrapper(ScriptEngineFactory factory) {\n+        super(factory);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzEyMzM1OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinScriptEngineFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNjoxOVrOGkgWHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjowMDoxOVrOGkiaxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTg2OQ==", "bodyText": "The engines should use the existing class loaders otherwise this might (and will) lead to duplicated classes (causing subtle/surprising errors), the above suggestions should address this.", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440931869", "createdAt": "2020-06-16T15:16:19Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.io.File;\n+import java.util.List;\n+import javax.script.Bindings;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import kotlin.jvm.JvmClassMappingKt;\n+import kotlin.reflect.KClass;\n+import kotlin.script.experimental.jvm.util.JvmClasspathUtilKt;\n+import org.jetbrains.kotlin.cli.common.repl.KotlinJsr223JvmScriptEngineFactoryBase;\n+import org.jetbrains.kotlin.cli.common.repl.ScriptArgsWithTypes;\n+import org.jetbrains.kotlin.script.jsr223.KotlinJsr223JvmLocalScriptEngine;\n+import org.jetbrains.kotlin.script.jsr223.KotlinStandardJsr223ScriptTemplate;\n+\n+public class KotlinScriptEngineFactory extends KotlinJsr223JvmScriptEngineFactoryBase {\n+\n+    private final List<File> jars;\n+\n+    public KotlinScriptEngineFactory(ClassLoader classLoader, String zapJar) {\n+        List<File> clJars =\n+                JvmClasspathUtilKt.scriptCompilationClasspathFromContextOrStdlib(\n+                        new String[] {\"kotlin-stdlib\"}, classLoader, true);\n+        if (zapJar != null) {\n+            clJars.add(new File(zapJar));\n+        }\n+        jars = clJars;\n+    }\n+\n+    @Override\n+    public ScriptEngine getScriptEngine() {\n+        return new KotlinJsr223JvmLocalScriptEngine(\n+                this,\n+                jars,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NTgyOQ==", "bodyText": "@thc202 Wow thanks!\nIt does indeed create class loader issues as I've discovered trying to make some println helpers for writing the the scripting console.", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440965829", "createdAt": "2020-06-16T16:00:19Z", "author": {"login": "kcberg"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.io.File;\n+import java.util.List;\n+import javax.script.Bindings;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import kotlin.jvm.JvmClassMappingKt;\n+import kotlin.reflect.KClass;\n+import kotlin.script.experimental.jvm.util.JvmClasspathUtilKt;\n+import org.jetbrains.kotlin.cli.common.repl.KotlinJsr223JvmScriptEngineFactoryBase;\n+import org.jetbrains.kotlin.cli.common.repl.ScriptArgsWithTypes;\n+import org.jetbrains.kotlin.script.jsr223.KotlinJsr223JvmLocalScriptEngine;\n+import org.jetbrains.kotlin.script.jsr223.KotlinStandardJsr223ScriptTemplate;\n+\n+public class KotlinScriptEngineFactory extends KotlinJsr223JvmScriptEngineFactoryBase {\n+\n+    private final List<File> jars;\n+\n+    public KotlinScriptEngineFactory(ClassLoader classLoader, String zapJar) {\n+        List<File> clJars =\n+                JvmClasspathUtilKt.scriptCompilationClasspathFromContextOrStdlib(\n+                        new String[] {\"kotlin-stdlib\"}, classLoader, true);\n+        if (zapJar != null) {\n+            clJars.add(new File(zapJar));\n+        }\n+        jars = clJars;\n+    }\n+\n+    @Override\n+    public ScriptEngine getScriptEngine() {\n+        return new KotlinJsr223JvmLocalScriptEngine(\n+                this,\n+                jars,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMTg2OQ=="}, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzEyNDgwOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/resources/org/zaproxy/zap/extension/kotlin/resources/Messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNjozN1rOGkgXAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxNjozN1rOGkgXAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMjA5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            kotlin.options.title=Kotlin\n          \n          \n            \n            kotlin.name=Kotlin", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r440932099", "createdAt": "2020-06-16T15:16:37Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/resources/org/zaproxy/zap/extension/kotlin/resources/Messages.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+kotlin.desc=Allows Kotlin to be used for ZAP scripting\n+kotlin.options.title=Kotlin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59555a6f86b2b5415b76ab9b00dab29bdb62506"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTQ1NzkxOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNToyMTo0NVrOGlK-vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMzo1NFrOGlRd7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzMDM5Ng==", "bodyText": "I'm sure this is likely an IDE setting, but can you use specific imports throughout?", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441630396", "createdAt": "2020-06-17T15:21:45Z", "author": {"login": "kingthorin"}, "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "diffHunk": "@@ -19,24 +19,31 @@\n  */\n package org.zaproxy.zap.extension.kotlin;\n \n-import java.io.Reader;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179335b5810a6276556d963529ac94edb2209c2a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNjY4Ng==", "bodyText": "pretty sure i managed to get all these \ud83d\ude05", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441736686", "createdAt": "2020-06-17T18:13:54Z", "author": {"login": "kcberg"}, "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "diffHunk": "@@ -19,24 +19,31 @@\n  */\n package org.zaproxy.zap.extension.kotlin;\n \n-import java.io.Reader;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzMDM5Ng=="}, "originalCommit": {"oid": "179335b5810a6276556d963529ac94edb2209c2a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA2NTcwOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowMjowNlrOGlRD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowMjowNlrOGlRD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDAzNQ==", "bodyText": "org.zaproxy.addon.kotlin, new add-ons are moving away from the \"extension\".", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441730035", "createdAt": "2020-06-17T18:02:06Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/ExtensionKotlin.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA2NjQxOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowMjoxN1rOGlREYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0NzoxMFrOGlSmgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDE0Nw==", "bodyText": "engineClassLoader \u2192 fallbackClassLoader, should replace ExtensionFactory.getAddOnLoader() (which can be passed in the default constructor).\nShould be package accessible, just for testing?", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441730147", "createdAt": "2020-06-17T18:02:17Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptException;\n+import javax.swing.ImageIcon;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactory;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactoryKt;\n+import org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.DefaultEngineWrapper;\n+\n+public class KotlinEngineWrapper extends DefaultEngineWrapper {\n+\n+    static {\n+        System.setProperty(\n+                KotlinJsr223DefaultScriptEngineFactoryKt\n+                        .KOTLIN_JSR223_RESOLVE_FROM_CLASSLOADER_PROPERTY,\n+                \"true\");\n+    }\n+\n+    private ClassLoader classLoader;\n+\n+    public KotlinEngineWrapper() {\n+        this(null);\n+    }\n+\n+    public KotlinEngineWrapper(ClassLoader engineClassLoader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0Nzc2Nw==", "bodyText": "Yeah I was trying to make this configurable for testing as ExtensionFactory.getAddOnLoader() was throwing an NPE but perhaps I just need to setup my test better?", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441747767", "createdAt": "2020-06-17T18:33:58Z", "author": {"login": "kcberg"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptException;\n+import javax.swing.ImageIcon;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactory;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactoryKt;\n+import org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.DefaultEngineWrapper;\n+\n+public class KotlinEngineWrapper extends DefaultEngineWrapper {\n+\n+    static {\n+        System.setProperty(\n+                KotlinJsr223DefaultScriptEngineFactoryKt\n+                        .KOTLIN_JSR223_RESOLVE_FROM_CLASSLOADER_PROPERTY,\n+                \"true\");\n+    }\n+\n+    private ClassLoader classLoader;\n+\n+    public KotlinEngineWrapper() {\n+        this(null);\n+    }\n+\n+    public KotlinEngineWrapper(ClassLoader engineClassLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDE0Nw=="}, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1NTI2Nw==", "bodyText": "No, it makes sense to allow to pass a custom class loader (really no need to mock ExtensionFactory).", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441755267", "createdAt": "2020-06-17T18:47:10Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptException;\n+import javax.swing.ImageIcon;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactory;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactoryKt;\n+import org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.DefaultEngineWrapper;\n+\n+public class KotlinEngineWrapper extends DefaultEngineWrapper {\n+\n+    static {\n+        System.setProperty(\n+                KotlinJsr223DefaultScriptEngineFactoryKt\n+                        .KOTLIN_JSR223_RESOLVE_FROM_CLASSLOADER_PROPERTY,\n+                \"true\");\n+    }\n+\n+    private ClassLoader classLoader;\n+\n+    public KotlinEngineWrapper() {\n+        this(null);\n+    }\n+\n+    public KotlinEngineWrapper(ClassLoader engineClassLoader) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDE0Nw=="}, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA2NzE2OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowMjozMVrOGlRE4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozNDo0OFrOGlSLCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDI3NQ==", "bodyText": "Does it really need to be OS dependent? (It can be added to the string, instead of called each time.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441730275", "createdAt": "2020-06-17T18:02:31Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptException;\n+import javax.swing.ImageIcon;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactory;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactoryKt;\n+import org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.DefaultEngineWrapper;\n+\n+public class KotlinEngineWrapper extends DefaultEngineWrapper {\n+\n+    static {\n+        System.setProperty(\n+                KotlinJsr223DefaultScriptEngineFactoryKt\n+                        .KOTLIN_JSR223_RESOLVE_FROM_CLASSLOADER_PROPERTY,\n+                \"true\");\n+    }\n+\n+    private ClassLoader classLoader;\n+\n+    public KotlinEngineWrapper() {\n+        this(null);\n+    }\n+\n+    public KotlinEngineWrapper(ClassLoader engineClassLoader) {\n+        super(new KotlinJsr223DefaultScriptEngineFactory());\n+        if (engineClassLoader != null) {\n+            this.classLoader = engineClassLoader;\n+        } else {\n+            this.classLoader =\n+                    new EngineClassLoader(\n+                            getClass().getClassLoader(), ExtensionFactory.getAddOnLoader());\n+        }\n+    }\n+\n+    @Override\n+    public ImageIcon getIcon() {\n+        return ExtensionKotlin.KOTLIN_ICON;\n+    }\n+\n+    @Override\n+    public String getSyntaxStyle() {\n+        return SyntaxConstants.SYNTAX_STYLE_NONE;\n+    }\n+\n+    @Override\n+    public boolean isRawEngine() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getExtensions() {\n+        return Collections.singletonList(\"kts\");\n+    }\n+\n+    @Override\n+    public ScriptEngine getEngine() {\n+        return init(super.getEngine());\n+    }\n+\n+    /**\n+     * Initialises the script engine with custom class loader and function overrides.\n+     *\n+     * @param scriptEngine the script engine to initialise\n+     * @return the script engine initialised\n+     */\n+    private ScriptEngine init(ScriptEngine scriptEngine) {\n+        ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();\n+        Thread.currentThread().setContextClassLoader(classLoader);\n+        try {\n+            scriptEngine\n+                    .getBindings(ScriptContext.ENGINE_SCOPE)\n+                    .put(\"ZapScriptContext\", scriptEngine.getContext());\n+            // Note that this also forces the initialisation/usage of the custom class loader.\n+            scriptEngine.eval(\n+                    \"fun print(msg: Any) { ZapScriptContext.writer.write(\\\"$msg\\\") }\"\n+                            + \"fun println(msg: Any) { print(\\\"$msg${System.lineSeparator()}\\\") }\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0ODIzMw==", "bodyText": "Yeah I'll put this back how it was, given where it's writing to I don't suspect it needs to be OS specific.", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441748233", "createdAt": "2020-06-17T18:34:48Z", "author": {"login": "kcberg"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptException;\n+import javax.swing.ImageIcon;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactory;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactoryKt;\n+import org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.DefaultEngineWrapper;\n+\n+public class KotlinEngineWrapper extends DefaultEngineWrapper {\n+\n+    static {\n+        System.setProperty(\n+                KotlinJsr223DefaultScriptEngineFactoryKt\n+                        .KOTLIN_JSR223_RESOLVE_FROM_CLASSLOADER_PROPERTY,\n+                \"true\");\n+    }\n+\n+    private ClassLoader classLoader;\n+\n+    public KotlinEngineWrapper() {\n+        this(null);\n+    }\n+\n+    public KotlinEngineWrapper(ClassLoader engineClassLoader) {\n+        super(new KotlinJsr223DefaultScriptEngineFactory());\n+        if (engineClassLoader != null) {\n+            this.classLoader = engineClassLoader;\n+        } else {\n+            this.classLoader =\n+                    new EngineClassLoader(\n+                            getClass().getClassLoader(), ExtensionFactory.getAddOnLoader());\n+        }\n+    }\n+\n+    @Override\n+    public ImageIcon getIcon() {\n+        return ExtensionKotlin.KOTLIN_ICON;\n+    }\n+\n+    @Override\n+    public String getSyntaxStyle() {\n+        return SyntaxConstants.SYNTAX_STYLE_NONE;\n+    }\n+\n+    @Override\n+    public boolean isRawEngine() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getExtensions() {\n+        return Collections.singletonList(\"kts\");\n+    }\n+\n+    @Override\n+    public ScriptEngine getEngine() {\n+        return init(super.getEngine());\n+    }\n+\n+    /**\n+     * Initialises the script engine with custom class loader and function overrides.\n+     *\n+     * @param scriptEngine the script engine to initialise\n+     * @return the script engine initialised\n+     */\n+    private ScriptEngine init(ScriptEngine scriptEngine) {\n+        ClassLoader currentClassLoader = Thread.currentThread().getContextClassLoader();\n+        Thread.currentThread().setContextClassLoader(classLoader);\n+        try {\n+            scriptEngine\n+                    .getBindings(ScriptContext.ENGINE_SCOPE)\n+                    .put(\"ZapScriptContext\", scriptEngine.getContext());\n+            // Note that this also forces the initialisation/usage of the custom class loader.\n+            scriptEngine.eval(\n+                    \"fun print(msg: Any) { ZapScriptContext.writer.write(\\\"$msg\\\") }\"\n+                            + \"fun println(msg: Any) { print(\\\"$msg${System.lineSeparator()}\\\") }\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDI3NQ=="}, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA2Nzc1OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowMjo0MVrOGlRFQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowMjo0MVrOGlRFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDM2OA==", "bodyText": "These tests should be moved to another test class (e.g. KotlinEngineWrapperUnitTest), they are not verifying the templates.", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441730368", "createdAt": "2020-06-17T18:02:41Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.script.Compilable;\n+import javax.script.CompiledScript;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.zaproxy.zap.extension.alert.ExtensionAlert;\n+import org.zaproxy.zap.testutils.AbstractVerifyScriptTemplates;\n+\n+/** Verifies that the Kotlin script templates are parsed without errors. */\n+public class VerifyScriptTemplates extends AbstractVerifyScriptTemplates {\n+\n+    private static ScriptEngine se;\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        se = new KotlinEngineWrapper(Thread.currentThread().getContextClassLoader()).getEngine();\n+    }\n+\n+    @Override\n+    protected String getScriptExtension() {\n+        return \".kts\";\n+    }\n+\n+    @Override\n+    protected void parseTemplate(Path template) throws Exception {\n+        try (Reader reader = Files.newBufferedReader(template, StandardCharsets.UTF_8)) {\n+            Compilable c = (Compilable) se;\n+            CompiledScript cs = c.compile(reader);\n+            cs.eval();\n+        }\n+    }\n+\n+    @Test\n+    public void shouldPrintToScriptContextWriter() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA2Nzg5OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowMjo0NFrOGlRFVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowMjo0NFrOGlRFVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMDM4OA==", "bodyText": "Worth testing print too.", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441730388", "createdAt": "2020-06-17T18:02:44Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.script.Compilable;\n+import javax.script.CompiledScript;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.zaproxy.zap.extension.alert.ExtensionAlert;\n+import org.zaproxy.zap.testutils.AbstractVerifyScriptTemplates;\n+\n+/** Verifies that the Kotlin script templates are parsed without errors. */\n+public class VerifyScriptTemplates extends AbstractVerifyScriptTemplates {\n+\n+    private static ScriptEngine se;\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        se = new KotlinEngineWrapper(Thread.currentThread().getContextClassLoader()).getEngine();\n+    }\n+\n+    @Override\n+    protected String getScriptExtension() {\n+        return \".kts\";\n+    }\n+\n+    @Override\n+    protected void parseTemplate(Path template) throws Exception {\n+        try (Reader reader = Files.newBufferedReader(template, StandardCharsets.UTF_8)) {\n+            Compilable c = (Compilable) se;\n+            CompiledScript cs = c.compile(reader);\n+            cs.eval();\n+        }\n+    }\n+\n+    @Test\n+    public void shouldPrintToScriptContextWriter() throws Exception {\n+        String script = getScriptContents(\"printTest.kts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA3NjkyOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowNToyNFrOGlRLJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowNToyNFrOGlRLJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMTg3Ng==", "bodyText": "e.g. shouldLoadClassesFromProvidedClassLoader, not about the hash code(?).", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441731876", "createdAt": "2020-06-17T18:05:24Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.script.Compilable;\n+import javax.script.CompiledScript;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.zaproxy.zap.extension.alert.ExtensionAlert;\n+import org.zaproxy.zap.testutils.AbstractVerifyScriptTemplates;\n+\n+/** Verifies that the Kotlin script templates are parsed without errors. */\n+public class VerifyScriptTemplates extends AbstractVerifyScriptTemplates {\n+\n+    private static ScriptEngine se;\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        se = new KotlinEngineWrapper(Thread.currentThread().getContextClassLoader()).getEngine();\n+    }\n+\n+    @Override\n+    protected String getScriptExtension() {\n+        return \".kts\";\n+    }\n+\n+    @Override\n+    protected void parseTemplate(Path template) throws Exception {\n+        try (Reader reader = Files.newBufferedReader(template, StandardCharsets.UTF_8)) {\n+            Compilable c = (Compilable) se;\n+            CompiledScript cs = c.compile(reader);\n+            cs.eval();\n+        }\n+    }\n+\n+    @Test\n+    public void shouldPrintToScriptContextWriter() throws Exception {\n+        String script = getScriptContents(\"printTest.kts\");\n+\n+        ByteArrayOutputStream console = new ByteArrayOutputStream();\n+        ScriptContext sc = se.getContext();\n+        Writer originalWriter = sc.getWriter();\n+\n+        try {\n+            sc.setWriter(new PrintWriter(console));\n+            Compilable c = (Compilable) se;\n+            CompiledScript cs = c.compile(script);\n+\n+            cs.eval();\n+\n+            sc.getWriter().flush();\n+            assertEquals(\"ZAP\" + System.lineSeparator(), console.toString());\n+        } finally {\n+            sc.setWriter(originalWriter);\n+        }\n+    }\n+\n+    @Test\n+    public void shouldHaveSameHashCode() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA3ODMzOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODowNTo1MFrOGlRMGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0MDoxM1rOGlSXGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMjEyMw==", "bodyText": "It needs to use other class than the ones available in the context class loader (technically it can be the same class file but loaded from other class loader), otherwise we don't know if it was from the provided class loader or the context class loader (the class loaders need to be different).\nBetter return (or pass through the bindings) the Class and check by reference, to not rely on the hash code which can be changed any time.", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441732123", "createdAt": "2020-06-17T18:05:50Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.script.Compilable;\n+import javax.script.CompiledScript;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.zaproxy.zap.extension.alert.ExtensionAlert;\n+import org.zaproxy.zap.testutils.AbstractVerifyScriptTemplates;\n+\n+/** Verifies that the Kotlin script templates are parsed without errors. */\n+public class VerifyScriptTemplates extends AbstractVerifyScriptTemplates {\n+\n+    private static ScriptEngine se;\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        se = new KotlinEngineWrapper(Thread.currentThread().getContextClassLoader()).getEngine();\n+    }\n+\n+    @Override\n+    protected String getScriptExtension() {\n+        return \".kts\";\n+    }\n+\n+    @Override\n+    protected void parseTemplate(Path template) throws Exception {\n+        try (Reader reader = Files.newBufferedReader(template, StandardCharsets.UTF_8)) {\n+            Compilable c = (Compilable) se;\n+            CompiledScript cs = c.compile(reader);\n+            cs.eval();\n+        }\n+    }\n+\n+    @Test\n+    public void shouldPrintToScriptContextWriter() throws Exception {\n+        String script = getScriptContents(\"printTest.kts\");\n+\n+        ByteArrayOutputStream console = new ByteArrayOutputStream();\n+        ScriptContext sc = se.getContext();\n+        Writer originalWriter = sc.getWriter();\n+\n+        try {\n+            sc.setWriter(new PrintWriter(console));\n+            Compilable c = (Compilable) se;\n+            CompiledScript cs = c.compile(script);\n+\n+            cs.eval();\n+\n+            sc.getWriter().flush();\n+            assertEquals(\"ZAP\" + System.lineSeparator(), console.toString());\n+        } finally {\n+            sc.setWriter(originalWriter);\n+        }\n+    }\n+\n+    @Test\n+    public void shouldHaveSameHashCode() throws Exception {\n+\n+        int jvmHashCode = ExtensionAlert.class.hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MTMyMQ==", "bodyText": "Ok I think I understand what you're saying and I suspected there was a better way to do this. Let me see if I can create a better test setup for this.", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441751321", "createdAt": "2020-06-17T18:40:13Z", "author": {"login": "kcberg"}, "path": "addOns/kotlin/src/test/java/org/zaproxy/zap/extension/kotlin/VerifyScriptTemplates.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.script.Compilable;\n+import javax.script.CompiledScript;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.zaproxy.zap.extension.alert.ExtensionAlert;\n+import org.zaproxy.zap.testutils.AbstractVerifyScriptTemplates;\n+\n+/** Verifies that the Kotlin script templates are parsed without errors. */\n+public class VerifyScriptTemplates extends AbstractVerifyScriptTemplates {\n+\n+    private static ScriptEngine se;\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        se = new KotlinEngineWrapper(Thread.currentThread().getContextClassLoader()).getEngine();\n+    }\n+\n+    @Override\n+    protected String getScriptExtension() {\n+        return \".kts\";\n+    }\n+\n+    @Override\n+    protected void parseTemplate(Path template) throws Exception {\n+        try (Reader reader = Files.newBufferedReader(template, StandardCharsets.UTF_8)) {\n+            Compilable c = (Compilable) se;\n+            CompiledScript cs = c.compile(reader);\n+            cs.eval();\n+        }\n+    }\n+\n+    @Test\n+    public void shouldPrintToScriptContextWriter() throws Exception {\n+        String script = getScriptContents(\"printTest.kts\");\n+\n+        ByteArrayOutputStream console = new ByteArrayOutputStream();\n+        ScriptContext sc = se.getContext();\n+        Writer originalWriter = sc.getWriter();\n+\n+        try {\n+            sc.setWriter(new PrintWriter(console));\n+            Compilable c = (Compilable) se;\n+            CompiledScript cs = c.compile(script);\n+\n+            cs.eval();\n+\n+            sc.getWriter().flush();\n+            assertEquals(\"ZAP\" + System.lineSeparator(), console.toString());\n+        } finally {\n+            sc.setWriter(originalWriter);\n+        }\n+    }\n+\n+    @Test\n+    public void shouldHaveSameHashCode() throws Exception {\n+\n+        int jvmHashCode = ExtensionAlert.class.hashCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMjEyMw=="}, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA5OTE2OnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMjowNlrOGlRZsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMjowNlrOGlRZsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNTYwMQ==", "bodyText": "This should be kept as EngineClassLoader, can be final too.", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r441735601", "createdAt": "2020-06-17T18:12:06Z", "author": {"login": "thc202"}, "path": "addOns/kotlin/src/main/java/org/zaproxy/zap/extension/kotlin/KotlinEngineWrapper.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.zap.extension.kotlin;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptException;\n+import javax.swing.ImageIcon;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactory;\n+import kotlin.script.experimental.jsr223.KotlinJsr223DefaultScriptEngineFactoryKt;\n+import org.fife.ui.rsyntaxtextarea.SyntaxConstants;\n+import org.zaproxy.zap.control.ExtensionFactory;\n+import org.zaproxy.zap.extension.script.DefaultEngineWrapper;\n+\n+public class KotlinEngineWrapper extends DefaultEngineWrapper {\n+\n+    static {\n+        System.setProperty(\n+                KotlinJsr223DefaultScriptEngineFactoryKt\n+                        .KOTLIN_JSR223_RESOLVE_FROM_CLASSLOADER_PROPERTY,\n+                \"true\");\n+    }\n+\n+    private ClassLoader classLoader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334363bf0c44233c739dab56951492765ceecaa5"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzQ2OTgxOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/javahelp/org/zaproxy/zap/extension/jython/resources/help/map.jhm", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo0OTo1OFrOG1mE9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo0OTo1OFrOG1mE9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1MTU3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<mapID target=\"python-logo\" url=\"contents/images/kotlin.png\" />\n          \n          \n            \n            \t<mapID target=\"kotlin-logo\" url=\"contents/images/kotlin.png\" />\n          \n      \n    \n    \n  \n\nTo match toc.xml", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r458851575", "createdAt": "2020-07-22T14:49:58Z", "author": {"login": "kingthorin"}, "path": "addOns/kotlin/src/main/javahelp/org/zaproxy/zap/extension/jython/resources/help/map.jhm", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+<!DOCTYPE map\n+  PUBLIC \"-//Sun Microsystems Inc.//DTD JavaHelp Map Version 1.0//EN\"\n+         \"http://java.sun.com/products/javahelp/map_1_0.dtd\">\n+\n+<map version=\"1.0\">\n+\t<mapID target=\"python-logo\" url=\"contents/images/kotlin.png\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756f72014b4ee50879321d0d8950dfafe48d59e8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzQ3MjQwOnYy", "diffSide": "RIGHT", "path": "addOns/kotlin/src/main/javahelp/org/zaproxy/zap/extension/jython/resources/help/index.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo1MDoyN1rOG1mGfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo1MDoyN1rOG1mGfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1MTk2Ng==", "bodyText": "I don't think there is an options page, or options functionality.", "url": "https://github.com/zaproxy/zap-extensions/pull/2444#discussion_r458851966", "createdAt": "2020-07-22T14:50:27Z", "author": {"login": "kingthorin"}, "path": "addOns/kotlin/src/main/javahelp/org/zaproxy/zap/extension/jython/resources/help/index.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+<!DOCTYPE index\n+  PUBLIC \"-//Sun Microsystems Inc.//DTD JavaHelp Index Version 1.0//EN\"\n+         \"http://java.sun.com/products/javahelp/index_2_0.dtd\">\n+\n+<index version=\"2.0\">\n+    <!-- index entries are merged (sorted) into core index -->\n+\t<indexitem text=\"kotlin\" target=\"kotlin\" />\n+\t<indexitem text=\"kotlin options\" target=\"kotlin.options\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756f72014b4ee50879321d0d8950dfafe48d59e8"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 702, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}