{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDMwMzUx", "number": 2485, "title": "Add GraphQL Query Generation Functionality", "bodyText": "Works exhaustively for simple schemas\n\nSigned-off-by: ricekot ricekot@gmail.com", "createdAt": "2020-07-06T22:19:17Z", "url": "https://github.com/zaproxy/zap-extensions/pull/2485", "merged": true, "mergeCommit": {"oid": "9ea61cddd4f44dc731a5cc0455fb91a1825e76f8"}, "closed": true, "closedAt": "2020-08-12T15:22:42Z", "author": {"login": "ricekot"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcymZtPABqjM1MjA2MjM5MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-NEEmAFqTQ2NjAyMzUxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd9f8f08cfc31bcf4181faf9bd1f429d552ad443", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/bd9f8f08cfc31bcf4181faf9bd1f429d552ad443", "committedDate": "2020-07-06T22:15:19Z", "message": "Add Query Generation Functionality\n\n- Works exhaustively for simple schemas\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "5ee2bdc183d19f659707775e5056f77fe6611aa2", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/5ee2bdc183d19f659707775e5056f77fe6611aa2", "committedDate": "2020-07-07T14:05:18Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ee2bdc183d19f659707775e5056f77fe6611aa2", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/5ee2bdc183d19f659707775e5056f77fe6611aa2", "committedDate": "2020-07-07T14:05:18Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "674252103bbc8b0496c025ff5de3d7ab8d8aa1b2", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/674252103bbc8b0496c025ff5de3d7ab8d8aa1b2", "committedDate": "2020-07-07T14:09:34Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "674252103bbc8b0496c025ff5de3d7ab8d8aa1b2", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/674252103bbc8b0496c025ff5de3d7ab8d8aa1b2", "committedDate": "2020-07-07T14:09:34Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "f5747d19351b5eff89a926917d64bcded94eacea", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/f5747d19351b5eff89a926917d64bcded94eacea", "committedDate": "2020-07-07T14:13:32Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5747d19351b5eff89a926917d64bcded94eacea", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/f5747d19351b5eff89a926917d64bcded94eacea", "committedDate": "2020-07-07T14:13:32Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "f3374744b3a43948dc03121a4c99ba05b433db88", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/f3374744b3a43948dc03121a4c99ba05b433db88", "committedDate": "2020-07-09T21:14:07Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3374744b3a43948dc03121a4c99ba05b433db88", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/f3374744b3a43948dc03121a4c99ba05b433db88", "committedDate": "2020-07-09T21:14:07Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "5ccccad7e431f07279bc017b3d52a37560831a89", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/5ccccad7e431f07279bc017b3d52a37560831a89", "committedDate": "2020-07-10T21:19:00Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ccccad7e431f07279bc017b3d52a37560831a89", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/5ccccad7e431f07279bc017b3d52a37560831a89", "committedDate": "2020-07-10T21:19:00Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "3db325ce5ba05b5e44c4c9504745ef23a70e3d35", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/3db325ce5ba05b5e44c4c9504745ef23a70e3d35", "committedDate": "2020-07-15T12:23:20Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3db325ce5ba05b5e44c4c9504745ef23a70e3d35", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/3db325ce5ba05b5e44c4c9504745ef23a70e3d35", "committedDate": "2020-07-15T12:23:20Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "3b7224b7923659b3a2cfb3586c566614c611b7e0", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/3b7224b7923659b3a2cfb3586c566614c611b7e0", "committedDate": "2020-07-15T18:49:02Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b7224b7923659b3a2cfb3586c566614c611b7e0", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/3b7224b7923659b3a2cfb3586c566614c611b7e0", "committedDate": "2020-07-15T18:49:02Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "bb7b07bf4c7b0d928c6970194353e63b391c8549", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/bb7b07bf4c7b0d928c6970194353e63b391c8549", "committedDate": "2020-07-16T14:41:40Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb7b07bf4c7b0d928c6970194353e63b391c8549", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/bb7b07bf4c7b0d928c6970194353e63b391c8549", "committedDate": "2020-07-16T14:41:40Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "47a2041bea301ac3c05ac1e09282ac5bc17002e7", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/47a2041bea301ac3c05ac1e09282ac5bc17002e7", "committedDate": "2020-07-21T08:50:04Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDA1MzA0", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#pullrequestreview-452405304", "createdAt": "2020-07-21T12:31:03Z", "commit": {"oid": "47a2041bea301ac3c05ac1e09282ac5bc17002e7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjozMTowM1rOG01sVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0ODozMFrOG02TiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA1ODgzNw==", "bodyText": "This is the second use of these strings, specifically with a trailing space. It would probably be best to extract constants for them.", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#discussion_r458058837", "createdAt": "2020-07-21T12:31:03Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlGenerator.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import graphql.schema.GraphQLArgument;\n+import graphql.schema.GraphQLEnumType;\n+import graphql.schema.GraphQLFieldDefinition;\n+import graphql.schema.GraphQLInputObjectField;\n+import graphql.schema.GraphQLInputObjectType;\n+import graphql.schema.GraphQLInterfaceType;\n+import graphql.schema.GraphQLList;\n+import graphql.schema.GraphQLNamedOutputType;\n+import graphql.schema.GraphQLNamedType;\n+import graphql.schema.GraphQLNonNull;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLScalarType;\n+import graphql.schema.GraphQLSchema;\n+import graphql.schema.GraphQLType;\n+import graphql.schema.GraphQLTypeUtil;\n+import graphql.schema.GraphQLUnionType;\n+import graphql.schema.idl.SchemaParser;\n+import graphql.schema.idl.UnExecutableSchemaGenerator;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.zaproxy.zap.extension.spider.ExtensionSpider;\n+import org.zaproxy.zap.model.ValueGenerator;\n+\n+public class GraphQlGenerator {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlGenerator.class);\n+    private static final int MAX_DEPTH = 5;\n+    private final Requestor requestor;\n+    private GraphQLSchema schema;\n+\n+    protected enum RequestType {\n+        QUERY,\n+        MUTATION,\n+        SUBSCRIPTION\n+    };\n+\n+    public GraphQlGenerator(String sdl) {\n+        this(sdl, null);\n+    }\n+\n+    public GraphQlGenerator(String sdl, Requestor requestor) {\n+        schema = UnExecutableSchemaGenerator.makeUnExecutableSchema(new SchemaParser().parse(sdl));\n+        this.requestor = requestor;\n+    }\n+\n+    public void checkServiceMethods() {\n+        String query = \"{__schema{types{name kind description}}}\";\n+        requestor.sendQueryByGet(query);\n+        requestor.sendQueryByGraphQlPost(query);\n+        requestor.sendQuery(query);\n+    }\n+\n+    public String generateFull(RequestType requestType) {\n+        StringBuilder query = new StringBuilder();\n+        GraphQLObjectType object = null;\n+        switch (requestType) {\n+            case QUERY:\n+                object = schema.getQueryType();\n+                break;\n+            case MUTATION:\n+                query.append(\"mutation \");\n+                object = schema.getMutationType();\n+                break;\n+            case SUBSCRIPTION:\n+                query.append(\"subscription \");\n+                object = schema.getSubscriptionType();\n+                break;\n+        }\n+        generate(query, object, 0);\n+        return query.toString();\n+    }\n+\n+    public void sendFull(RequestType requestType) {\n+        switch (requestType) {\n+            case QUERY:\n+                StringBuilder query = new StringBuilder();\n+                generate(query, schema.getQueryType(), 0);\n+                requestor.sendQuery(query.toString());\n+                break;\n+            case MUTATION:\n+                StringBuilder mutation = new StringBuilder(\"mutation \");\n+                generate(mutation, schema.getMutationType(), 0);\n+                requestor.sendQuery(mutation.toString());\n+                break;\n+            case SUBSCRIPTION:\n+                StringBuilder subscription = new StringBuilder(\"subscription \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a2041bea301ac3c05ac1e09282ac5bc17002e7"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2Mjc0Ng==", "bodyText": "Are the case strings part of a spec/standard or will we potentially run into case sensitivity problems with this?", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#discussion_r458062746", "createdAt": "2020-07-21T12:38:03Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlGenerator.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import graphql.schema.GraphQLArgument;\n+import graphql.schema.GraphQLEnumType;\n+import graphql.schema.GraphQLFieldDefinition;\n+import graphql.schema.GraphQLInputObjectField;\n+import graphql.schema.GraphQLInputObjectType;\n+import graphql.schema.GraphQLInterfaceType;\n+import graphql.schema.GraphQLList;\n+import graphql.schema.GraphQLNamedOutputType;\n+import graphql.schema.GraphQLNamedType;\n+import graphql.schema.GraphQLNonNull;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLScalarType;\n+import graphql.schema.GraphQLSchema;\n+import graphql.schema.GraphQLType;\n+import graphql.schema.GraphQLTypeUtil;\n+import graphql.schema.GraphQLUnionType;\n+import graphql.schema.idl.SchemaParser;\n+import graphql.schema.idl.UnExecutableSchemaGenerator;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.zaproxy.zap.extension.spider.ExtensionSpider;\n+import org.zaproxy.zap.model.ValueGenerator;\n+\n+public class GraphQlGenerator {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlGenerator.class);\n+    private static final int MAX_DEPTH = 5;\n+    private final Requestor requestor;\n+    private GraphQLSchema schema;\n+\n+    protected enum RequestType {\n+        QUERY,\n+        MUTATION,\n+        SUBSCRIPTION\n+    };\n+\n+    public GraphQlGenerator(String sdl) {\n+        this(sdl, null);\n+    }\n+\n+    public GraphQlGenerator(String sdl, Requestor requestor) {\n+        schema = UnExecutableSchemaGenerator.makeUnExecutableSchema(new SchemaParser().parse(sdl));\n+        this.requestor = requestor;\n+    }\n+\n+    public void checkServiceMethods() {\n+        String query = \"{__schema{types{name kind description}}}\";\n+        requestor.sendQueryByGet(query);\n+        requestor.sendQueryByGraphQlPost(query);\n+        requestor.sendQuery(query);\n+    }\n+\n+    public String generateFull(RequestType requestType) {\n+        StringBuilder query = new StringBuilder();\n+        GraphQLObjectType object = null;\n+        switch (requestType) {\n+            case QUERY:\n+                object = schema.getQueryType();\n+                break;\n+            case MUTATION:\n+                query.append(\"mutation \");\n+                object = schema.getMutationType();\n+                break;\n+            case SUBSCRIPTION:\n+                query.append(\"subscription \");\n+                object = schema.getSubscriptionType();\n+                break;\n+        }\n+        generate(query, object, 0);\n+        return query.toString();\n+    }\n+\n+    public void sendFull(RequestType requestType) {\n+        switch (requestType) {\n+            case QUERY:\n+                StringBuilder query = new StringBuilder();\n+                generate(query, schema.getQueryType(), 0);\n+                requestor.sendQuery(query.toString());\n+                break;\n+            case MUTATION:\n+                StringBuilder mutation = new StringBuilder(\"mutation \");\n+                generate(mutation, schema.getMutationType(), 0);\n+                requestor.sendQuery(mutation.toString());\n+                break;\n+            case SUBSCRIPTION:\n+                StringBuilder subscription = new StringBuilder(\"subscription \");\n+                generate(subscription, schema.getSubscriptionType(), 0);\n+                requestor.sendQuery(subscription.toString());\n+                break;\n+        }\n+    }\n+\n+    public void sendByLeaf(RequestType requestType) {\n+        switch (requestType) {\n+            case QUERY:\n+                StringBuilder query = new StringBuilder();\n+                generate(query, schema.getQueryType(), 0, requestor);\n+                break;\n+            case MUTATION:\n+                StringBuilder mutation = new StringBuilder();\n+                generate(mutation, schema.getMutationType(), 0, requestor);\n+                break;\n+            case SUBSCRIPTION:\n+                StringBuilder subscription = new StringBuilder();\n+                generate(subscription, schema.getSubscriptionType(), 0, requestor);\n+                break;\n+        }\n+    }\n+\n+    public void sendByField(RequestType requestType) {\n+        GraphQLObjectType object = null;\n+        switch (requestType) {\n+            case QUERY:\n+                object = schema.getQueryType();\n+                break;\n+            case MUTATION:\n+                object = schema.getMutationType();\n+                break;\n+            case SUBSCRIPTION:\n+                object = schema.getSubscriptionType();\n+                break;\n+        }\n+        List<GraphQLFieldDefinition> fields = object.getFieldDefinitions();\n+        for (GraphQLFieldDefinition field : fields) {\n+            StringBuilder query = new StringBuilder();\n+            generate(query, field.getType(), 1, null);\n+            requestor.sendQuery(query.toString());\n+        }\n+    }\n+\n+    private void generate(StringBuilder query, GraphQLType type, int depth) {\n+        generate(query, type, depth, null);\n+    }\n+\n+    private void generate(StringBuilder query, GraphQLType type, int depth, Requestor requestor) {\n+        if (type instanceof GraphQLObjectType) {\n+            query.append(\"{\\n\");\n+            GraphQLObjectType object = (GraphQLObjectType) type;\n+            List<GraphQLFieldDefinition> fields = object.getFieldDefinitions();\n+            for (GraphQLFieldDefinition field : fields) {\n+                GraphQLType fieldType = field.getType();\n+                int parentLength = query.length();\n+                if (GraphQLTypeUtil.isWrapped(fieldType)) {\n+                    fieldType = GraphQLTypeUtil.unwrapAll(fieldType);\n+                }\n+                if (GraphQLTypeUtil.isLeaf(fieldType)) {\n+                    indent(query, depth + 1);\n+                    query.append(field.getName()).append(' ');\n+                    addArguments(query, field);\n+                    query.append('\\n');\n+                    if (requestor != null) {\n+                        for (int i = 0; i <= depth; ++i) {\n+                            indent(query, depth - i);\n+                            query.append(\"}\\n\");\n+                        }\n+                        requestor.sendQuery(query.toString());\n+                    }\n+                } else if (depth < MAX_DEPTH) {\n+                    indent(query, depth + 1);\n+                    query.append(field.getName()).append(' ');\n+                    addArguments(query, field);\n+                    generate(query, fieldType, depth + 1, requestor);\n+                }\n+                if (requestor != null) {\n+                    query.setLength(parentLength);\n+                }\n+            }\n+            indent(query, depth);\n+            query.append(\"}\\n\");\n+        } else if (type instanceof GraphQLInterfaceType) {\n+            List<GraphQLObjectType> objects =\n+                    schema.getImplementations((GraphQLInterfaceType) type);\n+            query.append(\"{\\n\");\n+            for (GraphQLObjectType object : objects) {\n+                indent(query, depth + 1);\n+                query.append(\"... on \").append(object.getName()).append(' ');\n+                generate(query, object, depth + 1, requestor);\n+            }\n+            indent(query, depth);\n+            query.append(\"}\\n\");\n+        } else if (type instanceof GraphQLUnionType) {\n+            GraphQLUnionType union = (GraphQLUnionType) type;\n+            List<GraphQLNamedOutputType> members = union.getTypes();\n+            query.append(\"{\\n\");\n+            for (GraphQLNamedOutputType member : members) {\n+                indent(query, depth + 1);\n+                query.append(\"... on \").append(member.getName()).append(' ');\n+                generate(query, member, depth + 1, requestor);\n+            }\n+            indent(query, depth);\n+            query.append(\"}\\n\");\n+        }\n+    }\n+\n+    private void indent(StringBuilder query, int n) {\n+        for (int i = 0; i < n; ++i) {\n+            query.append(\"    \");\n+        }\n+    }\n+\n+    private void addArguments(StringBuilder query, GraphQLFieldDefinition field) {\n+        List<GraphQLArgument> args = field.getArguments();\n+        if (!args.isEmpty()) {\n+            query.append('(');\n+            for (GraphQLArgument arg : args) {\n+                query.append(arg.getName())\n+                        .append(\": \")\n+                        .append(getDefaultValue(arg.getType()))\n+                        .append(\", \");\n+            }\n+            query.setLength(query.length() - 2);\n+            query.append(\") \");\n+        }\n+    }\n+\n+    private String getDefaultValue(GraphQLType type) {\n+        return getDefaultValue(type, 0);\n+    }\n+\n+    private String getDefaultValue(GraphQLType type, int depth) {\n+        if (depth > MAX_DEPTH) return \"null\";\n+        StringBuilder defaultValue = new StringBuilder();\n+        if (type instanceof GraphQLNonNull) {\n+            GraphQLNonNull nonNullType = (GraphQLNonNull) type;\n+            type = nonNullType.getWrappedType();\n+        }\n+        if (type instanceof GraphQLScalarType) {\n+            GraphQLScalarType scalar = (GraphQLScalarType) type;\n+            switch (scalar.getName()) {\n+                case \"Int\":\n+                case \"ID\":\n+                    defaultValue.append(\"1\");\n+                    break;\n+                case \"Float\":\n+                    defaultValue.append(\"3.14\");\n+                    break;\n+                case \"String\":\n+                    defaultValue.append(\"\\\"hello\\\"\");\n+                    break;\n+                case \"Boolean\":\n+                    defaultValue.append(\"true\");\n+                    break;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a2041bea301ac3c05ac1e09282ac5bc17002e7"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2NDI4MQ==", "bodyText": "Should probably use \"\\\"ZAP\\\"\" to be similar to form handler.", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#discussion_r458064281", "createdAt": "2020-07-21T12:40:35Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlGenerator.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import graphql.schema.GraphQLArgument;\n+import graphql.schema.GraphQLEnumType;\n+import graphql.schema.GraphQLFieldDefinition;\n+import graphql.schema.GraphQLInputObjectField;\n+import graphql.schema.GraphQLInputObjectType;\n+import graphql.schema.GraphQLInterfaceType;\n+import graphql.schema.GraphQLList;\n+import graphql.schema.GraphQLNamedOutputType;\n+import graphql.schema.GraphQLNamedType;\n+import graphql.schema.GraphQLNonNull;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLScalarType;\n+import graphql.schema.GraphQLSchema;\n+import graphql.schema.GraphQLType;\n+import graphql.schema.GraphQLTypeUtil;\n+import graphql.schema.GraphQLUnionType;\n+import graphql.schema.idl.SchemaParser;\n+import graphql.schema.idl.UnExecutableSchemaGenerator;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.zaproxy.zap.extension.spider.ExtensionSpider;\n+import org.zaproxy.zap.model.ValueGenerator;\n+\n+public class GraphQlGenerator {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlGenerator.class);\n+    private static final int MAX_DEPTH = 5;\n+    private final Requestor requestor;\n+    private GraphQLSchema schema;\n+\n+    protected enum RequestType {\n+        QUERY,\n+        MUTATION,\n+        SUBSCRIPTION\n+    };\n+\n+    public GraphQlGenerator(String sdl) {\n+        this(sdl, null);\n+    }\n+\n+    public GraphQlGenerator(String sdl, Requestor requestor) {\n+        schema = UnExecutableSchemaGenerator.makeUnExecutableSchema(new SchemaParser().parse(sdl));\n+        this.requestor = requestor;\n+    }\n+\n+    public void checkServiceMethods() {\n+        String query = \"{__schema{types{name kind description}}}\";\n+        requestor.sendQueryByGet(query);\n+        requestor.sendQueryByGraphQlPost(query);\n+        requestor.sendQuery(query);\n+    }\n+\n+    public String generateFull(RequestType requestType) {\n+        StringBuilder query = new StringBuilder();\n+        GraphQLObjectType object = null;\n+        switch (requestType) {\n+            case QUERY:\n+                object = schema.getQueryType();\n+                break;\n+            case MUTATION:\n+                query.append(\"mutation \");\n+                object = schema.getMutationType();\n+                break;\n+            case SUBSCRIPTION:\n+                query.append(\"subscription \");\n+                object = schema.getSubscriptionType();\n+                break;\n+        }\n+        generate(query, object, 0);\n+        return query.toString();\n+    }\n+\n+    public void sendFull(RequestType requestType) {\n+        switch (requestType) {\n+            case QUERY:\n+                StringBuilder query = new StringBuilder();\n+                generate(query, schema.getQueryType(), 0);\n+                requestor.sendQuery(query.toString());\n+                break;\n+            case MUTATION:\n+                StringBuilder mutation = new StringBuilder(\"mutation \");\n+                generate(mutation, schema.getMutationType(), 0);\n+                requestor.sendQuery(mutation.toString());\n+                break;\n+            case SUBSCRIPTION:\n+                StringBuilder subscription = new StringBuilder(\"subscription \");\n+                generate(subscription, schema.getSubscriptionType(), 0);\n+                requestor.sendQuery(subscription.toString());\n+                break;\n+        }\n+    }\n+\n+    public void sendByLeaf(RequestType requestType) {\n+        switch (requestType) {\n+            case QUERY:\n+                StringBuilder query = new StringBuilder();\n+                generate(query, schema.getQueryType(), 0, requestor);\n+                break;\n+            case MUTATION:\n+                StringBuilder mutation = new StringBuilder();\n+                generate(mutation, schema.getMutationType(), 0, requestor);\n+                break;\n+            case SUBSCRIPTION:\n+                StringBuilder subscription = new StringBuilder();\n+                generate(subscription, schema.getSubscriptionType(), 0, requestor);\n+                break;\n+        }\n+    }\n+\n+    public void sendByField(RequestType requestType) {\n+        GraphQLObjectType object = null;\n+        switch (requestType) {\n+            case QUERY:\n+                object = schema.getQueryType();\n+                break;\n+            case MUTATION:\n+                object = schema.getMutationType();\n+                break;\n+            case SUBSCRIPTION:\n+                object = schema.getSubscriptionType();\n+                break;\n+        }\n+        List<GraphQLFieldDefinition> fields = object.getFieldDefinitions();\n+        for (GraphQLFieldDefinition field : fields) {\n+            StringBuilder query = new StringBuilder();\n+            generate(query, field.getType(), 1, null);\n+            requestor.sendQuery(query.toString());\n+        }\n+    }\n+\n+    private void generate(StringBuilder query, GraphQLType type, int depth) {\n+        generate(query, type, depth, null);\n+    }\n+\n+    private void generate(StringBuilder query, GraphQLType type, int depth, Requestor requestor) {\n+        if (type instanceof GraphQLObjectType) {\n+            query.append(\"{\\n\");\n+            GraphQLObjectType object = (GraphQLObjectType) type;\n+            List<GraphQLFieldDefinition> fields = object.getFieldDefinitions();\n+            for (GraphQLFieldDefinition field : fields) {\n+                GraphQLType fieldType = field.getType();\n+                int parentLength = query.length();\n+                if (GraphQLTypeUtil.isWrapped(fieldType)) {\n+                    fieldType = GraphQLTypeUtil.unwrapAll(fieldType);\n+                }\n+                if (GraphQLTypeUtil.isLeaf(fieldType)) {\n+                    indent(query, depth + 1);\n+                    query.append(field.getName()).append(' ');\n+                    addArguments(query, field);\n+                    query.append('\\n');\n+                    if (requestor != null) {\n+                        for (int i = 0; i <= depth; ++i) {\n+                            indent(query, depth - i);\n+                            query.append(\"}\\n\");\n+                        }\n+                        requestor.sendQuery(query.toString());\n+                    }\n+                } else if (depth < MAX_DEPTH) {\n+                    indent(query, depth + 1);\n+                    query.append(field.getName()).append(' ');\n+                    addArguments(query, field);\n+                    generate(query, fieldType, depth + 1, requestor);\n+                }\n+                if (requestor != null) {\n+                    query.setLength(parentLength);\n+                }\n+            }\n+            indent(query, depth);\n+            query.append(\"}\\n\");\n+        } else if (type instanceof GraphQLInterfaceType) {\n+            List<GraphQLObjectType> objects =\n+                    schema.getImplementations((GraphQLInterfaceType) type);\n+            query.append(\"{\\n\");\n+            for (GraphQLObjectType object : objects) {\n+                indent(query, depth + 1);\n+                query.append(\"... on \").append(object.getName()).append(' ');\n+                generate(query, object, depth + 1, requestor);\n+            }\n+            indent(query, depth);\n+            query.append(\"}\\n\");\n+        } else if (type instanceof GraphQLUnionType) {\n+            GraphQLUnionType union = (GraphQLUnionType) type;\n+            List<GraphQLNamedOutputType> members = union.getTypes();\n+            query.append(\"{\\n\");\n+            for (GraphQLNamedOutputType member : members) {\n+                indent(query, depth + 1);\n+                query.append(\"... on \").append(member.getName()).append(' ');\n+                generate(query, member, depth + 1, requestor);\n+            }\n+            indent(query, depth);\n+            query.append(\"}\\n\");\n+        }\n+    }\n+\n+    private void indent(StringBuilder query, int n) {\n+        for (int i = 0; i < n; ++i) {\n+            query.append(\"    \");\n+        }\n+    }\n+\n+    private void addArguments(StringBuilder query, GraphQLFieldDefinition field) {\n+        List<GraphQLArgument> args = field.getArguments();\n+        if (!args.isEmpty()) {\n+            query.append('(');\n+            for (GraphQLArgument arg : args) {\n+                query.append(arg.getName())\n+                        .append(\": \")\n+                        .append(getDefaultValue(arg.getType()))\n+                        .append(\", \");\n+            }\n+            query.setLength(query.length() - 2);\n+            query.append(\") \");\n+        }\n+    }\n+\n+    private String getDefaultValue(GraphQLType type) {\n+        return getDefaultValue(type, 0);\n+    }\n+\n+    private String getDefaultValue(GraphQLType type, int depth) {\n+        if (depth > MAX_DEPTH) return \"null\";\n+        StringBuilder defaultValue = new StringBuilder();\n+        if (type instanceof GraphQLNonNull) {\n+            GraphQLNonNull nonNullType = (GraphQLNonNull) type;\n+            type = nonNullType.getWrappedType();\n+        }\n+        if (type instanceof GraphQLScalarType) {\n+            GraphQLScalarType scalar = (GraphQLScalarType) type;\n+            switch (scalar.getName()) {\n+                case \"Int\":\n+                case \"ID\":\n+                    defaultValue.append(\"1\");\n+                    break;\n+                case \"Float\":\n+                    defaultValue.append(\"3.14\");\n+                    break;\n+                case \"String\":\n+                    defaultValue.append(\"\\\"hello\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a2041bea301ac3c05ac1e09282ac5bc17002e7"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2NDg3Nw==", "bodyText": "For consistency this should use curly braces too.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else defaultValue.append(\"null\");\n          \n          \n            \n                    } else {\n          \n          \n            \n                        defaultValue.append(\"null\");\n          \n          \n            \n                    }", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#discussion_r458064877", "createdAt": "2020-07-21T12:41:39Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlGenerator.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import graphql.schema.GraphQLArgument;\n+import graphql.schema.GraphQLEnumType;\n+import graphql.schema.GraphQLFieldDefinition;\n+import graphql.schema.GraphQLInputObjectField;\n+import graphql.schema.GraphQLInputObjectType;\n+import graphql.schema.GraphQLInterfaceType;\n+import graphql.schema.GraphQLList;\n+import graphql.schema.GraphQLNamedOutputType;\n+import graphql.schema.GraphQLNamedType;\n+import graphql.schema.GraphQLNonNull;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLScalarType;\n+import graphql.schema.GraphQLSchema;\n+import graphql.schema.GraphQLType;\n+import graphql.schema.GraphQLTypeUtil;\n+import graphql.schema.GraphQLUnionType;\n+import graphql.schema.idl.SchemaParser;\n+import graphql.schema.idl.UnExecutableSchemaGenerator;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.zaproxy.zap.extension.spider.ExtensionSpider;\n+import org.zaproxy.zap.model.ValueGenerator;\n+\n+public class GraphQlGenerator {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlGenerator.class);\n+    private static final int MAX_DEPTH = 5;\n+    private final Requestor requestor;\n+    private GraphQLSchema schema;\n+\n+    protected enum RequestType {\n+        QUERY,\n+        MUTATION,\n+        SUBSCRIPTION\n+    };\n+\n+    public GraphQlGenerator(String sdl) {\n+        this(sdl, null);\n+    }\n+\n+    public GraphQlGenerator(String sdl, Requestor requestor) {\n+        schema = UnExecutableSchemaGenerator.makeUnExecutableSchema(new SchemaParser().parse(sdl));\n+        this.requestor = requestor;\n+    }\n+\n+    public void checkServiceMethods() {\n+        String query = \"{__schema{types{name kind description}}}\";\n+        requestor.sendQueryByGet(query);\n+        requestor.sendQueryByGraphQlPost(query);\n+        requestor.sendQuery(query);\n+    }\n+\n+    public String generateFull(RequestType requestType) {\n+        StringBuilder query = new StringBuilder();\n+        GraphQLObjectType object = null;\n+        switch (requestType) {\n+            case QUERY:\n+                object = schema.getQueryType();\n+                break;\n+            case MUTATION:\n+                query.append(\"mutation \");\n+                object = schema.getMutationType();\n+                break;\n+            case SUBSCRIPTION:\n+                query.append(\"subscription \");\n+                object = schema.getSubscriptionType();\n+                break;\n+        }\n+        generate(query, object, 0);\n+        return query.toString();\n+    }\n+\n+    public void sendFull(RequestType requestType) {\n+        switch (requestType) {\n+            case QUERY:\n+                StringBuilder query = new StringBuilder();\n+                generate(query, schema.getQueryType(), 0);\n+                requestor.sendQuery(query.toString());\n+                break;\n+            case MUTATION:\n+                StringBuilder mutation = new StringBuilder(\"mutation \");\n+                generate(mutation, schema.getMutationType(), 0);\n+                requestor.sendQuery(mutation.toString());\n+                break;\n+            case SUBSCRIPTION:\n+                StringBuilder subscription = new StringBuilder(\"subscription \");\n+                generate(subscription, schema.getSubscriptionType(), 0);\n+                requestor.sendQuery(subscription.toString());\n+                break;\n+        }\n+    }\n+\n+    public void sendByLeaf(RequestType requestType) {\n+        switch (requestType) {\n+            case QUERY:\n+                StringBuilder query = new StringBuilder();\n+                generate(query, schema.getQueryType(), 0, requestor);\n+                break;\n+            case MUTATION:\n+                StringBuilder mutation = new StringBuilder();\n+                generate(mutation, schema.getMutationType(), 0, requestor);\n+                break;\n+            case SUBSCRIPTION:\n+                StringBuilder subscription = new StringBuilder();\n+                generate(subscription, schema.getSubscriptionType(), 0, requestor);\n+                break;\n+        }\n+    }\n+\n+    public void sendByField(RequestType requestType) {\n+        GraphQLObjectType object = null;\n+        switch (requestType) {\n+            case QUERY:\n+                object = schema.getQueryType();\n+                break;\n+            case MUTATION:\n+                object = schema.getMutationType();\n+                break;\n+            case SUBSCRIPTION:\n+                object = schema.getSubscriptionType();\n+                break;\n+        }\n+        List<GraphQLFieldDefinition> fields = object.getFieldDefinitions();\n+        for (GraphQLFieldDefinition field : fields) {\n+            StringBuilder query = new StringBuilder();\n+            generate(query, field.getType(), 1, null);\n+            requestor.sendQuery(query.toString());\n+        }\n+    }\n+\n+    private void generate(StringBuilder query, GraphQLType type, int depth) {\n+        generate(query, type, depth, null);\n+    }\n+\n+    private void generate(StringBuilder query, GraphQLType type, int depth, Requestor requestor) {\n+        if (type instanceof GraphQLObjectType) {\n+            query.append(\"{\\n\");\n+            GraphQLObjectType object = (GraphQLObjectType) type;\n+            List<GraphQLFieldDefinition> fields = object.getFieldDefinitions();\n+            for (GraphQLFieldDefinition field : fields) {\n+                GraphQLType fieldType = field.getType();\n+                int parentLength = query.length();\n+                if (GraphQLTypeUtil.isWrapped(fieldType)) {\n+                    fieldType = GraphQLTypeUtil.unwrapAll(fieldType);\n+                }\n+                if (GraphQLTypeUtil.isLeaf(fieldType)) {\n+                    indent(query, depth + 1);\n+                    query.append(field.getName()).append(' ');\n+                    addArguments(query, field);\n+                    query.append('\\n');\n+                    if (requestor != null) {\n+                        for (int i = 0; i <= depth; ++i) {\n+                            indent(query, depth - i);\n+                            query.append(\"}\\n\");\n+                        }\n+                        requestor.sendQuery(query.toString());\n+                    }\n+                } else if (depth < MAX_DEPTH) {\n+                    indent(query, depth + 1);\n+                    query.append(field.getName()).append(' ');\n+                    addArguments(query, field);\n+                    generate(query, fieldType, depth + 1, requestor);\n+                }\n+                if (requestor != null) {\n+                    query.setLength(parentLength);\n+                }\n+            }\n+            indent(query, depth);\n+            query.append(\"}\\n\");\n+        } else if (type instanceof GraphQLInterfaceType) {\n+            List<GraphQLObjectType> objects =\n+                    schema.getImplementations((GraphQLInterfaceType) type);\n+            query.append(\"{\\n\");\n+            for (GraphQLObjectType object : objects) {\n+                indent(query, depth + 1);\n+                query.append(\"... on \").append(object.getName()).append(' ');\n+                generate(query, object, depth + 1, requestor);\n+            }\n+            indent(query, depth);\n+            query.append(\"}\\n\");\n+        } else if (type instanceof GraphQLUnionType) {\n+            GraphQLUnionType union = (GraphQLUnionType) type;\n+            List<GraphQLNamedOutputType> members = union.getTypes();\n+            query.append(\"{\\n\");\n+            for (GraphQLNamedOutputType member : members) {\n+                indent(query, depth + 1);\n+                query.append(\"... on \").append(member.getName()).append(' ');\n+                generate(query, member, depth + 1, requestor);\n+            }\n+            indent(query, depth);\n+            query.append(\"}\\n\");\n+        }\n+    }\n+\n+    private void indent(StringBuilder query, int n) {\n+        for (int i = 0; i < n; ++i) {\n+            query.append(\"    \");\n+        }\n+    }\n+\n+    private void addArguments(StringBuilder query, GraphQLFieldDefinition field) {\n+        List<GraphQLArgument> args = field.getArguments();\n+        if (!args.isEmpty()) {\n+            query.append('(');\n+            for (GraphQLArgument arg : args) {\n+                query.append(arg.getName())\n+                        .append(\": \")\n+                        .append(getDefaultValue(arg.getType()))\n+                        .append(\", \");\n+            }\n+            query.setLength(query.length() - 2);\n+            query.append(\") \");\n+        }\n+    }\n+\n+    private String getDefaultValue(GraphQLType type) {\n+        return getDefaultValue(type, 0);\n+    }\n+\n+    private String getDefaultValue(GraphQLType type, int depth) {\n+        if (depth > MAX_DEPTH) return \"null\";\n+        StringBuilder defaultValue = new StringBuilder();\n+        if (type instanceof GraphQLNonNull) {\n+            GraphQLNonNull nonNullType = (GraphQLNonNull) type;\n+            type = nonNullType.getWrappedType();\n+        }\n+        if (type instanceof GraphQLScalarType) {\n+            GraphQLScalarType scalar = (GraphQLScalarType) type;\n+            switch (scalar.getName()) {\n+                case \"Int\":\n+                case \"ID\":\n+                    defaultValue.append(\"1\");\n+                    break;\n+                case \"Float\":\n+                    defaultValue.append(\"3.14\");\n+                    break;\n+                case \"String\":\n+                    defaultValue.append(\"\\\"hello\\\"\");\n+                    break;\n+                case \"Boolean\":\n+                    defaultValue.append(\"true\");\n+                    break;\n+            }\n+        } else if (type instanceof GraphQLEnumType) {\n+            GraphQLEnumType enumType = (GraphQLEnumType) type;\n+            defaultValue.append(enumType.getValues().get(0).getName());\n+        } else if (type instanceof GraphQLInputObjectType) {\n+            GraphQLInputObjectType object = (GraphQLInputObjectType) type;\n+            defaultValue.append(\"{ \");\n+            List<GraphQLInputObjectField> fields = object.getFields();\n+            for (GraphQLInputObjectField field : fields) {\n+                defaultValue\n+                        .append(field.getName())\n+                        .append(\": \")\n+                        .append(getDefaultValue(field.getType(), depth + 1))\n+                        .append(\", \");\n+            }\n+            defaultValue.setLength(defaultValue.length() - 2);\n+            defaultValue.append(\" }\");\n+        } else if (type instanceof GraphQLList) {\n+            GraphQLList list = (GraphQLList) type;\n+            String wrappedValue = getDefaultValue(list.getWrappedType(), depth + 1);\n+            defaultValue\n+                    .append(\"[\")\n+                    .append(wrappedValue)\n+                    .append(\", \")\n+                    .append(wrappedValue)\n+                    .append(\", \")\n+                    .append(wrappedValue)\n+                    .append(\"]\");\n+        } else defaultValue.append(\"null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a2041bea301ac3c05ac1e09282ac5bc17002e7"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2ODg3Mw==", "bodyText": "There are probably core constants for a bunch of these, check HttpHeader etc. (Maybe not the content types, but the HTTP declaration and header field names I'm pretty sure about). Maybe make local constants for the content types.", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#discussion_r458068873", "createdAt": "2020-07-21T12:48:30Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/Requestor.java", "diffHunk": "@@ -49,6 +55,61 @@ public Requestor(int initiator) {\n                 HttpRequestConfig.builder().setRedirectionValidator(new MessageHandler()).build();\n     }\n \n+    public HttpMessage sendQueryByGet(String query) {\n+        HttpMessage message = null;\n+        try {\n+            URI url =\n+                    UrlBuilder.build(\n+                            endpointUrl\n+                                    + \"?query=\"\n+                                    + URLEncoder.encode(query, StandardCharsets.UTF_8.toString()));\n+            message = new HttpMessage(url);\n+            send(message);\n+        } catch (IOException e) {\n+            LOG.error(e.getMessage());\n+        }\n+        return message;\n+    }\n+\n+    public HttpMessage sendQueryByGraphQlPost(String query) {\n+        HttpMessage message = null;\n+        try {\n+            HttpRequestBody msgBody = new HttpRequestBody(query);\n+            HttpRequestHeader msgHeader =\n+                    new HttpRequestHeader(HttpRequestHeader.POST, endpointUrl, \"HTTP/1.1\");\n+            msgHeader.setHeader(\"Accept\", \"application/json\");\n+            msgHeader.setHeader(\"Content-Type\", \"application/graphql\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a2041bea301ac3c05ac1e09282ac5bc17002e7"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47a2041bea301ac3c05ac1e09282ac5bc17002e7", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/47a2041bea301ac3c05ac1e09282ac5bc17002e7", "committedDate": "2020-07-21T08:50:04Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "6dbd0e26114a77d4b99cdb3bdc77a1e84501f76c", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/6dbd0e26114a77d4b99cdb3bdc77a1e84501f76c", "committedDate": "2020-07-22T11:14:03Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6dbd0e26114a77d4b99cdb3bdc77a1e84501f76c", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/6dbd0e26114a77d4b99cdb3bdc77a1e84501f76c", "committedDate": "2020-07-22T11:14:03Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "47f304ad0ab709707119715959da6ee797f96e2d", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/47f304ad0ab709707119715959da6ee797f96e2d", "committedDate": "2020-07-22T16:18:24Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47f304ad0ab709707119715959da6ee797f96e2d", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/47f304ad0ab709707119715959da6ee797f96e2d", "committedDate": "2020-07-22T16:18:24Z", "message": "Add Query Generation Functionality\n\n- Add class GraphQlGenerator\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "60f4c6a089f35f4ca4b0d1ebe8f3d0a6ffe04442", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/60f4c6a089f35f4ca4b0d1ebe8f3d0a6ffe04442", "committedDate": "2020-07-24T11:50:58Z", "message": "Add Query Generation Functionality\n\n- Add classes GraphQlGenerator, GraphQlOptionsPanel, GraphQlParam\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60f4c6a089f35f4ca4b0d1ebe8f3d0a6ffe04442", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/60f4c6a089f35f4ca4b0d1ebe8f3d0a6ffe04442", "committedDate": "2020-07-24T11:50:58Z", "message": "Add Query Generation Functionality\n\n- Add classes GraphQlGenerator, GraphQlOptionsPanel, GraphQlParam\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "c39f80e29dc950e01ab3ee889a054cf4f4c2ae64", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/c39f80e29dc950e01ab3ee889a054cf4f4c2ae64", "committedDate": "2020-07-25T08:52:17Z", "message": "Add Query Generation Functionality\n\n- Add classes GraphQlGenerator, GraphQlOptionsPanel, GraphQlParam\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDM5ODY4", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#pullrequestreview-457439868", "createdAt": "2020-07-29T11:41:56Z", "commit": {"oid": "c39f80e29dc950e01ab3ee889a054cf4f4c2ae64"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo0MTo1NlrOG40nBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo0NDozNVrOG40r9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIzNTM5OQ==", "bodyText": "I think these should have trailing colons : to be more consistent with other options panels.", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#discussion_r462235399", "createdAt": "2020-07-29T11:41:56Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/main/resources/org/zaproxy/addon/graphql/resources/Messages.properties", "diffHunk": "@@ -33,3 +33,17 @@ graphql.error.importfile = An error occurred while importing from file.\n graphql.error.filenotfound = Cannot find the specified file.\n graphql.error.emptyendurl = Endpoint URL must be specified.\n graphql.error.invalidurl = Please enter a valid URL.\\n{0}\n+\n+graphql.options.panelName = GraphQL Options\n+graphql.options.label.queryDepth = Maximum Query Depth\n+graphql.options.label.argsDepth = Maximum Arguments Depth\n+graphql.options.label.split = Generate Query For\n+graphql.options.label.requestMethod = Request Method\n+graphql.options.label.optionalArgsEnabled = Specify Optional Arguments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f80e29dc950e01ab3ee889a054cf4f4c2ae64"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIzNjY2Mg==", "bodyText": "t seems like this is being done in every test. Should it be being done in the code somewhere? Or does it indicate an issue with the generator?", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#discussion_r462236662", "createdAt": "2020-07-29T11:44:35Z", "author": {"login": "kingthorin"}, "path": "addOns/graphql/src/test/java/org/zaproxy/addon/graphql/GraphQlGeneratorUnitTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.zaproxy.zap.testutils.TestUtils;\n+\n+public class GraphQlGeneratorUnitTest extends TestUtils {\n+    GraphQlGenerator generator;\n+    GraphQlParam param;\n+\n+    @BeforeEach\n+    public void setup() throws Exception {\n+        setUpZap();\n+        param = new GraphQlParam(5, 5, true, null, null);\n+    }\n+\n+    @Test\n+    public void scalarFieldsOnly() throws Exception {\n+        generator = new GraphQlGenerator(getHtml(\"scalarFieldsOnly.graphql\"), null, param);\n+        String query = generator.generateFull(GraphQlGenerator.RequestType.QUERY);\n+        query = query.replaceAll(\"\\\\s+\", \" \").trim();\n+        String expectedQuery = \"{ name id age height human }\";\n+        assertEquals(query, expectedQuery);\n+    }\n+\n+    @Test\n+    public void zeroDepthObjects() throws Exception {\n+        generator = new GraphQlGenerator(getHtml(\"zeroDepthObjects.graphql\"), null, param);\n+        String query = generator.generateFull(GraphQlGenerator.RequestType.QUERY);\n+        query = query.replaceAll(\"\\\\s+\", \" \").trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39f80e29dc950e01ab3ee889a054cf4f4c2ae64"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "404dac778e1893b313443f8e8955262e08c1c59d", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/404dac778e1893b313443f8e8955262e08c1c59d", "committedDate": "2020-07-29T12:22:59Z", "message": "Add Query Generation Functionality\n\n- Add classes GraphQlGenerator, GraphQlOptionsPanel, GraphQlParam\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c39f80e29dc950e01ab3ee889a054cf4f4c2ae64", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/c39f80e29dc950e01ab3ee889a054cf4f4c2ae64", "committedDate": "2020-07-25T08:52:17Z", "message": "Add Query Generation Functionality\n\n- Add classes GraphQlGenerator, GraphQlOptionsPanel, GraphQlParam\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "404dac778e1893b313443f8e8955262e08c1c59d", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/404dac778e1893b313443f8e8955262e08c1c59d", "committedDate": "2020-07-29T12:22:59Z", "message": "Add Query Generation Functionality\n\n- Add classes GraphQlGenerator, GraphQlOptionsPanel, GraphQlParam\n- Add tests for the generator\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Mjk0NjM2", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#pullrequestreview-458294636", "createdAt": "2020-07-30T10:55:40Z", "commit": {"oid": "404dac778e1893b313443f8e8955262e08c1c59d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDIwNDA1", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#pullrequestreview-466020405", "createdAt": "2020-08-12T15:19:10Z", "commit": {"oid": "404dac778e1893b313443f8e8955262e08c1c59d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDIzNTE1", "url": "https://github.com/zaproxy/zap-extensions/pull/2485#pullrequestreview-466023515", "createdAt": "2020-08-12T15:22:36Z", "commit": {"oid": "404dac778e1893b313443f8e8955262e08c1c59d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 389, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}