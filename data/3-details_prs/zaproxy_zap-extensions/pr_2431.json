{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzMyNDM0", "number": 2431, "title": "Add Import Functionality for GraphQL Schemas", "bodyText": "Add import functionality to the UI, API, and the CLI.\nSchema in SDL can now be imported.\nImport via Introspection also works.\nRename fieldFrom to fieldSchema for clarity.\nAdd Spider Checks\n\nSigned-off-by: ricekot ricekot@gmail.com", "createdAt": "2020-06-08T18:53:41Z", "url": "https://github.com/zaproxy/zap-extensions/pull/2431", "merged": true, "mergeCommit": {"oid": "1177b55e371f594355e7c40b241ed8427a16a1c4"}, "closed": true, "closedAt": "2020-07-01T14:30:27Z", "author": {"login": "ricekot"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp0aROAFqTQyNzc2NTU5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwX6mMAFqTQ0MDE2OTc3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzY1NTk0", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#pullrequestreview-427765594", "createdAt": "2020-06-10T07:07:21Z", "commit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzowNzoyMVrOGhnhYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzoxOTowOVrOGhn3Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwMzcxNA==", "bodyText": "Move to internal utility class to ensure the URL validations are consistent and avoid duplication?", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437903714", "createdAt": "2020-06-10T07:07:21Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -106,37 +111,79 @@ public String getDescription() {\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlfile <path>      \"\n+                        \"-graphqlfile <path>       \"\n                                 + Constant.messages.getString(\"graphql.cmdline.file.help\"));\n         arguments[ARG_IMPORT_URL_IDX] =\n                 new CommandLineArgument(\n                         \"-graphqlurl\",\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlurl <url>        \"\n+                        \"-graphqlurl <url>         \"\n                                 + Constant.messages.getString(\"graphql.cmdline.url.help\"));\n         arguments[ARG_END_URL_IDX] =\n                 new CommandLineArgument(\n                         \"-graphqlendurl\",\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlendurl <url>  \"\n+                        \"-graphqlendurl <url>      \"\n                                 + Constant.messages.getString(\"graphql.cmdline.endurl.help\"));\n         return arguments;\n     }\n \n     @Override\n     public void execute(CommandLineArgument[] args) {\n-        if (arguments[ARG_IMPORT_FILE_IDX].isEnabled()) {\n-            System.out.println(\"Nothing to see here (yet) :)\");\n-        }\n-        if (arguments[ARG_IMPORT_URL_IDX].isEnabled()) {\n-            System.out.println(\"Nothing to see here (yet) :)\");\n+        if (arguments[ARG_IMPORT_FILE_IDX].isEnabled()\n+                || arguments[ARG_IMPORT_URL_IDX].isEnabled()) {\n+            if (!arguments[ARG_END_URL_IDX].isEnabled()) {\n+                CommandLine.error(\"Endpoint URL must be specified.\");\n+            }\n+            String endpointUriStr = arguments[ARG_END_URL_IDX].getArguments().firstElement();\n+            URI endpointUri = null;\n+            try {\n+                new URL(endpointUriStr);\n+                endpointUri = new URI(endpointUriStr, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwMzgzNg==", "bodyText": "Should skip importing the file/URL (same for following errors) as we don't have a valid endpoint URL.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437903836", "createdAt": "2020-06-10T07:07:38Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -106,37 +111,79 @@ public String getDescription() {\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlfile <path>      \"\n+                        \"-graphqlfile <path>       \"\n                                 + Constant.messages.getString(\"graphql.cmdline.file.help\"));\n         arguments[ARG_IMPORT_URL_IDX] =\n                 new CommandLineArgument(\n                         \"-graphqlurl\",\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlurl <url>        \"\n+                        \"-graphqlurl <url>         \"\n                                 + Constant.messages.getString(\"graphql.cmdline.url.help\"));\n         arguments[ARG_END_URL_IDX] =\n                 new CommandLineArgument(\n                         \"-graphqlendurl\",\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlendurl <url>  \"\n+                        \"-graphqlendurl <url>      \"\n                                 + Constant.messages.getString(\"graphql.cmdline.endurl.help\"));\n         return arguments;\n     }\n \n     @Override\n     public void execute(CommandLineArgument[] args) {\n-        if (arguments[ARG_IMPORT_FILE_IDX].isEnabled()) {\n-            System.out.println(\"Nothing to see here (yet) :)\");\n-        }\n-        if (arguments[ARG_IMPORT_URL_IDX].isEnabled()) {\n-            System.out.println(\"Nothing to see here (yet) :)\");\n+        if (arguments[ARG_IMPORT_FILE_IDX].isEnabled()\n+                || arguments[ARG_IMPORT_URL_IDX].isEnabled()) {\n+            if (!arguments[ARG_END_URL_IDX].isEnabled()) {\n+                CommandLine.error(\"Endpoint URL must be specified.\");\n+            }\n+            String endpointUriStr = arguments[ARG_END_URL_IDX].getArguments().firstElement();\n+            URI endpointUri = null;\n+            try {\n+                new URL(endpointUriStr);\n+                endpointUri = new URI(endpointUriStr, true);\n+            } catch (Exception e) {\n+                CommandLine.error(\"Invalid Endpoint URL.\\n\" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwMzg3NQ==", "bodyText": "It might worth adding a convenience method, e.g. GraphQlParser#parse(Path, String), to avoid duplication.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437903875", "createdAt": "2020-06-10T07:07:44Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -106,37 +111,79 @@ public String getDescription() {\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlfile <path>      \"\n+                        \"-graphqlfile <path>       \"\n                                 + Constant.messages.getString(\"graphql.cmdline.file.help\"));\n         arguments[ARG_IMPORT_URL_IDX] =\n                 new CommandLineArgument(\n                         \"-graphqlurl\",\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlurl <url>        \"\n+                        \"-graphqlurl <url>         \"\n                                 + Constant.messages.getString(\"graphql.cmdline.url.help\"));\n         arguments[ARG_END_URL_IDX] =\n                 new CommandLineArgument(\n                         \"-graphqlendurl\",\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlendurl <url>  \"\n+                        \"-graphqlendurl <url>      \"\n                                 + Constant.messages.getString(\"graphql.cmdline.endurl.help\"));\n         return arguments;\n     }\n \n     @Override\n     public void execute(CommandLineArgument[] args) {\n-        if (arguments[ARG_IMPORT_FILE_IDX].isEnabled()) {\n-            System.out.println(\"Nothing to see here (yet) :)\");\n-        }\n-        if (arguments[ARG_IMPORT_URL_IDX].isEnabled()) {\n-            System.out.println(\"Nothing to see here (yet) :)\");\n+        if (arguments[ARG_IMPORT_FILE_IDX].isEnabled()\n+                || arguments[ARG_IMPORT_URL_IDX].isEnabled()) {\n+            if (!arguments[ARG_END_URL_IDX].isEnabled()) {\n+                CommandLine.error(\"Endpoint URL must be specified.\");\n+            }\n+            String endpointUriStr = arguments[ARG_END_URL_IDX].getArguments().firstElement();\n+            URI endpointUri = null;\n+            try {\n+                new URL(endpointUriStr);\n+                endpointUri = new URI(endpointUriStr, true);\n+            } catch (Exception e) {\n+                CommandLine.error(\"Invalid Endpoint URL.\\n\" + e.getMessage());\n+            }\n+            if (arguments[ARG_IMPORT_FILE_IDX].isEnabled()) {\n+                String filePath = args[ARG_IMPORT_FILE_IDX].getArguments().firstElement();\n+                File file = new File(filePath);\n+                if (!file.exists() || !file.canRead()) {\n+                    CommandLine.error(\"Cannot read file: \" + file.getAbsolutePath());\n+                }\n+                if (!file.isFile()) {\n+                    CommandLine.error(\"Invalid File.\");\n+                }\n+                try {\n+                    GraphQlParser.parse(FileUtils.readFileToString(file, \"UTF-8\"), endpointUri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNzIzMQ==", "bodyText": "Move the canRead to the following if? \"does not exist\" is misleading in that case.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437907231", "createdAt": "2020-06-10T07:14:44Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlApi.java", "diffHunk": "@@ -61,14 +69,56 @@ public String getPrefix() {\n     public ApiResponse handleApiAction(String name, JSONObject params) throws ApiException {\n         switch (name) {\n             case ACTION_IMPORT_FILE:\n-            case ACTION_IMPORT_URL:\n-                LOGGER.debug(\"Nothing to see here (yet) :)\");\n-                break;\n+                {\n+                    URI endpointUri = UriFromStr(params.getString(PARAM_ENDPOINT), PARAM_ENDPOINT);\n+                    File file = new File(params.getString(PARAM_FILE));\n+                    if (!file.exists() || !file.canRead()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwODMwNw==", "bodyText": "Should start with lower case.\nCan be static.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437908307", "createdAt": "2020-06-10T07:17:04Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlApi.java", "diffHunk": "@@ -61,14 +69,56 @@ public String getPrefix() {\n     public ApiResponse handleApiAction(String name, JSONObject params) throws ApiException {\n         switch (name) {\n             case ACTION_IMPORT_FILE:\n-            case ACTION_IMPORT_URL:\n-                LOGGER.debug(\"Nothing to see here (yet) :)\");\n-                break;\n+                {\n+                    URI endpointUri = UriFromStr(params.getString(PARAM_ENDPOINT), PARAM_ENDPOINT);\n+                    File file = new File(params.getString(PARAM_FILE));\n+                    if (!file.exists() || !file.canRead()) {\n+                        throw new ApiException(\n+                                ApiException.Type.DOES_NOT_EXIST, file.getAbsolutePath());\n+                    }\n+\n+                    if (!file.isFile()) {\n+                        throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_FILE);\n+                    }\n+\n+                    try {\n+                        GraphQlParser.parse(FileUtils.readFileToString(file, \"UTF-8\"), endpointUri);\n+                    } catch (IOException e) {\n+                        throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, PARAM_FILE);\n+                    }\n \n+                    break;\n+                }\n+            case ACTION_IMPORT_URL:\n+                {\n+                    URI endpointUri = UriFromStr(params.getString(PARAM_ENDPOINT), PARAM_ENDPOINT);\n+                    String schemaStr = params.optString(PARAM_URL, \"\");\n+                    if (\"\".equals(schemaStr)) {\n+                        GraphQlParser.introspect(endpointUri);\n+                        break;\n+                    }\n+                    URI schemaUri = UriFromStr(schemaStr, PARAM_URL);\n+                    GraphQlParser.parse(schemaUri, endpointUri);\n+                    break;\n+                }\n             default:\n                 throw new ApiException(ApiException.Type.BAD_ACTION);\n         }\n \n         return ApiResponseElement.OK;\n     }\n+\n+    private URI UriFromStr(String uriStr, String param) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwODg1OA==", "bodyText": "This needs to handle the exceptions that might be thrown while parsing, e.g.:\nERROR org.zaproxy.zap.ZAP$UncaughtExceptionLogger  - Exception in thread \"AWT-EventQueue-1\"\ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 2 column 1 path $\n\tat com.google.gson.Gson.fromJson(Gson.java:944)\n\tat com.google.gson.Gson.fromJson(Gson.java:897)\n\tat com.google.gson.Gson.fromJson(Gson.java:846)\n\tat org.zaproxy.addon.graphql.GraphQlParser.introspect(GraphQlParser.java:73)\n\tat org.zaproxy.addon.graphql.ImportFromUrlDialog.importDefinition(ImportFromUrlDialog.java:41)", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437908858", "createdAt": "2020-06-10T07:18:13Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -47,7 +67,46 @@ public static void parse(URI uri) {\n             LOG.error(\"Unable to send request.\", e);\n             return;\n         }\n+        persistMessage(msg);\n+        Map<String, Object> result =\n+                new Gson()\n+                        .fromJson(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTA4OQ==", "bodyText": "Not really needed, there are no statements afterwards.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437909089", "createdAt": "2020-06-10T07:18:41Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -62,6 +121,7 @@ public static void parse(URI uri) {\n                     });\n         } catch (Exception e) {\n             LOG.error(\"Could not add message to sites tree.\", e);\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTI0MA==", "bodyText": "This will have to be done in a separate thread (guess GraphQlParser could be responsible for that), otherwise it will block the EDT.\nSame when importing from URL.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437909240", "createdAt": "2020-06-10T07:18:58Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromFileDialog.java", "diffHunk": "@@ -87,7 +89,17 @@ protected boolean importDefinition() {\n          * Import schema definition from file path; and\n          * Send it to the parser.\n          */\n-        showWarningDialog(Constant.messages.getString(\"graphql.importfromdialog.message\"));\n-        return false;\n+        File file = new File(getSchemaField().getText());\n+\n+        if (!file.canRead()) {\n+            showWarningDialog(Constant.messages.getString(MESSAGE_PREFIX + \"badfile\"));\n+            return false;\n+        }\n+        try {\n+            GraphQlParser.parse(FileUtils.readFileToString(file, \"UTF-8\"), getEndpointUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTI5Mw==", "bodyText": "Imports ... to be consistent with the file description, same for the command line.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437909293", "createdAt": "2020-06-10T07:19:06Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/resources/org/zaproxy/addon/graphql/resources/Messages.properties", "diffHunk": "@@ -5,6 +5,7 @@ graphql.api.action.importFile.param.file = The File That Contains the GraphQL Sc\n graphql.api.action.importFile.param.endurl = The Endpoint URL.\n graphql.api.action.importUrl = Retrieves a GraphQL Schema from a URL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTMxNQ==", "bodyText": "An error occurred while importing from file.? (e.g. Some parts might have been read.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r437909315", "createdAt": "2020-06-10T07:19:09Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/resources/org/zaproxy/addon/graphql/resources/Messages.properties", "diffHunk": "@@ -30,3 +31,4 @@ graphql.importfromfiledialog.title = Import a GraphQL Schema from a File\n graphql.importfromfiledialog.labelfile = Schema File\n graphql.importfromfiledialog.badfile = Cannot find the specified file.\n graphql.importfromfiledialog.choosefilebutton = Choose File\n+graphql.importfromfiledialog.readerror = Cannot read the specified file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa4478fd7914717dfa02216ad87b64021cf93296", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/aa4478fd7914717dfa02216ad87b64021cf93296", "committedDate": "2020-06-08T18:48:32Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "dc22d78e541edec3f441c957de21e712cd5a33ea", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/dc22d78e541edec3f441c957de21e712cd5a33ea", "committedDate": "2020-06-13T14:16:50Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc22d78e541edec3f441c957de21e712cd5a33ea", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/dc22d78e541edec3f441c957de21e712cd5a33ea", "committedDate": "2020-06-13T14:16:50Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "ed6bb5dc2e72cef2a75a2367f245d42f702cc51f", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/ed6bb5dc2e72cef2a75a2367f245d42f702cc51f", "committedDate": "2020-06-13T14:22:06Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed6bb5dc2e72cef2a75a2367f245d42f702cc51f", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/ed6bb5dc2e72cef2a75a2367f245d42f702cc51f", "committedDate": "2020-06-13T14:22:06Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "4d8327756ef9f5b3efdfa58a4855ce01678547de", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/4d8327756ef9f5b3efdfa58a4855ce01678547de", "committedDate": "2020-06-13T14:41:36Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d8327756ef9f5b3efdfa58a4855ce01678547de", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/4d8327756ef9f5b3efdfa58a4855ce01678547de", "committedDate": "2020-06-13T14:41:36Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "c777eb19dde1846de73212392305dfeda1405eb2", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/c777eb19dde1846de73212392305dfeda1405eb2", "committedDate": "2020-06-15T08:56:01Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c777eb19dde1846de73212392305dfeda1405eb2", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/c777eb19dde1846de73212392305dfeda1405eb2", "committedDate": "2020-06-15T08:56:01Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "68490aa0dbc2bdd1267563de4414772106068b64", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/68490aa0dbc2bdd1267563de4414772106068b64", "committedDate": "2020-06-19T18:23:34Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68490aa0dbc2bdd1267563de4414772106068b64", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/68490aa0dbc2bdd1267563de4414772106068b64", "committedDate": "2020-06-19T18:23:34Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/ef5b7c569d5263bc8d79041ae6af89e9dc33b86e", "committedDate": "2020-06-24T15:50:11Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MzI2NjY3", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#pullrequestreview-437326667", "createdAt": "2020-06-25T09:32:57Z", "commit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "state": "COMMENTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTozMjo1N1rOGoy8UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDoxOTowOFrOGo0gyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzMDg2NQ==", "bodyText": "These can be moved to inside the if of the version check.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445430865", "createdAt": "2020-06-25T09:32:57Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -49,23 +61,48 @@ public ExtensionGraphQl() {\n     public void hook(ExtensionHook extensionHook) {\n         super.hook(extensionHook);\n \n+        /* Custom spider is added in order to explore GraphQl schemas. */\n+        ExtensionSpider spider =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);\n+        graphQlSpider = new GraphQlSpider();\n+        graphQlParseFilter = new GraphQlParseFilter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzMDg4OQ==", "bodyText": "Does not warrant a warning, if the user disabled the spider it's expected/normal that the GraqhQL spider will not be used.\nRegarding the support just on >= 2.10.0, that should be documented in the help page.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445430889", "createdAt": "2020-06-25T09:32:59Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -49,23 +61,48 @@ public ExtensionGraphQl() {\n     public void hook(ExtensionHook extensionHook) {\n         super.hook(extensionHook);\n \n+        /* Custom spider is added in order to explore GraphQl schemas. */\n+        ExtensionSpider spider =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);\n+        graphQlSpider = new GraphQlSpider();\n+        graphQlParseFilter = new GraphQlParseFilter();\n+        if (spider != null && !\"2.9.0\".equals(Constant.PROGRAM_VERSION)) {\n+            spider.addCustomParseFilter(graphQlParseFilter);\n+            spider.addCustomParser(graphQlSpider);\n+            LOG.debug(\"Added GraphQl spider.\");\n+        } else {\n+            LOG.warn(\"Could not add GraphQl spider.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzMTc4Nw==", "bodyText": "This needs to be tweaked per above version check.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445431787", "createdAt": "2020-06-25T09:34:28Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -49,23 +61,48 @@ public ExtensionGraphQl() {\n     public void hook(ExtensionHook extensionHook) {\n         super.hook(extensionHook);\n \n+        /* Custom spider is added in order to explore GraphQl schemas. */\n+        ExtensionSpider spider =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);\n+        graphQlSpider = new GraphQlSpider();\n+        graphQlParseFilter = new GraphQlParseFilter();\n+        if (spider != null && !\"2.9.0\".equals(Constant.PROGRAM_VERSION)) {\n+            spider.addCustomParseFilter(graphQlParseFilter);\n+            spider.addCustomParser(graphQlSpider);\n+            LOG.debug(\"Added GraphQl spider.\");\n+        } else {\n+            LOG.warn(\"Could not add GraphQl spider.\");\n+        }\n+\n         if (getView() != null) {\n             extensionHook.getHookMenu().addImportMenuItem(getMenuImportLocalGraphQl());\n             extensionHook.getHookMenu().addImportMenuItem(getMenuImportUrlGraphQl());\n         }\n \n-        extensionHook.addApiImplementor(new GraphQlApi(this));\n+        extensionHook.addApiImplementor(new GraphQlApi());\n         extensionHook.addCommandLine(getCommandLineArguments());\n     }\n \n+    @Override\n+    public void unload() {\n+        super.unload();\n+        ExtensionSpider spider =\n+                Control.getSingleton().getExtensionLoader().getExtension(ExtensionSpider.class);\n+        if (spider != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzNDgxMw==", "bodyText": "Can be removed, same handling as IOException.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445434813", "createdAt": "2020-06-25T09:39:39Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ExtensionGraphQl.java", "diffHunk": "@@ -100,43 +137,84 @@ public String getDescription() {\n     }\n \n     private CommandLineArgument[] getCommandLineArguments() {\n-        arguments[ARG_IMPORT_FILE_IDX] =\n+        CommandLineArgument[] args = new CommandLineArgument[3];\n+        args[ARG_IMPORT_FILE_IDX] =\n                 new CommandLineArgument(\n                         \"-graphqlfile\",\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlfile <path>      \"\n+                        \"-graphqlfile <path>       \"\n                                 + Constant.messages.getString(\"graphql.cmdline.file.help\"));\n-        arguments[ARG_IMPORT_URL_IDX] =\n+        args[ARG_IMPORT_URL_IDX] =\n                 new CommandLineArgument(\n                         \"-graphqlurl\",\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlurl <url>        \"\n+                        \"-graphqlurl <url>         \"\n                                 + Constant.messages.getString(\"graphql.cmdline.url.help\"));\n-        arguments[ARG_END_URL_IDX] =\n+        args[ARG_END_URL_IDX] =\n                 new CommandLineArgument(\n                         \"-graphqlendurl\",\n                         1,\n                         null,\n                         \"\",\n-                        \"-graphqlendurl <url>  \"\n+                        \"-graphqlendurl <url>      \"\n                                 + Constant.messages.getString(\"graphql.cmdline.endurl.help\"));\n-        return arguments;\n+        return args;\n     }\n \n     @Override\n     public void execute(CommandLineArgument[] args) {\n-        if (arguments[ARG_IMPORT_FILE_IDX].isEnabled()) {\n-            System.out.println(\"Nothing to see here (yet) :)\");\n-        }\n-        if (arguments[ARG_IMPORT_URL_IDX].isEnabled()) {\n-            System.out.println(\"Nothing to see here (yet) :)\");\n-        }\n-        if (arguments[ARG_END_URL_IDX].isEnabled()) {\n-            System.out.println(\"Nothing to see here (yet) :)\");\n+        if (args[ARG_IMPORT_FILE_IDX].isEnabled() || args[ARG_IMPORT_URL_IDX].isEnabled()) {\n+            if (!args[ARG_END_URL_IDX].isEnabled()) {\n+                CommandLine.error(Constant.messages.getString(\"graphql.error.emptyendurl\"));\n+                return;\n+            }\n+\n+            GraphQlParser parser;\n+            try {\n+                parser =\n+                        new GraphQlParser(\n+                                args[ARG_END_URL_IDX].getArguments().firstElement(),\n+                                HttpSender.MANUAL_REQUEST_INITIATOR);\n+            } catch (URIException e) {\n+                CommandLine.error(\n+                        Constant.messages.getString(\"graphql.error.invalidurl\", e.getMessage()));\n+                return;\n+            }\n+\n+            if (args[ARG_IMPORT_FILE_IDX].isEnabled()) {\n+                try {\n+                    parser.importFile(args[ARG_IMPORT_FILE_IDX].getArguments().firstElement());\n+                } catch (FileNotFoundException e) {\n+                    CommandLine.error(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzOTcyOA==", "bodyText": "Extract a function, or declare the parser beforehand.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445439728", "createdAt": "2020-06-25T09:48:08Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlApi.java", "diffHunk": "@@ -61,10 +61,38 @@ public String getPrefix() {\n     public ApiResponse handleApiAction(String name, JSONObject params) throws ApiException {\n         switch (name) {\n             case ACTION_IMPORT_FILE:\n+                {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzOTgwMA==", "bodyText": "For consistency better to use curly braces always.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445439800", "createdAt": "2020-06-25T09:48:14Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlApi.java", "diffHunk": "@@ -61,10 +61,38 @@ public String getPrefix() {\n     public ApiResponse handleApiAction(String name, JSONObject params) throws ApiException {\n         switch (name) {\n             case ACTION_IMPORT_FILE:\n+                {\n+                    try {\n+                        GraphQlParser parser =\n+                                new GraphQlParser(\n+                                        params.getString(PARAM_ENDPOINT),\n+                                        HttpSender.MANUAL_REQUEST_INITIATOR);\n+                        parser.importFile(params.getString(PARAM_FILE));\n+                    } catch (URIException e) {\n+                        throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, e.getMessage());\n+                    } catch (FileNotFoundException e) {\n+                        throw new ApiException(ApiException.Type.DOES_NOT_EXIST, e.getMessage());\n+                    } catch (IOException e) {\n+                        throw new ApiException(ApiException.Type.ILLEGAL_PARAMETER, e.getMessage());\n+                    }\n+                    break;\n+                }\n             case ACTION_IMPORT_URL:\n-                LOGGER.debug(\"Nothing to see here (yet) :)\");\n-                break;\n-\n+                {\n+                    try {\n+                        GraphQlParser parser =\n+                                new GraphQlParser(\n+                                        params.getString(PARAM_ENDPOINT),\n+                                        HttpSender.MANUAL_REQUEST_INITIATOR);\n+                        if (params.optString(PARAM_URL, \"\").isEmpty()) {\n+                            parser.introspect();\n+                        } else parser.importUrl(params.optString(PARAM_URL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0MDM5NA==", "bodyText": "Can be delayed to after the following check, avoids creating the strings unnecessarily.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445440394", "createdAt": "2020-06-25T09:49:14Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParseFilter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import static org.zaproxy.zap.spider.filters.ParseFilter.FilterResult;\n+\n+import java.util.Locale;\n+import org.apache.commons.lang.StringUtils;\n+import org.parosproxy.paros.network.HttpHeader;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.spider.filters.ParseFilter;\n+\n+public class GraphQlParseFilter extends ParseFilter {\n+\n+    @Override\n+    public FilterResult filtered(HttpMessage message) {\n+        String uri = message.getRequestHeader().getURI().toString();\n+        String contentType =\n+                message.getResponseHeader()\n+                        .getHeader(HttpHeader.CONTENT_TYPE)\n+                        .toLowerCase(Locale.ROOT);\n+        String responseBodyStart =\n+                StringUtils.left(message.getResponseBody().toString(), 250)\n+                        .toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0OTAxNA==", "bodyText": "Can be removed not actually used.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445449014", "createdAt": "2020-06-25T10:04:40Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -19,49 +19,108 @@\n  */\n package org.zaproxy.addon.graphql;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import graphql.introspection.IntrospectionQuery;\n+import graphql.introspection.IntrospectionResultToSchema;\n+import graphql.language.Document;\n+import graphql.schema.idl.SchemaPrinter;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Map;\n import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.commons.io.FileUtils;\n import org.apache.log4j.Logger;\n-import org.parosproxy.paros.control.Control;\n-import org.parosproxy.paros.extension.history.ExtensionHistory;\n-import org.parosproxy.paros.model.HistoryReference;\n-import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.Constant;\n import org.parosproxy.paros.network.HttpMessage;\n-import org.parosproxy.paros.network.HttpSender;\n-import org.zaproxy.zap.utils.ThreadUtils;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+import org.zaproxy.zap.network.HttpRequestBody;\n \n public class GraphQlParser {\n \n     private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+    private final URI endpointUrl;\n+    private final int initiator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0OTA3Ng==", "bodyText": "It should not be an instance variable, the persistence should be done through the RequestHandler automatically when the message is sent.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445449076", "createdAt": "2020-06-25T10:04:47Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -19,49 +19,108 @@\n  */\n package org.zaproxy.addon.graphql;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import graphql.introspection.IntrospectionQuery;\n+import graphql.introspection.IntrospectionResultToSchema;\n+import graphql.language.Document;\n+import graphql.schema.idl.SchemaPrinter;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Map;\n import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.commons.io.FileUtils;\n import org.apache.log4j.Logger;\n-import org.parosproxy.paros.control.Control;\n-import org.parosproxy.paros.extension.history.ExtensionHistory;\n-import org.parosproxy.paros.model.HistoryReference;\n-import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.Constant;\n import org.parosproxy.paros.network.HttpMessage;\n-import org.parosproxy.paros.network.HttpSender;\n-import org.zaproxy.zap.utils.ThreadUtils;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+import org.zaproxy.zap.network.HttpRequestBody;\n \n public class GraphQlParser {\n \n     private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+    private final URI endpointUrl;\n+    private final int initiator;\n+    private final RequestHandler requestHandler;\n+    private HttpMessage importMessage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0OTEwNg==", "bodyText": "schemaSdl.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445449106", "createdAt": "2020-06-25T10:04:51Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -19,49 +19,108 @@\n  */\n package org.zaproxy.addon.graphql;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import graphql.introspection.IntrospectionQuery;\n+import graphql.introspection.IntrospectionResultToSchema;\n+import graphql.language.Document;\n+import graphql.schema.idl.SchemaPrinter;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Map;\n import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.commons.io.FileUtils;\n import org.apache.log4j.Logger;\n-import org.parosproxy.paros.control.Control;\n-import org.parosproxy.paros.extension.history.ExtensionHistory;\n-import org.parosproxy.paros.model.HistoryReference;\n-import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.Constant;\n import org.parosproxy.paros.network.HttpMessage;\n-import org.parosproxy.paros.network.HttpSender;\n-import org.zaproxy.zap.utils.ThreadUtils;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+import org.zaproxy.zap.network.HttpRequestBody;\n \n public class GraphQlParser {\n \n     private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+    private final URI endpointUrl;\n+    private final int initiator;\n+    private final RequestHandler requestHandler;\n+    private HttpMessage importMessage;\n+\n+    public GraphQlParser(String endpointUrlStr, int initiator) throws URIException {\n+        this(UrlBuilder.build(endpointUrlStr), initiator);\n+    }\n+\n+    public GraphQlParser(URI endpointUrl, int initiator) {\n+        this.endpointUrl = endpointUrl;\n+        this.initiator = initiator;\n+        requestHandler = new RequestHandler(initiator);\n+    }\n+\n+    public void introspect() throws IOException {\n+        JsonObject msgBodyJson = new JsonObject();\n+        msgBodyJson.addProperty(\"query\", IntrospectionQuery.INTROSPECTION_QUERY);\n+        HttpRequestBody msgBody = new HttpRequestBody(msgBodyJson.toString());\n+\n+        HttpRequestHeader msgHeader =\n+                new HttpRequestHeader(HttpRequestHeader.POST, endpointUrl, \"HTTP/1.1\");\n+        msgHeader.setHeader(\"Accept\", \"application/json\");\n+        msgHeader.setHeader(\"Content-Type\", \"application/json\");\n+        msgHeader.setContentLength(msgBody.length());\n+\n+        importMessage = new HttpMessage(msgHeader, msgBody);\n+        requestHandler.makeRequest(importMessage);\n \n-    public static void parse(URI uri) {\n-        HttpMessage msg;\n         try {\n-            msg = new HttpMessage(uri);\n-            HttpSender sender =\n-                    new HttpSender(\n-                            Model.getSingleton().getOptionsParam().getConnectionParam(),\n-                            true,\n-                            HttpSender.MANUAL_REQUEST_INITIATOR);\n-            sender.sendAndReceive(msg, true);\n-        } catch (Exception e) {\n-            LOG.error(\"Unable to send request.\", e);\n-            return;\n+            Map<String, Object> result =\n+                    new Gson()\n+                            .fromJson(\n+                                    importMessage.getResponseBody().toString(),\n+                                    new TypeToken<Map<String, Object>>() {}.getType());\n+            @SuppressWarnings(\"unchecked\")\n+            Document schema =\n+                    new IntrospectionResultToSchema()\n+                            .createSchemaDefinition((Map<String, Object>) result.get(\"data\"));\n+            String schemaSDL = new SchemaPrinter().print(schema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0OTE0OA==", "bodyText": "Name the thread with ZAP- prefix to be easier to know that's a ZAP thread (e.g. ZAP-GraphQL-Parser).\nThe thread was not started in the importUrl, better extract a method that does this to avoid duplicating in each of them.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445449148", "createdAt": "2020-06-25T10:04:57Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -19,49 +19,108 @@\n  */\n package org.zaproxy.addon.graphql;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import graphql.introspection.IntrospectionQuery;\n+import graphql.introspection.IntrospectionResultToSchema;\n+import graphql.language.Document;\n+import graphql.schema.idl.SchemaPrinter;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Map;\n import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.commons.io.FileUtils;\n import org.apache.log4j.Logger;\n-import org.parosproxy.paros.control.Control;\n-import org.parosproxy.paros.extension.history.ExtensionHistory;\n-import org.parosproxy.paros.model.HistoryReference;\n-import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.Constant;\n import org.parosproxy.paros.network.HttpMessage;\n-import org.parosproxy.paros.network.HttpSender;\n-import org.zaproxy.zap.utils.ThreadUtils;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+import org.zaproxy.zap.network.HttpRequestBody;\n \n public class GraphQlParser {\n \n     private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+    private final URI endpointUrl;\n+    private final int initiator;\n+    private final RequestHandler requestHandler;\n+    private HttpMessage importMessage;\n+\n+    public GraphQlParser(String endpointUrlStr, int initiator) throws URIException {\n+        this(UrlBuilder.build(endpointUrlStr), initiator);\n+    }\n+\n+    public GraphQlParser(URI endpointUrl, int initiator) {\n+        this.endpointUrl = endpointUrl;\n+        this.initiator = initiator;\n+        requestHandler = new RequestHandler(initiator);\n+    }\n+\n+    public void introspect() throws IOException {\n+        JsonObject msgBodyJson = new JsonObject();\n+        msgBodyJson.addProperty(\"query\", IntrospectionQuery.INTROSPECTION_QUERY);\n+        HttpRequestBody msgBody = new HttpRequestBody(msgBodyJson.toString());\n+\n+        HttpRequestHeader msgHeader =\n+                new HttpRequestHeader(HttpRequestHeader.POST, endpointUrl, \"HTTP/1.1\");\n+        msgHeader.setHeader(\"Accept\", \"application/json\");\n+        msgHeader.setHeader(\"Content-Type\", \"application/json\");\n+        msgHeader.setContentLength(msgBody.length());\n+\n+        importMessage = new HttpMessage(msgHeader, msgBody);\n+        requestHandler.makeRequest(importMessage);\n \n-    public static void parse(URI uri) {\n-        HttpMessage msg;\n         try {\n-            msg = new HttpMessage(uri);\n-            HttpSender sender =\n-                    new HttpSender(\n-                            Model.getSingleton().getOptionsParam().getConnectionParam(),\n-                            true,\n-                            HttpSender.MANUAL_REQUEST_INITIATOR);\n-            sender.sendAndReceive(msg, true);\n-        } catch (Exception e) {\n-            LOG.error(\"Unable to send request.\", e);\n-            return;\n+            Map<String, Object> result =\n+                    new Gson()\n+                            .fromJson(\n+                                    importMessage.getResponseBody().toString(),\n+                                    new TypeToken<Map<String, Object>>() {}.getType());\n+            @SuppressWarnings(\"unchecked\")\n+            Document schema =\n+                    new IntrospectionResultToSchema()\n+                            .createSchemaDefinition((Map<String, Object>) result.get(\"data\"));\n+            String schemaSDL = new SchemaPrinter().print(schema);\n+            Thread t = new Thread(() -> parse(schemaSDL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0OTE5OQ==", "bodyText": "StandardCharsets.UTF_8", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445449199", "createdAt": "2020-06-25T10:05:02Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -19,49 +19,108 @@\n  */\n package org.zaproxy.addon.graphql;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import graphql.introspection.IntrospectionQuery;\n+import graphql.introspection.IntrospectionResultToSchema;\n+import graphql.language.Document;\n+import graphql.schema.idl.SchemaPrinter;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.Map;\n import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.commons.io.FileUtils;\n import org.apache.log4j.Logger;\n-import org.parosproxy.paros.control.Control;\n-import org.parosproxy.paros.extension.history.ExtensionHistory;\n-import org.parosproxy.paros.model.HistoryReference;\n-import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.Constant;\n import org.parosproxy.paros.network.HttpMessage;\n-import org.parosproxy.paros.network.HttpSender;\n-import org.zaproxy.zap.utils.ThreadUtils;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+import org.zaproxy.zap.network.HttpRequestBody;\n \n public class GraphQlParser {\n \n     private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+    private final URI endpointUrl;\n+    private final int initiator;\n+    private final RequestHandler requestHandler;\n+    private HttpMessage importMessage;\n+\n+    public GraphQlParser(String endpointUrlStr, int initiator) throws URIException {\n+        this(UrlBuilder.build(endpointUrlStr), initiator);\n+    }\n+\n+    public GraphQlParser(URI endpointUrl, int initiator) {\n+        this.endpointUrl = endpointUrl;\n+        this.initiator = initiator;\n+        requestHandler = new RequestHandler(initiator);\n+    }\n+\n+    public void introspect() throws IOException {\n+        JsonObject msgBodyJson = new JsonObject();\n+        msgBodyJson.addProperty(\"query\", IntrospectionQuery.INTROSPECTION_QUERY);\n+        HttpRequestBody msgBody = new HttpRequestBody(msgBodyJson.toString());\n+\n+        HttpRequestHeader msgHeader =\n+                new HttpRequestHeader(HttpRequestHeader.POST, endpointUrl, \"HTTP/1.1\");\n+        msgHeader.setHeader(\"Accept\", \"application/json\");\n+        msgHeader.setHeader(\"Content-Type\", \"application/json\");\n+        msgHeader.setContentLength(msgBody.length());\n+\n+        importMessage = new HttpMessage(msgHeader, msgBody);\n+        requestHandler.makeRequest(importMessage);\n \n-    public static void parse(URI uri) {\n-        HttpMessage msg;\n         try {\n-            msg = new HttpMessage(uri);\n-            HttpSender sender =\n-                    new HttpSender(\n-                            Model.getSingleton().getOptionsParam().getConnectionParam(),\n-                            true,\n-                            HttpSender.MANUAL_REQUEST_INITIATOR);\n-            sender.sendAndReceive(msg, true);\n-        } catch (Exception e) {\n-            LOG.error(\"Unable to send request.\", e);\n-            return;\n+            Map<String, Object> result =\n+                    new Gson()\n+                            .fromJson(\n+                                    importMessage.getResponseBody().toString(),\n+                                    new TypeToken<Map<String, Object>>() {}.getType());\n+            @SuppressWarnings(\"unchecked\")\n+            Document schema =\n+                    new IntrospectionResultToSchema()\n+                            .createSchemaDefinition((Map<String, Object>) result.get(\"data\"));\n+            String schemaSDL = new SchemaPrinter().print(schema);\n+            Thread t = new Thread(() -> parse(schemaSDL));\n+            t.start();\n+        } catch (JsonSyntaxException e) {\n+            throw new IOException(\"The response was not valid JSON.\");\n         }\n+    }\n \n-        // Add the message to the history panel and sites tree\n-        ExtensionHistory extHistory =\n-                Control.getSingleton().getExtensionLoader().getExtension(ExtensionHistory.class);\n-        try {\n-            ThreadUtils.invokeAndWait(\n-                    () -> {\n-                        extHistory.addHistory(msg, HistoryReference.TYPE_ZAP_USER);\n-                        Model.getSingleton()\n-                                .getSession()\n-                                .getSiteTree()\n-                                .addPath(msg.getHistoryRef(), msg);\n-                    });\n-        } catch (Exception e) {\n-            LOG.error(\"Could not add message to sites tree.\", e);\n+    public void importUrl(String schemaUrlStr) throws IOException {\n+        importUrl(UrlBuilder.build(schemaUrlStr));\n+    }\n+\n+    public void importUrl(URI schemaUrl) throws IOException {\n+        importMessage = new HttpMessage(schemaUrl);\n+        requestHandler.makeRequest(importMessage);\n+        Thread t = new Thread(() -> parse(importMessage.getResponseBody().toString()));\n+    }\n+\n+    public void importFile(String filePath) throws IOException {\n+        File file = new File(filePath);\n+        if (!file.exists()) {\n+            throw new FileNotFoundException(\n+                    Constant.messages.getString(\"graphql.error.filenotfound\"));\n+        }\n+        if (!file.canRead() || !file.isFile()) {\n+            throw new IOException(Constant.messages.getString(\"graphql.error.importfile\"));\n         }\n+        String schemaSDL = FileUtils.readFileToString(file, \"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1MDQxNA==", "bodyText": "The logic should be extracted to another class to use here and in the parser.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445450414", "createdAt": "2020-06-25T10:07:18Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParseFilter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import static org.zaproxy.zap.spider.filters.ParseFilter.FilterResult;\n+\n+import java.util.Locale;\n+import org.apache.commons.lang.StringUtils;\n+import org.parosproxy.paros.network.HttpHeader;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.zaproxy.zap.spider.filters.ParseFilter;\n+\n+public class GraphQlParseFilter extends ParseFilter {\n+\n+    @Override\n+    public FilterResult filtered(HttpMessage message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1MDgzNQ==", "bodyText": "Can be delayed.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445450835", "createdAt": "2020-06-25T10:08:06Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlSpider.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.util.Locale;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.network.HttpHeader;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpSender;\n+import org.zaproxy.zap.spider.parser.SpiderParser;\n+\n+public class GraphQlSpider extends SpiderParser {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlSpider.class);\n+    private String schema;\n+\n+    @Override\n+    public boolean parseResource(HttpMessage message, Source source, int depth) {\n+        try {\n+            GraphQlParser parser =\n+                    new GraphQlParser(\n+                            message.getRequestHeader().getURI(), HttpSender.SPIDER_INITIATOR);\n+            if (schema != null && !schema.isEmpty()) {\n+                parser.parse(schema);\n+            } else {\n+                parser.introspect();\n+                parser.persistImportMessage();\n+            }\n+        } catch (Exception e) {\n+            LOG.debug(e.getMessage(), e);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean canParseResource(HttpMessage message, String path, boolean wasAlreadyConsumed) {\n+        try {\n+            String uri = message.getRequestHeader().getURI().toString();\n+            String contentType =\n+                    message.getResponseHeader()\n+                            .getHeader(HttpHeader.CONTENT_TYPE)\n+                            .toLowerCase(Locale.ROOT);\n+            String responseBodyStart =\n+                    StringUtils.left(message.getResponseBody().toString(), 250)\n+                            .toLowerCase(Locale.ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1MDg3NQ==", "bodyText": "Should return true? Or the following check is done to ensure?", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445450875", "createdAt": "2020-06-25T10:08:09Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlSpider.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.util.Locale;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.network.HttpHeader;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpSender;\n+import org.zaproxy.zap.spider.parser.SpiderParser;\n+\n+public class GraphQlSpider extends SpiderParser {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlSpider.class);\n+    private String schema;\n+\n+    @Override\n+    public boolean parseResource(HttpMessage message, Source source, int depth) {\n+        try {\n+            GraphQlParser parser =\n+                    new GraphQlParser(\n+                            message.getRequestHeader().getURI(), HttpSender.SPIDER_INITIATOR);\n+            if (schema != null && !schema.isEmpty()) {\n+                parser.parse(schema);\n+            } else {\n+                parser.introspect();\n+                parser.persistImportMessage();\n+            }\n+        } catch (Exception e) {\n+            LOG.debug(e.getMessage(), e);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean canParseResource(HttpMessage message, String path, boolean wasAlreadyConsumed) {\n+        try {\n+            String uri = message.getRequestHeader().getURI().toString();\n+            String contentType =\n+                    message.getResponseHeader()\n+                            .getHeader(HttpHeader.CONTENT_TYPE)\n+                            .toLowerCase(Locale.ROOT);\n+            String responseBodyStart =\n+                    StringUtils.left(message.getResponseBody().toString(), 250)\n+                            .toLowerCase(Locale.ROOT);\n+            if (uri.endsWith(\".graphql\")\n+                    || uri.endsWith(\".graphqls\")\n+                    || contentType.startsWith(\"application/graphql\")) {\n+                schema = message.getResponseBody().toString();\n+                LOG.debug(\"Found GraphQL schema at: \" + uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1MDkwMw==", "bodyText": "Failed to check  ? Although it shouldn't have to catch anything?", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445450903", "createdAt": "2020-06-25T10:08:13Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlSpider.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.util.Locale;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.network.HttpHeader;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpSender;\n+import org.zaproxy.zap.spider.parser.SpiderParser;\n+\n+public class GraphQlSpider extends SpiderParser {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlSpider.class);\n+    private String schema;\n+\n+    @Override\n+    public boolean parseResource(HttpMessage message, Source source, int depth) {\n+        try {\n+            GraphQlParser parser =\n+                    new GraphQlParser(\n+                            message.getRequestHeader().getURI(), HttpSender.SPIDER_INITIATOR);\n+            if (schema != null && !schema.isEmpty()) {\n+                parser.parse(schema);\n+            } else {\n+                parser.introspect();\n+                parser.persistImportMessage();\n+            }\n+        } catch (Exception e) {\n+            LOG.debug(e.getMessage(), e);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean canParseResource(HttpMessage message, String path, boolean wasAlreadyConsumed) {\n+        try {\n+            String uri = message.getRequestHeader().getURI().toString();\n+            String contentType =\n+                    message.getResponseHeader()\n+                            .getHeader(HttpHeader.CONTENT_TYPE)\n+                            .toLowerCase(Locale.ROOT);\n+            String responseBodyStart =\n+                    StringUtils.left(message.getResponseBody().toString(), 250)\n+                            .toLowerCase(Locale.ROOT);\n+            if (uri.endsWith(\".graphql\")\n+                    || uri.endsWith(\".graphqls\")\n+                    || contentType.startsWith(\"application/graphql\")) {\n+                schema = message.getResponseBody().toString();\n+                LOG.debug(\"Found GraphQL schema at: \" + uri);\n+            }\n+            if (responseBodyStart.contains(\"__schema\") || responseBodyStart.contains(\"graphql\")) {\n+                LOG.debug(\"Found GraphQl endpoint at: \" + uri);\n+                return true;\n+            }\n+            return false;\n+        } catch (Exception e) {\n+            LOG.debug(\"Could not parse \" + message.getRequestHeader().getURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1MzAzNA==", "bodyText": "The parsers might be called from multiple threads.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445453034", "createdAt": "2020-06-25T10:12:08Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlSpider.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.util.Locale;\n+import net.htmlparser.jericho.Source;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.network.HttpHeader;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpSender;\n+import org.zaproxy.zap.spider.parser.SpiderParser;\n+\n+public class GraphQlSpider extends SpiderParser {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlSpider.class);\n+    private String schema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1NTM3Mg==", "bodyText": "protected", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445455372", "createdAt": "2020-06-25T10:16:40Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromAbstractDialog.java", "diffHunk": "@@ -111,63 +107,21 @@ public ImportFromAbstractDialog(\n         setVisible(true);\n     }\n \n-    public boolean validateUrl(JTextField field) {\n-        String urlStr = field.getText();\n-        if (urlStr.isEmpty()) {\n-            showWarningDialog(Constant.messages.getString(MESSAGE_PREFIX + \"url.empty\"));\n-            field.requestFocusInWindow();\n-            return false;\n-        } else if (\"http://\".equals(urlStr) || \"https://\".equals(urlStr)) {\n-            showWarningDialog(\n-                    Constant.messages.getString(MESSAGE_PREFIX + \"url.invalid\", urlStr, \"\"));\n-            field.requestFocusInWindow();\n-            return false;\n-        }\n-        try {\n-            new URL(urlStr);\n-            new URI(urlStr, true);\n-        } catch (Exception e) {\n-            showWarningDialog(\n-                    Constant.messages.getString(\n-                            MESSAGE_PREFIX + \"url.invalid\", urlStr, e.getMessage()));\n-            field.requestFocusInWindow();\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    protected JTextField getFromField() {\n-        return fieldFrom;\n-    }\n-\n-    /** @return the Schema Uri, might be {@code null} */\n-    protected URI getSchemaUri() {\n+    public boolean validateEndpointUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1NTYxMg==", "bodyText": "Can be removed.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445455612", "createdAt": "2020-06-25T10:17:07Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/ImportFromFileDialog.java", "diffHunk": "@@ -83,11 +83,14 @@ private JButton getButtonChooseFile() {\n \n     @Override\n     protected boolean importDefinition() {\n-        /* TO DO:\n-         * Import schema definition from file path; and\n-         * Send it to the parser.\n-         */\n-        showWarningDialog(Constant.messages.getString(\"graphql.importfromdialog.message\"));\n+        try {\n+            getParser().importFile(getSchemaField().getText());\n+            return true;\n+        } catch (FileNotFoundException e) {\n+            showWarningDialog(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1NTk1NQ==", "bodyText": "These should be consumed (e.g. sent, persisted, added to the UI) as soon as possible instead of keeping them in memory.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445455955", "createdAt": "2020-06-25T10:17:54Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/RequestHandler.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.history.ExtensionHistory;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpSender;\n+import org.zaproxy.zap.utils.ThreadUtils;\n+\n+public class RequestHandler {\n+\n+    private static final Logger LOG = Logger.getLogger(RequestHandler.class);\n+    private final int initiator;\n+    private List<HttpMessage> messages = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1NjUwOQ==", "bodyText": "These are not currently used, I'd not add them for now.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445456509", "createdAt": "2020-06-25T10:18:59Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/RequestHandler.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.control.Control;\n+import org.parosproxy.paros.extension.history.ExtensionHistory;\n+import org.parosproxy.paros.model.HistoryReference;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpSender;\n+import org.zaproxy.zap.utils.ThreadUtils;\n+\n+public class RequestHandler {\n+\n+    private static final Logger LOG = Logger.getLogger(RequestHandler.class);\n+    private final int initiator;\n+    private List<HttpMessage> messages = new ArrayList<>();\n+    private HttpSender sender;\n+\n+    public RequestHandler(int initiator) {\n+        this.initiator = initiator;\n+        sender =\n+                new HttpSender(\n+                        Model.getSingleton().getOptionsParam().getConnectionParam(),\n+                        true,\n+                        initiator);\n+    }\n+\n+    public void addMessage(HttpMessage message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1NjU2Nw==", "bodyText": "final", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445456567", "createdAt": "2020-06-25T10:19:05Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/UrlBuilder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+\n+public class UrlBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1NjU4NQ==", "bodyText": "Not necessary, it's implied (the following assertion can be removed too).", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r445456585", "createdAt": "2020-06-25T10:19:08Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/UrlBuilder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+\n+public class UrlBuilder {\n+\n+    // Suppress default constructor for noninstantiability", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef5b7c569d5263bc8d79041ae6af89e9dc33b86e", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/ef5b7c569d5263bc8d79041ae6af89e9dc33b86e", "committedDate": "2020-06-24T15:50:11Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder and RequestHandler.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "02074a56aafdfb172e82a4f5816318b54f3e1c32", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/02074a56aafdfb172e82a4f5816318b54f3e1c32", "committedDate": "2020-06-29T20:00:18Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02074a56aafdfb172e82a4f5816318b54f3e1c32", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/02074a56aafdfb172e82a4f5816318b54f3e1c32", "committedDate": "2020-06-29T20:00:18Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "cbb9180a0e6b3e8f1c7c44e6532d39769f0f0972", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/cbb9180a0e6b3e8f1c7c44e6532d39769f0f0972", "committedDate": "2020-06-30T02:51:48Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODIyMDMx", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#pullrequestreview-439822031", "createdAt": "2020-06-30T09:09:52Z", "commit": {"oid": "cbb9180a0e6b3e8f1c7c44e6532d39769f0f0972"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTowOTo1M1rOGqzPZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToxMjoxMFrOGqzVSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMjkwMQ==", "bodyText": "AtomicInteger", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r447532901", "createdAt": "2020-06-30T09:09:53Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlParser.java", "diffHunk": "@@ -19,49 +19,118 @@\n  */\n package org.zaproxy.addon.graphql;\n \n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import graphql.introspection.IntrospectionQuery;\n+import graphql.introspection.IntrospectionResultToSchema;\n+import graphql.language.Document;\n+import graphql.schema.idl.SchemaPrinter;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.Map;\n import org.apache.commons.httpclient.URI;\n+import org.apache.commons.httpclient.URIException;\n+import org.apache.commons.io.FileUtils;\n import org.apache.log4j.Logger;\n-import org.parosproxy.paros.control.Control;\n-import org.parosproxy.paros.extension.history.ExtensionHistory;\n-import org.parosproxy.paros.model.HistoryReference;\n-import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.Constant;\n import org.parosproxy.paros.network.HttpMessage;\n-import org.parosproxy.paros.network.HttpSender;\n-import org.zaproxy.zap.utils.ThreadUtils;\n+import org.parosproxy.paros.network.HttpRequestHeader;\n+import org.zaproxy.zap.network.HttpRequestBody;\n \n public class GraphQlParser {\n \n     private static final Logger LOG = Logger.getLogger(GraphQlParser.class);\n+    private static final String THREAD_PREFIX = \"ZAP-GraphQL-Parser\";\n+    private static int threadId = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9180a0e6b3e8f1c7c44e6532d39769f0f0972"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMzA0MA==", "bodyText": "Can be removed.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r447533040", "createdAt": "2020-06-30T09:10:06Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/GraphQlSpider.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import net.htmlparser.jericho.Source;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpSender;\n+import org.zaproxy.zap.spider.parser.SpiderParser;\n+\n+public class GraphQlSpider extends SpiderParser {\n+\n+    private static final Logger LOG = Logger.getLogger(GraphQlSpider.class);\n+\n+    @Override\n+    public boolean parseResource(HttpMessage message, Source source, int depth) {\n+        try {\n+            GraphQlParser parser =\n+                    new GraphQlParser(\n+                            message.getRequestHeader().getURI(), HttpSender.SPIDER_INITIATOR);\n+            parser.addRequesterListener(new HistoryPersister());\n+            parser.introspect();\n+        } catch (Exception e) {\n+            LOG.debug(e.getMessage(), e);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean canParseResource(HttpMessage message, String path, boolean wasAlreadyConsumed) {\n+        String uri = message.getRequestHeader().getURI().toString();\n+        switch (MessageValidator.validate(message)) {\n+            case MessageValidator.VALID_ENDPOINT:\n+                {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9180a0e6b3e8f1c7c44e6532d39769f0f0972"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMzIzOQ==", "bodyText": "protected enum Result { INVALID, VALID_SCHEMA, VALID_ENDPOINT } ?", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r447533239", "createdAt": "2020-06-30T09:10:24Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/MessageValidator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.util.Locale;\n+import org.apache.commons.lang.StringUtils;\n+import org.parosproxy.paros.network.HttpHeader;\n+import org.parosproxy.paros.network.HttpMessage;\n+\n+public final class MessageValidator {\n+\n+    protected static final int INVALID = 0;\n+    protected static final int VALID_SCHEMA = 1;\n+    protected static final int VALID_ENDPOINT = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9180a0e6b3e8f1c7c44e6532d39769f0f0972"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzNDQwOA==", "bodyText": "I'd expect handling of a single message (e.g. send(HttpMessage)) to discourage keeping many messages in memory at the same time.", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#discussion_r447534408", "createdAt": "2020-06-30T09:12:10Z", "author": {"login": "thc202"}, "path": "addOns/graphql/src/main/java/org/zaproxy/addon/graphql/Requestor.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Zed Attack Proxy (ZAP) and its related class files.\n+ *\n+ * ZAP is an HTTP/HTTPS proxy for assessing web application security.\n+ *\n+ * Copyright 2020 The ZAP Development Team\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.zaproxy.addon.graphql;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.httpclient.URI;\n+import org.apache.log4j.Logger;\n+import org.parosproxy.paros.model.Model;\n+import org.parosproxy.paros.network.HttpMessage;\n+import org.parosproxy.paros.network.HttpSender;\n+import org.zaproxy.zap.network.HttpRedirectionValidator;\n+import org.zaproxy.zap.network.HttpRequestConfig;\n+\n+public class Requestor {\n+\n+    private final int initiator;\n+    private List<RequesterListener> listeners = new ArrayList<RequesterListener>();\n+    private HttpSender sender;\n+    private final HttpRequestConfig requestConfig;\n+    private static final Logger LOG = Logger.getLogger(Requestor.class);\n+\n+    public Requestor(int initiator) {\n+        this.initiator = initiator;\n+        sender =\n+                new HttpSender(\n+                        Model.getSingleton().getOptionsParam().getConnectionParam(),\n+                        true,\n+                        initiator);\n+        requestConfig =\n+                HttpRequestConfig.builder().setRedirectionValidator(new MessageHandler()).build();\n+    }\n+\n+    public void run(List<HttpMessage> messages) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb9180a0e6b3e8f1c7c44e6532d39769f0f0972"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbb9180a0e6b3e8f1c7c44e6532d39769f0f0972", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/cbb9180a0e6b3e8f1c7c44e6532d39769f0f0972", "committedDate": "2020-06-30T02:51:48Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "2060135a6aabc65c6461ce262a10295ec183ff4e", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/2060135a6aabc65c6461ce262a10295ec183ff4e", "committedDate": "2020-06-30T12:38:09Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2060135a6aabc65c6461ce262a10295ec183ff4e", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/2060135a6aabc65c6461ce262a10295ec183ff4e", "committedDate": "2020-06-30T12:38:09Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "4f0cf361cc798af3756adea50103a0470565378e", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/4f0cf361cc798af3756adea50103a0470565378e", "committedDate": "2020-06-30T15:19:27Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f0cf361cc798af3756adea50103a0470565378e", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/4f0cf361cc798af3756adea50103a0470565378e", "committedDate": "2020-06-30T15:19:27Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "4967a62ce0d70180eb60e42b12cc692f396144ca", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/4967a62ce0d70180eb60e42b12cc692f396144ca", "committedDate": "2020-06-30T15:56:48Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4967a62ce0d70180eb60e42b12cc692f396144ca", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/4967a62ce0d70180eb60e42b12cc692f396144ca", "committedDate": "2020-06-30T15:56:48Z", "message": "Add Import Functionality\n\n- Add import functionality to the UI, API, and the CLI.\n- Schema in SDL can now be imported.\n- Import via Introspection also works.\n- Rename fieldFrom to fieldSchema for clarity.\n- Create classes UriBuilder, Requestor, RequesterListener,\nMessageValidator, HistoryPersister, GraphQlSpider,\nGraphQlParseFilter.\n- Make GraphQlParser instantiable.\n- Add Spider checks\n- Some refactoring.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTY1NzMw", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#pullrequestreview-440165730", "createdAt": "2020-06-30T16:01:42Z", "commit": {"oid": "4967a62ce0d70180eb60e42b12cc692f396144ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTY5Nzcy", "url": "https://github.com/zaproxy/zap-extensions/pull/2431#pullrequestreview-440169772", "createdAt": "2020-06-30T16:06:16Z", "commit": {"oid": "4967a62ce0d70180eb60e42b12cc692f396144ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 360, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}