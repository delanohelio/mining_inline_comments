{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjcwNTU3", "number": 2310, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDo1MjozM1rODguWkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDo1MjozM1rODguWkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjQwNDY3OnYy", "diffSide": "RIGHT", "path": "addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/PiiScanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDo1MjozM1rOFrFWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDo1MjozM1rOFrFWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyMDc2Mw==", "bodyText": "I figured this javadoc may as well be kept in-case we come up with a reason to to split this out in the future.", "url": "https://github.com/zaproxy/zap-extensions/pull/2310#discussion_r380720763", "createdAt": "2020-02-18T14:52:33Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrulesBeta/src/main/java/org/zaproxy/zap/extension/pscanrulesBeta/PiiScanner.java", "diffHunk": "@@ -95,30 +95,22 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n                 Matcher matcher = cc.matcher(candidate.getCandidate());\n                 while (matcher.find()) {\n                     String evidence = matcher.group();\n-                    if (validateLuhnChecksum(evidence) && !isSci(candidate.getContainingString())) {\n+                    if (PiiUtils.isValidLuhn(evidence) && !isSci(candidate.getContainingString())) {\n                         raiseAlert(msg, id, evidence, cc.name);\n                     }\n                 }\n             }\n         }\n     }\n \n-    private static boolean validateLuhnChecksum(String evidence) {\n-        int sum = 0;\n-        int parity = evidence.length() % 2;\n-        for (int index = 0; index < evidence.length(); index++) {\n-            int digit = Integer.parseInt(evidence.substring(index, index + 1));\n-            if ((index % 2) == parity) {\n-                digit *= 2;\n-                if (digit > 9) {\n-                    digit -= 9;\n-                }\n-            }\n-            sum += digit;\n-        }\n-        return (sum % 10) == 0;\n-    }\n-\n+    /**\n+     * Checks whether a particular {@code String} input appears to be a valid number in scientific\n+     * (exponent) notation. Ex: 2.14111111111111111e-2, 8.46786664623715E-47, 3.14111111111117293e5\n+     *\n+     * @param containingString the value to be checked.\n+     * @return {@code true} if the value successfully parses as a {@code Float}, {@code false}\n+     *     otherwise.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d60736601b64179db257e47e0dc3d9e251b14f48"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 731, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}