{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NTc1OTk1", "number": 2637, "title": "SOAP: Various updates", "bodyText": "Enable XML Injection Active Scan Rule to work without the stored configs.\nAdd support for SOAP version 1.2 to the Action Spoofing Scan Rule.\nDistinguish alerts by adding the SOAP version to the \"Other Info\" section.\nPersist the SOAP actions in the database.\nBefore, the message passed to ImportWSDL#getSourceSoapActions(HttpMessage) did not need to contain a SOAP action. It was compared with the stored messages to find the WSDL that had generated it. Now, TableWsdl#getSourceSoapActions(String) requires a SOAP action string that is used for comparisons. This shouldn't be a problem however, because,\n\nall version 1 SOAP messages contain a SOAPAction header; and\nif the action is omitted in a version 2 message, an empty string is used.\n\n\nAdd new classes TableWsdl and SoapAction. Remove ImportWSDL.\nMany unit tests were removed (for methods that are no longer used), some were added.\nCosmetic Changes as suggested by my IDE and other code readability improvements.\nResolves zaproxy/zaproxy#4866.", "createdAt": "2020-11-30T14:11:44Z", "url": "https://github.com/zaproxy/zap-extensions/pull/2637", "merged": true, "mergeCommit": {"oid": "1c7db20067d6c41d5ebd0219f4e3ce09efad60cf"}, "closed": true, "closedAt": "2020-12-15T22:08:37Z", "author": {"login": "ricekot"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhmUudABqjQwNTIyNDcxNDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmhx28gFqTU1Mjk2NjY5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3d8c973c713ebfe8a9b13e33c0db7f5e0325197", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/f3d8c973c713ebfe8a9b13e33c0db7f5e0325197", "committedDate": "2020-11-30T14:07:11Z", "message": "Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "d389dd20bbf9fdfae33bcf140032c57b7a99d09c", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/d389dd20bbf9fdfae33bcf140032c57b7a99d09c", "committedDate": "2020-11-30T14:35:24Z", "message": "Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d389dd20bbf9fdfae33bcf140032c57b7a99d09c", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/d389dd20bbf9fdfae33bcf140032c57b7a99d09c", "committedDate": "2020-11-30T14:35:24Z", "message": "Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/fc65a8180c7de73399ff719ae760aad284cdfb0f", "committedDate": "2020-11-30T15:56:12Z", "message": "Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMDA4OTU0", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#pullrequestreview-552008954", "createdAt": "2020-12-15T00:16:38Z", "commit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoxNjozOVrOIFy56A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoxNjozOVrOIFy56A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0NzgxNg==", "bodyText": "The key names are probably better with additional periods.", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#discussion_r542947816", "createdAt": "2020-12-15T00:16:39Z", "author": {"login": "kingthorin"}, "path": "addOns/soap/src/main/resources/org/zaproxy/zap/extension/soap/resources/Messages.properties", "diffHunk": "@@ -16,18 +16,18 @@ soap.soapactionspoofing.desc=An unintended SOAP operation was executed by the se\n soap.soapactionspoofing.other=An unintended SOAP operation was executed by the server.\n soap.soapactionspoofing.soln=If not required, the SOAPAction attribute should be disabled. If needed, the operation within the SOAPAction and the SOAP body should always be compared before executing any operation. Any mismatch should be regarded as an attack.\n soap.soapactionspoofing.refs=http://www.ws-attacks.org/index.php/SOAPAction_Spoofing\n-soap.soapactionspoofing.invalidFormatMsg=Response has an invalid format.\n-soap.soapactionspoofing.faultCodeMsg=Server returned a fault code.\n-soap.soapactionspoofing.emptyResponseMsg=Response is empty.\n-soap.soapactionspoofing.soapactionIgnoredMsg=The SOAPAction header has been ignored.\n-soap.soapactionspoofing.soapactionExecutedMsg=The SOAPAction operation has been executed.\n+soap.soapactionspoofing.invalid_format=Response has an invalid format.\n+soap.soapactionspoofing.fault_code=Server returned a fault code.\n+soap.soapactionspoofing.empty_response=Response is empty.\n+soap.soapactionspoofing.soapaction_ignored=The SOAPAction header has been ignored.\n+soap.soapactionspoofing.soapaction_executed=The SOAPAction operation has been executed.\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjYwNzc3", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#pullrequestreview-552660777", "createdAt": "2020-12-15T16:49:12Z", "commit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0OToxM1rOIGVSGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo1MDowNlrOIGVVXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMTA2Nw==", "bodyText": "The type could be removed (same in other lambdas).", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#discussion_r543511067", "createdAt": "2020-12-15T16:49:13Z", "author": {"login": "thc202"}, "path": "addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/ExtensionImportWSDL.java", "diffHunk": "@@ -120,25 +132,20 @@ private ZapMenuItem getMenuImportLocalWSDL() {\n                     Constant.messages.getString(\"soap.topmenu.import.importWSDL.tooltip\"));\n \n             menuImportLocalWSDL.addActionListener(\n-                    new java.awt.event.ActionListener() {\n-                        @Override\n-                        public void actionPerformed(java.awt.event.ActionEvent e) {\n-                            // Prompt for a WSDL file.\n-                            final JFileChooser chooser =\n-                                    new JFileChooser(\n-                                            Model.getSingleton()\n-                                                    .getOptionsParam()\n-                                                    .getUserDirectory());\n-                            FileNameExtensionFilter filter =\n-                                    new FileNameExtensionFilter(\n-                                            Constant.messages.getString(\n-                                                    \"soap.topmenu.import.importWSDL.filter.description\"),\n-                                            \"wsdl\");\n-                            chooser.setFileFilter(filter);\n-                            int rc = chooser.showOpenDialog(View.getSingleton().getMainFrame());\n-                            if (rc == JFileChooser.APPROVE_OPTION) {\n-                                fileUrlWSDLImport(chooser.getSelectedFile());\n-                            }\n+                    (java.awt.event.ActionEvent e) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMTE0Mg==", "bodyText": "Could be completely removed.", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#discussion_r543511142", "createdAt": "2020-12-15T16:49:18Z", "author": {"login": "thc202"}, "path": "addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/SOAPActionSpoofingActiveScanRule.java", "diffHunk": "@@ -73,91 +80,116 @@ public String getReference() {\n         return Constant.messages.getString(MESSAGE_PREFIX + \"refs\");\n     }\n \n+    private TableWsdl getTable() {\n+        return Control.getSingleton()\n+                .getExtensionLoader()\n+                .getExtension(ExtensionImportWSDL.class)\n+                .getTable();\n+    }\n+\n     @Override\n     public int getCategory() {\n         return Category.MISC;\n     }\n \n-    /*\n-     * This method is called by the active scanner for each GET and POST parameter\n-     * for every page\n-     *\n-     * @see\n-     * org.parosproxy.paros.core.scanner.AbstractAppParamPlugin#scan(org.parosproxy.\n-     * paros.network.HttpMessage, java.lang.String, java.lang.String)\n+    /**\n+     * This method is called by the active scanner for each GET and POST parameter for every page.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMTIwOA==", "bodyText": "Stopping scan. \u2192 Ignoring message.", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#discussion_r543511208", "createdAt": "2020-12-15T16:49:22Z", "author": {"login": "thc202"}, "path": "addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/SOAPActionSpoofingActiveScanRule.java", "diffHunk": "@@ -73,91 +80,116 @@ public String getReference() {\n         return Constant.messages.getString(MESSAGE_PREFIX + \"refs\");\n     }\n \n+    private TableWsdl getTable() {\n+        return Control.getSingleton()\n+                .getExtensionLoader()\n+                .getExtension(ExtensionImportWSDL.class)\n+                .getTable();\n+    }\n+\n     @Override\n     public int getCategory() {\n         return Category.MISC;\n     }\n \n-    /*\n-     * This method is called by the active scanner for each GET and POST parameter\n-     * for every page\n-     *\n-     * @see\n-     * org.parosproxy.paros.core.scanner.AbstractAppParamPlugin#scan(org.parosproxy.\n-     * paros.network.HttpMessage, java.lang.String, java.lang.String)\n+    /**\n+     * This method is called by the active scanner for each GET and POST parameter for every page.\n      */\n     @Override\n     public void scan() {\n-        try {\n-            /* Retrieves the original request-response pair. */\n-            final HttpMessage originalMsg = getBaseMsg();\n-            /* This scan is only applied to SOAP 1.1 messages. */\n-            String currentHeader = originalMsg.getRequestHeader().getHeader(\"SOAPAction\");\n-            if (currentHeader != null && originalMsg.getRequestBody().length() > 0) {\n-                currentHeader = currentHeader.trim();\n-                /* Retrieves available actions to try attacks. */\n-                String[] soapActions = ImportWSDL.getInstance().getSourceSoapActions(originalMsg);\n+        /* Retrieves the original request-response pair. */\n+        final HttpMessage originalMsg = getBaseMsg();\n+        String originalSoapAction = SoapAction.extractFrom(originalMsg);\n+        if (originalSoapAction == null) {\n+            // Not a SOAP message\n+            return;\n+        }\n \n-                boolean endScan = false;\n-                if (soapActions == null || soapActions.length == 0) {\n-                    // No actions to spoof\n-                    LOG.info(\n-                            \"Skipping \"\n-                                    + getName()\n-                                    + \" because no actions were found. (URL: \"\n-                                    + originalMsg.getRequestHeader().getURI().toString()\n-                                    + \")\");\n-                    return;\n+        /* Retrieves available actions to try attacks. */\n+        List<SoapAction> soapActions;\n+        try {\n+            soapActions = getTable().getSourceSoapActions(originalSoapAction);\n+        } catch (DatabaseException e) {\n+            LOG.warn(\"Could not retrieve SOAP actions from the database. Stopping scan.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMTM5MA==", "bodyText": "I'd suggest using other word than \"skip\" (maybe ignore like above?), the active scan allows to skip scan rules, which means that no other message would be scanned (which is not the case here, just this one that's not going to be scanned).", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#discussion_r543511390", "createdAt": "2020-12-15T16:49:33Z", "author": {"login": "thc202"}, "path": "addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/SOAPActionSpoofingActiveScanRule.java", "diffHunk": "@@ -73,91 +80,116 @@ public String getReference() {\n         return Constant.messages.getString(MESSAGE_PREFIX + \"refs\");\n     }\n \n+    private TableWsdl getTable() {\n+        return Control.getSingleton()\n+                .getExtensionLoader()\n+                .getExtension(ExtensionImportWSDL.class)\n+                .getTable();\n+    }\n+\n     @Override\n     public int getCategory() {\n         return Category.MISC;\n     }\n \n-    /*\n-     * This method is called by the active scanner for each GET and POST parameter\n-     * for every page\n-     *\n-     * @see\n-     * org.parosproxy.paros.core.scanner.AbstractAppParamPlugin#scan(org.parosproxy.\n-     * paros.network.HttpMessage, java.lang.String, java.lang.String)\n+    /**\n+     * This method is called by the active scanner for each GET and POST parameter for every page.\n      */\n     @Override\n     public void scan() {\n-        try {\n-            /* Retrieves the original request-response pair. */\n-            final HttpMessage originalMsg = getBaseMsg();\n-            /* This scan is only applied to SOAP 1.1 messages. */\n-            String currentHeader = originalMsg.getRequestHeader().getHeader(\"SOAPAction\");\n-            if (currentHeader != null && originalMsg.getRequestBody().length() > 0) {\n-                currentHeader = currentHeader.trim();\n-                /* Retrieves available actions to try attacks. */\n-                String[] soapActions = ImportWSDL.getInstance().getSourceSoapActions(originalMsg);\n+        /* Retrieves the original request-response pair. */\n+        final HttpMessage originalMsg = getBaseMsg();\n+        String originalSoapAction = SoapAction.extractFrom(originalMsg);\n+        if (originalSoapAction == null) {\n+            // Not a SOAP message\n+            return;\n+        }\n \n-                boolean endScan = false;\n-                if (soapActions == null || soapActions.length == 0) {\n-                    // No actions to spoof\n-                    LOG.info(\n-                            \"Skipping \"\n-                                    + getName()\n-                                    + \" because no actions were found. (URL: \"\n-                                    + originalMsg.getRequestHeader().getURI().toString()\n-                                    + \")\");\n-                    return;\n+        /* Retrieves available actions to try attacks. */\n+        List<SoapAction> soapActions;\n+        try {\n+            soapActions = getTable().getSourceSoapActions(originalSoapAction);\n+        } catch (DatabaseException e) {\n+            LOG.warn(\"Could not retrieve SOAP actions from the database. Stopping scan.\", e);\n+            return;\n+        }\n+        if (soapActions == null || soapActions.isEmpty()) {\n+            // No actions to spoof\n+            LOG.info(\n+                    \"Skipping \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMTkwMg==", "bodyText": "Ideally this should be in the Messages file.", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#discussion_r543511902", "createdAt": "2020-12-15T16:50:06Z", "author": {"login": "thc202"}, "path": "addOns/soap/src/main/java/org/zaproxy/zap/extension/soap/SOAPActionSpoofingActiveScanRule.java", "diffHunk": "@@ -73,91 +80,116 @@ public String getReference() {\n         return Constant.messages.getString(MESSAGE_PREFIX + \"refs\");\n     }\n \n+    private TableWsdl getTable() {\n+        return Control.getSingleton()\n+                .getExtensionLoader()\n+                .getExtension(ExtensionImportWSDL.class)\n+                .getTable();\n+    }\n+\n     @Override\n     public int getCategory() {\n         return Category.MISC;\n     }\n \n-    /*\n-     * This method is called by the active scanner for each GET and POST parameter\n-     * for every page\n-     *\n-     * @see\n-     * org.parosproxy.paros.core.scanner.AbstractAppParamPlugin#scan(org.parosproxy.\n-     * paros.network.HttpMessage, java.lang.String, java.lang.String)\n+    /**\n+     * This method is called by the active scanner for each GET and POST parameter for every page.\n      */\n     @Override\n     public void scan() {\n-        try {\n-            /* Retrieves the original request-response pair. */\n-            final HttpMessage originalMsg = getBaseMsg();\n-            /* This scan is only applied to SOAP 1.1 messages. */\n-            String currentHeader = originalMsg.getRequestHeader().getHeader(\"SOAPAction\");\n-            if (currentHeader != null && originalMsg.getRequestBody().length() > 0) {\n-                currentHeader = currentHeader.trim();\n-                /* Retrieves available actions to try attacks. */\n-                String[] soapActions = ImportWSDL.getInstance().getSourceSoapActions(originalMsg);\n+        /* Retrieves the original request-response pair. */\n+        final HttpMessage originalMsg = getBaseMsg();\n+        String originalSoapAction = SoapAction.extractFrom(originalMsg);\n+        if (originalSoapAction == null) {\n+            // Not a SOAP message\n+            return;\n+        }\n \n-                boolean endScan = false;\n-                if (soapActions == null || soapActions.length == 0) {\n-                    // No actions to spoof\n-                    LOG.info(\n-                            \"Skipping \"\n-                                    + getName()\n-                                    + \" because no actions were found. (URL: \"\n-                                    + originalMsg.getRequestHeader().getURI().toString()\n-                                    + \")\");\n-                    return;\n+        /* Retrieves available actions to try attacks. */\n+        List<SoapAction> soapActions;\n+        try {\n+            soapActions = getTable().getSourceSoapActions(originalSoapAction);\n+        } catch (DatabaseException e) {\n+            LOG.warn(\"Could not retrieve SOAP actions from the database. Stopping scan.\", e);\n+            return;\n+        }\n+        if (soapActions == null || soapActions.isEmpty()) {\n+            // No actions to spoof\n+            LOG.info(\n+                    \"Skipping \"\n+                            + getName()\n+                            + \" because no actions were found. (URL: \"\n+                            + originalMsg.getRequestHeader().getURI().toString()\n+                            + \")\");\n+            return;\n+        }\n+        for (SoapAction soapAction : soapActions) {\n+            if (isStop()) {\n+                return;\n+            }\n+            HttpMessage msg = getNewMsg();\n+            /* Skips the original case. */\n+            if (originalSoapAction.trim().equals(soapAction.getAction())) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\n+                            \"Ignoring matching actions: \"\n+                                    + originalSoapAction\n+                                    + \" : \"\n+                                    + soapAction.getAction());\n                 }\n-                for (int j = 0; j < soapActions.length && !endScan; j++) {\n-                    HttpMessage msg = getNewMsg();\n-                    /* Skips the original case. */\n-                    if (!currentHeader.equals(soapActions[j])) {\n-                        HttpRequestHeader header = msg.getRequestHeader();\n-                        /* Available actions should be known here from the imported WSDL file. */\n-                        header.setHeader(\"SOAPAction\", soapActions[j]);\n-                        msg.setRequestHeader(header);\n-\n-                        /* Sends the modified request. */\n-                        if (this.isStop()) return;\n-                        sendAndReceive(msg);\n-                        if (this.isStop()) return;\n+                continue;\n+            }\n+            HttpRequestHeader header = msg.getRequestHeader();\n+            boolean isSoapVersionOne = false;\n+            /* Available actions should be known here from the imported WSDL file. */\n+            if (originalMsg.getRequestHeader().getHeader(\"SOAPAction\") != null) {\n+                header.setHeader(\"SOAPAction\", soapAction.getAction());\n+                isSoapVersionOne = true;\n+            } else {\n+                header.setHeader(\n+                        HttpHeader.CONTENT_TYPE,\n+                        \"application/soap+xml;charset=UTF-8;action=\" + soapAction.getAction());\n+            }\n \n-                        /* Checks the response. */\n-                        int code = scanResponse(msg, originalMsg);\n-                        if (code > 0) endScan = true;\n-                        raiseAlert(msg, code);\n-                    } else {\n-                        if (LOG.isDebugEnabled()) {\n-                            LOG.debug(\n-                                    \"Ignoring matching actions: \"\n-                                            + currentHeader\n-                                            + \" : \"\n-                                            + soapActions[j]);\n-                        }\n-                    }\n-                    if (this.isStop()) return;\n-                }\n+            /* Sends the modified request. */\n+            try {\n+                sendAndReceive(msg);\n+            } catch (IOException e) {\n+                LOG.warn(\"Could not send modified SOAP request.\");\n+                return;\n+            }\n+            /* Checks the response. */\n+            ResponseType code = scanResponse(msg, originalMsg);\n+            String otherAlertInfo =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f"}, "originalPosition": 178}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc65a8180c7de73399ff719ae760aad284cdfb0f", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/fc65a8180c7de73399ff719ae760aad284cdfb0f", "committedDate": "2020-11-30T15:56:12Z", "message": "Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "aca68bce2c7b80ae8c8ac729a7e2a3842926d286", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/aca68bce2c7b80ae8c8ac729a7e2a3842926d286", "committedDate": "2020-12-15T20:25:28Z", "message": "Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aca68bce2c7b80ae8c8ac729a7e2a3842926d286", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/aca68bce2c7b80ae8c8ac729a7e2a3842926d286", "committedDate": "2020-12-15T20:25:28Z", "message": "Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "c422314867a3e4e2870f0e2d9e4fd981864f234f", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/c422314867a3e4e2870f0e2d9e4fd981864f234f", "committedDate": "2020-12-15T20:31:05Z", "message": "SOAP: Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cff48c0e9c7c94df1d7ab87c1d82a63b35c32365", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/cff48c0e9c7c94df1d7ab87c1d82a63b35c32365", "committedDate": "2020-12-15T20:36:52Z", "message": "SOAP: Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c422314867a3e4e2870f0e2d9e4fd981864f234f", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/c422314867a3e4e2870f0e2d9e4fd981864f234f", "committedDate": "2020-12-15T20:31:05Z", "message": "SOAP: Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}, "afterCommit": {"oid": "cff48c0e9c7c94df1d7ab87c1d82a63b35c32365", "author": {"user": {"login": "ricekot", "name": "Akshath Kothari"}}, "url": "https://github.com/zaproxy/zap-extensions/commit/cff48c0e9c7c94df1d7ab87c1d82a63b35c32365", "committedDate": "2020-12-15T20:36:52Z", "message": "SOAP: Various updates\n\n- Enable XML Injection Active Scan Rule to work without the stored\nconfigs.\n- Add support for SOAP version 1.2 to the Action Spoofing Scan Rule.\n- Distinguish alerts by adding the SOAP version to the \"Other Info\"\nsection.\n- Persist the SOAP actions in the database.\n- Before, the message passed to\n`ImportWSDL#getSourceSoapActions(HttpMessage)` did not need to contain\n a SOAP action. It was compared with the stored messages to find the\n  WSDL that had generated it. Now,\n  `TableWsdl#getSourceSoapActions(String)` requires a SOAP action string\n   that is used for comparisons. This shouldn't be a problem however,\n   because,\n    - all version 1 SOAP messages contain a SOAPAction header; and\n    - if the action is omitted in a version 2 message, an empty string\n    is used.\n- Add new classes `TableWsdl` and `SoapAction`. Remove `ImportWSDL`.\n- Many unit tests were removed (for methods that are no longer used),\nsome were added.\n- Cosmetic Changes as suggested by my IDE and other code readability\nimprovements.\n\nSigned-off-by: ricekot <ricekot@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODUwNDQ0", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#pullrequestreview-552850444", "createdAt": "2020-12-15T20:40:52Z", "commit": {"oid": "cff48c0e9c7c94df1d7ab87c1d82a63b35c32365"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyOTY2Njk2", "url": "https://github.com/zaproxy/zap-extensions/pull/2637#pullrequestreview-552966696", "createdAt": "2020-12-15T22:07:41Z", "commit": {"oid": "cff48c0e9c7c94df1d7ab87c1d82a63b35c32365"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 248, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}