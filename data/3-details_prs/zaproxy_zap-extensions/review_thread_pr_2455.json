{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTM1Mzk3", "number": 2455, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxNjowNVrOEHgv3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxOTo0M1rOEHg0Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEyMDMxOnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxNjowNVrOGm6goQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxNjowNVrOGm6goQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1NzY5Nw==", "bodyText": "String.join(\", \", allowedDirectivesWithoutFallback), allowedWildcardSrcs can also be tweaked.", "url": "https://github.com/zaproxy/zap-extensions/pull/2455#discussion_r443457697", "createdAt": "2020-06-22T10:16:05Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanner.java", "diffHunk": "@@ -168,11 +181,25 @@ public void scanHttpResponseReceive(HttpMessage msg, int id, Source source) {\n             List<String> allowedWildcardSources =\n                     getAllowedWildcardSources(unifiedPolicyText, origin);\n             if (!allowedWildcardSources.isEmpty()) {\n+                List<String> allowedDirectivesWithoutFallback =\n+                        allowedWildcardSources.stream()\n+                                .distinct()\n+                                .filter(DIRECTIVES_WITHOUT_FALLBACK::contains)\n+                                .collect(Collectors.toList());\n                 String allowedWildcardSrcs =\n                         allowedWildcardSources.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n                 String wildcardSrcDesc =\n                         Constant.messages.getString(\n                                 MESSAGE_PREFIX + \"wildcard.desc\", allowedWildcardSrcs);\n+                if (!allowedDirectivesWithoutFallback.isEmpty()) {\n+                    wildcardSrcDesc +=\n+                            Constant.messages\n+                                    .getString(\n+                                            \"pscanrules.cspscanner.desc.extended\",\n+                                            allowedDirectivesWithoutFallback.toString())\n+                                    .replace(\"[\", \"\")\n+                                    .replace(\"]\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3d22cd1739602ac3e539f3e500872aab2d4f1aa"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEyMzQxOnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxNjo1OFrOGm6ibQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo1NToxNFrOGm9bKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1ODE1Nw==", "bodyText": "Rational? (Why not base-uri too?)", "url": "https://github.com/zaproxy/zap-extensions/pull/2455#discussion_r443458157", "createdAt": "2020-06-22T10:16:58Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanner.java", "diffHunk": "@@ -327,6 +354,9 @@ private String getCSPNoticesString(ArrayList<Notice> notices) {\n         if (pol.allowsPrefetchFromSource(PARSED_WILDCARD_URI)) {\n             allowedSources.add(\"prefetch-src\");\n         }\n+        if (pol.allowsFormAction(PARSED_WILDCARD_URI)) {\n+            allowedSources.add(\"form-action\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3d22cd1739602ac3e539f3e500872aab2d4f1aa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNTQ1MQ==", "bodyText": "This was added because I missed it before. base-uri wasn't because salvation didn't have a call for it \ud83d\ude1e", "url": "https://github.com/zaproxy/zap-extensions/pull/2455#discussion_r443505451", "createdAt": "2020-06-22T11:55:14Z", "author": {"login": "kingthorin"}, "path": "addOns/pscanrules/src/main/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScanner.java", "diffHunk": "@@ -327,6 +354,9 @@ private String getCSPNoticesString(ArrayList<Notice> notices) {\n         if (pol.allowsPrefetchFromSource(PARSED_WILDCARD_URI)) {\n             allowedSources.add(\"prefetch-src\");\n         }\n+        if (pol.allowsFormAction(PARSED_WILDCARD_URI)) {\n+            allowedSources.add(\"form-action\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1ODE1Nw=="}, "originalCommit": {"oid": "f3d22cd1739602ac3e539f3e500872aab2d4f1aa"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEyNDEzOnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxNzoxMlrOGm6i6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxNzoxMlrOGm6i6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1ODI4MA==", "bodyText": "I'd expect this message to have the same CSP has the following test, otherwise we are not checking just the alert threshold.", "url": "https://github.com/zaproxy/zap-extensions/pull/2455#discussion_r443458280", "createdAt": "2020-06-22T10:17:12Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "diffHunk": "@@ -24,32 +24,54 @@\n \n import org.junit.jupiter.api.Test;\n import org.parosproxy.paros.core.scanner.Alert;\n+import org.parosproxy.paros.core.scanner.Plugin.AlertThreshold;\n+import org.parosproxy.paros.network.HttpHeader;\n import org.parosproxy.paros.network.HttpMalformedHeaderException;\n import org.parosproxy.paros.network.HttpMessage;\n \n public class ContentSecurityPolicyScannerUnitTest\n         extends PassiveScannerTest<ContentSecurityPolicyScanner> {\n \n+    private static final String REASONABLE_POLICY =\n+            \"default-src 'self'; script-src 'self' \"\n+                    + \"storage.googleapis.com cdn.temasys.io cdn.tiny.cloud *.google-analytics.com; \"\n+                    + \"style-src 'self' *.googleapis.com; font-src 'self' data: *.googleapis.com \"\n+                    + \"fonts.gstatic.com; frame-ancestors 'none'; worker-src 'self'; form-action 'none'\";\n+    private static final String HTTP_HEADER_CSP = \"Content-Security-Policy\";\n+\n     @Override\n     protected ContentSecurityPolicyScanner createScanner() {\n         return new ContentSecurityPolicyScanner();\n     }\n \n     @Test\n-    public void exampleBadCsp() throws HttpMalformedHeaderException {\n+    public void shouldNotRaiseAlertOnNonHtmlsAtMediumThreshold() {\n         // Given\n-        HttpMessage msg = new HttpMessage();\n-        msg.setRequestHeader(\"GET https://www.example.com/test/ HTTP/1.1\");\n+        HttpMessage msg = createHttpMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3d22cd1739602ac3e539f3e500872aab2d4f1aa"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEyODQ2OnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxODozM1rOGm6lmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxODozM1rOGm6lmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1ODk2OQ==", "bodyText": "Could use parameterized test for the header names. Name it shouldRaiseAlertOnLegacyCspHeader?", "url": "https://github.com/zaproxy/zap-extensions/pull/2455#discussion_r443458969", "createdAt": "2020-06-22T10:18:33Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "diffHunk": "@@ -151,35 +202,118 @@ public void shouldAlertOnWildcardFrameAncestorsDirective() throws HttpMalformedH\n                 alertsRaised.get(0).getDescription(),\n                 equalTo(\n                         \"The following directives either allow wildcard sources (or ancestors), are not \"\n-                                + \"defined, or are overly broadly defined: \\nframe-ancestors\"));\n+                                + \"defined, or are overly broadly defined: \\nframe-ancestors\"\n+                                + \"\\n\\nThe directive(s): frame-ancestors are among the directives that do not \"\n+                                + \"fallback to default-src, missing/excluding them is the same as allowing anything.\"));\n         assertThat(\n                 alertsRaised.get(0).getEvidence(),\n-                equalTo(\"frame-ancestors *; default-src 'self'\"));\n+                equalTo(\"frame-ancestors *; default-src 'self'; form-action 'none'\"));\n         assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_MEDIUM));\n         assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n     }\n \n     @Test\n-    public void shouldNotAlertOnReasonableCsp() throws HttpMalformedHeaderException {\n+    public void shouldNotAlertOnReasonableCsp() {\n         // Given\n-        HttpMessage msg = new HttpMessage();\n-        msg.setRequestHeader(\"GET https://www.example.com/test/ HTTP/1.1\");\n-\n-        msg.setResponseBody(\"<html></html>\");\n-        msg.setResponseHeader(\n-                \"HTTP/1.1 200 OK\\r\\n\"\n-                        + \"Server: Apache-Coyote/1.1\\r\\n\"\n-                        + \"Content-Security-Policy: default-src 'self'; script-src 'self' \"\n-                        + \"storage.googleapis.com cdn.temasys.io cdn.tiny.cloud *.google-analytics.com; \"\n-                        + \"style-src 'self' *.googleapis.com; font-src 'self' data: *.googleapis.com \"\n-                        + \"fonts.gstatic.com; frame-ancestors 'none'; worker-src 'self'\\r\\n\"\n-                        + \"Content-Type: text/html;charset=ISO-8859-1\\r\\n\"\n-                        + \"Content-Length: \"\n-                        + msg.getResponseBody().length()\n-                        + \"\\r\\n\");\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(HTTP_HEADER_CSP);\n         // When\n         scanHttpResponseReceive(msg);\n         // Then\n         assertThat(alertsRaised.size(), equalTo(0));\n     }\n+\n+    @Test\n+    public void shouldRaiseAlertOnCspIncludedViaXCSP() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3d22cd1739602ac3e539f3e500872aab2d4f1aa"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEyOTY2OnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxODo1N1rOGm6mXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxODo1N1rOGm6mXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1OTE2NQ==", "bodyText": "Why not call createHttpMessage(String)? (Same comment for some of the following tests.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2455#discussion_r443459165", "createdAt": "2020-06-22T10:18:57Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "diffHunk": "@@ -127,20 +188,10 @@ public void shouldIntersectMultipleCspHeaders() throws HttpMalformedHeaderExcept\n     }\n \n     @Test\n-    public void shouldAlertOnWildcardFrameAncestorsDirective() throws HttpMalformedHeaderException {\n+    public void shouldAlertOnWildcardFrameAncestorsDirective() {\n         // Given\n-        HttpMessage msg = new HttpMessage();\n-        msg.setRequestHeader(\"GET https://www.example.com/test/ HTTP/1.1\");\n-\n-        msg.setResponseBody(\"<html></html>\");\n-        msg.setResponseHeader(\n-                \"HTTP/1.1 200 OK\\r\\n\"\n-                        + \"Server: Apache-Coyote/1.1\\r\\n\"\n-                        + \"Content-Security-Policy: frame-ancestors *; default-src 'self'\\r\\n\"\n-                        + \"Content-Type: text/html;charset=ISO-8859-1\\r\\n\"\n-                        + \"Content-Length: \"\n-                        + msg.getResponseBody().length()\n-                        + \"\\r\\n\");\n+        HttpMessage msg =\n+                createHttpMessage(\"\", \"frame-ancestors *; default-src 'self'; form-action 'none'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3d22cd1739602ac3e539f3e500872aab2d4f1aa"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEzMTM3OnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxOTozM1rOGm6nfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxOTozM1rOGm6nfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1OTQ1Mg==", "bodyText": "Were these really meant to assert the first alert? (Same comment for following test.)", "url": "https://github.com/zaproxy/zap-extensions/pull/2455#discussion_r443459452", "createdAt": "2020-06-22T10:19:33Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "diffHunk": "@@ -151,35 +202,118 @@ public void shouldAlertOnWildcardFrameAncestorsDirective() throws HttpMalformedH\n                 alertsRaised.get(0).getDescription(),\n                 equalTo(\n                         \"The following directives either allow wildcard sources (or ancestors), are not \"\n-                                + \"defined, or are overly broadly defined: \\nframe-ancestors\"));\n+                                + \"defined, or are overly broadly defined: \\nframe-ancestors\"\n+                                + \"\\n\\nThe directive(s): frame-ancestors are among the directives that do not \"\n+                                + \"fallback to default-src, missing/excluding them is the same as allowing anything.\"));\n         assertThat(\n                 alertsRaised.get(0).getEvidence(),\n-                equalTo(\"frame-ancestors *; default-src 'self'\"));\n+                equalTo(\"frame-ancestors *; default-src 'self'; form-action 'none'\"));\n         assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_MEDIUM));\n         assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n     }\n \n     @Test\n-    public void shouldNotAlertOnReasonableCsp() throws HttpMalformedHeaderException {\n+    public void shouldNotAlertOnReasonableCsp() {\n         // Given\n-        HttpMessage msg = new HttpMessage();\n-        msg.setRequestHeader(\"GET https://www.example.com/test/ HTTP/1.1\");\n-\n-        msg.setResponseBody(\"<html></html>\");\n-        msg.setResponseHeader(\n-                \"HTTP/1.1 200 OK\\r\\n\"\n-                        + \"Server: Apache-Coyote/1.1\\r\\n\"\n-                        + \"Content-Security-Policy: default-src 'self'; script-src 'self' \"\n-                        + \"storage.googleapis.com cdn.temasys.io cdn.tiny.cloud *.google-analytics.com; \"\n-                        + \"style-src 'self' *.googleapis.com; font-src 'self' data: *.googleapis.com \"\n-                        + \"fonts.gstatic.com; frame-ancestors 'none'; worker-src 'self'\\r\\n\"\n-                        + \"Content-Type: text/html;charset=ISO-8859-1\\r\\n\"\n-                        + \"Content-Length: \"\n-                        + msg.getResponseBody().length()\n-                        + \"\\r\\n\");\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(HTTP_HEADER_CSP);\n         // When\n         scanHttpResponseReceive(msg);\n         // Then\n         assertThat(alertsRaised.size(), equalTo(0));\n     }\n+\n+    @Test\n+    public void shouldRaiseAlertOnCspIncludedViaXCSP() {\n+        // Given\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(\"X-Content-Security-Policy\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(1));\n+        assertThat(\n+                alertsRaised.get(0).getName(), equalTo(\"CSP Scanner: X-Content-Security-Policy\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_LOW));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertOnCspIncludedViaXWKCSP() {\n+        // Given\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(\"X-WebKit-CSP\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(1));\n+        assertThat(alertsRaised.get(0).getName(), equalTo(\"CSP Scanner: X-WebKit-CSP\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_LOW));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertWhenCspIncludesScriptUnsafeInline() {\n+        // Given\n+        HttpMessage msg = createHttpMessage(\"\", \"script-src 'unsafe-inline'\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(2));\n+\n+        assertThat(alertsRaised.get(1).getName(), equalTo(\"CSP Scanner: script-src unsafe-inline\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_MEDIUM));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3d22cd1739602ac3e539f3e500872aab2d4f1aa"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEzMTU3OnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxOTozOFrOGm6nng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxOTozOFrOGm6nng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1OTQ4Ng==", "bodyText": "HTTP_HEADER_CSP", "url": "https://github.com/zaproxy/zap-extensions/pull/2455#discussion_r443459486", "createdAt": "2020-06-22T10:19:38Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "diffHunk": "@@ -151,35 +202,118 @@ public void shouldAlertOnWildcardFrameAncestorsDirective() throws HttpMalformedH\n                 alertsRaised.get(0).getDescription(),\n                 equalTo(\n                         \"The following directives either allow wildcard sources (or ancestors), are not \"\n-                                + \"defined, or are overly broadly defined: \\nframe-ancestors\"));\n+                                + \"defined, or are overly broadly defined: \\nframe-ancestors\"\n+                                + \"\\n\\nThe directive(s): frame-ancestors are among the directives that do not \"\n+                                + \"fallback to default-src, missing/excluding them is the same as allowing anything.\"));\n         assertThat(\n                 alertsRaised.get(0).getEvidence(),\n-                equalTo(\"frame-ancestors *; default-src 'self'\"));\n+                equalTo(\"frame-ancestors *; default-src 'self'; form-action 'none'\"));\n         assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_MEDIUM));\n         assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n     }\n \n     @Test\n-    public void shouldNotAlertOnReasonableCsp() throws HttpMalformedHeaderException {\n+    public void shouldNotAlertOnReasonableCsp() {\n         // Given\n-        HttpMessage msg = new HttpMessage();\n-        msg.setRequestHeader(\"GET https://www.example.com/test/ HTTP/1.1\");\n-\n-        msg.setResponseBody(\"<html></html>\");\n-        msg.setResponseHeader(\n-                \"HTTP/1.1 200 OK\\r\\n\"\n-                        + \"Server: Apache-Coyote/1.1\\r\\n\"\n-                        + \"Content-Security-Policy: default-src 'self'; script-src 'self' \"\n-                        + \"storage.googleapis.com cdn.temasys.io cdn.tiny.cloud *.google-analytics.com; \"\n-                        + \"style-src 'self' *.googleapis.com; font-src 'self' data: *.googleapis.com \"\n-                        + \"fonts.gstatic.com; frame-ancestors 'none'; worker-src 'self'\\r\\n\"\n-                        + \"Content-Type: text/html;charset=ISO-8859-1\\r\\n\"\n-                        + \"Content-Length: \"\n-                        + msg.getResponseBody().length()\n-                        + \"\\r\\n\");\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(HTTP_HEADER_CSP);\n         // When\n         scanHttpResponseReceive(msg);\n         // Then\n         assertThat(alertsRaised.size(), equalTo(0));\n     }\n+\n+    @Test\n+    public void shouldRaiseAlertOnCspIncludedViaXCSP() {\n+        // Given\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(\"X-Content-Security-Policy\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(1));\n+        assertThat(\n+                alertsRaised.get(0).getName(), equalTo(\"CSP Scanner: X-Content-Security-Policy\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_LOW));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertOnCspIncludedViaXWKCSP() {\n+        // Given\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(\"X-WebKit-CSP\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(1));\n+        assertThat(alertsRaised.get(0).getName(), equalTo(\"CSP Scanner: X-WebKit-CSP\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_LOW));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertWhenCspIncludesScriptUnsafeInline() {\n+        // Given\n+        HttpMessage msg = createHttpMessage(\"\", \"script-src 'unsafe-inline'\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(2));\n+\n+        assertThat(alertsRaised.get(1).getName(), equalTo(\"CSP Scanner: script-src unsafe-inline\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_MEDIUM));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertWhenCspIncludesStyleUnsafeInline() {\n+        // Given\n+        HttpMessage msg = createHttpMessage(\"\", \"style-src 'unsafe-inline'\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(2));\n+\n+        assertThat(alertsRaised.get(1).getName(), equalTo(\"CSP Scanner: style-src unsafe-inline\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_MEDIUM));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    private HttpMessage createHttpMessageWithReasonableCsp(String cspHeaderName) {\n+        return createHttpMessage(cspHeaderName, REASONABLE_POLICY);\n+    }\n+\n+    private HttpMessage createHttpMessage(String cspPolicy) {\n+        return createHttpMessage(HTTP_HEADER_CSP, cspPolicy);\n+    }\n+\n+    private HttpMessage createHttpMessage() {\n+        HttpMessage msg = createHttpMessage(\"\", \"\");\n+        msg.getResponseHeader().setHeader(HTTP_HEADER_CSP, null);\n+        return msg;\n+    }\n+\n+    private HttpMessage createHttpMessage(String cspHeaderName, String cspPolicy) {\n+        HttpMessage msg = new HttpMessage();\n+\n+        String header = !cspHeaderName.isEmpty() ? cspHeaderName : \"Content-Security-Policy\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3d22cd1739602ac3e539f3e500872aab2d4f1aa"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzEzMTgyOnYy", "diffSide": "RIGHT", "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxOTo0M1rOGm6nyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxOTo0M1rOGm6nyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1OTUzMA==", "bodyText": "throw new RuntimeException(e);, unlikely but better to fail sooner.", "url": "https://github.com/zaproxy/zap-extensions/pull/2455#discussion_r443459530", "createdAt": "2020-06-22T10:19:43Z", "author": {"login": "thc202"}, "path": "addOns/pscanrules/src/test/java/org/zaproxy/zap/extension/pscanrules/ContentSecurityPolicyScannerUnitTest.java", "diffHunk": "@@ -151,35 +202,118 @@ public void shouldAlertOnWildcardFrameAncestorsDirective() throws HttpMalformedH\n                 alertsRaised.get(0).getDescription(),\n                 equalTo(\n                         \"The following directives either allow wildcard sources (or ancestors), are not \"\n-                                + \"defined, or are overly broadly defined: \\nframe-ancestors\"));\n+                                + \"defined, or are overly broadly defined: \\nframe-ancestors\"\n+                                + \"\\n\\nThe directive(s): frame-ancestors are among the directives that do not \"\n+                                + \"fallback to default-src, missing/excluding them is the same as allowing anything.\"));\n         assertThat(\n                 alertsRaised.get(0).getEvidence(),\n-                equalTo(\"frame-ancestors *; default-src 'self'\"));\n+                equalTo(\"frame-ancestors *; default-src 'self'; form-action 'none'\"));\n         assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_MEDIUM));\n         assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n     }\n \n     @Test\n-    public void shouldNotAlertOnReasonableCsp() throws HttpMalformedHeaderException {\n+    public void shouldNotAlertOnReasonableCsp() {\n         // Given\n-        HttpMessage msg = new HttpMessage();\n-        msg.setRequestHeader(\"GET https://www.example.com/test/ HTTP/1.1\");\n-\n-        msg.setResponseBody(\"<html></html>\");\n-        msg.setResponseHeader(\n-                \"HTTP/1.1 200 OK\\r\\n\"\n-                        + \"Server: Apache-Coyote/1.1\\r\\n\"\n-                        + \"Content-Security-Policy: default-src 'self'; script-src 'self' \"\n-                        + \"storage.googleapis.com cdn.temasys.io cdn.tiny.cloud *.google-analytics.com; \"\n-                        + \"style-src 'self' *.googleapis.com; font-src 'self' data: *.googleapis.com \"\n-                        + \"fonts.gstatic.com; frame-ancestors 'none'; worker-src 'self'\\r\\n\"\n-                        + \"Content-Type: text/html;charset=ISO-8859-1\\r\\n\"\n-                        + \"Content-Length: \"\n-                        + msg.getResponseBody().length()\n-                        + \"\\r\\n\");\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(HTTP_HEADER_CSP);\n         // When\n         scanHttpResponseReceive(msg);\n         // Then\n         assertThat(alertsRaised.size(), equalTo(0));\n     }\n+\n+    @Test\n+    public void shouldRaiseAlertOnCspIncludedViaXCSP() {\n+        // Given\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(\"X-Content-Security-Policy\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(1));\n+        assertThat(\n+                alertsRaised.get(0).getName(), equalTo(\"CSP Scanner: X-Content-Security-Policy\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_LOW));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertOnCspIncludedViaXWKCSP() {\n+        // Given\n+        HttpMessage msg = createHttpMessageWithReasonableCsp(\"X-WebKit-CSP\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(1));\n+        assertThat(alertsRaised.get(0).getName(), equalTo(\"CSP Scanner: X-WebKit-CSP\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_LOW));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertWhenCspIncludesScriptUnsafeInline() {\n+        // Given\n+        HttpMessage msg = createHttpMessage(\"\", \"script-src 'unsafe-inline'\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(2));\n+\n+        assertThat(alertsRaised.get(1).getName(), equalTo(\"CSP Scanner: script-src unsafe-inline\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_MEDIUM));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    @Test\n+    public void shouldRaiseAlertWhenCspIncludesStyleUnsafeInline() {\n+        // Given\n+        HttpMessage msg = createHttpMessage(\"\", \"style-src 'unsafe-inline'\");\n+        // When\n+        scanHttpResponseReceive(msg);\n+        // Then\n+        assertThat(alertsRaised.size(), equalTo(2));\n+\n+        assertThat(alertsRaised.get(1).getName(), equalTo(\"CSP Scanner: style-src unsafe-inline\"));\n+        assertThat(alertsRaised.get(0).getRisk(), equalTo(Alert.RISK_MEDIUM));\n+        assertThat(alertsRaised.get(0).getConfidence(), equalTo(Alert.CONFIDENCE_MEDIUM));\n+    }\n+\n+    private HttpMessage createHttpMessageWithReasonableCsp(String cspHeaderName) {\n+        return createHttpMessage(cspHeaderName, REASONABLE_POLICY);\n+    }\n+\n+    private HttpMessage createHttpMessage(String cspPolicy) {\n+        return createHttpMessage(HTTP_HEADER_CSP, cspPolicy);\n+    }\n+\n+    private HttpMessage createHttpMessage() {\n+        HttpMessage msg = createHttpMessage(\"\", \"\");\n+        msg.getResponseHeader().setHeader(HTTP_HEADER_CSP, null);\n+        return msg;\n+    }\n+\n+    private HttpMessage createHttpMessage(String cspHeaderName, String cspPolicy) {\n+        HttpMessage msg = new HttpMessage();\n+\n+        String header = !cspHeaderName.isEmpty() ? cspHeaderName : \"Content-Security-Policy\";\n+\n+        try {\n+            msg.setRequestHeader(\"GET https://www.example.com/test/ HTTP/1.1\");\n+\n+            msg.setResponseBody(\"<html></html>\");\n+            msg.setResponseHeader(\n+                    \"HTTP/1.1 200 OK\\r\\n\"\n+                            + \"Server: Apache-Coyote/1.1\\r\\n\"\n+                            + header\n+                            + \":\"\n+                            + cspPolicy\n+                            + \"\\r\\n\"\n+                            + \"Content-Type: text/html;charset=ISO-8859-1\\r\\n\"\n+                            + \"Content-Length: \"\n+                            + msg.getResponseBody().length()\n+                            + \"\\r\\n\");\n+        } catch (HttpMalformedHeaderException e) {\n+            // Nothing to do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3d22cd1739602ac3e539f3e500872aab2d4f1aa"}, "originalPosition": 287}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 704, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}