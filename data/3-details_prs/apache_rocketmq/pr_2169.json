{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMjY0MTMy", "number": 2169, "title": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization", "bodyText": "What is the purpose of the change\nMove the rebalancing calculation to the broker, and the client requests the broker to obtain the allocation result.\nBrief changelog\n\nImplemented the function for clients sending message allocation requests to the broker side.\nImplemented the AllocateMessageQueueProcessor to handle message allocation requests sending from clients.\nMigrate the code of allocation strategies through org.apache.rocketmq.common, which enables both broker and client side to invoke those strategies.\n\nVerifying this change\nFollow this checklist to help us incorporate your contribution quickly and easily. Notice, it would be helpful if you could finish the following 5 checklist(the last one is not necessary)before request the community to review your PR.\n\n Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.\n Format the pull request title like [ISSUE #123] Fix UnknownException when host config not exist. Each commit in the pull request should have a meaningful subject line and body.\n Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\n Write necessary unit-test(over 80% coverage) to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in test module.\n Run mvn -B clean apache-rat:check findbugs:findbugs checkstyle:checkstyle to make sure basic checks pass. Run mvn clean install -DskipITs to make sure unit-test pass. Run mvn clean test-compile failsafe:integration-test  to make sure integration-test pass.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.", "createdAt": "2020-07-16T14:58:53Z", "url": "https://github.com/apache/rocketmq/pull/2169", "merged": true, "mergeCommit": {"oid": "c60cb0fccbf1a2bc8e4b92d75f4e159691b885f7"}, "closed": true, "closedAt": "2020-09-14T04:45:25Z", "author": {"login": "jack870131"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1sfaSAFqTQ1MDM3MTU2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIruX8AFqTQ4NzQxMTkyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzcxNTY2", "url": "https://github.com/apache/rocketmq/pull/2169#pullrequestreview-450371566", "createdAt": "2020-07-17T04:54:12Z", "commit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzcxOTYz", "url": "https://github.com/apache/rocketmq/pull/2169#pullrequestreview-450371963", "createdAt": "2020-07-17T04:55:38Z", "commit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo1NTozOFrOGzFVhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDo1OTowOVrOGzFYkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxNzk5MA==", "bodyText": "Enum or constant would be better\uff0cmagic numbers not a good choice.", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456217990", "createdAt": "2020-07-17T04:55:38Z", "author": {"login": "duhenglucky"}, "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AllocateMessageQueueProcessor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.broker.processor;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.List;\n+import org.apache.rocketmq.broker.BrokerController;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.common.protocol.RequestCode;\n+import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.common.protocol.body.AllocateMessageQueueRequestBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseHeader;\n+import org.apache.rocketmq.common.rebalance.AllocateMachineRoomNearby;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragely;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragelyByCircle;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByConfig;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByMachineRoom;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueConsistentHash;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n+import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n+\n+public class AllocateMessageQueueProcessor implements NettyRequestProcessor {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n+\n+    private final BrokerController brokerController;\n+\n+    public AllocateMessageQueueProcessor(final BrokerController brokerController) {\n+        this.brokerController = brokerController;\n+    }\n+\n+    @Override\n+    public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        switch (request.getCode()) {\n+            case RequestCode.ALLOCATE_MESSAGE_QUEUE:\n+                return this.allocateMessageQueue(ctx, request);\n+            default:\n+                break;\n+        }\n+        return null;\n+    }\n+\n+    private RemotingCommand allocateMessageQueue(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        final RemotingCommand response =\n+            RemotingCommand.createResponseCommand(AllocateMessageQueueResponseHeader.class);\n+        final AllocateMessageQueueRequestHeader requestHeader =\n+            (AllocateMessageQueueRequestHeader) request.decodeCommandCustomHeader(AllocateMessageQueueRequestHeader.class);\n+        final AllocateMessageQueueRequestBody requestBody = AllocateMessageQueueRequestBody.decode(request.getBody(),\n+            AllocateMessageQueueRequestBody.class);\n+\n+        AllocateMessageQueueStrategy strategy = null;\n+        String strategyName = requestHeader.getStrategyName();\n+        if (strategyName.startsWith(\"MACHINE_ROOM_NEARBY\")) {\n+            strategy = new AllocateMachineRoomNearby(new AllocateMessageQueueAveragely(),\n+                new AllocateMachineRoomNearby.MachineRoomResolver() {\n+                    @Override\n+                    public String brokerDeployIn(MessageQueue messageQueue) {\n+                        return messageQueue.getBrokerName().split(\"-\")[0];\n+                    }\n+\n+                    @Override\n+                    public String consumerDeployIn(String clientID) {\n+                        return clientID.split(\"-\")[0];\n+                    }\n+                });\n+        } else {\n+            switch (strategyName) {\n+                case \"AVG\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxODc3MA==", "bodyText": "Recommend to add strategy consistency check logic", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456218770", "createdAt": "2020-07-17T04:59:09Z", "author": {"login": "duhenglucky"}, "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AllocateMessageQueueProcessor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.broker.processor;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.List;\n+import org.apache.rocketmq.broker.BrokerController;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.common.protocol.RequestCode;\n+import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.common.protocol.body.AllocateMessageQueueRequestBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseHeader;\n+import org.apache.rocketmq.common.rebalance.AllocateMachineRoomNearby;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragely;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragelyByCircle;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByConfig;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByMachineRoom;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueConsistentHash;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n+import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n+\n+public class AllocateMessageQueueProcessor implements NettyRequestProcessor {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n+\n+    private final BrokerController brokerController;\n+\n+    public AllocateMessageQueueProcessor(final BrokerController brokerController) {\n+        this.brokerController = brokerController;\n+    }\n+\n+    @Override\n+    public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        switch (request.getCode()) {\n+            case RequestCode.ALLOCATE_MESSAGE_QUEUE:\n+                return this.allocateMessageQueue(ctx, request);\n+            default:\n+                break;\n+        }\n+        return null;\n+    }\n+\n+    private RemotingCommand allocateMessageQueue(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        final RemotingCommand response =\n+            RemotingCommand.createResponseCommand(AllocateMessageQueueResponseHeader.class);\n+        final AllocateMessageQueueRequestHeader requestHeader =\n+            (AllocateMessageQueueRequestHeader) request.decodeCommandCustomHeader(AllocateMessageQueueRequestHeader.class);\n+        final AllocateMessageQueueRequestBody requestBody = AllocateMessageQueueRequestBody.decode(request.getBody(),\n+            AllocateMessageQueueRequestBody.class);\n+\n+        AllocateMessageQueueStrategy strategy = null;\n+        String strategyName = requestHeader.getStrategyName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDU4NzY2", "url": "https://github.com/apache/rocketmq/pull/2169#pullrequestreview-450458766", "createdAt": "2020-07-17T08:11:40Z", "commit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoxMTo0MFrOGzJrAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoxMTo0MFrOGzJrAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI4OTAyNA==", "bodyText": "IMO, It would be better that the client only needs to bring the current cid to get the result.\nBoth mqAll and cidAll are obtained on the broker side.", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456289024", "createdAt": "2020-07-17T08:11:40Z", "author": {"login": "RongtongJin"}, "path": "client/src/main/java/org/apache/rocketmq/client/impl/consumer/RebalanceImpl.java", "diffHunk": "@@ -278,11 +278,20 @@ private void rebalanceByTopic(final String topic, final boolean isOrder) {\n \n                     List<MessageQueue> allocateResult = null;\n                     try {\n-                        allocateResult = strategy.allocate(\n-                            this.consumerGroup,\n-                            this.mQClientFactory.getClientId(),\n-                            mqAll,\n-                            cidAll);\n+                        if (!isRebalanceByBroker()) {\n+                            allocateResult = strategy.allocate(\n+                                this.consumerGroup,\n+                                this.mQClientFactory.getClientId(),\n+                                mqAll,\n+                                cidAll);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDY1Nzg3", "url": "https://github.com/apache/rocketmq/pull/2169#pullrequestreview-450465787", "createdAt": "2020-07-17T08:22:30Z", "commit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyMjozMFrOGzKBBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyMjozMFrOGzKBBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDY2Mg==", "bodyText": "It would be better to use placeholders, such as log.warn(\"getAllocationResultByStrategy exception, {} {}\", brokerAddr, group, e);", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456294662", "createdAt": "2020-07-17T08:22:30Z", "author": {"login": "RongtongJin"}, "path": "client/src/main/java/org/apache/rocketmq/client/impl/factory/MQClientInstance.java", "diffHunk": "@@ -1161,6 +1161,26 @@ public void resetOffset(String topic, String group, Map<MessageQueue, Long> offs\n         }\n     }\n \n+    public List<MessageQueue> getAllocationResult(final String topic, final String group, final String strategyName,\n+        final List<MessageQueue> mqAll, final List<String> cidAll) {\n+        String brokerAddr = this.findBrokerAddrByTopic(topic);\n+        if (null == brokerAddr) {\n+            this.updateTopicRouteInfoFromNameServer(topic);\n+            brokerAddr = this.findBrokerAddrByTopic(topic);\n+        }\n+\n+        if (null != brokerAddr) {\n+            try {\n+                return this.mQClientAPIImpl.getAllocationResultByStrategy(brokerAddr, group, clientId, strategyName,\n+                    mqAll, cidAll, 3000);\n+            } catch (Exception e) {\n+                log.warn(\"getAllocationResultByStrategy exception, \" + brokerAddr, \" \" + group, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzI5MTA1", "url": "https://github.com/apache/rocketmq/pull/2169#pullrequestreview-450329105", "createdAt": "2020-07-17T02:09:38Z", "commit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjowOTozOVrOGzC71A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjowOTozOVrOGzC71A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3ODY0NA==", "bodyText": "Would it be better if we cache the commonly used Strategy Object on the broker side? I think it's better than creating it for every request.", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r456178644", "createdAt": "2020-07-17T02:09:39Z", "author": {"login": "xiangwangcheng"}, "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/AllocateMessageQueueProcessor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.broker.processor;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import java.util.List;\n+import org.apache.rocketmq.broker.BrokerController;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.common.protocol.RequestCode;\n+import org.apache.rocketmq.common.protocol.ResponseCode;\n+import org.apache.rocketmq.common.protocol.body.AllocateMessageQueueRequestBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueRequestHeader;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseBody;\n+import org.apache.rocketmq.common.protocol.header.AllocateMessageQueueResponseHeader;\n+import org.apache.rocketmq.common.rebalance.AllocateMachineRoomNearby;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragely;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueAveragelyByCircle;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByConfig;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueByMachineRoom;\n+import org.apache.rocketmq.common.rebalance.AllocateMessageQueueConsistentHash;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+import org.apache.rocketmq.remoting.exception.RemotingCommandException;\n+import org.apache.rocketmq.remoting.netty.NettyRequestProcessor;\n+import org.apache.rocketmq.remoting.protocol.RemotingCommand;\n+\n+public class AllocateMessageQueueProcessor implements NettyRequestProcessor {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);\n+\n+    private final BrokerController brokerController;\n+\n+    public AllocateMessageQueueProcessor(final BrokerController brokerController) {\n+        this.brokerController = brokerController;\n+    }\n+\n+    @Override\n+    public RemotingCommand processRequest(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        switch (request.getCode()) {\n+            case RequestCode.ALLOCATE_MESSAGE_QUEUE:\n+                return this.allocateMessageQueue(ctx, request);\n+            default:\n+                break;\n+        }\n+        return null;\n+    }\n+\n+    private RemotingCommand allocateMessageQueue(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        final RemotingCommand response =\n+            RemotingCommand.createResponseCommand(AllocateMessageQueueResponseHeader.class);\n+        final AllocateMessageQueueRequestHeader requestHeader =\n+            (AllocateMessageQueueRequestHeader) request.decodeCommandCustomHeader(AllocateMessageQueueRequestHeader.class);\n+        final AllocateMessageQueueRequestBody requestBody = AllocateMessageQueueRequestBody.decode(request.getBody(),\n+            AllocateMessageQueueRequestBody.class);\n+\n+        AllocateMessageQueueStrategy strategy = null;\n+        String strategyName = requestHeader.getStrategyName();\n+        if (strategyName.startsWith(\"MACHINE_ROOM_NEARBY\")) {\n+            strategy = new AllocateMachineRoomNearby(new AllocateMessageQueueAveragely(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3059642788f063fd41a5ee445483ee668b2b63b4", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/3059642788f063fd41a5ee445483ee668b2b63b4", "committedDate": "2020-07-16T08:12:09Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "91f6d54139e2efc90dded338adc62d3ee921be29", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/91f6d54139e2efc90dded338adc62d3ee921be29", "committedDate": "2020-07-18T15:38:53Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91f6d54139e2efc90dded338adc62d3ee921be29", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/91f6d54139e2efc90dded338adc62d3ee921be29", "committedDate": "2020-07-18T15:38:53Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "e7d2a99a5c341637bb524fa12279dc47abb832ec", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/e7d2a99a5c341637bb524fa12279dc47abb832ec", "committedDate": "2020-07-18T15:57:05Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTk1Mzky", "url": "https://github.com/apache/rocketmq/pull/2169#pullrequestreview-452995392", "createdAt": "2020-07-22T05:01:34Z", "commit": {"oid": "e7d2a99a5c341637bb524fa12279dc47abb832ec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTowMTozNVrOG1Sxhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTowMTozNVrOG1Sxhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNTMwMw==", "bodyText": "IMO, we don\u2019t need to open a thread pool separately, could we reuse consumerManageExecutor?", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r458535303", "createdAt": "2020-07-22T05:01:35Z", "author": {"login": "RongtongJin"}, "path": "broker/src/main/java/org/apache/rocketmq/broker/BrokerController.java", "diffHunk": "@@ -329,6 +331,10 @@ public boolean initialize() throws CloneNotSupportedException {\n                 Executors.newFixedThreadPool(this.brokerConfig.getConsumerManageThreadPoolNums(), new ThreadFactoryImpl(\n                     \"ConsumerManageThread_\"));\n \n+            this.allocateMessageQueueExecutor =\n+                Executors.newFixedThreadPool(this.brokerConfig.getConsumerManageThreadPoolNums(), new ThreadFactoryImpl(\n+                    \"AllocateMessageQueueThread_\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d2a99a5c341637bb524fa12279dc47abb832ec"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7d2a99a5c341637bb524fa12279dc47abb832ec", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/e7d2a99a5c341637bb524fa12279dc47abb832ec", "committedDate": "2020-07-18T15:57:05Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "893a0124e78ac6543347ce4c6c0a4b1f0a7a3456", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/893a0124e78ac6543347ce4c6c0a4b1f0a7a3456", "committedDate": "2020-07-23T13:07:08Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "893a0124e78ac6543347ce4c6c0a4b1f0a7a3456", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/893a0124e78ac6543347ce4c6c0a4b1f0a7a3456", "committedDate": "2020-07-23T13:07:08Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "9c4ddc2b8e6bedbe63ea09e82df0dc8004ab27cf", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/9c4ddc2b8e6bedbe63ea09e82df0dc8004ab27cf", "committedDate": "2020-07-23T13:33:20Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c4ddc2b8e6bedbe63ea09e82df0dc8004ab27cf", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/9c4ddc2b8e6bedbe63ea09e82df0dc8004ab27cf", "committedDate": "2020-07-23T13:33:20Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "f2e6961c148fcdd1626516e281ee4bc7b0186940", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/f2e6961c148fcdd1626516e281ee4bc7b0186940", "committedDate": "2020-08-09T15:35:15Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2e6961c148fcdd1626516e281ee4bc7b0186940", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/f2e6961c148fcdd1626516e281ee4bc7b0186940", "committedDate": "2020-08-09T15:35:15Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "be0065847f0d4f7de992c41828f0d03750d261a1", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/be0065847f0d4f7de992c41828f0d03750d261a1", "committedDate": "2020-08-10T05:42:53Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be0065847f0d4f7de992c41828f0d03750d261a1", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/be0065847f0d4f7de992c41828f0d03750d261a1", "committedDate": "2020-08-10T05:42:53Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "763fcbebb49a24b249c16700ae276a8a48900d5d", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/763fcbebb49a24b249c16700ae276a8a48900d5d", "committedDate": "2020-08-10T06:05:34Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "763fcbebb49a24b249c16700ae276a8a48900d5d", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/763fcbebb49a24b249c16700ae276a8a48900d5d", "committedDate": "2020-08-10T06:05:34Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17", "committedDate": "2020-08-10T10:58:54Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0Nzg4NzU5", "url": "https://github.com/apache/rocketmq/pull/2169#pullrequestreview-464788759", "createdAt": "2020-08-11T06:44:43Z", "commit": {"oid": "96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo0NDo0M1rOG-qc0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo1NjowNVrOG-qvOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MDQwMw==", "bodyText": "Throwing NPE is very strange, because even if you don\u2019t write related code, it will still throw NPE.", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r468360403", "createdAt": "2020-08-11T06:44:43Z", "author": {"login": "RongtongJin"}, "path": "common/src/main/java/org/apache/rocketmq/common/rebalance/AllocateMessageQueueSticky.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common.rebalance;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+\n+public class AllocateMessageQueueSticky implements AllocateMessageQueueStrategy {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n+\n+    private final Map<String, List<MessageQueue>> messageQueueAllocation;\n+\n+    private final List<MessageQueue> unassignedQueues = new ArrayList<MessageQueue>();\n+\n+    public AllocateMessageQueueSticky(Map<String, List<MessageQueue>> messageQueueAllocation)\n+        throws NullPointerException {\n+        if (messageQueueAllocation == null) {\n+            throw new NullPointerException(\"currentMessageQueueAllocation is null\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MjU1Nw==", "bodyText": "Is it necessary to force the compilation version to 8, which may cause some compatibility issues", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r468362557", "createdAt": "2020-08-11T06:49:57Z", "author": {"login": "RongtongJin"}, "path": "common/pom.xml", "diffHunk": "@@ -24,6 +24,18 @@\n \n     <modelVersion>4.0.0</modelVersion>\n     <packaging>jar</packaging>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>8</source>\n+                    <target>8</target>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NTExNQ==", "bodyText": "There may be a thread-safe issue, because multiple threads may call allocateMessageQueue at the same time", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r468365115", "createdAt": "2020-08-11T06:56:05Z", "author": {"login": "RongtongJin"}, "path": "broker/src/main/java/org/apache/rocketmq/broker/processor/ConsumerManageProcessor.java", "diffHunk": "@@ -152,4 +168,75 @@ private RemotingCommand queryConsumerOffset(ChannelHandlerContext ctx, RemotingC\n \n         return response;\n     }\n+\n+    private RemotingCommand allocateMessageQueue(ChannelHandlerContext ctx, RemotingCommand request)\n+        throws RemotingCommandException {\n+        final RemotingCommand response =\n+            RemotingCommand.createResponseCommand(AllocateMessageQueueResponseHeader.class);\n+        final AllocateMessageQueueRequestHeader requestHeader =\n+            (AllocateMessageQueueRequestHeader) request.decodeCommandCustomHeader(AllocateMessageQueueRequestHeader.class);\n+        final AllocateMessageQueueRequestBody requestBody = AllocateMessageQueueRequestBody.decode(request.getBody(),\n+            AllocateMessageQueueRequestBody.class);\n+\n+        AllocateMessageQueueStrategy strategy = null;\n+        String consumerGroup = requestHeader.getConsumerGroup();\n+        String strategyName = requestHeader.getStrategyName();\n+\n+        if (this.brokerController.getAllocateMessageQueueStrategyTable().containsKey(consumerGroup)) {\n+            strategy = this.brokerController.getAllocateMessageQueueStrategyTable().get(consumerGroup);\n+        } else {\n+            if (strategyName.startsWith(AllocateMessageQueueStrategyConstants.ALLOCATE_MACHINE_ROOM_NEARBY)) {\n+                response.setCode(ResponseCode.ALLOCATE_MESSAGE_QUEUE_STRATEGY_NOT_SUPPORTED);\n+                response.setRemark(\"The broker does not support message queue strategy \" + strategyName);\n+                return response;\n+            } else {\n+                switch (strategyName) {\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_AVERAGELY:\n+                        strategy = new AllocateMessageQueueAveragely();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_AVERAGELY_BY_CIRCLE:\n+                        strategy = new AllocateMessageQueueAveragelyByCircle();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_BY_CONFIG:\n+                        strategy = new AllocateMessageQueueByConfig();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_BY_MACHINE_ROOM:\n+                        strategy = new AllocateMessageQueueByMachineRoom();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_CONSISTENT_HASH:\n+                        strategy = new AllocateMessageQueueConsistentHash();\n+                        break;\n+                    case AllocateMessageQueueStrategyConstants.ALLOCATE_MESSAGE_QUEUE_STICKY:\n+                        strategy = new AllocateMessageQueueSticky(new HashMap<String, List<MessageQueue>>());\n+                    default:\n+                        break;\n+                }\n+            }\n+            this.brokerController.getAllocateMessageQueueStrategyTable().put(consumerGroup, strategy);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17"}, "originalPosition": 94}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/96b7a0055f22ac6ff36aef7bf4c3d1037e10cc17", "committedDate": "2020-08-10T10:58:54Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "e9ef67ad7a22909d9dce84fddde11fb541985f63", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/e9ef67ad7a22909d9dce84fddde11fb541985f63", "committedDate": "2020-08-11T14:26:50Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9ef67ad7a22909d9dce84fddde11fb541985f63", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/e9ef67ad7a22909d9dce84fddde11fb541985f63", "committedDate": "2020-08-11T14:26:50Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "697c3b73b6b4f34ca8421c41ef39934e9e52e499", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/697c3b73b6b4f34ca8421c41ef39934e9e52e499", "committedDate": "2020-08-13T15:54:57Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "697c3b73b6b4f34ca8421c41ef39934e9e52e499", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/697c3b73b6b4f34ca8421c41ef39934e9e52e499", "committedDate": "2020-08-13T15:54:57Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "27c7ced6c7fc96691a0189e838c0e337c23130e8", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/27c7ced6c7fc96691a0189e838c0e337c23130e8", "committedDate": "2020-08-13T16:23:34Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27c7ced6c7fc96691a0189e838c0e337c23130e8", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/27c7ced6c7fc96691a0189e838c0e337c23130e8", "committedDate": "2020-08-13T16:23:34Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "0a73b304b25d7fc67cdbddd48f7624c825de774a", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/0a73b304b25d7fc67cdbddd48f7624c825de774a", "committedDate": "2020-08-14T05:01:15Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a73b304b25d7fc67cdbddd48f7624c825de774a", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/0a73b304b25d7fc67cdbddd48f7624c825de774a", "committedDate": "2020-08-14T05:01:15Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "3549cac6f4b00ca6d4ae3f23e7609011ae582cd9", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/3549cac6f4b00ca6d4ae3f23e7609011ae582cd9", "committedDate": "2020-08-14T06:49:55Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDMyNzU4", "url": "https://github.com/apache/rocketmq/pull/2169#pullrequestreview-467432758", "createdAt": "2020-08-14T09:22:24Z", "commit": {"oid": "3549cac6f4b00ca6d4ae3f23e7609011ae582cd9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMjoyNFrOHAtzBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMjoyNFrOHAtzBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMjM4OQ==", "bodyText": "Why not just new a hashmap in the constructor instead of passing one \uff1f", "url": "https://github.com/apache/rocketmq/pull/2169#discussion_r470512389", "createdAt": "2020-08-14T09:22:24Z", "author": {"login": "RongtongJin"}, "path": "common/src/main/java/org/apache/rocketmq/common/rebalance/AllocateMessageQueueSticky.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.rocketmq.common.rebalance;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import org.apache.rocketmq.common.AllocateMessageQueueStrategy;\n+import org.apache.rocketmq.common.constant.LoggerName;\n+import org.apache.rocketmq.common.message.MessageQueue;\n+import org.apache.rocketmq.logging.InternalLogger;\n+import org.apache.rocketmq.logging.InternalLoggerFactory;\n+\n+public class AllocateMessageQueueSticky implements AllocateMessageQueueStrategy {\n+    private static final InternalLogger log = InternalLoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);\n+\n+    private final Map<String, List<MessageQueue>> messageQueueAllocation;\n+\n+    private final List<MessageQueue> unassignedQueues = new ArrayList<MessageQueue>();\n+\n+    public AllocateMessageQueueSticky(Map<String, List<MessageQueue>> messageQueueAllocation) {\n+        this.messageQueueAllocation = messageQueueAllocation;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3549cac6f4b00ca6d4ae3f23e7609011ae582cd9"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3549cac6f4b00ca6d4ae3f23e7609011ae582cd9", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/3549cac6f4b00ca6d4ae3f23e7609011ae582cd9", "committedDate": "2020-08-14T06:49:55Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "e7aba517519794a628be47ddbc94dbb3b775dad2", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/e7aba517519794a628be47ddbc94dbb3b775dad2", "committedDate": "2020-08-17T03:51:25Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7aba517519794a628be47ddbc94dbb3b775dad2", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/e7aba517519794a628be47ddbc94dbb3b775dad2", "committedDate": "2020-08-17T03:51:25Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "3d0fe22b44afb13adaa10cecdd9b61ce627aaf8f", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/3d0fe22b44afb13adaa10cecdd9b61ce627aaf8f", "committedDate": "2020-08-17T03:53:31Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d0fe22b44afb13adaa10cecdd9b61ce627aaf8f", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/3d0fe22b44afb13adaa10cecdd9b61ce627aaf8f", "committedDate": "2020-08-17T03:53:31Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "91fa427345462eac7fb0c727d32d95e6ff0950cd", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/91fa427345462eac7fb0c727d32d95e6ff0950cd", "committedDate": "2020-08-17T03:57:15Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91fa427345462eac7fb0c727d32d95e6ff0950cd", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/91fa427345462eac7fb0c727d32d95e6ff0950cd", "committedDate": "2020-08-17T03:57:15Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "32cdff5def66a76d806dd881edc435b39e7cf91b", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/32cdff5def66a76d806dd881edc435b39e7cf91b", "committedDate": "2020-08-20T15:00:45Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32cdff5def66a76d806dd881edc435b39e7cf91b", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/32cdff5def66a76d806dd881edc435b39e7cf91b", "committedDate": "2020-08-20T15:00:45Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "62dddc215db0508468060211311ad3f6de654c6f", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/62dddc215db0508468060211311ad3f6de654c6f", "committedDate": "2020-08-21T16:37:19Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87bae705b3502b155bae6f76add21e14a1991f5e", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/87bae705b3502b155bae6f76add21e14a1991f5e", "committedDate": "2020-08-22T16:49:19Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62dddc215db0508468060211311ad3f6de654c6f", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/62dddc215db0508468060211311ad3f6de654c6f", "committedDate": "2020-08-21T16:37:19Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}, "afterCommit": {"oid": "87bae705b3502b155bae6f76add21e14a1991f5e", "author": {"user": {"login": "jack870131", "name": "Jack Tsai"}}, "url": "https://github.com/apache/rocketmq/commit/87bae705b3502b155bae6f76add21e14a1991f5e", "committedDate": "2020-08-22T16:49:19Z", "message": "[ISSUE #2149] Apache RocketMQ rebalancing architecture optimization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDExOTI4", "url": "https://github.com/apache/rocketmq/pull/2169#pullrequestreview-487411928", "createdAt": "2020-09-14T04:45:12Z", "commit": {"oid": "87bae705b3502b155bae6f76add21e14a1991f5e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4864, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}