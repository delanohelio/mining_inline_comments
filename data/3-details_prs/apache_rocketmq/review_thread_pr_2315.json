{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5OTE4MjUy", "number": 2315, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoyOTowOVrOEljP5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoyOTowOVrOEljP5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODEwMjc5OnYy", "diffSide": "RIGHT", "path": "client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoyOTowOVrOHVFVNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODoyOTowOVrOHVFVNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg2OTQ5NA==", "bodyText": "I have a question, here you can add another test case to coverage the case which send message successfully based on the specified message queue.", "url": "https://github.com/apache/rocketmq/pull/2315#discussion_r491869494", "createdAt": "2020-09-21T08:29:09Z", "author": {"login": "zongtanghu"}, "path": "client/src/test/java/org/apache/rocketmq/client/producer/DefaultMQProducerTest.java", "diffHunk": "@@ -232,6 +232,49 @@ public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n         countDownLatch.await(3000L, TimeUnit.MILLISECONDS);\n         assertThat(cc.get()).isEqualTo(5);\n     }\n+    \n+    @Test\n+    public void testBatchSendMessageAsync()\n+            throws RemotingException, MQClientException, InterruptedException, MQBrokerException {\n+        final AtomicInteger cc = new AtomicInteger(0);\n+        final CountDownLatch countDownLatch = new CountDownLatch(4);\n+\n+        when(mQClientAPIImpl.getTopicRouteInfoFromNameServer(anyString(), anyLong())).thenReturn(createTopicRoute());\n+        SendCallback sendCallback = new SendCallback() {\n+            @Override\n+            public void onSuccess(SendResult sendResult) {\n+                countDownLatch.countDown();\n+            }\n+\n+            @Override\n+            public void onException(Throwable e) {\n+                e.printStackTrace();\n+                cc.incrementAndGet();\n+                countDownLatch.countDown();\n+            }\n+        };\n+        MessageQueueSelector messageQueueSelector = new MessageQueueSelector() {\n+            @Override\n+            public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n+                return null;\n+            }\n+        };\n+\n+        List<Message> msgs = new ArrayList<>();\n+        for (int i = 0; i < 5; i++) {\n+            Message message = new Message();\n+            message.setTopic(\"test\");\n+            message.setBody((\"hello world\" + i).getBytes());\n+            msgs.add(message);\n+        }\n+        producer.send(msgs, sendCallback);\n+        producer.send(msgs, sendCallback, 1000);\n+        producer.send(msgs, new MessageQueue(), sendCallback);\n+        producer.send(msgs, new MessageQueue(), sendCallback, 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a78c7ed82dabc18918d4c4db10f4a50158e17b"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1639, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}