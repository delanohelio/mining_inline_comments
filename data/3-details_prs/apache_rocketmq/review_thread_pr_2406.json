{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3Mjg1MTg3", "number": 2406, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjoxOToxOFrOE2lT6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzo0NTo1MVrOE3dSLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjY5ODY1OnYy", "diffSide": "RIGHT", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjoxOToxOFrOHvc9fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToxMTo1OFrOHwhO3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxOTYxMg==", "bodyText": "When sending batch messages, worteOffset is the offset of the first message, but this is the offset of the last message, so the unit test fails.", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r519519612", "createdAt": "2020-11-09T02:19:18Z", "author": {"login": "RongtongJin"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,122 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            for (long pos : dledgerFuture.getPositions()) {\n+                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }\n+            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+                    msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n+            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d638e5ffdb94f0957da36253eb971990ded68ea6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzODE3Mg==", "bodyText": "Good job!", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520638172", "createdAt": "2020-11-10T15:11:58Z", "author": {"login": "TerrellChen"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,122 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            for (long pos : dledgerFuture.getPositions()) {\n+                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }\n+            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginTimeInDledgerLock;\n+            appendResult = new AppendMessageResult(AppendMessageStatus.PUT_OK, wroteOffset, encodeResult.totalMsgLen,\n+                    msgIdBuilder.toString(), System.currentTimeMillis(), queueOffset, elapsedTimeInLock);\n+            DLedgerCommitLog.this.topicQueueTable.put(encodeResult.queueOffsetKey, queueOffset + msgNum);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUxOTYxMg=="}, "originalCommit": {"oid": "d638e5ffdb94f0957da36253eb971990ded68ea6"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjcwNDA4OnYy", "diffSide": "RIGHT", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjoyMjo0MlrOHvdAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToxMzoxOVrOHwhTSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUyMDM3Mw==", "bodyText": "Write code as this:\nboolean isFirstOffset = true;\n            for (long pos : dledgerFuture.getPositions()) {\n                if(isFirstOffset) {\n                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n                    isFirstOffset = false;\n                }\n                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n                if (msgIdBuilder.length() > 0) {\n                    msgIdBuilder.append(',').append(msgId);\n                } else {\n                    msgIdBuilder.append(msgId);\n                }\n                msgNum++;\n            }\nOr do you have a better solution\uff1f", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r519520373", "createdAt": "2020-11-09T02:22:42Z", "author": {"login": "RongtongJin"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,122 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            for (long pos : dledgerFuture.getPositions()) {\n+                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d638e5ffdb94f0957da36253eb971990ded68ea6"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzOTMwNA==", "bodyText": "LGTM!", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520639304", "createdAt": "2020-11-10T15:13:19Z", "author": {"login": "TerrellChen"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,122 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            for (long pos : dledgerFuture.getPositions()) {\n+                wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUyMDM3Mw=="}, "originalCommit": {"oid": "d638e5ffdb94f0957da36253eb971990ded68ea6"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjcxMjM3OnYy", "diffSide": "RIGHT", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMjoyODoyNVrOHvdFPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToxMzo1NlrOHwhVEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUyMTU5OA==", "bodyText": "Removing [DEBUG_CTR] will be better.", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r519521598", "createdAt": "2020-11-09T02:28:25Z", "author": {"login": "RongtongJin"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,122 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d638e5ffdb94f0957da36253eb971990ded68ea6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzOTc2MQ==", "bodyText": "My fault!", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520639761", "createdAt": "2020-11-10T15:13:56Z", "author": {"login": "TerrellChen"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,122 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"[DEBUG_CTR] handleAppend return false due to error code {}\", dledgerFuture.get().getCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUyMTU5OA=="}, "originalCommit": {"oid": "d638e5ffdb94f0957da36253eb971990ded68ea6"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTg2NzY0OnYy", "diffSide": "RIGHT", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzo0NTowOVrOHw0ASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTozMDowN1rOHyANzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NTczNg==", "bodyText": "This is my fault. The code will cause the writeOffset of the following message not to be updated, so as to get the wrong msgId. We need to fix it and ensure that the writeOffset of the first message is returned to the user.", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520945736", "createdAt": "2020-11-10T23:45:09Z", "author": {"login": "RongtongJin"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -609,7 +735,122 @@ public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n \n     @Override\n     public CompletableFuture<PutMessageResult> asyncPutMessages(MessageExtBatch messageExtBatch) {\n-        return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null));\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null));\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null));\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status)));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            boolean isFirstOffset = true;\n+            for (long pos : dledgerFuture.getPositions()) {\n+                if (isFirstOffset) {\n+                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    isFirstOffset = false;\n+                }\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7488353dc2c35b6fba097da1b5c28ced7d2a61"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NDM4Mw==", "bodyText": "fixed", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r522194383", "createdAt": "2020-11-12T15:30:07Z", "author": {"login": "TerrellChen"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -609,7 +735,122 @@ public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n \n     @Override\n     public CompletableFuture<PutMessageResult> asyncPutMessages(MessageExtBatch messageExtBatch) {\n-        return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null));\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null));\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null));\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status)));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR)));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            boolean isFirstOffset = true;\n+            for (long pos : dledgerFuture.getPositions()) {\n+                if (isFirstOffset) {\n+                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    isFirstOffset = false;\n+                }\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NTczNg=="}, "originalCommit": {"oid": "6e7488353dc2c35b6fba097da1b5c28ced7d2a61"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTg2OTI1OnYy", "diffSide": "RIGHT", "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzo0NTo1MVrOHw0BRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTozMDoxMVrOHyAN_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NTk5MQ==", "bodyText": "Same as below", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r520945991", "createdAt": "2020-11-10T23:45:51Z", "author": {"login": "RongtongJin"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,127 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            boolean isFirstOffset = true;\n+            for (long pos : dledgerFuture.getPositions()) {\n+                if (isFirstOffset) {\n+                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    isFirstOffset = false;\n+                }\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7488353dc2c35b6fba097da1b5c28ced7d2a61"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NDQzMA==", "bodyText": "fixed", "url": "https://github.com/apache/rocketmq/pull/2406#discussion_r522194430", "createdAt": "2020-11-12T15:30:11Z", "author": {"login": "TerrellChen"}, "path": "store/src/main/java/org/apache/rocketmq/store/dledger/DLedgerCommitLog.java", "diffHunk": "@@ -507,7 +513,127 @@ public PutMessageResult putMessage(final MessageExtBrokerInner msg) {\n \n     @Override\n     public PutMessageResult putMessages(final MessageExtBatch messageExtBatch) {\n-        return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        final int tranType = MessageSysFlag.getTransactionValue(messageExtBatch.getSysFlag());\n+\n+        if (tranType != MessageSysFlag.TRANSACTION_NOT_TYPE) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+        if (messageExtBatch.getDelayTimeLevel() > 0) {\n+            return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, null);\n+        }\n+\n+        // Set the storage time\n+        messageExtBatch.setStoreTimestamp(System.currentTimeMillis());\n+\n+        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n+\n+        InetSocketAddress bornSocketAddress = (InetSocketAddress) messageExtBatch.getBornHost();\n+        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setBornHostV6Flag();\n+        }\n+\n+        InetSocketAddress storeSocketAddress = (InetSocketAddress) messageExtBatch.getStoreHost();\n+        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n+            messageExtBatch.setStoreHostAddressV6Flag();\n+        }\n+\n+        // Back to Results\n+        AppendMessageResult appendResult;\n+        BatchAppendFuture<AppendEntryResponse> dledgerFuture;\n+        EncodeResult encodeResult;\n+\n+        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n+        msgIdBuilder.setLength(0);\n+        long elapsedTimeInLock;\n+        long queueOffset;\n+        long msgNum = 0;\n+        try {\n+            beginTimeInDledgerLock = this.defaultMessageStore.getSystemClock().now();\n+            encodeResult = this.messageSerializer.serialize(messageExtBatch);\n+            queueOffset = topicQueueTable.get(encodeResult.queueOffsetKey);\n+            if (encodeResult.status != AppendMessageStatus.PUT_OK) {\n+                return new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, new AppendMessageResult(encodeResult\n+                        .status));\n+            }\n+            BatchAppendEntryRequest request = new BatchAppendEntryRequest();\n+            request.setGroup(dLedgerConfig.getGroup());\n+            request.setRemoteId(dLedgerServer.getMemberState().getSelfId());\n+            request.setBatchMsgs(encodeResult.batchData);\n+            dledgerFuture = (BatchAppendFuture<AppendEntryResponse>) dLedgerServer.handleAppend(request);\n+            if (dledgerFuture.getPos() == -1) {\n+                log.warn(\"HandleAppend return false due to error code {}\", dledgerFuture.get().getCode());\n+                return new PutMessageResult(PutMessageStatus.OS_PAGECACHE_BUSY, new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR));\n+            }\n+            long wroteOffset = 0;\n+\n+            int msgIdLength = (messageExtBatch.getSysFlag() & MessageSysFlag.STOREHOSTADDRESS_V6_FLAG) == 0 ? 4 + 4 + 8 : 16 + 4 + 8;\n+            ByteBuffer buffer = ByteBuffer.allocate(msgIdLength);\n+\n+            boolean isFirstOffset = true;\n+            for (long pos : dledgerFuture.getPositions()) {\n+                if (isFirstOffset) {\n+                    wroteOffset = pos + DLedgerEntry.BODY_OFFSET;\n+                    isFirstOffset = false;\n+                }\n+                String msgId = MessageDecoder.createMessageId(buffer, messageExtBatch.getStoreHostBytes(), wroteOffset);\n+                if (msgIdBuilder.length() > 0) {\n+                    msgIdBuilder.append(',').append(msgId);\n+                } else {\n+                    msgIdBuilder.append(msgId);\n+                }\n+                msgNum++;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0NTk5MQ=="}, "originalCommit": {"oid": "6e7488353dc2c35b6fba097da1b5c28ced7d2a61"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1653, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}