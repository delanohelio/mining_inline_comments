{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjY4NjY3", "number": 7401, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOToxMjo0MVrODzBAaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOToxMjo0MVrODzBAaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODIwNDU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOToxMjo0MVrOGHaCHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTozMzoyOVrOGHam1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxOTc0MQ==", "bodyText": "You should call this during dispose() as well.", "url": "https://github.com/openhab/openhab-addons/pull/7401#discussion_r410419741", "createdAt": "2020-04-17T19:12:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -332,10 +333,34 @@ public void postUpdate(String channelId, State state) {\n             updateState(channelId, state);\n         }\n \n-        // channel subscription only works when on livetv app.\n-        if (CHANNEL_APP_LAUNCHER.equals(channelId) && APP_ID_LIVETV.equals(state.toString())) {\n-            channelHandlers.get(CHANNEL_CHANNEL).refreshSubscription(CHANNEL_CHANNEL, this);\n+        // channel subscription only works when livetv app is started,\n+        // therefore we need to slightly delay the subscription\n+        if (CHANNEL_APP_LAUNCHER.equals(channelId)) {\n+            if (APP_ID_LIVETV.equals(state.toString())) {\n+                scheduleChannelSubscriptionJob();\n+            } else {\n+                stopChannelSubscriptionJob();\n+            }\n+        }\n+    }\n+\n+    private void scheduleChannelSubscriptionJob() {\n+        ScheduledFuture<?> job = channelSubscriptionJob;\n+        if (job == null || job.isCancelled()) {\n+            logger.debug(\"Schedule channel subscription job\");\n+            channelSubscriptionJob = scheduler.schedule(\n+                    () -> channelHandlers.get(CHANNEL_CHANNEL).refreshSubscription(CHANNEL_CHANNEL, this),\n+                    CHANNEL_SUBSCRIPTION_DELAY_SECONDS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopChannelSubscriptionJob() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9da3527441cc3a637c322af21cff1918c47bdefa"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyOTE0Mg==", "bodyText": "very true", "url": "https://github.com/openhab/openhab-addons/pull/7401#discussion_r410429142", "createdAt": "2020-04-17T19:33:29Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -332,10 +333,34 @@ public void postUpdate(String channelId, State state) {\n             updateState(channelId, state);\n         }\n \n-        // channel subscription only works when on livetv app.\n-        if (CHANNEL_APP_LAUNCHER.equals(channelId) && APP_ID_LIVETV.equals(state.toString())) {\n-            channelHandlers.get(CHANNEL_CHANNEL).refreshSubscription(CHANNEL_CHANNEL, this);\n+        // channel subscription only works when livetv app is started,\n+        // therefore we need to slightly delay the subscription\n+        if (CHANNEL_APP_LAUNCHER.equals(channelId)) {\n+            if (APP_ID_LIVETV.equals(state.toString())) {\n+                scheduleChannelSubscriptionJob();\n+            } else {\n+                stopChannelSubscriptionJob();\n+            }\n+        }\n+    }\n+\n+    private void scheduleChannelSubscriptionJob() {\n+        ScheduledFuture<?> job = channelSubscriptionJob;\n+        if (job == null || job.isCancelled()) {\n+            logger.debug(\"Schedule channel subscription job\");\n+            channelSubscriptionJob = scheduler.schedule(\n+                    () -> channelHandlers.get(CHANNEL_CHANNEL).refreshSubscription(CHANNEL_CHANNEL, this),\n+                    CHANNEL_SUBSCRIPTION_DELAY_SECONDS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopChannelSubscriptionJob() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxOTc0MQ=="}, "originalCommit": {"oid": "9da3527441cc3a637c322af21cff1918c47bdefa"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 277, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}