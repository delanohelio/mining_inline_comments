{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NzIzMjA5", "number": 9146, "reviewThreads": {"totalCount": 68, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTo1ODowOFrOE-k4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNFQxNzo1NjoxM1rOF6N3Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDUxMzkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTo1ODowOFrOH7zjCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOTo1ODowOFrOH7zjCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3MjU4Ng==", "bodyText": "Can you remove the reference, as PaperUI will be removed in OH3?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532472586", "createdAt": "2020-11-30T09:58:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDYwMjgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDoxOTo0OFrOH70YTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDoxOTo0OFrOH70YTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ4NjIyMQ==", "bodyText": "PaperUI", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532486221", "createdAt": "2020-11-30T10:19:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |\n+| program_active | String | The active program of the device. | Yes |\n+| program_active_raw | Number | The raw active program of the device. | Yes |\n+| dish_warmer_program_active | String | The active program of the device. | No |\n+| vacuum_cleaner_program_active | String | The active program of the device. | No |\n+| program_phase | String | The phase of the active program. | Yes |\n+| program_phase_raw | Number | The raw phase of the active program. | Yes |\n+| operation_state | String | The operation state of the device. | Yes |\n+| operation_state_raw | Number | The raw operation state of the device. | Yes |\n+| program_start | Switch | Starts the currently selected program. | No |\n+| program_stop | Switch | Stops the currently selected program. | No |\n+| program_start_stop | String | Starts or stops the currently selected program. | No |\n+| program_start_stop_pause | String | Starts, stops or pauses the currently selected program. | No |\n+| power_state_on_off | String | Switches the device On or Off. | No |\n+| finish_state | Switch | Indicates whether the most recent program finished. | Yes |\n+| delayed_start_time | Number | The delayed start time of the selected program. | Yes |\n+| program_remaining_time | Number | The remaining time of the active program. | Yes |\n+| program_elapsed_time | Number | The elapsed time of the active program. | Yes |\n+| program_progress | Number | The progress of the active program. | Yes |\n+| drying_target | String | The target drying step of the laundry. | Yes |\n+| drying_target_raw | Number | The raw target drying step of the laundry. | Yes |\n+| pre_heat_finished | Switch | Indicates whether the pre-heating finished. | Yes |\n+| temperature_target | Number | The target temperature of the device. | Yes |\n+| temperature_current | Number | The currently measured temperature of the device. | Yes |\n+| ventilation_power | String | The current ventilation power of the hood. | Yes |\n+| ventilation_power_raw | Number | The current raw ventilation power of the hood. | Yes |\n+| error_state | Switch | Indication flag which signals an error state for the device. | Yes |\n+| info_state | Switch | Indication flag which signals an information of the device. | Yes |\n+| fridge_super_cool | Switch | Start the super cooling mode of the fridge. | No |\n+| freezer_super_freeze | Switch | Start the super freezing mode of the freezer. | No |\n+| super_cool_can_be_controlled | Switch | Indicates if super cooling can be toggled. | Yes |\n+| super_freeze_can_be_controlled | Switch | Indicates if super freezing can be toggled | Yes |\n+| fridge_temperature_target | Number | The target temperature of the fridge. | Yes |\n+| fridge_temperature_current | Number | The currently measured temperature of the fridge. | Yes |\n+| freezer_temperature_target | Number | The target temperature of the freezer. | Yes |\n+| freezer_temperature_current | Number | The currently measured temperature of the freezer. | Yes |\n+| top_temperature_target | Number | The target temperature of the top area. | Yes |\n+| top_temperature_current | Number | The currently measured temperature of the top area. | Yes |\n+| middle_temperature_target | Number | The target temperature of the middle area. | Yes |\n+| middle_temperature_current | Number | The currently measured temperature of the middle area. | Yes |\n+| bottom_temperature_target | Number | The target temperature of the bottom area. | Yes |\n+| bottom_temperature_current | Number | The currently measured temperature of the bottom area. | Yes |\n+| light_switch | Switch | Indicates if the light of the device is enabled. | No |\n+| light_can_be_controlled | Switch | Indicates if the light of the device can be controlled. | Yes |\n+| plate_is_present | Switch | Indicates if plate is present. | Yes |\n+| plate_power_step | String | The power level of the heating plate. | Yes |\n+| plate_power_step_raw | Number | The raw power level of the heating plate. | Yes |\n+| door_state | Switch | Indicates if the door of the device is open. | Yes |\n+| door_alarm | Switch | Indicates if the door alarm of the device is active. | Yes |\n+| battery_level | Number | The battery level of the robotic vacuum cleaner. | Yes |\n+\n+### Coffee System\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |\n+| remote_control_can_be_switched_off | remote_control_can_be_switched_off |\n+| program_active | program_active |\n+| program_active_raw | program_active_raw |\n+| program_phase | program_phase |\n+| program_phase_raw | program_phase_raw |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| finish_state | finish_state |\n+| power_state_on_off | power_state_on_off |\n+| program_remaining_time | program_remaining_time |\n+| program_elapsed_time | program_elapsed_time |\n+| error_state | error_state |\n+| info_state | info_state |\n+| light_switch | light_switch |\n+| light_can_be_controlled | light_can_be_controlled |\n+\n+### Dish Warmer\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |\n+| remote_control_can_be_switched_off | remote_control_can_be_switched_off |\n+| dish_warmer_program_active | dish_warmer_program_active |\n+| program_active_raw | program_active_raw |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| power_state_on_off | power_state_on_off |\n+| finish_state | finish_state |\n+| program_remaining_time | program_remaining_time |\n+| program_elapsed_time | program_elapsed_time |\n+| program_progress | program_progress |\n+| temperature_target | temperature_target |\n+| temperature_current | temperature_current |\n+| error_state | error_state |\n+| info_state | info_state |\n+| door_state | door_state |\n+\n+### Dishwasher\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |\n+| remote_control_can_be_switched_off | remote_control_can_be_switched_off |\n+| program_active | program_active |\n+| program_active_raw | program_active_raw |\n+| program_phase | program_phase |\n+| program_phase_raw | program_phase_raw |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| program_start_stop | program_start_stop |\n+| finish_state | finish_state |\n+| power_state_on_off | power_state_on_off |\n+| delayed_start_time | delayed_start_time |\n+| program_remaining_time | program_remaining_time |\n+| program_elapsed_time | program_elapsed_time |\n+| program_progress | program_progress |\n+| error_state | error_state |\n+| info_state | info_state |\n+| door_state | door_state |\n+\n+### Tumble Dryer\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |\n+| remote_control_can_be_switched_off | remote_control_can_be_switched_off |\n+| program_active | program_active |\n+| program_active_raw | program_active_raw |\n+| program_phase | program_phase |\n+| program_phase_raw | program_phase_raw |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| program_start_stop | program_start_stop |\n+| finish_state | finish_state |\n+| power_state_on_off | power_state_on_off |\n+| delayed_start_time | delayed_start_time |\n+| program_remaining_time | program_remaining_time |\n+| program_elapsed_time | program_elapsed_time |\n+| program_progress | program_progress |\n+| drying_target | drying_target |\n+| drying_target_raw | drying_target_raw |\n+| error_state | error_state |\n+| info_state | info_state |\n+| light_switch | light_switch |\n+| light_can_be_controlled | light_can_be_controlled |\n+| door_state | door_state |\n+\n+### Freezer\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| error_state | error_state |\n+| info_state | info_state |\n+| freezer_super_freeze | freezer_super_freeze |\n+| super_freeze_can_be_controlled | super_freeze_can_be_controlled |\n+| freezer_temperature_target | freezer_temperature_target |\n+| freezer_temperature_current | freezer_temperature_current |\n+| door_state | door_state |\n+| door_alarm | door_alarm |\n+\n+### Fridge\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| error_state | error_state |\n+| info_state | info_state |\n+| fridge_super_cool | fridge_super_cool |\n+| super_cool_can_be_controlled | super_cool_can_be_controlled |\n+| fridge_temperature_target | fridge_temperature_target |\n+| fridge_temperature_current | fridge_temperature_current |\n+| door_state | door_state |\n+| door_alarm | door_alarm |\n+\n+### Fridge Freezer\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| error_state | error_state |\n+| info_state | info_state |\n+| fridge_super_cool | fridge_super_cool |\n+| freezer_super_freeze | freezer_super_freeze |\n+| super_cool_can_be_controlled | super_cool_can_be_controlled |\n+| super_freeze_can_be_controlled | super_freeze_can_be_controlled |\n+| fridge_temperature_target | fridge_temperature_target |\n+| fridge_temperature_current | fridge_temperature_current |\n+| freezer_temperature_target | freezer_temperature_target |\n+| freezer_temperature_current | freezer_temperature_current |\n+| door_state | door_state |\n+| door_alarm | door_alarm |\n+\n+### Hob\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| error_state | error_state |\n+| info_state | info_state |\n+| plate_1_is_present | plate_is_present |\n+| plate_1_power_step | plate_power_step |\n+| plate_1_power_step_raw | plate_power_step_raw |\n+| plate_2_is_present | plate_is_present |\n+| plate_2_power_step | plate_power_step |\n+| plate_2_power_step_raw | plate_power_step_raw |\n+| plate_3_is_present | plate_is_present |\n+| plate_3_power_step | plate_power_step |\n+| plate_3_power_step_raw | plate_power_step_raw |\n+| plate_4_is_present | plate_is_present |\n+| plate_4_power_step | plate_power_step |\n+| plate_4_power_step_raw | plate_power_step_raw |\n+| plate_5_is_present | plate_is_present |\n+| plate_5_power_step | plate_power_step |\n+| plate_5_power_step_raw | plate_power_step_raw |\n+| plate_6_is_present | plate_is_present |\n+| plate_6_power_step | plate_power_step |\n+| plate_6_power_step_raw | plate_power_step_raw |\n+\n+### Hood\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |\n+| remote_control_can_be_switched_off | remote_control_can_be_switched_off |\n+| program_phase | program_phase |\n+| program_phase_raw | program_phase_raw |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| power_state_on_off | power_state_on_off |\n+| ventilation_power | ventilation_power |\n+| ventilation_power_raw | ventilation_power_raw |\n+| error_state | error_state |\n+| info_state | info_state |\n+| light_switch | light_switch |\n+| light_can_be_controlled | light_can_be_controlled |\n+\n+### Oven\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |\n+| remote_control_can_be_switched_off | remote_control_can_be_switched_off |\n+| program_active | program_active |\n+| program_active_raw | program_active_raw |\n+| program_phase | program_phase |\n+| program_phase_raw | program_phase_raw |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| program_start_stop | program_start_stop |\n+| finish_state | finish_state |\n+| power_state_on_off | power_state_on_off |\n+| delayed_start_time | delayed_start_time |\n+| program_remaining_time | program_remaining_time |\n+| program_elapsed_time | program_elapsed_time |\n+| program_progress | program_progress |\n+| pre_heat_finished | pre_heat_finished |\n+| temperature_target | temperature_target |\n+| temperature_current | temperature_current |\n+| error_state | error_state |\n+| info_state | info_state |\n+| light_switch | light_switch |\n+| light_can_be_controlled | light_can_be_controlled |\n+| door_state | door_state |\n+\n+### Robotic Vacuum Cleaner\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_paused | remote_control_can_be_paused |\n+| remote_control_can_set_program_active | remote_control_can_set_program_active |\n+| vacuum_cleaner_program_active | vacuum_cleaner_program_active |\n+| program_active_raw | program_active_raw |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| finish_state | finish_state |\n+| program_start_stop_pause | program_start_stop_pause |\n+| power_state_on_off | power_state_on_off |\n+| error_state | error_state |\n+| info_state | info_state |\n+| battery_level | battery_level |\n+\n+### Washer Dryer\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |\n+| remote_control_can_be_switched_off | remote_control_can_be_switched_off |\n+| spinning_speed | spinning_speed |\n+| spinning_speed_raw | spinning_speed_raw |\n+| program_active | program_active |\n+| program_active_raw | program_active_raw |\n+| program_phase | program_phase |\n+| program_phase_raw | program_phase_raw |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| program_start_stop | program_start_stop |\n+| finish_state | finish_state |\n+| power_state_on_off | power_state_on_off |\n+| delayed_start_time | delayed_start_time |\n+| program_remaining_time | program_remaining_time |\n+| program_elapsed_time | program_elapsed_time |\n+| program_progress | program_progress |\n+| drying_target | drying_target |\n+| drying_target_raw | drying_target_raw |\n+| error_state | error_state |\n+| info_state | info_state |\n+| temperature_target | temperature_target |\n+| light_switch | light_switch |\n+| light_can_be_controlled | light_can_be_controlled |\n+| door_state | door_state |\n+\n+### Washing Machine\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |\n+| remote_control_can_be_switched_off | remote_control_can_be_switched_off |\n+| spinning_speed | spinning_speed |\n+| spinning_speed_raw | spinning_speed_raw |\n+| program_active | program_active |\n+| program_active_raw | program_active_raw |\n+| program_phase | program_phase |\n+| program_phase_raw | program_phase_raw |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| program_start_stop | program_start_stop |\n+| finish_state | finish_state |\n+| power_state_on_off | power_state_on_off |\n+| delayed_start_time | delayed_start_time |\n+| program_remaining_time | program_remaining_time |\n+| program_elapsed_time | program_elapsed_time |\n+| program_progress | program_progress |\n+| error_state | error_state |\n+| info_state | info_state |\n+| temperature_target | temperature_target |\n+| light_switch | light_switch |\n+| light_can_be_controlled | light_can_be_controlled |\n+| door_state | door_state |\n+\n+### Wine Storage\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |\n+| remote_control_can_be_switched_off | remote_control_can_be_switched_off |\n+| operation_state | operation_state |\n+| operation_state_raw | operation_state_raw |\n+| power_state_on_off | power_state_on_off |\n+| error_state | error_state |\n+| info_state | info_state |\n+| temperature_target | temperature_target |\n+| temperature_current | temperature_current |\n+| top_temperature_target | top_temperature_target |\n+| top_temperature_current | top_temperature_current |\n+| middle_temperature_target | middle_temperature_target |\n+| middle_temperature_current | middle_temperature_current |\n+| bottom_temperature_target | bottom_temperature_target |\n+| bottom_temperature_current | bottom_temperature_current |\n+\n+### Note on plate_is_present and plate_power_step channels\n+\n+The `plate_x_is_present` channels show whether a plate is present on an appliance.\n+The plate numbers do not represent the physical layout of the plates on the appliance, but always start with the `plate_1_is_present` channel.\n+This means that a hob with two plates will have `plate_1_is_present` and `plate_2_is_present` active and all other `plate_x_is_present` channels inactive.\n+\n+The `plate_x_power_step` channels show the current power step of the according plate.\n+**Please note that different hobs may use dynamic numbering for plates.**\n+Hobs that use dynamic numbering will use the first power step channel that is currently at a power step of zero when the plate is turned on.\n+Additionally, when a plate is turned off all other plates with higher numbers will decrease their number by one.\n+For example if plate 1, 2 and 3 are active and plate 1 is turned off then plate 2 will become plate 1, plate 3 will become plate 2 and plate 3 will have a power step of zero.\n+This behavior is a fixed part of the affected appliances and cannot be changed.\n+\n+### Note on door_state channel\n+\n+The `door_state` channel might not always provide a value matching the actual state.\n+For example, a washing machine will not provide a valid `door_state` when the appliance is turned off.\n+A valid door state can be expected when the appliance is in one of the following raw operation states, compare the `operation_state_raw` channel:\n+\n+- `3`: Program selected\n+- `4`: Program selected, waiting to start\n+- `5`: Running\n+- `6`: Paused\n+\n+## Full Example\n+\n+### demo.things:\n+\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+}\n+```\n+\n+### demo.items:\n+\n+```\n+// Coffee system\n+Switch coffee_system_remote_control_can_be_started      { channel=\"mielecloud:coffee_system:home:000703261234:remote_control_can_be_started\" }\n+Switch coffee_system_remote_control_can_be_stopped      { channel=\"mielecloud:coffee_system:home:000703261234:remote_control_can_be_stopped\" }\n+Switch coffee_system_remote_control_can_be_switched_on  { channel=\"mielecloud:coffee_system:home:000703261234:remote_control_can_be_switched_on\" }\n+Switch coffee_system_remote_control_can_be_switched_off { channel=\"mielecloud:coffee_system:home:000703261234:remote_control_can_be_switched_off\" }\n+String coffee_system_program_active                     { channel=\"mielecloud:coffee_system:home:000703261234:program_active\" }\n+String coffee_system_program_phase                      { channel=\"mielecloud:coffee_system:home:000703261234:program_phase\" }\n+String coffee_system_power_state_on_off                 { channel=\"mielecloud:coffee_system:home:000703261234:power_state_on_off\" }\n+String coffee_system_operation_state                    { channel=\"mielecloud:coffee_system:home:000703261234:operation_state\" }\n+Switch coffee_system_finish_state                       { channel=\"mielecloud:coffee_system:home:000703261234:finish_state\" }\n+Number coffee_system_program_remaining_time             { channel=\"mielecloud:coffee_system:home:000703261234:program_remaining_time\" }\n+Switch coffee_system_error_state                        { channel=\"mielecloud:coffee_system:home:000703261234:error_state\" }\n+Switch coffee_system_info_state                         { channel=\"mielecloud:coffee_system:home:000703261234:info_state\" }\n+Switch coffee_system_light_switch                       { channel=\"mielecloud:coffee_system:home:000703261234:light_switch\" }\n+Switch coffee_system_light_can_be_controlled            { channel=\"mielecloud:coffee_system:home:000703261234:light_can_be_controlled\" }\n+\n+// Hob\n+Switch hob_remote_control_can_be_started { channel=\"mielecloud:hob:home:000160102345:remote_control_can_be_started\" }\n+Switch hob_remote_control_can_be_stopped { channel=\"mielecloud:hob:home:000160102345:remote_control_can_be_stopped\" }\n+String hob_operation_state               { channel=\"mielecloud:hob:home:000160102345:operation_state\" }\n+Switch hob_error_state                   { channel=\"mielecloud:hob:home:000160102345:error_state\" }\n+Switch hob_info_state                    { channel=\"mielecloud:hob:home:000160102345:info_state\" }\n+Switch hob_plate_1_is_present            { channel=\"mielecloud:hob:home:000160102345:plate_1_is_present\" }\n+String hob_plate_1_power_step            { channel=\"mielecloud:hob:home:000160102345:plate_1_power_step\" }\n+Switch hob_plate_2_is_present            { channel=\"mielecloud:hob:home:000160102345:plate_2_is_present\" }\n+String hob_plate_2_power_step            { channel=\"mielecloud:hob:home:000160102345:plate_2_power_step\" }\n+Switch hob_plate_3_is_present            { channel=\"mielecloud:hob:home:000160102345:plate_3_is_present\" }\n+String hob_plate_3_power_step            { channel=\"mielecloud:hob:home:000160102345:plate_3_power_step\" }\n+Switch hob_plate_4_is_present            { channel=\"mielecloud:hob:home:000160102345:plate_4_is_present\" }\n+String hob_plate_4_power_step            { channel=\"mielecloud:hob:home:000160102345:plate_4_power_step\" }\n+Switch hob_plate_5_is_present            { channel=\"mielecloud:hob:home:000160102345:plate_5_is_present\" }\n+String hob_plate_5_power_step            { channel=\"mielecloud:hob:home:000160102345:plate_5_power_step\" }\n+Switch hob_plate_6_is_present            { channel=\"mielecloud:hob:home:000160102345:plate_6_is_present\" }\n+String hob_plate_6_power_step            { channel=\"mielecloud:hob:home:000160102345:plate_6_power_step\" }\n+```\n+\n+### demo.sitemap:\n+\n+```\n+sitemap demo label=\"Kitchen\"\n+{\n+    Frame {\n+        // Coffee system\n+        Text    item=coffee_system_program_active\n+        Text    item=coffee_system_program_phase\n+        Text    item=coffee_system_power_state_on_off\n+        Text    item=coffee_system_operation_state\n+        Switch  item=coffee_system_finish_state\n+        Default item=coffee_system_program_remaining_time\n+        Switch  item=coffee_system_error_state\n+        Switch  item=coffee_system_info_state\n+        Switch  item=coffee_system_light_switch\n+\n+        // Hob\n+        Text   item=hob_operation_state\n+        Switch item=hob_error_state\n+        Switch item=hob_info_state\n+        Text   item=hob_plate_1_power_step\n+        Text   item=hob_plate_2_power_step\n+        Text   item=hob_plate_3_power_step\n+        Text   item=hob_plate_4_power_step\n+        Text   item=hob_plate_5_power_step\n+        Text   item=hob_plate_6_power_step\n+    }\n+}\n+```\n+\n+## Account Configuration Example\n+\n+The configuration UI is accessible at `https://<your openHAB address>/mielecloud`.\n+See [Discovery](#discovery) for a detailed description of how to open the configuration UI in a browser.\n+\n+When first opening the configuration UI no account will be paired.\n+\n+![Empty Account Overview](doc/account-overview-empty.png)\n+\n+We strongly recommend to use a secure connection for pairing, details on this topic can also be found in the [Discovery](#discovery) section.\n+Click `Pair Account` to start the pairing process.\n+If not already done, go to the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx), register there and wait for the confirmation e-mail.\n+Obtain your client ID and client secret according to the instructions presented there.\n+Once you obtained your client ID and client secret continue pairing by filling in your client ID, client secret and bridge ID.\n+You may choose any bridge ID you like as long as you only use letters, numbers, underscores and dashes.\n+The bridge ID entered here will become part of the thing UID of the paired account and cannot be changed later.\n+If you want to change the bridge ID you will need to remove the bridge and pair it again with the new bridge ID.\n+\n+![Pair Account](doc/pair-account.png)\n+\n+A click on `Pair Account` will take you to the Miele cloud service login form where you need to log in with the same account as you used for the Miele@mobile app.\n+\n+![Miele Login Form](doc/miele-login.png)\n+\n+When this is the first time you pair an account, you will need to allow openHAB to access your account.\n+\n+When everything worked, you are presented with a page stating that pairing was successful.\n+Select the locale which should be used to display localized texts in openHAB channels.\n+Note that there is currently an issue with the endpoint of the Miele cloud service which is used by the binding that prevents the locale setting from functioning correctly.\n+This will be fixed in the future.\n+From here, you have two options:\n+Either let the binding automatically configure a bridge instance or copy the presented things-file template to a things file and return to the overview page.\n+We recommend the former for reasons outlined under [Account Configuration](#account-configuration).\n+\n+![Pairing Successful](doc/pairing-success.png)\n+\n+Once the bridge instance is `ONLINE`, you can either pair things for all appliances via your favorite management UI, e.g. the Paper UI, or use a things-file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 637}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDYyMjI3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDoyNDozNlrOH70kJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNTo1ODowN1rOH8Btwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ4OTI1Mg==", "bodyText": "Some of the Channels seems to describe properties rather than changing values. You could make those properties. Same might apply for the plate present Channels.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532489252", "createdAt": "2020-11-30T10:24:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUxNzg1OA==", "bodyText": "We decided to use channels for the remote_control_* values because these are dynamically updated by the cloud based on the device state. Because of this we assumed them to be part of the \"state\" rather than a fixed \"property\". Do you think a property would be more suitable even if it is updated frequently? Our intend was to make scripting more comfortable and allow for generic rules. As far as I know properties cannot be accessed from within rules, is that still correct?\nThe plate_is_present channels are a different story, though. Making these properties is reasonable. What would be the preferred way in that case? Having one property plate count vs. having six boolean properties?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532517858", "createdAt": "2020-11-30T11:10:19Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ4OTI1Mg=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwNDcwNg==", "bodyText": "Channel is just right for remote_control_*, then.\nIf the plate count is only an information, I'd go for plate_count.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532704706", "createdAt": "2020-11-30T15:58:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ4OTI1Mg=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDY0MjE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDoyODo0MFrOH70vTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjowMzo0OFrOH8B-mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MjExMA==", "bodyText": "Did you take a look at Channel state descriptions? That might make the _raw Channels unnecessary.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532492110", "createdAt": "2020-11-30T10:28:40Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyODA1Mg==", "bodyText": "I assume you are referring to the <options> tag specifically, but using this is in our opinion not reasonably possible at the moment. In order to provide a full description of the possible options the list would have to be either static or accessible via the cloud. Unfortunately, both is not the case. I will use the active program / program ID as an example but the following outline applies to all channels that we defined raw channels for.\nThe list of possible options for the active program depends on the kind of device (oven, washing machine, ...) and on the specific model. Additionally, for some devices custom programs can be defined. Thus, we cannot statically list all possible values in the binding.\nAlso, there is no endpoint in the Miele 3rd Party API that supplies a list of possible values including translations. The only supplied information is the localized value of the currently selected / active program. We considered to dynamically alter the channel with these values once they are received but found it to be rather confusing than helpful from a user's perspective.\nHave other bindings had similar problems? How did they solve them? Or is our solution fine given these circumstances? If you have a good advice we will happily apply it.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532528052", "createdAt": "2020-11-30T11:29:00Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MjExMA=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcwOTAxOA==", "bodyText": "If you don't have a mapping of the options, it's barely possible to use state descriptions. I don't have any better solution.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532709018", "createdAt": "2020-11-30T16:03:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MjExMA=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDY0ODg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDozMDowNFrOH70zLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwOTozMjo1N1rOICLBCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MzEwMw==", "bodyText": "The Channel Type ID column seems to be redundant. Would a list be sufficient?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532493103", "createdAt": "2020-11-30T10:30:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |\n+| program_active | String | The active program of the device. | Yes |\n+| program_active_raw | Number | The raw active program of the device. | Yes |\n+| dish_warmer_program_active | String | The active program of the device. | No |\n+| vacuum_cleaner_program_active | String | The active program of the device. | No |\n+| program_phase | String | The phase of the active program. | Yes |\n+| program_phase_raw | Number | The raw phase of the active program. | Yes |\n+| operation_state | String | The operation state of the device. | Yes |\n+| operation_state_raw | Number | The raw operation state of the device. | Yes |\n+| program_start | Switch | Starts the currently selected program. | No |\n+| program_stop | Switch | Stops the currently selected program. | No |\n+| program_start_stop | String | Starts or stops the currently selected program. | No |\n+| program_start_stop_pause | String | Starts, stops or pauses the currently selected program. | No |\n+| power_state_on_off | String | Switches the device On or Off. | No |\n+| finish_state | Switch | Indicates whether the most recent program finished. | Yes |\n+| delayed_start_time | Number | The delayed start time of the selected program. | Yes |\n+| program_remaining_time | Number | The remaining time of the active program. | Yes |\n+| program_elapsed_time | Number | The elapsed time of the active program. | Yes |\n+| program_progress | Number | The progress of the active program. | Yes |\n+| drying_target | String | The target drying step of the laundry. | Yes |\n+| drying_target_raw | Number | The raw target drying step of the laundry. | Yes |\n+| pre_heat_finished | Switch | Indicates whether the pre-heating finished. | Yes |\n+| temperature_target | Number | The target temperature of the device. | Yes |\n+| temperature_current | Number | The currently measured temperature of the device. | Yes |\n+| ventilation_power | String | The current ventilation power of the hood. | Yes |\n+| ventilation_power_raw | Number | The current raw ventilation power of the hood. | Yes |\n+| error_state | Switch | Indication flag which signals an error state for the device. | Yes |\n+| info_state | Switch | Indication flag which signals an information of the device. | Yes |\n+| fridge_super_cool | Switch | Start the super cooling mode of the fridge. | No |\n+| freezer_super_freeze | Switch | Start the super freezing mode of the freezer. | No |\n+| super_cool_can_be_controlled | Switch | Indicates if super cooling can be toggled. | Yes |\n+| super_freeze_can_be_controlled | Switch | Indicates if super freezing can be toggled | Yes |\n+| fridge_temperature_target | Number | The target temperature of the fridge. | Yes |\n+| fridge_temperature_current | Number | The currently measured temperature of the fridge. | Yes |\n+| freezer_temperature_target | Number | The target temperature of the freezer. | Yes |\n+| freezer_temperature_current | Number | The currently measured temperature of the freezer. | Yes |\n+| top_temperature_target | Number | The target temperature of the top area. | Yes |\n+| top_temperature_current | Number | The currently measured temperature of the top area. | Yes |\n+| middle_temperature_target | Number | The target temperature of the middle area. | Yes |\n+| middle_temperature_current | Number | The currently measured temperature of the middle area. | Yes |\n+| bottom_temperature_target | Number | The target temperature of the bottom area. | Yes |\n+| bottom_temperature_current | Number | The currently measured temperature of the bottom area. | Yes |\n+| light_switch | Switch | Indicates if the light of the device is enabled. | No |\n+| light_can_be_controlled | Switch | Indicates if the light of the device can be controlled. | Yes |\n+| plate_is_present | Switch | Indicates if plate is present. | Yes |\n+| plate_power_step | String | The power level of the heating plate. | Yes |\n+| plate_power_step_raw | Number | The raw power level of the heating plate. | Yes |\n+| door_state | Switch | Indicates if the door of the device is open. | Yes |\n+| door_alarm | Switch | Indicates if the door alarm of the device is active. | Yes |\n+| battery_level | Number | The battery level of the robotic vacuum cleaner. | Yes |\n+\n+### Coffee System\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUzMDY5OQ==", "bodyText": "You're right, it is redundant in almost all cases. The sole exception is the hob which uses multiple channels of the same type for the plate_power_step channels. So, better make a list for all other devices and leave the table for the hob?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532530699", "createdAt": "2020-11-30T11:33:38Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |\n+| program_active | String | The active program of the device. | Yes |\n+| program_active_raw | Number | The raw active program of the device. | Yes |\n+| dish_warmer_program_active | String | The active program of the device. | No |\n+| vacuum_cleaner_program_active | String | The active program of the device. | No |\n+| program_phase | String | The phase of the active program. | Yes |\n+| program_phase_raw | Number | The raw phase of the active program. | Yes |\n+| operation_state | String | The operation state of the device. | Yes |\n+| operation_state_raw | Number | The raw operation state of the device. | Yes |\n+| program_start | Switch | Starts the currently selected program. | No |\n+| program_stop | Switch | Stops the currently selected program. | No |\n+| program_start_stop | String | Starts or stops the currently selected program. | No |\n+| program_start_stop_pause | String | Starts, stops or pauses the currently selected program. | No |\n+| power_state_on_off | String | Switches the device On or Off. | No |\n+| finish_state | Switch | Indicates whether the most recent program finished. | Yes |\n+| delayed_start_time | Number | The delayed start time of the selected program. | Yes |\n+| program_remaining_time | Number | The remaining time of the active program. | Yes |\n+| program_elapsed_time | Number | The elapsed time of the active program. | Yes |\n+| program_progress | Number | The progress of the active program. | Yes |\n+| drying_target | String | The target drying step of the laundry. | Yes |\n+| drying_target_raw | Number | The raw target drying step of the laundry. | Yes |\n+| pre_heat_finished | Switch | Indicates whether the pre-heating finished. | Yes |\n+| temperature_target | Number | The target temperature of the device. | Yes |\n+| temperature_current | Number | The currently measured temperature of the device. | Yes |\n+| ventilation_power | String | The current ventilation power of the hood. | Yes |\n+| ventilation_power_raw | Number | The current raw ventilation power of the hood. | Yes |\n+| error_state | Switch | Indication flag which signals an error state for the device. | Yes |\n+| info_state | Switch | Indication flag which signals an information of the device. | Yes |\n+| fridge_super_cool | Switch | Start the super cooling mode of the fridge. | No |\n+| freezer_super_freeze | Switch | Start the super freezing mode of the freezer. | No |\n+| super_cool_can_be_controlled | Switch | Indicates if super cooling can be toggled. | Yes |\n+| super_freeze_can_be_controlled | Switch | Indicates if super freezing can be toggled | Yes |\n+| fridge_temperature_target | Number | The target temperature of the fridge. | Yes |\n+| fridge_temperature_current | Number | The currently measured temperature of the fridge. | Yes |\n+| freezer_temperature_target | Number | The target temperature of the freezer. | Yes |\n+| freezer_temperature_current | Number | The currently measured temperature of the freezer. | Yes |\n+| top_temperature_target | Number | The target temperature of the top area. | Yes |\n+| top_temperature_current | Number | The currently measured temperature of the top area. | Yes |\n+| middle_temperature_target | Number | The target temperature of the middle area. | Yes |\n+| middle_temperature_current | Number | The currently measured temperature of the middle area. | Yes |\n+| bottom_temperature_target | Number | The target temperature of the bottom area. | Yes |\n+| bottom_temperature_current | Number | The currently measured temperature of the bottom area. | Yes |\n+| light_switch | Switch | Indicates if the light of the device is enabled. | No |\n+| light_can_be_controlled | Switch | Indicates if the light of the device can be controlled. | Yes |\n+| plate_is_present | Switch | Indicates if plate is present. | Yes |\n+| plate_power_step | String | The power level of the heating plate. | Yes |\n+| plate_power_step_raw | Number | The raw power level of the heating plate. | Yes |\n+| door_state | Switch | Indicates if the door of the device is open. | Yes |\n+| door_alarm | Switch | Indicates if the door alarm of the device is active. | Yes |\n+| battery_level | Number | The battery level of the robotic vacuum cleaner. | Yes |\n+\n+### Coffee System\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MzEwMw=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMDAyMg==", "bodyText": "I think that'd be better. I'm wondering why the Channel Type ID is important to the user at all?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r532710022", "createdAt": "2020-11-30T16:05:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |\n+| program_active | String | The active program of the device. | Yes |\n+| program_active_raw | Number | The raw active program of the device. | Yes |\n+| dish_warmer_program_active | String | The active program of the device. | No |\n+| vacuum_cleaner_program_active | String | The active program of the device. | No |\n+| program_phase | String | The phase of the active program. | Yes |\n+| program_phase_raw | Number | The raw phase of the active program. | Yes |\n+| operation_state | String | The operation state of the device. | Yes |\n+| operation_state_raw | Number | The raw operation state of the device. | Yes |\n+| program_start | Switch | Starts the currently selected program. | No |\n+| program_stop | Switch | Stops the currently selected program. | No |\n+| program_start_stop | String | Starts or stops the currently selected program. | No |\n+| program_start_stop_pause | String | Starts, stops or pauses the currently selected program. | No |\n+| power_state_on_off | String | Switches the device On or Off. | No |\n+| finish_state | Switch | Indicates whether the most recent program finished. | Yes |\n+| delayed_start_time | Number | The delayed start time of the selected program. | Yes |\n+| program_remaining_time | Number | The remaining time of the active program. | Yes |\n+| program_elapsed_time | Number | The elapsed time of the active program. | Yes |\n+| program_progress | Number | The progress of the active program. | Yes |\n+| drying_target | String | The target drying step of the laundry. | Yes |\n+| drying_target_raw | Number | The raw target drying step of the laundry. | Yes |\n+| pre_heat_finished | Switch | Indicates whether the pre-heating finished. | Yes |\n+| temperature_target | Number | The target temperature of the device. | Yes |\n+| temperature_current | Number | The currently measured temperature of the device. | Yes |\n+| ventilation_power | String | The current ventilation power of the hood. | Yes |\n+| ventilation_power_raw | Number | The current raw ventilation power of the hood. | Yes |\n+| error_state | Switch | Indication flag which signals an error state for the device. | Yes |\n+| info_state | Switch | Indication flag which signals an information of the device. | Yes |\n+| fridge_super_cool | Switch | Start the super cooling mode of the fridge. | No |\n+| freezer_super_freeze | Switch | Start the super freezing mode of the freezer. | No |\n+| super_cool_can_be_controlled | Switch | Indicates if super cooling can be toggled. | Yes |\n+| super_freeze_can_be_controlled | Switch | Indicates if super freezing can be toggled | Yes |\n+| fridge_temperature_target | Number | The target temperature of the fridge. | Yes |\n+| fridge_temperature_current | Number | The currently measured temperature of the fridge. | Yes |\n+| freezer_temperature_target | Number | The target temperature of the freezer. | Yes |\n+| freezer_temperature_current | Number | The currently measured temperature of the freezer. | Yes |\n+| top_temperature_target | Number | The target temperature of the top area. | Yes |\n+| top_temperature_current | Number | The currently measured temperature of the top area. | Yes |\n+| middle_temperature_target | Number | The target temperature of the middle area. | Yes |\n+| middle_temperature_current | Number | The currently measured temperature of the middle area. | Yes |\n+| bottom_temperature_target | Number | The target temperature of the bottom area. | Yes |\n+| bottom_temperature_current | Number | The currently measured temperature of the bottom area. | Yes |\n+| light_switch | Switch | Indicates if the light of the device is enabled. | No |\n+| light_can_be_controlled | Switch | Indicates if the light of the device can be controlled. | Yes |\n+| plate_is_present | Switch | Indicates if plate is present. | Yes |\n+| plate_power_step | String | The power level of the heating plate. | Yes |\n+| plate_power_step_raw | Number | The raw power level of the heating plate. | Yes |\n+| door_state | Switch | Indicates if the door of the device is open. | Yes |\n+| door_alarm | Switch | Indicates if the door alarm of the device is active. | Yes |\n+| battery_level | Number | The battery level of the robotic vacuum cleaner. | Yes |\n+\n+### Coffee System\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MzEwMw=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MDg4Ng==", "bodyText": "In order to define the correct type of item in .items files the user needs to know the type of the channel which is defined by the channel type. Therefore, we included it in the documentation.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r536040886", "createdAt": "2020-12-04T11:44:50Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |\n+| program_active | String | The active program of the device. | Yes |\n+| program_active_raw | Number | The raw active program of the device. | Yes |\n+| dish_warmer_program_active | String | The active program of the device. | No |\n+| vacuum_cleaner_program_active | String | The active program of the device. | No |\n+| program_phase | String | The phase of the active program. | Yes |\n+| program_phase_raw | Number | The raw phase of the active program. | Yes |\n+| operation_state | String | The operation state of the device. | Yes |\n+| operation_state_raw | Number | The raw operation state of the device. | Yes |\n+| program_start | Switch | Starts the currently selected program. | No |\n+| program_stop | Switch | Stops the currently selected program. | No |\n+| program_start_stop | String | Starts or stops the currently selected program. | No |\n+| program_start_stop_pause | String | Starts, stops or pauses the currently selected program. | No |\n+| power_state_on_off | String | Switches the device On or Off. | No |\n+| finish_state | Switch | Indicates whether the most recent program finished. | Yes |\n+| delayed_start_time | Number | The delayed start time of the selected program. | Yes |\n+| program_remaining_time | Number | The remaining time of the active program. | Yes |\n+| program_elapsed_time | Number | The elapsed time of the active program. | Yes |\n+| program_progress | Number | The progress of the active program. | Yes |\n+| drying_target | String | The target drying step of the laundry. | Yes |\n+| drying_target_raw | Number | The raw target drying step of the laundry. | Yes |\n+| pre_heat_finished | Switch | Indicates whether the pre-heating finished. | Yes |\n+| temperature_target | Number | The target temperature of the device. | Yes |\n+| temperature_current | Number | The currently measured temperature of the device. | Yes |\n+| ventilation_power | String | The current ventilation power of the hood. | Yes |\n+| ventilation_power_raw | Number | The current raw ventilation power of the hood. | Yes |\n+| error_state | Switch | Indication flag which signals an error state for the device. | Yes |\n+| info_state | Switch | Indication flag which signals an information of the device. | Yes |\n+| fridge_super_cool | Switch | Start the super cooling mode of the fridge. | No |\n+| freezer_super_freeze | Switch | Start the super freezing mode of the freezer. | No |\n+| super_cool_can_be_controlled | Switch | Indicates if super cooling can be toggled. | Yes |\n+| super_freeze_can_be_controlled | Switch | Indicates if super freezing can be toggled | Yes |\n+| fridge_temperature_target | Number | The target temperature of the fridge. | Yes |\n+| fridge_temperature_current | Number | The currently measured temperature of the fridge. | Yes |\n+| freezer_temperature_target | Number | The target temperature of the freezer. | Yes |\n+| freezer_temperature_current | Number | The currently measured temperature of the freezer. | Yes |\n+| top_temperature_target | Number | The target temperature of the top area. | Yes |\n+| top_temperature_current | Number | The currently measured temperature of the top area. | Yes |\n+| middle_temperature_target | Number | The target temperature of the middle area. | Yes |\n+| middle_temperature_current | Number | The currently measured temperature of the middle area. | Yes |\n+| bottom_temperature_target | Number | The target temperature of the bottom area. | Yes |\n+| bottom_temperature_current | Number | The currently measured temperature of the bottom area. | Yes |\n+| light_switch | Switch | Indicates if the light of the device is enabled. | No |\n+| light_can_be_controlled | Switch | Indicates if the light of the device can be controlled. | Yes |\n+| plate_is_present | Switch | Indicates if plate is present. | Yes |\n+| plate_power_step | String | The power level of the heating plate. | Yes |\n+| plate_power_step_raw | Number | The raw power level of the heating plate. | Yes |\n+| door_state | Switch | Indicates if the door of the device is open. | Yes |\n+| door_alarm | Switch | Indicates if the door alarm of the device is active. | Yes |\n+| battery_level | Number | The battery level of the robotic vacuum cleaner. | Yes |\n+\n+### Coffee System\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MzEwMw=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5MDIyMg==", "bodyText": "Understood. You could add the Item type to the Channels in the lists which differ from above table.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537090222", "createdAt": "2020-12-06T17:53:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |\n+| program_active | String | The active program of the device. | Yes |\n+| program_active_raw | Number | The raw active program of the device. | Yes |\n+| dish_warmer_program_active | String | The active program of the device. | No |\n+| vacuum_cleaner_program_active | String | The active program of the device. | No |\n+| program_phase | String | The phase of the active program. | Yes |\n+| program_phase_raw | Number | The raw phase of the active program. | Yes |\n+| operation_state | String | The operation state of the device. | Yes |\n+| operation_state_raw | Number | The raw operation state of the device. | Yes |\n+| program_start | Switch | Starts the currently selected program. | No |\n+| program_stop | Switch | Stops the currently selected program. | No |\n+| program_start_stop | String | Starts or stops the currently selected program. | No |\n+| program_start_stop_pause | String | Starts, stops or pauses the currently selected program. | No |\n+| power_state_on_off | String | Switches the device On or Off. | No |\n+| finish_state | Switch | Indicates whether the most recent program finished. | Yes |\n+| delayed_start_time | Number | The delayed start time of the selected program. | Yes |\n+| program_remaining_time | Number | The remaining time of the active program. | Yes |\n+| program_elapsed_time | Number | The elapsed time of the active program. | Yes |\n+| program_progress | Number | The progress of the active program. | Yes |\n+| drying_target | String | The target drying step of the laundry. | Yes |\n+| drying_target_raw | Number | The raw target drying step of the laundry. | Yes |\n+| pre_heat_finished | Switch | Indicates whether the pre-heating finished. | Yes |\n+| temperature_target | Number | The target temperature of the device. | Yes |\n+| temperature_current | Number | The currently measured temperature of the device. | Yes |\n+| ventilation_power | String | The current ventilation power of the hood. | Yes |\n+| ventilation_power_raw | Number | The current raw ventilation power of the hood. | Yes |\n+| error_state | Switch | Indication flag which signals an error state for the device. | Yes |\n+| info_state | Switch | Indication flag which signals an information of the device. | Yes |\n+| fridge_super_cool | Switch | Start the super cooling mode of the fridge. | No |\n+| freezer_super_freeze | Switch | Start the super freezing mode of the freezer. | No |\n+| super_cool_can_be_controlled | Switch | Indicates if super cooling can be toggled. | Yes |\n+| super_freeze_can_be_controlled | Switch | Indicates if super freezing can be toggled | Yes |\n+| fridge_temperature_target | Number | The target temperature of the fridge. | Yes |\n+| fridge_temperature_current | Number | The currently measured temperature of the fridge. | Yes |\n+| freezer_temperature_target | Number | The target temperature of the freezer. | Yes |\n+| freezer_temperature_current | Number | The currently measured temperature of the freezer. | Yes |\n+| top_temperature_target | Number | The target temperature of the top area. | Yes |\n+| top_temperature_current | Number | The currently measured temperature of the top area. | Yes |\n+| middle_temperature_target | Number | The target temperature of the middle area. | Yes |\n+| middle_temperature_current | Number | The currently measured temperature of the middle area. | Yes |\n+| bottom_temperature_target | Number | The target temperature of the bottom area. | Yes |\n+| bottom_temperature_current | Number | The currently measured temperature of the bottom area. | Yes |\n+| light_switch | Switch | Indicates if the light of the device is enabled. | No |\n+| light_can_be_controlled | Switch | Indicates if the light of the device can be controlled. | Yes |\n+| plate_is_present | Switch | Indicates if plate is present. | Yes |\n+| plate_power_step | String | The power level of the heating plate. | Yes |\n+| plate_power_step_raw | Number | The raw power level of the heating plate. | Yes |\n+| door_state | Switch | Indicates if the door of the device is open. | Yes |\n+| door_alarm | Switch | Indicates if the door alarm of the device is active. | Yes |\n+| battery_level | Number | The battery level of the robotic vacuum cleaner. | Yes |\n+\n+### Coffee System\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MzEwMw=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE0ODU1NA==", "bodyText": "I changed everything to lists, the only special case is the hob where I used some additional text to explain.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r539148554", "createdAt": "2020-12-09T09:32:57Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,648 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI, e.g. the PaperUI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+\n+| Channel Type ID               | Item Type            | Description                                                                                                                               | Read only |\n+| ----------------------------- | -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n+| remote_control_can_be_started | Switch | Indicates if this device can be started remotely. | Yes |\n+| remote_control_can_be_stopped | Switch | Indicates if this device can be stopped remotely. | Yes |\n+| remote_control_can_be_paused | Switch | Indicates if this device can be paused remotely. | Yes |\n+| remote_control_can_be_switched_on | Switch | Indicates if the device can be switched on remotely. | Yes |\n+| remote_control_can_be_switched_off | Switch | Indicates if the device can be switched off remotely. | Yes |\n+| remote_control_can_set_program_active | Switch | Indicates if the active program of the device can be set remotely. | Yes |\n+| spinning_speed | String | The spinning speed of the active program. | Yes |\n+| spinning_speed_raw | Number | The raw spinning speed of the active program. | Yes |\n+| program_active | String | The active program of the device. | Yes |\n+| program_active_raw | Number | The raw active program of the device. | Yes |\n+| dish_warmer_program_active | String | The active program of the device. | No |\n+| vacuum_cleaner_program_active | String | The active program of the device. | No |\n+| program_phase | String | The phase of the active program. | Yes |\n+| program_phase_raw | Number | The raw phase of the active program. | Yes |\n+| operation_state | String | The operation state of the device. | Yes |\n+| operation_state_raw | Number | The raw operation state of the device. | Yes |\n+| program_start | Switch | Starts the currently selected program. | No |\n+| program_stop | Switch | Stops the currently selected program. | No |\n+| program_start_stop | String | Starts or stops the currently selected program. | No |\n+| program_start_stop_pause | String | Starts, stops or pauses the currently selected program. | No |\n+| power_state_on_off | String | Switches the device On or Off. | No |\n+| finish_state | Switch | Indicates whether the most recent program finished. | Yes |\n+| delayed_start_time | Number | The delayed start time of the selected program. | Yes |\n+| program_remaining_time | Number | The remaining time of the active program. | Yes |\n+| program_elapsed_time | Number | The elapsed time of the active program. | Yes |\n+| program_progress | Number | The progress of the active program. | Yes |\n+| drying_target | String | The target drying step of the laundry. | Yes |\n+| drying_target_raw | Number | The raw target drying step of the laundry. | Yes |\n+| pre_heat_finished | Switch | Indicates whether the pre-heating finished. | Yes |\n+| temperature_target | Number | The target temperature of the device. | Yes |\n+| temperature_current | Number | The currently measured temperature of the device. | Yes |\n+| ventilation_power | String | The current ventilation power of the hood. | Yes |\n+| ventilation_power_raw | Number | The current raw ventilation power of the hood. | Yes |\n+| error_state | Switch | Indication flag which signals an error state for the device. | Yes |\n+| info_state | Switch | Indication flag which signals an information of the device. | Yes |\n+| fridge_super_cool | Switch | Start the super cooling mode of the fridge. | No |\n+| freezer_super_freeze | Switch | Start the super freezing mode of the freezer. | No |\n+| super_cool_can_be_controlled | Switch | Indicates if super cooling can be toggled. | Yes |\n+| super_freeze_can_be_controlled | Switch | Indicates if super freezing can be toggled | Yes |\n+| fridge_temperature_target | Number | The target temperature of the fridge. | Yes |\n+| fridge_temperature_current | Number | The currently measured temperature of the fridge. | Yes |\n+| freezer_temperature_target | Number | The target temperature of the freezer. | Yes |\n+| freezer_temperature_current | Number | The currently measured temperature of the freezer. | Yes |\n+| top_temperature_target | Number | The target temperature of the top area. | Yes |\n+| top_temperature_current | Number | The currently measured temperature of the top area. | Yes |\n+| middle_temperature_target | Number | The target temperature of the middle area. | Yes |\n+| middle_temperature_current | Number | The currently measured temperature of the middle area. | Yes |\n+| bottom_temperature_target | Number | The target temperature of the bottom area. | Yes |\n+| bottom_temperature_current | Number | The currently measured temperature of the bottom area. | Yes |\n+| light_switch | Switch | Indicates if the light of the device is enabled. | No |\n+| light_can_be_controlled | Switch | Indicates if the light of the device can be controlled. | Yes |\n+| plate_is_present | Switch | Indicates if plate is present. | Yes |\n+| plate_power_step | String | The power level of the heating plate. | Yes |\n+| plate_power_step_raw | Number | The raw power level of the heating plate. | Yes |\n+| door_state | Switch | Indicates if the door of the device is open. | Yes |\n+| door_alarm | Switch | Indicates if the door alarm of the device is active. | Yes |\n+| battery_level | Number | The battery level of the robotic vacuum cleaner. | Yes |\n+\n+### Coffee System\n+\n+| Channel ID | Channel Type ID |\n+| ---------- | --------------- |\n+| remote_control_can_be_started | remote_control_can_be_started |\n+| remote_control_can_be_stopped | remote_control_can_be_stopped |\n+| remote_control_can_be_switched_on | remote_control_can_be_switched_on |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ5MzEwMw=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODAxNDUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/feature/feature.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0ODowOFrOH869bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo1MjowOVrOH_Nlbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0MjYwNA==", "bodyText": "Is the capitalization correct?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r533642604", "createdAt": "2020-12-01T18:48:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+\tCopyright (c) 2010-2020 Contributors to the openHAB project\n+\n+\tSee the NOTICE file(s) distributed with this work for additional\n+\tinformation.\n+\n+\tThis program and the accompanying materials are made available under the\n+\tterms of the Eclipse Public License 2.0 which is available at\n+\thttp://www.eclipse.org/legal/epl-2.0\n+\n+\tSPDX-License-Identifier: EPL-2.0\n+\n+-->\n+<features name=\"org.openhab.binding.mielecloud-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-mielecloud\" description=\"mielecloud Binding\" version=\"${project.version}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NDkxMA==", "bodyText": "No, that one slipped us.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r536044910", "createdAt": "2020-12-04T11:52:09Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+\tCopyright (c) 2010-2020 Contributors to the openHAB project\n+\n+\tSee the NOTICE file(s) distributed with this work for additional\n+\tinformation.\n+\n+\tThis program and the accompanying materials are made available under the\n+\tterms of the Eclipse Public License 2.0 which is available at\n+\thttp://www.eclipse.org/legal/epl-2.0\n+\n+\tSPDX-License-Identifier: EPL-2.0\n+\n+-->\n+<features name=\"org.openhab.binding.mielecloud-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-mielecloud\" description=\"mielecloud Binding\" version=\"${project.version}\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0MjYwNA=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODAyNTM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/MieleCloudBindingConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo1MDo1NFrOH87ELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjowMDo1NFrOH_N36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NDMzMg==", "bodyText": "Does this annotation has any effect? Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r533644332", "createdAt": "2020-12-01T18:50:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/MieleCloudBindingConstants.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link MieleCloudBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Added locale config parameter, added i18n key collection\n+ * @author Benjamin Bolte - Add pre-heat finished and plate step channels, door state and door alarm channels, info\n+ *         state channel and map signal flags from API\n+ * @author Bj\u00f6rn Lange - Add elapsed time channel, dish warmer thing\n+ */\n+@NonNullByDefault\n+public final class MieleCloudBindingConstants {\n+\n+    private MieleCloudBindingConstants() {\n+    }\n+\n+    /**\n+     * ID of the binding.\n+     */\n+    public static final String BINDING_ID = \"mielecloud\";\n+\n+    /**\n+     * Thing type ID of Miele cloud bridges / accounts.\n+     */\n+    public static final String BRIDGE_TYPE_ID = \"account\";\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele cloud bridges / accounts.\n+     */\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, BRIDGE_TYPE_ID);\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele washing machines.\n+     */\n+    public static final ThingTypeUID THING_TYPE_WASHING_MACHINE = new ThingTypeUID(BINDING_ID, \"washing_machine\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele washer-dryers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_WASHER_DRYER = new ThingTypeUID(BINDING_ID, \"washer_dryer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele coffee machines.\n+     */\n+    public static final ThingTypeUID THING_TYPE_COFFEE_SYSTEM = new ThingTypeUID(BINDING_ID, \"coffee_system\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele fridge-freezers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_FRIDGE_FREEZER = new ThingTypeUID(BINDING_ID, \"fridge_freezer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele fridges.\n+     */\n+    public static final ThingTypeUID THING_TYPE_FRIDGE = new ThingTypeUID(BINDING_ID, \"fridge\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele freezers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_FREEZER = new ThingTypeUID(BINDING_ID, \"freezer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele ovens.\n+     */\n+    public static final ThingTypeUID THING_TYPE_OVEN = new ThingTypeUID(BINDING_ID, \"oven\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele hobs.\n+     */\n+    public static final ThingTypeUID THING_TYPE_HOB = new ThingTypeUID(BINDING_ID, \"hob\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele wine storages.\n+     */\n+    public static final ThingTypeUID THING_TYPE_WINE_STORAGE = new ThingTypeUID(BINDING_ID, \"wine_storage\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele dishwashers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_DISHWASHER = new ThingTypeUID(BINDING_ID, \"dishwasher\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele dryers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_DRYER = new ThingTypeUID(BINDING_ID, \"dryer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele hoods.\n+     */\n+    public static final ThingTypeUID THING_TYPE_HOOD = new ThingTypeUID(BINDING_ID, \"hood\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele dish warmers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_DISH_WARMER = new ThingTypeUID(BINDING_ID, \"dish_warmer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele robotic vacuum cleaners.\n+     */\n+    public static final ThingTypeUID THING_TYPE_ROBOTIC_VACUUM_CLEANER = new ThingTypeUID(BINDING_ID,\n+            \"robotic_vacuum_cleaner\");\n+\n+    /**\n+     * Name of the property storing the OAuth2 access token.\n+     */\n+    public static final String PROPERTY_ACCESS_TOKEN = \"accessToken\";\n+\n+    /**\n+     * Name of the configuration parameter for the locale. The locale is stored as a 2-letter language code.\n+     */\n+    public static final String CONFIG_PARAM_LOCALE = \"locale\";\n+\n+    /**\n+     * Constants for all channels.\n+     */\n+    @NonNullByDefault({})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0OTY0MQ==", "bodyText": "The build for openHAB 2.5.x used to warn on internal classes that they should be annotated with @NonNullByDefault although the containing class was annotated. This was our workaround. I checked and it seems it isn't necessary any more so I will remove these annotations.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r536049641", "createdAt": "2020-12-04T12:00:54Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/MieleCloudBindingConstants.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link MieleCloudBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Added locale config parameter, added i18n key collection\n+ * @author Benjamin Bolte - Add pre-heat finished and plate step channels, door state and door alarm channels, info\n+ *         state channel and map signal flags from API\n+ * @author Bj\u00f6rn Lange - Add elapsed time channel, dish warmer thing\n+ */\n+@NonNullByDefault\n+public final class MieleCloudBindingConstants {\n+\n+    private MieleCloudBindingConstants() {\n+    }\n+\n+    /**\n+     * ID of the binding.\n+     */\n+    public static final String BINDING_ID = \"mielecloud\";\n+\n+    /**\n+     * Thing type ID of Miele cloud bridges / accounts.\n+     */\n+    public static final String BRIDGE_TYPE_ID = \"account\";\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele cloud bridges / accounts.\n+     */\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, BRIDGE_TYPE_ID);\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele washing machines.\n+     */\n+    public static final ThingTypeUID THING_TYPE_WASHING_MACHINE = new ThingTypeUID(BINDING_ID, \"washing_machine\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele washer-dryers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_WASHER_DRYER = new ThingTypeUID(BINDING_ID, \"washer_dryer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele coffee machines.\n+     */\n+    public static final ThingTypeUID THING_TYPE_COFFEE_SYSTEM = new ThingTypeUID(BINDING_ID, \"coffee_system\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele fridge-freezers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_FRIDGE_FREEZER = new ThingTypeUID(BINDING_ID, \"fridge_freezer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele fridges.\n+     */\n+    public static final ThingTypeUID THING_TYPE_FRIDGE = new ThingTypeUID(BINDING_ID, \"fridge\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele freezers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_FREEZER = new ThingTypeUID(BINDING_ID, \"freezer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele ovens.\n+     */\n+    public static final ThingTypeUID THING_TYPE_OVEN = new ThingTypeUID(BINDING_ID, \"oven\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele hobs.\n+     */\n+    public static final ThingTypeUID THING_TYPE_HOB = new ThingTypeUID(BINDING_ID, \"hob\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele wine storages.\n+     */\n+    public static final ThingTypeUID THING_TYPE_WINE_STORAGE = new ThingTypeUID(BINDING_ID, \"wine_storage\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele dishwashers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_DISHWASHER = new ThingTypeUID(BINDING_ID, \"dishwasher\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele dryers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_DRYER = new ThingTypeUID(BINDING_ID, \"dryer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele hoods.\n+     */\n+    public static final ThingTypeUID THING_TYPE_HOOD = new ThingTypeUID(BINDING_ID, \"hood\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele dish warmers.\n+     */\n+    public static final ThingTypeUID THING_TYPE_DISH_WARMER = new ThingTypeUID(BINDING_ID, \"dish_warmer\");\n+\n+    /**\n+     * The {@link ThingTypeUID} of Miele robotic vacuum cleaners.\n+     */\n+    public static final ThingTypeUID THING_TYPE_ROBOTIC_VACUUM_CLEANER = new ThingTypeUID(BINDING_ID,\n+            \"robotic_vacuum_cleaner\");\n+\n+    /**\n+     * Name of the property storing the OAuth2 access token.\n+     */\n+    public static final String PROPERTY_ACCESS_TOKEN = \"accessToken\";\n+\n+    /**\n+     * Name of the configuration parameter for the locale. The locale is stored as a 2-letter language code.\n+     */\n+    public static final String CONFIG_PARAM_LOCALE = \"locale\";\n+\n+    /**\n+     * Constants for all channels.\n+     */\n+    @NonNullByDefault({})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NDMzMg=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODAyNzY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OAuthException.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo1MTozM1rOH87FlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNzo1NzoxNVrOIANbfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NDY5Mg==", "bodyText": "Did you make this an unchecked exception by intention?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r533644692", "createdAt": "2020-12-01T18:51:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OAuthException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Indicates an error in the OAuth2 authorization process.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OAuthException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA1Mjc3NQ==", "bodyText": "Yes, we actually prefer unchecked exceptions. Shall we change it to a checked one?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r536052775", "createdAt": "2020-12-04T12:06:52Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OAuthException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Indicates an error in the OAuth2 authorization process.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OAuthException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NDY5Mg=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5MDk0MQ==", "bodyText": "That would fit better to the other code in this repo, but I won't insist on it. As you're using many lambdas converting could be painful.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537090941", "createdAt": "2020-12-06T17:57:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OAuthException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Indicates an error in the OAuth2 authorization process.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OAuthException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NDY5Mg=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODAyOTc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo1MjowOVrOH87G9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNzo1ODowMlrOIANcKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NTA0NQ==", "bodyText": "You could inject this via the constructor to avoid the Nullable annotation. The framework takes care, that this is not null. Same for MieleCloudConfigService.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r533645045", "createdAt": "2020-12-01T18:52:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4MzAxOQ==", "bodyText": "Thank you for pointing this out! It saves a lot of trouble. Is this also possible for MieleHandlerFactory?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r536083019", "createdAt": "2020-12-04T13:00:59Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NTA0NQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5MTExNQ==", "bodyText": "Yes.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537091115", "createdAt": "2020-12-06T17:58:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0NTA0NQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODA1NzUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo1OTowM1rOH87YCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNzo1ODo0OFrOIANclg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0OTQxNw==", "bodyText": "What type of exception do you expect here? Can you specify the concrete type?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r533649417", "createdAt": "2020-12-01T18:59:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;\n+    private Map<String, @Nullable AccessTokenRefreshListener> listenerByServiceHandle = new HashMap<>();\n+\n+    @Reference\n+    public void setOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = oauthFactory;\n+    }\n+\n+    public void unsetOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = null;\n+    }\n+\n+    @Override\n+    public void setRefreshListener(OAuthTokenRefreshListener listener, String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = tokenResponse -> {\n+            final String accessToken = tokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                // Fail without exception to ensure that the OAuthClientService notifies all listeners.\n+                logger.warn(\"Ignoring access token response without access token.\");\n+            } else {\n+                listener.onNewAccessToken(accessToken);\n+            }\n+        };\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        clientService.addAccessTokenRefreshListener(refreshListener);\n+        listenerByServiceHandle.put(serviceHandle, refreshListener);\n+    }\n+\n+    @Override\n+    public void unsetRefreshListener(String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = listenerByServiceHandle.get(serviceHandle);\n+        if (refreshListener != null) {\n+            try {\n+                OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+                clientService.removeAccessTokenRefreshListener(refreshListener);\n+            } catch (OAuthException e) {\n+                logger.warn(\"Failed to remove refresh listener: OAuth client service is unavailable.\");\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        }\n+        listenerByServiceHandle.remove(serviceHandle);\n+    }\n+\n+    @Override\n+    public void refreshToken(String serviceHandle) {\n+        if (listenerByServiceHandle.get(serviceHandle) == null) {\n+            logger.warn(\"Token refreshing was requested but there is no token refresh listener registered!\");\n+            return;\n+        }\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        refreshAccessToken(clientService);\n+    }\n+\n+    private OAuthClientService getOAuthClientService(String serviceHandle) {\n+        final OAuthFactory oauthFactory = this.oauthFactory;\n+        if (oauthFactory == null) {\n+            throw new OAuthException(\"OAuth factory is not available.\");\n+        }\n+\n+        final OAuthClientService clientService = oauthFactory.getOAuthClientService(serviceHandle);\n+        if (clientService == null) {\n+            throw new OAuthException(\"OAuth client service is not available.\");\n+        }\n+        return clientService;\n+    }\n+\n+    private void refreshAccessToken(OAuthClientService clientService) {\n+        try {\n+            final AccessTokenResponse accessTokenResponse = clientService.refreshToken();\n+            final String accessToken = accessTokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                throw new OAuthException(\"Access token is not available.\");\n+            }\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"An error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (IOException e) {\n+            throw new OAuthException(\"A network error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (OAuthResponseException e) {\n+            throw new OAuthException(\"Miele cloud service returned an illegal response: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<String> getAccessTokenFromStorage(String serviceHandle) {\n+        try {\n+            AccessTokenResponse tokenResponse = getOAuthClientService(serviceHandle).getAccessTokenResponse();\n+            if (tokenResponse == null) {\n+                return Optional.empty();\n+            } else {\n+                return Optional.of(tokenResponse.getAccessToken());\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwNzE3Ng==", "bodyText": "We expect multiple exceptions here:\n\norg.openhab.binding.mielecloud.internal.auth.OAuthException: If the OAuthClientService is not available\nIOException: If a network/IO issue occurs while getting the access token response\nOAuthErrorException / OAuthResponseException: If an OAUTH error response was returned by the cloud while getting the access token response\nOAuthException: For other exceptions that occurred  while getting the access token response\n\nThe latter three come from OAuthClientService.getAccessTokenResponse() (btw. the documentation seems to be outdated there). We want to handle all these exceptions the same way and their common parent is, well, Exception.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r536107176", "createdAt": "2020-12-04T13:41:27Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;\n+    private Map<String, @Nullable AccessTokenRefreshListener> listenerByServiceHandle = new HashMap<>();\n+\n+    @Reference\n+    public void setOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = oauthFactory;\n+    }\n+\n+    public void unsetOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = null;\n+    }\n+\n+    @Override\n+    public void setRefreshListener(OAuthTokenRefreshListener listener, String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = tokenResponse -> {\n+            final String accessToken = tokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                // Fail without exception to ensure that the OAuthClientService notifies all listeners.\n+                logger.warn(\"Ignoring access token response without access token.\");\n+            } else {\n+                listener.onNewAccessToken(accessToken);\n+            }\n+        };\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        clientService.addAccessTokenRefreshListener(refreshListener);\n+        listenerByServiceHandle.put(serviceHandle, refreshListener);\n+    }\n+\n+    @Override\n+    public void unsetRefreshListener(String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = listenerByServiceHandle.get(serviceHandle);\n+        if (refreshListener != null) {\n+            try {\n+                OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+                clientService.removeAccessTokenRefreshListener(refreshListener);\n+            } catch (OAuthException e) {\n+                logger.warn(\"Failed to remove refresh listener: OAuth client service is unavailable.\");\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        }\n+        listenerByServiceHandle.remove(serviceHandle);\n+    }\n+\n+    @Override\n+    public void refreshToken(String serviceHandle) {\n+        if (listenerByServiceHandle.get(serviceHandle) == null) {\n+            logger.warn(\"Token refreshing was requested but there is no token refresh listener registered!\");\n+            return;\n+        }\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        refreshAccessToken(clientService);\n+    }\n+\n+    private OAuthClientService getOAuthClientService(String serviceHandle) {\n+        final OAuthFactory oauthFactory = this.oauthFactory;\n+        if (oauthFactory == null) {\n+            throw new OAuthException(\"OAuth factory is not available.\");\n+        }\n+\n+        final OAuthClientService clientService = oauthFactory.getOAuthClientService(serviceHandle);\n+        if (clientService == null) {\n+            throw new OAuthException(\"OAuth client service is not available.\");\n+        }\n+        return clientService;\n+    }\n+\n+    private void refreshAccessToken(OAuthClientService clientService) {\n+        try {\n+            final AccessTokenResponse accessTokenResponse = clientService.refreshToken();\n+            final String accessToken = accessTokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                throw new OAuthException(\"Access token is not available.\");\n+            }\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"An error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (IOException e) {\n+            throw new OAuthException(\"A network error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (OAuthResponseException e) {\n+            throw new OAuthException(\"Miele cloud service returned an illegal response: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<String> getAccessTokenFromStorage(String serviceHandle) {\n+        try {\n+            AccessTokenResponse tokenResponse = getOAuthClientService(serviceHandle).getAccessTokenResponse();\n+            if (tokenResponse == null) {\n+                return Optional.empty();\n+            } else {\n+                return Optional.of(tokenResponse.getAccessToken());\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0OTQxNw=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjc5NjU5Nw==", "bodyText": "In general you want to avoid catching Exception unless you are handling all cases of Exception.  If you have multiple exception types and want to handle them the same way you use multi-catch:\ncatch (OAuthException | IOException | OAuthErrorException | OAuthResponseException( {", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r536796597", "createdAt": "2020-12-05T14:42:50Z", "author": {"login": "boc-tothefuture"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;\n+    private Map<String, @Nullable AccessTokenRefreshListener> listenerByServiceHandle = new HashMap<>();\n+\n+    @Reference\n+    public void setOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = oauthFactory;\n+    }\n+\n+    public void unsetOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = null;\n+    }\n+\n+    @Override\n+    public void setRefreshListener(OAuthTokenRefreshListener listener, String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = tokenResponse -> {\n+            final String accessToken = tokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                // Fail without exception to ensure that the OAuthClientService notifies all listeners.\n+                logger.warn(\"Ignoring access token response without access token.\");\n+            } else {\n+                listener.onNewAccessToken(accessToken);\n+            }\n+        };\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        clientService.addAccessTokenRefreshListener(refreshListener);\n+        listenerByServiceHandle.put(serviceHandle, refreshListener);\n+    }\n+\n+    @Override\n+    public void unsetRefreshListener(String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = listenerByServiceHandle.get(serviceHandle);\n+        if (refreshListener != null) {\n+            try {\n+                OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+                clientService.removeAccessTokenRefreshListener(refreshListener);\n+            } catch (OAuthException e) {\n+                logger.warn(\"Failed to remove refresh listener: OAuth client service is unavailable.\");\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        }\n+        listenerByServiceHandle.remove(serviceHandle);\n+    }\n+\n+    @Override\n+    public void refreshToken(String serviceHandle) {\n+        if (listenerByServiceHandle.get(serviceHandle) == null) {\n+            logger.warn(\"Token refreshing was requested but there is no token refresh listener registered!\");\n+            return;\n+        }\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        refreshAccessToken(clientService);\n+    }\n+\n+    private OAuthClientService getOAuthClientService(String serviceHandle) {\n+        final OAuthFactory oauthFactory = this.oauthFactory;\n+        if (oauthFactory == null) {\n+            throw new OAuthException(\"OAuth factory is not available.\");\n+        }\n+\n+        final OAuthClientService clientService = oauthFactory.getOAuthClientService(serviceHandle);\n+        if (clientService == null) {\n+            throw new OAuthException(\"OAuth client service is not available.\");\n+        }\n+        return clientService;\n+    }\n+\n+    private void refreshAccessToken(OAuthClientService clientService) {\n+        try {\n+            final AccessTokenResponse accessTokenResponse = clientService.refreshToken();\n+            final String accessToken = accessTokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                throw new OAuthException(\"Access token is not available.\");\n+            }\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"An error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (IOException e) {\n+            throw new OAuthException(\"A network error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (OAuthResponseException e) {\n+            throw new OAuthException(\"Miele cloud service returned an illegal response: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<String> getAccessTokenFromStorage(String serviceHandle) {\n+        try {\n+            AccessTokenResponse tokenResponse = getOAuthClientService(serviceHandle).getAccessTokenResponse();\n+            if (tokenResponse == null) {\n+                return Optional.empty();\n+            } else {\n+                return Optional.of(tokenResponse.getAccessToken());\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0OTQxNw=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5MTIyMg==", "bodyText": "I agree to @boc-tothefuture . Catching Exception catches also all RuntimeExceptions", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537091222", "createdAt": "2020-12-06T17:58:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;\n+    private Map<String, @Nullable AccessTokenRefreshListener> listenerByServiceHandle = new HashMap<>();\n+\n+    @Reference\n+    public void setOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = oauthFactory;\n+    }\n+\n+    public void unsetOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = null;\n+    }\n+\n+    @Override\n+    public void setRefreshListener(OAuthTokenRefreshListener listener, String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = tokenResponse -> {\n+            final String accessToken = tokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                // Fail without exception to ensure that the OAuthClientService notifies all listeners.\n+                logger.warn(\"Ignoring access token response without access token.\");\n+            } else {\n+                listener.onNewAccessToken(accessToken);\n+            }\n+        };\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        clientService.addAccessTokenRefreshListener(refreshListener);\n+        listenerByServiceHandle.put(serviceHandle, refreshListener);\n+    }\n+\n+    @Override\n+    public void unsetRefreshListener(String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = listenerByServiceHandle.get(serviceHandle);\n+        if (refreshListener != null) {\n+            try {\n+                OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+                clientService.removeAccessTokenRefreshListener(refreshListener);\n+            } catch (OAuthException e) {\n+                logger.warn(\"Failed to remove refresh listener: OAuth client service is unavailable.\");\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        }\n+        listenerByServiceHandle.remove(serviceHandle);\n+    }\n+\n+    @Override\n+    public void refreshToken(String serviceHandle) {\n+        if (listenerByServiceHandle.get(serviceHandle) == null) {\n+            logger.warn(\"Token refreshing was requested but there is no token refresh listener registered!\");\n+            return;\n+        }\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        refreshAccessToken(clientService);\n+    }\n+\n+    private OAuthClientService getOAuthClientService(String serviceHandle) {\n+        final OAuthFactory oauthFactory = this.oauthFactory;\n+        if (oauthFactory == null) {\n+            throw new OAuthException(\"OAuth factory is not available.\");\n+        }\n+\n+        final OAuthClientService clientService = oauthFactory.getOAuthClientService(serviceHandle);\n+        if (clientService == null) {\n+            throw new OAuthException(\"OAuth client service is not available.\");\n+        }\n+        return clientService;\n+    }\n+\n+    private void refreshAccessToken(OAuthClientService clientService) {\n+        try {\n+            final AccessTokenResponse accessTokenResponse = clientService.refreshToken();\n+            final String accessToken = accessTokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                throw new OAuthException(\"Access token is not available.\");\n+            }\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"An error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (IOException e) {\n+            throw new OAuthException(\"A network error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (OAuthResponseException e) {\n+            throw new OAuthException(\"Miele cloud service returned an illegal response: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<String> getAccessTokenFromStorage(String serviceHandle) {\n+        try {\n+            AccessTokenResponse tokenResponse = getOAuthClientService(serviceHandle).getAccessTokenResponse();\n+            if (tokenResponse == null) {\n+                return Optional.empty();\n+            } else {\n+                return Optional.of(tokenResponse.getAccessToken());\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY0OTQxNw=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODA2MTg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTowMDowMlrOH87atA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTowMDowMlrOH87atA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MDEwMA==", "bodyText": "Logging to info should be used sparsely e.g. a newly started component or a user file that has been loaded. This could be debug or warn.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r533650100", "createdAt": "2020-12-01T19:00:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;\n+    private Map<String, @Nullable AccessTokenRefreshListener> listenerByServiceHandle = new HashMap<>();\n+\n+    @Reference\n+    public void setOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = oauthFactory;\n+    }\n+\n+    public void unsetOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = null;\n+    }\n+\n+    @Override\n+    public void setRefreshListener(OAuthTokenRefreshListener listener, String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = tokenResponse -> {\n+            final String accessToken = tokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                // Fail without exception to ensure that the OAuthClientService notifies all listeners.\n+                logger.warn(\"Ignoring access token response without access token.\");\n+            } else {\n+                listener.onNewAccessToken(accessToken);\n+            }\n+        };\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        clientService.addAccessTokenRefreshListener(refreshListener);\n+        listenerByServiceHandle.put(serviceHandle, refreshListener);\n+    }\n+\n+    @Override\n+    public void unsetRefreshListener(String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = listenerByServiceHandle.get(serviceHandle);\n+        if (refreshListener != null) {\n+            try {\n+                OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+                clientService.removeAccessTokenRefreshListener(refreshListener);\n+            } catch (OAuthException e) {\n+                logger.warn(\"Failed to remove refresh listener: OAuth client service is unavailable.\");\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        }\n+        listenerByServiceHandle.remove(serviceHandle);\n+    }\n+\n+    @Override\n+    public void refreshToken(String serviceHandle) {\n+        if (listenerByServiceHandle.get(serviceHandle) == null) {\n+            logger.warn(\"Token refreshing was requested but there is no token refresh listener registered!\");\n+            return;\n+        }\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        refreshAccessToken(clientService);\n+    }\n+\n+    private OAuthClientService getOAuthClientService(String serviceHandle) {\n+        final OAuthFactory oauthFactory = this.oauthFactory;\n+        if (oauthFactory == null) {\n+            throw new OAuthException(\"OAuth factory is not available.\");\n+        }\n+\n+        final OAuthClientService clientService = oauthFactory.getOAuthClientService(serviceHandle);\n+        if (clientService == null) {\n+            throw new OAuthException(\"OAuth client service is not available.\");\n+        }\n+        return clientService;\n+    }\n+\n+    private void refreshAccessToken(OAuthClientService clientService) {\n+        try {\n+            final AccessTokenResponse accessTokenResponse = clientService.refreshToken();\n+            final String accessToken = accessTokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                throw new OAuthException(\"Access token is not available.\");\n+            }\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"An error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (IOException e) {\n+            throw new OAuthException(\"A network error occured during token refresh: \" + e.getMessage(), e);\n+        } catch (OAuthResponseException e) {\n+            throw new OAuthException(\"Miele cloud service returned an illegal response: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public Optional<String> getAccessTokenFromStorage(String serviceHandle) {\n+        try {\n+            AccessTokenResponse tokenResponse = getOAuthClientService(serviceHandle).getAccessTokenResponse();\n+            if (tokenResponse == null) {\n+                return Optional.empty();\n+            } else {\n+                return Optional.of(tokenResponse.getAccessToken());\n+            }\n+        } catch (Exception e) {\n+            logger.info(\"Cannot obtain access token from persistent storage.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODEwNTA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOToxMTo1MFrOH871Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzozNzowN1rOIDsjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NjkxOQ==", "bodyText": "This logging pattern is uncommon to OH bindings. If you have a recoverable error like a network fail, you would log a text with the exception's message to debug. If you have a persistent error you would log to warn. These are only examples. See the definitions: https://www.openhab.org/docs/developer/guidelines.html#f-logging\nThe stack trace should only be logged if the message on its own is not sufficient and the stack trace is crucial for debugging.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r533656919", "createdAt": "2020-12-01T19:11:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;\n+    private Map<String, @Nullable AccessTokenRefreshListener> listenerByServiceHandle = new HashMap<>();\n+\n+    @Reference\n+    public void setOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = oauthFactory;\n+    }\n+\n+    public void unsetOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = null;\n+    }\n+\n+    @Override\n+    public void setRefreshListener(OAuthTokenRefreshListener listener, String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = tokenResponse -> {\n+            final String accessToken = tokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                // Fail without exception to ensure that the OAuthClientService notifies all listeners.\n+                logger.warn(\"Ignoring access token response without access token.\");\n+            } else {\n+                listener.onNewAccessToken(accessToken);\n+            }\n+        };\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        clientService.addAccessTokenRefreshListener(refreshListener);\n+        listenerByServiceHandle.put(serviceHandle, refreshListener);\n+    }\n+\n+    @Override\n+    public void unsetRefreshListener(String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = listenerByServiceHandle.get(serviceHandle);\n+        if (refreshListener != null) {\n+            try {\n+                OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+                clientService.removeAccessTokenRefreshListener(refreshListener);\n+            } catch (OAuthException e) {\n+                logger.warn(\"Failed to remove refresh listener: OAuth client service is unavailable.\");\n+                logger.debug(\"Exception details:\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0NjUyOA==", "bodyText": "I replaced this pattern in all locations it occurred. Please check again.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540746528", "createdAt": "2020-12-11T07:37:07Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    @Nullable\n+    private OAuthFactory oauthFactory;\n+    private Map<String, @Nullable AccessTokenRefreshListener> listenerByServiceHandle = new HashMap<>();\n+\n+    @Reference\n+    public void setOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = oauthFactory;\n+    }\n+\n+    public void unsetOAuthFactory(OAuthFactory oauthFactory) {\n+        this.oauthFactory = null;\n+    }\n+\n+    @Override\n+    public void setRefreshListener(OAuthTokenRefreshListener listener, String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = tokenResponse -> {\n+            final String accessToken = tokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                // Fail without exception to ensure that the OAuthClientService notifies all listeners.\n+                logger.warn(\"Ignoring access token response without access token.\");\n+            } else {\n+                listener.onNewAccessToken(accessToken);\n+            }\n+        };\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        clientService.addAccessTokenRefreshListener(refreshListener);\n+        listenerByServiceHandle.put(serviceHandle, refreshListener);\n+    }\n+\n+    @Override\n+    public void unsetRefreshListener(String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = listenerByServiceHandle.get(serviceHandle);\n+        if (refreshListener != null) {\n+            try {\n+                OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+                clientService.removeAccessTokenRefreshListener(refreshListener);\n+            } catch (OAuthException e) {\n+                logger.warn(\"Failed to remove refresh listener: OAuth client service is unavailable.\");\n+                logger.debug(\"Exception details:\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NjkxOQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjc3MzkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowODowM1rOH9nu4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowMjo0NFrOIDtRtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NjE2MQ==", "bodyText": "What's the purpose of this sleep? If you want to ensure that there's some delay, you should choose a value of at least 100ms, otherwise the JVM may skip the sleep entirely.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534376161", "createdAt": "2020-12-02T18:08:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config.servlet;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.inbox.Inbox;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.config.OAuthAuthorizationHandler;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeCreationFailedException;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeReconfigurationFailedException;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet that automatically creates a bridge and then redirects the browser to the account overview page.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class CreateBridgeServlet extends AbstractRedirectionServlet {\n+    private static final String MIELE_CLOUD_BRIDGE_NAME = \"Cloud Connector\";\n+    private static final String MIELE_CLOUD_BRIDGE_LABEL = \"Miele@home Account\";\n+\n+    private static final String LOCALE_PARAMETER_NAME = \"locale\";\n+    public static final String BRIDGE_UID_PARAMETER_NAME = \"bridgeUid\";\n+\n+    private static final long serialVersionUID = -2912042079128722887L;\n+\n+    private static final String DEFAULT_LOCALE = \"en\";\n+\n+    private static final long ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long ONLINE_CHECK_INTERVAL_IN_MILLISECONDS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(CreateBridgeServlet.class);\n+\n+    private final Inbox inbox;\n+    private final ThingRegistry thingRegistry;\n+    private final OAuthAuthorizationHandler authorizationHandler;\n+\n+    /**\n+     * Creates a new {@link CreateBridgeServlet}.\n+     *\n+     * @param inbox openHAB inbox for discovery results.\n+     * @param thingRegistry openHAB thing registry.\n+     * @param authorizationHandler Handler for the authorization process.\n+     */\n+    public CreateBridgeServlet(Inbox inbox, ThingRegistry thingRegistry,\n+            OAuthAuthorizationHandler authorizationHandler) {\n+        this.inbox = inbox;\n+        this.thingRegistry = thingRegistry;\n+        this.authorizationHandler = authorizationHandler;\n+    }\n+\n+    @Override\n+    protected String getRedirectionDestination(HttpServletRequest request) {\n+        String bridgeUidString = request.getParameter(BRIDGE_UID_PARAMETER_NAME);\n+        if (bridgeUidString == null || bridgeUidString.isEmpty()) {\n+            logger.warn(\"Cannot create bridge: Bridge UID is missing.\");\n+            return \"/mielecloud/failure?\" + FailureServlet.MISSING_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        ThingUID bridgeUid = null;\n+        try {\n+            bridgeUid = new ThingUID(bridgeUidString);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Cannot create bridge: Bridge UID '{}' is malformed.\", bridgeUid);\n+            return \"/mielecloud/failure?\" + FailureServlet.MALFORMED_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        String locale = getValidLocale(request.getParameter(LOCALE_PARAMETER_NAME));\n+\n+        String accessToken = null;\n+        try {\n+            accessToken = authorizationHandler.getAccessToken(bridgeUid);\n+        } catch (OAuthException e) {\n+            logger.warn(\"Failed to obtain access token\");\n+            logger.debug(\"Exception details:\", e);\n+            return \"/mielecloud/success?\" + SuccessServlet.MISSING_ACCESS_TOKEN_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+\n+        logger.info(\"Auto configuring Miele account using locale '{}' (requested locale was '{}')\", locale,\n+                request.getParameter(LOCALE_PARAMETER_NAME));\n+        try {\n+            Thing bridge = pairOrReconfigureBridge(accessToken, locale, bridgeUid);\n+            waitForBridgeToComeOnline(bridge);\n+            return \"/mielecloud\";\n+        } catch (BridgeReconfigurationFailedException e) {\n+            logger.warn(\"{}\", e.getMessage());\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_RECONFIGURATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        } catch (BridgeCreationFailedException e) {\n+            logger.warn(\"Thing creation failed because there was no binding available that supports the thing.\");\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_CREATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+    }\n+\n+    private Thing pairOrReconfigureBridge(String accessToken, String locale, ThingUID bridgeUid) {\n+        DiscoveryResult result = DiscoveryResultBuilder.create(bridgeUid)\n+                .withRepresentationProperty(Thing.PROPERTY_MODEL_ID).withLabel(MIELE_CLOUD_BRIDGE_LABEL)\n+                .withProperty(Thing.PROPERTY_MODEL_ID, MIELE_CLOUD_BRIDGE_NAME).withProperty(\"accessToken\", accessToken)\n+                .withProperty(LOCALE_PARAMETER_NAME, locale).build();\n+        if (inbox.add(result)) {\n+            return pairBridge(bridgeUid);\n+        } else {\n+            return reconfigureBridge(bridgeUid, locale);\n+        }\n+    }\n+\n+    private Thing pairBridge(ThingUID thingUid) {\n+        Thing thing = inbox.approve(thingUid, MIELE_CLOUD_BRIDGE_LABEL, null);\n+        if (thing == null) {\n+            throw new BridgeCreationFailedException();\n+        }\n+\n+        logger.info(\"Successfully created bridge {}\", thingUid);\n+        return thing;\n+    }\n+\n+    private Thing reconfigureBridge(ThingUID thingUid, String locale) {\n+        logger.info(\"Thing already exists. Modifying configuration.\");\n+        Thing thing = thingRegistry.get(thingUid);\n+        if (thing == null) {\n+            throw new BridgeReconfigurationFailedException(\n+                    \"Cannot modify non existing bridge: Could neither add bridge via inbox nor find existing bridge.\");\n+        }\n+\n+        ThingHandler handler = thing.getHandler();\n+        if (handler == null) {\n+            throw new BridgeReconfigurationFailedException(\"Bridge exists but has no handler.\");\n+        }\n+\n+        handler.handleConfigurationUpdate(\n+                Collections.singletonMap(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale));\n+\n+        // As the parameters will not necessarily change we need to force the thing to re-initialize.\n+        handler.dispose();\n+        handler.initialize();\n+\n+        return thing;\n+    }\n+\n+    private String getValidLocale(@Nullable String localeParameterValue) {\n+        if (localeParameterValue == null || localeParameterValue.isEmpty()\n+                || !LocaleValidator.isValidLanguage(localeParameterValue)) {\n+            return DEFAULT_LOCALE;\n+        } else {\n+            return localeParameterValue;\n+        }\n+    }\n+\n+    private void waitForBridgeToComeOnline(Thing bridge) {\n+        long remainingWaitTime = ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS;\n+        while (bridge.getStatus() != ThingStatus.ONLINE && remainingWaitTime > 0) {\n+            try {\n+                TimeUnit.MILLISECONDS.sleep(ONLINE_CHECK_INTERVAL_IN_MILLISECONDS);\n+                remainingWaitTime -= ONLINE_CHECK_INTERVAL_IN_MILLISECONDS;\n+            } catch (InterruptedException e) {\n+                return;\n+            }\n+        }\n+\n+        try {\n+            TimeUnit.SECONDS.sleep(1);\n+        } catch (InterruptedException e) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjExMjcwMw==", "bodyText": "The delay is 1s which is larger than 100ms \ud83d\ude09\nYou are right, the purpose is not that obvious here: After our bridge changed to ONLINE (see the sleep above) it might take a moment for our discovery service to initialize and discover all devices. We wait for this because the overview page which the user is redirected to shows a template for a .things file which is populated with the discovery results. If these are missing then the template is incomplete. We want to avoid confusing the user here. Obviously that is a hacky workaround and we should rather wait until a maximum delay expired or the number of discovered things in the inbox doesn't change any more. Or is there a more common / easier solution?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r536112703", "createdAt": "2020-12-04T13:50:17Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config.servlet;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.inbox.Inbox;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.config.OAuthAuthorizationHandler;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeCreationFailedException;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeReconfigurationFailedException;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet that automatically creates a bridge and then redirects the browser to the account overview page.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class CreateBridgeServlet extends AbstractRedirectionServlet {\n+    private static final String MIELE_CLOUD_BRIDGE_NAME = \"Cloud Connector\";\n+    private static final String MIELE_CLOUD_BRIDGE_LABEL = \"Miele@home Account\";\n+\n+    private static final String LOCALE_PARAMETER_NAME = \"locale\";\n+    public static final String BRIDGE_UID_PARAMETER_NAME = \"bridgeUid\";\n+\n+    private static final long serialVersionUID = -2912042079128722887L;\n+\n+    private static final String DEFAULT_LOCALE = \"en\";\n+\n+    private static final long ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long ONLINE_CHECK_INTERVAL_IN_MILLISECONDS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(CreateBridgeServlet.class);\n+\n+    private final Inbox inbox;\n+    private final ThingRegistry thingRegistry;\n+    private final OAuthAuthorizationHandler authorizationHandler;\n+\n+    /**\n+     * Creates a new {@link CreateBridgeServlet}.\n+     *\n+     * @param inbox openHAB inbox for discovery results.\n+     * @param thingRegistry openHAB thing registry.\n+     * @param authorizationHandler Handler for the authorization process.\n+     */\n+    public CreateBridgeServlet(Inbox inbox, ThingRegistry thingRegistry,\n+            OAuthAuthorizationHandler authorizationHandler) {\n+        this.inbox = inbox;\n+        this.thingRegistry = thingRegistry;\n+        this.authorizationHandler = authorizationHandler;\n+    }\n+\n+    @Override\n+    protected String getRedirectionDestination(HttpServletRequest request) {\n+        String bridgeUidString = request.getParameter(BRIDGE_UID_PARAMETER_NAME);\n+        if (bridgeUidString == null || bridgeUidString.isEmpty()) {\n+            logger.warn(\"Cannot create bridge: Bridge UID is missing.\");\n+            return \"/mielecloud/failure?\" + FailureServlet.MISSING_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        ThingUID bridgeUid = null;\n+        try {\n+            bridgeUid = new ThingUID(bridgeUidString);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Cannot create bridge: Bridge UID '{}' is malformed.\", bridgeUid);\n+            return \"/mielecloud/failure?\" + FailureServlet.MALFORMED_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        String locale = getValidLocale(request.getParameter(LOCALE_PARAMETER_NAME));\n+\n+        String accessToken = null;\n+        try {\n+            accessToken = authorizationHandler.getAccessToken(bridgeUid);\n+        } catch (OAuthException e) {\n+            logger.warn(\"Failed to obtain access token\");\n+            logger.debug(\"Exception details:\", e);\n+            return \"/mielecloud/success?\" + SuccessServlet.MISSING_ACCESS_TOKEN_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+\n+        logger.info(\"Auto configuring Miele account using locale '{}' (requested locale was '{}')\", locale,\n+                request.getParameter(LOCALE_PARAMETER_NAME));\n+        try {\n+            Thing bridge = pairOrReconfigureBridge(accessToken, locale, bridgeUid);\n+            waitForBridgeToComeOnline(bridge);\n+            return \"/mielecloud\";\n+        } catch (BridgeReconfigurationFailedException e) {\n+            logger.warn(\"{}\", e.getMessage());\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_RECONFIGURATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        } catch (BridgeCreationFailedException e) {\n+            logger.warn(\"Thing creation failed because there was no binding available that supports the thing.\");\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_CREATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+    }\n+\n+    private Thing pairOrReconfigureBridge(String accessToken, String locale, ThingUID bridgeUid) {\n+        DiscoveryResult result = DiscoveryResultBuilder.create(bridgeUid)\n+                .withRepresentationProperty(Thing.PROPERTY_MODEL_ID).withLabel(MIELE_CLOUD_BRIDGE_LABEL)\n+                .withProperty(Thing.PROPERTY_MODEL_ID, MIELE_CLOUD_BRIDGE_NAME).withProperty(\"accessToken\", accessToken)\n+                .withProperty(LOCALE_PARAMETER_NAME, locale).build();\n+        if (inbox.add(result)) {\n+            return pairBridge(bridgeUid);\n+        } else {\n+            return reconfigureBridge(bridgeUid, locale);\n+        }\n+    }\n+\n+    private Thing pairBridge(ThingUID thingUid) {\n+        Thing thing = inbox.approve(thingUid, MIELE_CLOUD_BRIDGE_LABEL, null);\n+        if (thing == null) {\n+            throw new BridgeCreationFailedException();\n+        }\n+\n+        logger.info(\"Successfully created bridge {}\", thingUid);\n+        return thing;\n+    }\n+\n+    private Thing reconfigureBridge(ThingUID thingUid, String locale) {\n+        logger.info(\"Thing already exists. Modifying configuration.\");\n+        Thing thing = thingRegistry.get(thingUid);\n+        if (thing == null) {\n+            throw new BridgeReconfigurationFailedException(\n+                    \"Cannot modify non existing bridge: Could neither add bridge via inbox nor find existing bridge.\");\n+        }\n+\n+        ThingHandler handler = thing.getHandler();\n+        if (handler == null) {\n+            throw new BridgeReconfigurationFailedException(\"Bridge exists but has no handler.\");\n+        }\n+\n+        handler.handleConfigurationUpdate(\n+                Collections.singletonMap(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale));\n+\n+        // As the parameters will not necessarily change we need to force the thing to re-initialize.\n+        handler.dispose();\n+        handler.initialize();\n+\n+        return thing;\n+    }\n+\n+    private String getValidLocale(@Nullable String localeParameterValue) {\n+        if (localeParameterValue == null || localeParameterValue.isEmpty()\n+                || !LocaleValidator.isValidLanguage(localeParameterValue)) {\n+            return DEFAULT_LOCALE;\n+        } else {\n+            return localeParameterValue;\n+        }\n+    }\n+\n+    private void waitForBridgeToComeOnline(Thing bridge) {\n+        long remainingWaitTime = ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS;\n+        while (bridge.getStatus() != ThingStatus.ONLINE && remainingWaitTime > 0) {\n+            try {\n+                TimeUnit.MILLISECONDS.sleep(ONLINE_CHECK_INTERVAL_IN_MILLISECONDS);\n+                remainingWaitTime -= ONLINE_CHECK_INTERVAL_IN_MILLISECONDS;\n+            } catch (InterruptedException e) {\n+                return;\n+            }\n+        }\n+\n+        try {\n+            TimeUnit.SECONDS.sleep(1);\n+        } catch (InterruptedException e) {\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NjE2MQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5MTk0MA==", "bodyText": "It seems it was a bit too late that day...\nIt'd be good if you solve this in a more elegant way. Unfortunately I can't come up with a solution.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537091940", "createdAt": "2020-12-06T18:02:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config.servlet;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.inbox.Inbox;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.config.OAuthAuthorizationHandler;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeCreationFailedException;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeReconfigurationFailedException;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet that automatically creates a bridge and then redirects the browser to the account overview page.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class CreateBridgeServlet extends AbstractRedirectionServlet {\n+    private static final String MIELE_CLOUD_BRIDGE_NAME = \"Cloud Connector\";\n+    private static final String MIELE_CLOUD_BRIDGE_LABEL = \"Miele@home Account\";\n+\n+    private static final String LOCALE_PARAMETER_NAME = \"locale\";\n+    public static final String BRIDGE_UID_PARAMETER_NAME = \"bridgeUid\";\n+\n+    private static final long serialVersionUID = -2912042079128722887L;\n+\n+    private static final String DEFAULT_LOCALE = \"en\";\n+\n+    private static final long ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long ONLINE_CHECK_INTERVAL_IN_MILLISECONDS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(CreateBridgeServlet.class);\n+\n+    private final Inbox inbox;\n+    private final ThingRegistry thingRegistry;\n+    private final OAuthAuthorizationHandler authorizationHandler;\n+\n+    /**\n+     * Creates a new {@link CreateBridgeServlet}.\n+     *\n+     * @param inbox openHAB inbox for discovery results.\n+     * @param thingRegistry openHAB thing registry.\n+     * @param authorizationHandler Handler for the authorization process.\n+     */\n+    public CreateBridgeServlet(Inbox inbox, ThingRegistry thingRegistry,\n+            OAuthAuthorizationHandler authorizationHandler) {\n+        this.inbox = inbox;\n+        this.thingRegistry = thingRegistry;\n+        this.authorizationHandler = authorizationHandler;\n+    }\n+\n+    @Override\n+    protected String getRedirectionDestination(HttpServletRequest request) {\n+        String bridgeUidString = request.getParameter(BRIDGE_UID_PARAMETER_NAME);\n+        if (bridgeUidString == null || bridgeUidString.isEmpty()) {\n+            logger.warn(\"Cannot create bridge: Bridge UID is missing.\");\n+            return \"/mielecloud/failure?\" + FailureServlet.MISSING_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        ThingUID bridgeUid = null;\n+        try {\n+            bridgeUid = new ThingUID(bridgeUidString);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Cannot create bridge: Bridge UID '{}' is malformed.\", bridgeUid);\n+            return \"/mielecloud/failure?\" + FailureServlet.MALFORMED_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        String locale = getValidLocale(request.getParameter(LOCALE_PARAMETER_NAME));\n+\n+        String accessToken = null;\n+        try {\n+            accessToken = authorizationHandler.getAccessToken(bridgeUid);\n+        } catch (OAuthException e) {\n+            logger.warn(\"Failed to obtain access token\");\n+            logger.debug(\"Exception details:\", e);\n+            return \"/mielecloud/success?\" + SuccessServlet.MISSING_ACCESS_TOKEN_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+\n+        logger.info(\"Auto configuring Miele account using locale '{}' (requested locale was '{}')\", locale,\n+                request.getParameter(LOCALE_PARAMETER_NAME));\n+        try {\n+            Thing bridge = pairOrReconfigureBridge(accessToken, locale, bridgeUid);\n+            waitForBridgeToComeOnline(bridge);\n+            return \"/mielecloud\";\n+        } catch (BridgeReconfigurationFailedException e) {\n+            logger.warn(\"{}\", e.getMessage());\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_RECONFIGURATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        } catch (BridgeCreationFailedException e) {\n+            logger.warn(\"Thing creation failed because there was no binding available that supports the thing.\");\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_CREATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+    }\n+\n+    private Thing pairOrReconfigureBridge(String accessToken, String locale, ThingUID bridgeUid) {\n+        DiscoveryResult result = DiscoveryResultBuilder.create(bridgeUid)\n+                .withRepresentationProperty(Thing.PROPERTY_MODEL_ID).withLabel(MIELE_CLOUD_BRIDGE_LABEL)\n+                .withProperty(Thing.PROPERTY_MODEL_ID, MIELE_CLOUD_BRIDGE_NAME).withProperty(\"accessToken\", accessToken)\n+                .withProperty(LOCALE_PARAMETER_NAME, locale).build();\n+        if (inbox.add(result)) {\n+            return pairBridge(bridgeUid);\n+        } else {\n+            return reconfigureBridge(bridgeUid, locale);\n+        }\n+    }\n+\n+    private Thing pairBridge(ThingUID thingUid) {\n+        Thing thing = inbox.approve(thingUid, MIELE_CLOUD_BRIDGE_LABEL, null);\n+        if (thing == null) {\n+            throw new BridgeCreationFailedException();\n+        }\n+\n+        logger.info(\"Successfully created bridge {}\", thingUid);\n+        return thing;\n+    }\n+\n+    private Thing reconfigureBridge(ThingUID thingUid, String locale) {\n+        logger.info(\"Thing already exists. Modifying configuration.\");\n+        Thing thing = thingRegistry.get(thingUid);\n+        if (thing == null) {\n+            throw new BridgeReconfigurationFailedException(\n+                    \"Cannot modify non existing bridge: Could neither add bridge via inbox nor find existing bridge.\");\n+        }\n+\n+        ThingHandler handler = thing.getHandler();\n+        if (handler == null) {\n+            throw new BridgeReconfigurationFailedException(\"Bridge exists but has no handler.\");\n+        }\n+\n+        handler.handleConfigurationUpdate(\n+                Collections.singletonMap(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale));\n+\n+        // As the parameters will not necessarily change we need to force the thing to re-initialize.\n+        handler.dispose();\n+        handler.initialize();\n+\n+        return thing;\n+    }\n+\n+    private String getValidLocale(@Nullable String localeParameterValue) {\n+        if (localeParameterValue == null || localeParameterValue.isEmpty()\n+                || !LocaleValidator.isValidLanguage(localeParameterValue)) {\n+            return DEFAULT_LOCALE;\n+        } else {\n+            return localeParameterValue;\n+        }\n+    }\n+\n+    private void waitForBridgeToComeOnline(Thing bridge) {\n+        long remainingWaitTime = ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS;\n+        while (bridge.getStatus() != ThingStatus.ONLINE && remainingWaitTime > 0) {\n+            try {\n+                TimeUnit.MILLISECONDS.sleep(ONLINE_CHECK_INTERVAL_IN_MILLISECONDS);\n+                remainingWaitTime -= ONLINE_CHECK_INTERVAL_IN_MILLISECONDS;\n+            } catch (InterruptedException e) {\n+                return;\n+            }\n+        }\n+\n+        try {\n+            TimeUnit.SECONDS.sleep(1);\n+        } catch (InterruptedException e) {\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NjE2MQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1ODQ1Mw==", "bodyText": "We now wait until the number of discovery results from this binding doesn't change any more.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540758453", "createdAt": "2020-12-11T08:02:44Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config.servlet;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.inbox.Inbox;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.config.OAuthAuthorizationHandler;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeCreationFailedException;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeReconfigurationFailedException;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet that automatically creates a bridge and then redirects the browser to the account overview page.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class CreateBridgeServlet extends AbstractRedirectionServlet {\n+    private static final String MIELE_CLOUD_BRIDGE_NAME = \"Cloud Connector\";\n+    private static final String MIELE_CLOUD_BRIDGE_LABEL = \"Miele@home Account\";\n+\n+    private static final String LOCALE_PARAMETER_NAME = \"locale\";\n+    public static final String BRIDGE_UID_PARAMETER_NAME = \"bridgeUid\";\n+\n+    private static final long serialVersionUID = -2912042079128722887L;\n+\n+    private static final String DEFAULT_LOCALE = \"en\";\n+\n+    private static final long ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long ONLINE_CHECK_INTERVAL_IN_MILLISECONDS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(CreateBridgeServlet.class);\n+\n+    private final Inbox inbox;\n+    private final ThingRegistry thingRegistry;\n+    private final OAuthAuthorizationHandler authorizationHandler;\n+\n+    /**\n+     * Creates a new {@link CreateBridgeServlet}.\n+     *\n+     * @param inbox openHAB inbox for discovery results.\n+     * @param thingRegistry openHAB thing registry.\n+     * @param authorizationHandler Handler for the authorization process.\n+     */\n+    public CreateBridgeServlet(Inbox inbox, ThingRegistry thingRegistry,\n+            OAuthAuthorizationHandler authorizationHandler) {\n+        this.inbox = inbox;\n+        this.thingRegistry = thingRegistry;\n+        this.authorizationHandler = authorizationHandler;\n+    }\n+\n+    @Override\n+    protected String getRedirectionDestination(HttpServletRequest request) {\n+        String bridgeUidString = request.getParameter(BRIDGE_UID_PARAMETER_NAME);\n+        if (bridgeUidString == null || bridgeUidString.isEmpty()) {\n+            logger.warn(\"Cannot create bridge: Bridge UID is missing.\");\n+            return \"/mielecloud/failure?\" + FailureServlet.MISSING_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        ThingUID bridgeUid = null;\n+        try {\n+            bridgeUid = new ThingUID(bridgeUidString);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Cannot create bridge: Bridge UID '{}' is malformed.\", bridgeUid);\n+            return \"/mielecloud/failure?\" + FailureServlet.MALFORMED_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        String locale = getValidLocale(request.getParameter(LOCALE_PARAMETER_NAME));\n+\n+        String accessToken = null;\n+        try {\n+            accessToken = authorizationHandler.getAccessToken(bridgeUid);\n+        } catch (OAuthException e) {\n+            logger.warn(\"Failed to obtain access token\");\n+            logger.debug(\"Exception details:\", e);\n+            return \"/mielecloud/success?\" + SuccessServlet.MISSING_ACCESS_TOKEN_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+\n+        logger.info(\"Auto configuring Miele account using locale '{}' (requested locale was '{}')\", locale,\n+                request.getParameter(LOCALE_PARAMETER_NAME));\n+        try {\n+            Thing bridge = pairOrReconfigureBridge(accessToken, locale, bridgeUid);\n+            waitForBridgeToComeOnline(bridge);\n+            return \"/mielecloud\";\n+        } catch (BridgeReconfigurationFailedException e) {\n+            logger.warn(\"{}\", e.getMessage());\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_RECONFIGURATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        } catch (BridgeCreationFailedException e) {\n+            logger.warn(\"Thing creation failed because there was no binding available that supports the thing.\");\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_CREATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+    }\n+\n+    private Thing pairOrReconfigureBridge(String accessToken, String locale, ThingUID bridgeUid) {\n+        DiscoveryResult result = DiscoveryResultBuilder.create(bridgeUid)\n+                .withRepresentationProperty(Thing.PROPERTY_MODEL_ID).withLabel(MIELE_CLOUD_BRIDGE_LABEL)\n+                .withProperty(Thing.PROPERTY_MODEL_ID, MIELE_CLOUD_BRIDGE_NAME).withProperty(\"accessToken\", accessToken)\n+                .withProperty(LOCALE_PARAMETER_NAME, locale).build();\n+        if (inbox.add(result)) {\n+            return pairBridge(bridgeUid);\n+        } else {\n+            return reconfigureBridge(bridgeUid, locale);\n+        }\n+    }\n+\n+    private Thing pairBridge(ThingUID thingUid) {\n+        Thing thing = inbox.approve(thingUid, MIELE_CLOUD_BRIDGE_LABEL, null);\n+        if (thing == null) {\n+            throw new BridgeCreationFailedException();\n+        }\n+\n+        logger.info(\"Successfully created bridge {}\", thingUid);\n+        return thing;\n+    }\n+\n+    private Thing reconfigureBridge(ThingUID thingUid, String locale) {\n+        logger.info(\"Thing already exists. Modifying configuration.\");\n+        Thing thing = thingRegistry.get(thingUid);\n+        if (thing == null) {\n+            throw new BridgeReconfigurationFailedException(\n+                    \"Cannot modify non existing bridge: Could neither add bridge via inbox nor find existing bridge.\");\n+        }\n+\n+        ThingHandler handler = thing.getHandler();\n+        if (handler == null) {\n+            throw new BridgeReconfigurationFailedException(\"Bridge exists but has no handler.\");\n+        }\n+\n+        handler.handleConfigurationUpdate(\n+                Collections.singletonMap(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale));\n+\n+        // As the parameters will not necessarily change we need to force the thing to re-initialize.\n+        handler.dispose();\n+        handler.initialize();\n+\n+        return thing;\n+    }\n+\n+    private String getValidLocale(@Nullable String localeParameterValue) {\n+        if (localeParameterValue == null || localeParameterValue.isEmpty()\n+                || !LocaleValidator.isValidLanguage(localeParameterValue)) {\n+            return DEFAULT_LOCALE;\n+        } else {\n+            return localeParameterValue;\n+        }\n+    }\n+\n+    private void waitForBridgeToComeOnline(Thing bridge) {\n+        long remainingWaitTime = ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS;\n+        while (bridge.getStatus() != ThingStatus.ONLINE && remainingWaitTime > 0) {\n+            try {\n+                TimeUnit.MILLISECONDS.sleep(ONLINE_CHECK_INTERVAL_IN_MILLISECONDS);\n+                remainingWaitTime -= ONLINE_CHECK_INTERVAL_IN_MILLISECONDS;\n+            } catch (InterruptedException e) {\n+                return;\n+            }\n+        }\n+\n+        try {\n+            TimeUnit.SECONDS.sleep(1);\n+        } catch (InterruptedException e) {\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NjE2MQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjc5NTUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/SuccessServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxMzozM1rOH9n76g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoxMzozM1rOH9n76g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3OTQ5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<String> SUPPORTED_LANGUAGES = Collections\n          \n          \n            \n                        .unmodifiableSet(new HashSet<>(Arrays.asList(\"da\", \"nl\", \"en\", \"fr\", \"de\", \"it\", \"nb\", \"es\")));\n          \n          \n            \n                private static final Set<String> SUPPORTED_LANGUAGES = Set.of(\"da\", \"nl\", \"en\", \"fr\", \"de\", \"it\", \"nb\", \"es\");", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534379498", "createdAt": "2020-12-02T18:13:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/SuccessServlet.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config.servlet;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.binding.mielecloud.internal.config.ThingsTemplateGenerator;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet showing the success page.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class SuccessServlet extends AbstractShowPageServlet {\n+    private static final long serialVersionUID = 7013060161686096950L;\n+\n+    public static final String BRIDGE_UID_PARAMETER_NAME = \"bridgeUid\";\n+\n+    public static final String MISSING_ACCESS_TOKEN_PARAMETER_NAME = \"missingAccessToken\";\n+    public static final String BRIDGE_CREATION_FAILED_PARAMETER_NAME = \"bridgeCreationFailed\";\n+    public static final String BRIDGE_RECONFIGURATION_FAILED_PARAMETER_NAME = \"bridgeReconfigurationFailed\";\n+\n+    private static final String ERROR_MESSAGE_TEXT_PLACEHOLDER = \"<!-- ERROR MESSAGE TEXT -->\";\n+    private static final String BRIDGE_UID_PLACEHOLDER = \"<!-- BRIDGE UID -->\";\n+    private static final String THINGS_TEMPLATE_CODE_PLACEHOLDER = \"<!-- THINGS TEMPLATE CODE -->\";\n+\n+    private static final String LOCALE_OPTIONS_PLACEHOLDER = \"<!-- LOCALE OPTIONS -->\";\n+\n+    private static final String DEFAULT_LANGUAGE = \"en\";\n+    private static final Set<String> SUPPORTED_LANGUAGES = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(\"da\", \"nl\", \"en\", \"fr\", \"de\", \"it\", \"nb\", \"es\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjgyNDU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoyMDoyNFrOH9oNrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNjozNzowNVrOIE2k7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NDA0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                triggerPowerState(OnOffType.ON.equals(OnOffType.from(command.toString())));\n          \n          \n            \n                                triggerPowerState(OnOffType.ON == command);", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534384045", "createdAt": "2020-12-02T18:20:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.Channels.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction.*;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.handler.channel.ActionsChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.DeviceChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.TransitionChannelState;\n+import org.openhab.binding.mielecloud.internal.webservice.ActionStateFetcher;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.TransitionState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.StateType;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract base class for all Miele thing handlers.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Add channel state wrappers\n+ */\n+@NonNullByDefault\n+public abstract class AbstractMieleThingHandler extends BaseThingHandler {\n+    protected final ActionStateFetcher actionFetcher;\n+    protected DeviceState latestDeviceState = new DeviceState(getDeviceId(), null);\n+    protected TransitionState latestTransitionState = new TransitionState(null, latestDeviceState);\n+    protected ActionsState latestActionsState = new ActionsState(getDeviceId(), null);\n+\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    /**\n+     * Creates a new {@link AbstractMieleThingHandler}.\n+     * \n+     * @param thing The thing to handle.\n+     */\n+    public AbstractMieleThingHandler(Thing thing) {\n+        super(thing);\n+        this.actionFetcher = new ActionStateFetcher(this::getWebservice, scheduler);\n+    }\n+\n+    private Optional<MieleBridgeHandler> getMieleBridgeHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            return Optional.empty();\n+        }\n+\n+        BridgeHandler handler = bridge.getHandler();\n+        if (handler == null || !(handler instanceof MieleBridgeHandler)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of((MieleBridgeHandler) handler);\n+    }\n+\n+    protected MieleWebservice getWebservice() {\n+        return getMieleBridgeHandler().map(MieleBridgeHandler::getWebservice)\n+                .orElse(UnavailableMieleWebservice.INSTANCE);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        getWebservice().dispatchDeviceState(getDeviceId());\n+\n+        // If no device state update was received so far, set the device to OFFLINE.\n+        if (getThing().getStatus() == ThingStatus.INITIALIZING) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH.equals(command)) {\n+            updateDeviceState(new DeviceChannelState(latestDeviceState));\n+            updateTransitionState(new TransitionChannelState(latestTransitionState));\n+            updateActionState(new ActionsChannelState(latestActionsState));\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case PROGRAM_START_STOP:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                }\n+                break;\n+\n+            case PROGRAM_START_STOP_PAUSE:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                } else if (PROGRAM_PAUSED.matches(command.toString())) {\n+                    triggerProcessAction(PAUSE);\n+                }\n+                break;\n+\n+            case LIGHT_SWITCH:\n+                if (command instanceof OnOffType) {\n+                    triggerLight(OnOffType.ON.equals(command));\n+                }\n+                break;\n+\n+            case POWER_ON_OFF:\n+                if (POWER_ON.matches(command.toString()) || POWER_OFF.matches(command.toString())) {\n+                    triggerPowerState(OnOffType.ON.equals(OnOffType.from(command.toString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwNjQxMA==", "bodyText": "This replacement doesn't work. command is of type StringType (because the POWER_ON_OFF channel is a string channel with options \"on\" and \"off\"). Thus, we need to convert it here.\nA note on why this is a String channel: Initially the binding was planned to have an additional channel POWER_ON_OFF_STANDBY that was not implemented for the contribution but may be added in the future. For consistency purposes we decided to make POWER_ON_OFF a String channel, too. Would you prefer to convert it to a Switch channel for now?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540806410", "createdAt": "2020-12-11T09:25:46Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.Channels.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction.*;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.handler.channel.ActionsChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.DeviceChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.TransitionChannelState;\n+import org.openhab.binding.mielecloud.internal.webservice.ActionStateFetcher;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.TransitionState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.StateType;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract base class for all Miele thing handlers.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Add channel state wrappers\n+ */\n+@NonNullByDefault\n+public abstract class AbstractMieleThingHandler extends BaseThingHandler {\n+    protected final ActionStateFetcher actionFetcher;\n+    protected DeviceState latestDeviceState = new DeviceState(getDeviceId(), null);\n+    protected TransitionState latestTransitionState = new TransitionState(null, latestDeviceState);\n+    protected ActionsState latestActionsState = new ActionsState(getDeviceId(), null);\n+\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    /**\n+     * Creates a new {@link AbstractMieleThingHandler}.\n+     * \n+     * @param thing The thing to handle.\n+     */\n+    public AbstractMieleThingHandler(Thing thing) {\n+        super(thing);\n+        this.actionFetcher = new ActionStateFetcher(this::getWebservice, scheduler);\n+    }\n+\n+    private Optional<MieleBridgeHandler> getMieleBridgeHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            return Optional.empty();\n+        }\n+\n+        BridgeHandler handler = bridge.getHandler();\n+        if (handler == null || !(handler instanceof MieleBridgeHandler)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of((MieleBridgeHandler) handler);\n+    }\n+\n+    protected MieleWebservice getWebservice() {\n+        return getMieleBridgeHandler().map(MieleBridgeHandler::getWebservice)\n+                .orElse(UnavailableMieleWebservice.INSTANCE);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        getWebservice().dispatchDeviceState(getDeviceId());\n+\n+        // If no device state update was received so far, set the device to OFFLINE.\n+        if (getThing().getStatus() == ThingStatus.INITIALIZING) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH.equals(command)) {\n+            updateDeviceState(new DeviceChannelState(latestDeviceState));\n+            updateTransitionState(new TransitionChannelState(latestTransitionState));\n+            updateActionState(new ActionsChannelState(latestActionsState));\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case PROGRAM_START_STOP:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                }\n+                break;\n+\n+            case PROGRAM_START_STOP_PAUSE:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                } else if (PROGRAM_PAUSED.matches(command.toString())) {\n+                    triggerProcessAction(PAUSE);\n+                }\n+                break;\n+\n+            case LIGHT_SWITCH:\n+                if (command instanceof OnOffType) {\n+                    triggerLight(OnOffType.ON.equals(command));\n+                }\n+                break;\n+\n+            case POWER_ON_OFF:\n+                if (POWER_ON.matches(command.toString()) || POWER_OFF.matches(command.toString())) {\n+                    triggerPowerState(OnOffType.ON.equals(OnOffType.from(command.toString())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NDA0NQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk1OTQwNw==", "bodyText": "I overlooked that it's of StringType. I'd keep it as StringType, otherwise you would break compatibility when changing it from Switch to StringType later.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r541959407", "createdAt": "2020-12-13T16:37:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.Channels.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction.*;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.handler.channel.ActionsChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.DeviceChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.TransitionChannelState;\n+import org.openhab.binding.mielecloud.internal.webservice.ActionStateFetcher;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.TransitionState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.StateType;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract base class for all Miele thing handlers.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Add channel state wrappers\n+ */\n+@NonNullByDefault\n+public abstract class AbstractMieleThingHandler extends BaseThingHandler {\n+    protected final ActionStateFetcher actionFetcher;\n+    protected DeviceState latestDeviceState = new DeviceState(getDeviceId(), null);\n+    protected TransitionState latestTransitionState = new TransitionState(null, latestDeviceState);\n+    protected ActionsState latestActionsState = new ActionsState(getDeviceId(), null);\n+\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    /**\n+     * Creates a new {@link AbstractMieleThingHandler}.\n+     * \n+     * @param thing The thing to handle.\n+     */\n+    public AbstractMieleThingHandler(Thing thing) {\n+        super(thing);\n+        this.actionFetcher = new ActionStateFetcher(this::getWebservice, scheduler);\n+    }\n+\n+    private Optional<MieleBridgeHandler> getMieleBridgeHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            return Optional.empty();\n+        }\n+\n+        BridgeHandler handler = bridge.getHandler();\n+        if (handler == null || !(handler instanceof MieleBridgeHandler)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of((MieleBridgeHandler) handler);\n+    }\n+\n+    protected MieleWebservice getWebservice() {\n+        return getMieleBridgeHandler().map(MieleBridgeHandler::getWebservice)\n+                .orElse(UnavailableMieleWebservice.INSTANCE);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        getWebservice().dispatchDeviceState(getDeviceId());\n+\n+        // If no device state update was received so far, set the device to OFFLINE.\n+        if (getThing().getStatus() == ThingStatus.INITIALIZING) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH.equals(command)) {\n+            updateDeviceState(new DeviceChannelState(latestDeviceState));\n+            updateTransitionState(new TransitionChannelState(latestTransitionState));\n+            updateActionState(new ActionsChannelState(latestActionsState));\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case PROGRAM_START_STOP:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                }\n+                break;\n+\n+            case PROGRAM_START_STOP_PAUSE:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                } else if (PROGRAM_PAUSED.matches(command.toString())) {\n+                    triggerProcessAction(PAUSE);\n+                }\n+                break;\n+\n+            case LIGHT_SWITCH:\n+                if (command instanceof OnOffType) {\n+                    triggerLight(OnOffType.ON.equals(command));\n+                }\n+                break;\n+\n+            case POWER_ON_OFF:\n+                if (POWER_ON.matches(command.toString()) || POWER_OFF.matches(command.toString())) {\n+                    triggerPowerState(OnOffType.ON.equals(OnOffType.from(command.toString())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NDA0NQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjgyOTQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoyMTozMlrOH9oQoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoyMTozMlrOH9oQoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NDgwMA==", "bodyText": "The log message could be removed, as the status update is already logged by the framework.\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534384800", "createdAt": "2020-12-02T18:21:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.Channels.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction.*;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.handler.channel.ActionsChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.DeviceChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.TransitionChannelState;\n+import org.openhab.binding.mielecloud.internal.webservice.ActionStateFetcher;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.TransitionState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.StateType;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract base class for all Miele thing handlers.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Add channel state wrappers\n+ */\n+@NonNullByDefault\n+public abstract class AbstractMieleThingHandler extends BaseThingHandler {\n+    protected final ActionStateFetcher actionFetcher;\n+    protected DeviceState latestDeviceState = new DeviceState(getDeviceId(), null);\n+    protected TransitionState latestTransitionState = new TransitionState(null, latestDeviceState);\n+    protected ActionsState latestActionsState = new ActionsState(getDeviceId(), null);\n+\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    /**\n+     * Creates a new {@link AbstractMieleThingHandler}.\n+     * \n+     * @param thing The thing to handle.\n+     */\n+    public AbstractMieleThingHandler(Thing thing) {\n+        super(thing);\n+        this.actionFetcher = new ActionStateFetcher(this::getWebservice, scheduler);\n+    }\n+\n+    private Optional<MieleBridgeHandler> getMieleBridgeHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            return Optional.empty();\n+        }\n+\n+        BridgeHandler handler = bridge.getHandler();\n+        if (handler == null || !(handler instanceof MieleBridgeHandler)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of((MieleBridgeHandler) handler);\n+    }\n+\n+    protected MieleWebservice getWebservice() {\n+        return getMieleBridgeHandler().map(MieleBridgeHandler::getWebservice)\n+                .orElse(UnavailableMieleWebservice.INSTANCE);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        getWebservice().dispatchDeviceState(getDeviceId());\n+\n+        // If no device state update was received so far, set the device to OFFLINE.\n+        if (getThing().getStatus() == ThingStatus.INITIALIZING) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH.equals(command)) {\n+            updateDeviceState(new DeviceChannelState(latestDeviceState));\n+            updateTransitionState(new TransitionChannelState(latestTransitionState));\n+            updateActionState(new ActionsChannelState(latestActionsState));\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case PROGRAM_START_STOP:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                }\n+                break;\n+\n+            case PROGRAM_START_STOP_PAUSE:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                } else if (PROGRAM_PAUSED.matches(command.toString())) {\n+                    triggerProcessAction(PAUSE);\n+                }\n+                break;\n+\n+            case LIGHT_SWITCH:\n+                if (command instanceof OnOffType) {\n+                    triggerLight(OnOffType.ON.equals(command));\n+                }\n+                break;\n+\n+            case POWER_ON_OFF:\n+                if (POWER_ON.matches(command.toString()) || POWER_OFF.matches(command.toString())) {\n+                    triggerPowerState(OnOffType.ON.equals(OnOffType.from(command.toString())));\n+                }\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+    }\n+\n+    /**\n+     * Invoked when an update of the available actions for the device managed by this handler is received from the Miele\n+     * cloud.\n+     */\n+    public final void onProcessActionUpdated(ActionsState actionState) {\n+        latestActionsState = actionState;\n+        updateActionState(new ActionsChannelState(latestActionsState));\n+    }\n+\n+    /**\n+     * Invoked when the device managed by this handler was removed from the Miele cloud.\n+     */\n+    public final void onDeviceRemoved() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, I18NKeys.THING_STATUS_DESCRIPTION_REMOVED);\n+    }\n+\n+    /**\n+     * Invoked when a device state update for the device managed by this handler is received from the Miele cloud.\n+     */\n+    public final void onDeviceStateUpdated(DeviceState deviceState) {\n+        actionFetcher.onDeviceStateUpdated(deviceState);\n+\n+        latestTransitionState = new TransitionState(latestTransitionState, deviceState);\n+        latestDeviceState = deviceState;\n+\n+        updateDeviceState(new DeviceChannelState(latestDeviceState));\n+        updateTransitionState(new TransitionChannelState(latestTransitionState));\n+        updateThingStatus(latestDeviceState);\n+    }\n+\n+    protected void triggerProcessAction(final ProcessAction processAction) {\n+        performPutAction(() -> getWebservice().putProcessAction(getDeviceId(), processAction), t -> {\n+            logger.warn(\"Failed to perform '{}' operation for device '{}'.\", processAction, getDeviceId());\n+            logger.debug(\"Exception details:\", t);\n+        });\n+    }\n+\n+    protected void triggerLight(final boolean on) {\n+        performPutAction(() -> getWebservice().putLight(getDeviceId(), on), t -> {\n+            logger.warn(\"Failed to set light state to '{}' for device '{}'.\", on, getDeviceId());\n+            logger.debug(\"Exception details:\", t);\n+        });\n+    }\n+\n+    protected void triggerPowerState(final boolean on) {\n+        performPutAction(() -> getWebservice().putPowerState(getDeviceId(), on), t -> {\n+            logger.warn(\"Failed to set the power state to '{}' for device '{}'.\", on, getDeviceId());\n+            logger.debug(\"Exception details:\", t);\n+        });\n+    }\n+\n+    protected void triggerProgram(final long programId) {\n+        performPutAction(() -> getWebservice().putProgram(getDeviceId(), programId), t -> {\n+            logger.warn(\"Failed to activate program with ID '{}' for device '{}'.\", programId, getDeviceId());\n+            logger.debug(\"Exception details:\", t);\n+        });\n+    }\n+\n+    private void performPutAction(Runnable action, Consumer<Exception> onError) {\n+        scheduler.schedule(() -> {\n+            try {\n+                action.run();\n+            } catch (TooManyRequestsException e) {\n+                logger.warn(\"Rate limit is reached.\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        I18NKeys.THING_STATUS_DESCRIPTION_RATELIMIT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjgzMTkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoyMjoxM1rOH9oSOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoyMjoxM1rOH9oSOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4NTIxMA==", "bodyText": "You could use execute() or submit() for scheduling an immediate one-shot task.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534385210", "createdAt": "2020-12-02T18:22:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.Channels.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction.*;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.handler.channel.ActionsChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.DeviceChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.TransitionChannelState;\n+import org.openhab.binding.mielecloud.internal.webservice.ActionStateFetcher;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.TransitionState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.StateType;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract base class for all Miele thing handlers.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Add channel state wrappers\n+ */\n+@NonNullByDefault\n+public abstract class AbstractMieleThingHandler extends BaseThingHandler {\n+    protected final ActionStateFetcher actionFetcher;\n+    protected DeviceState latestDeviceState = new DeviceState(getDeviceId(), null);\n+    protected TransitionState latestTransitionState = new TransitionState(null, latestDeviceState);\n+    protected ActionsState latestActionsState = new ActionsState(getDeviceId(), null);\n+\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    /**\n+     * Creates a new {@link AbstractMieleThingHandler}.\n+     * \n+     * @param thing The thing to handle.\n+     */\n+    public AbstractMieleThingHandler(Thing thing) {\n+        super(thing);\n+        this.actionFetcher = new ActionStateFetcher(this::getWebservice, scheduler);\n+    }\n+\n+    private Optional<MieleBridgeHandler> getMieleBridgeHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            return Optional.empty();\n+        }\n+\n+        BridgeHandler handler = bridge.getHandler();\n+        if (handler == null || !(handler instanceof MieleBridgeHandler)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of((MieleBridgeHandler) handler);\n+    }\n+\n+    protected MieleWebservice getWebservice() {\n+        return getMieleBridgeHandler().map(MieleBridgeHandler::getWebservice)\n+                .orElse(UnavailableMieleWebservice.INSTANCE);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        getWebservice().dispatchDeviceState(getDeviceId());\n+\n+        // If no device state update was received so far, set the device to OFFLINE.\n+        if (getThing().getStatus() == ThingStatus.INITIALIZING) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH.equals(command)) {\n+            updateDeviceState(new DeviceChannelState(latestDeviceState));\n+            updateTransitionState(new TransitionChannelState(latestTransitionState));\n+            updateActionState(new ActionsChannelState(latestActionsState));\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case PROGRAM_START_STOP:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                }\n+                break;\n+\n+            case PROGRAM_START_STOP_PAUSE:\n+                if (PROGRAM_STARTED.matches(command.toString())) {\n+                    triggerProcessAction(START);\n+                } else if (PROGRAM_STOPPED.matches(command.toString())) {\n+                    triggerProcessAction(STOP);\n+                } else if (PROGRAM_PAUSED.matches(command.toString())) {\n+                    triggerProcessAction(PAUSE);\n+                }\n+                break;\n+\n+            case LIGHT_SWITCH:\n+                if (command instanceof OnOffType) {\n+                    triggerLight(OnOffType.ON.equals(command));\n+                }\n+                break;\n+\n+            case POWER_ON_OFF:\n+                if (POWER_ON.matches(command.toString()) || POWER_OFF.matches(command.toString())) {\n+                    triggerPowerState(OnOffType.ON.equals(OnOffType.from(command.toString())));\n+                }\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+    }\n+\n+    /**\n+     * Invoked when an update of the available actions for the device managed by this handler is received from the Miele\n+     * cloud.\n+     */\n+    public final void onProcessActionUpdated(ActionsState actionState) {\n+        latestActionsState = actionState;\n+        updateActionState(new ActionsChannelState(latestActionsState));\n+    }\n+\n+    /**\n+     * Invoked when the device managed by this handler was removed from the Miele cloud.\n+     */\n+    public final void onDeviceRemoved() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, I18NKeys.THING_STATUS_DESCRIPTION_REMOVED);\n+    }\n+\n+    /**\n+     * Invoked when a device state update for the device managed by this handler is received from the Miele cloud.\n+     */\n+    public final void onDeviceStateUpdated(DeviceState deviceState) {\n+        actionFetcher.onDeviceStateUpdated(deviceState);\n+\n+        latestTransitionState = new TransitionState(latestTransitionState, deviceState);\n+        latestDeviceState = deviceState;\n+\n+        updateDeviceState(new DeviceChannelState(latestDeviceState));\n+        updateTransitionState(new TransitionChannelState(latestTransitionState));\n+        updateThingStatus(latestDeviceState);\n+    }\n+\n+    protected void triggerProcessAction(final ProcessAction processAction) {\n+        performPutAction(() -> getWebservice().putProcessAction(getDeviceId(), processAction), t -> {\n+            logger.warn(\"Failed to perform '{}' operation for device '{}'.\", processAction, getDeviceId());\n+            logger.debug(\"Exception details:\", t);\n+        });\n+    }\n+\n+    protected void triggerLight(final boolean on) {\n+        performPutAction(() -> getWebservice().putLight(getDeviceId(), on), t -> {\n+            logger.warn(\"Failed to set light state to '{}' for device '{}'.\", on, getDeviceId());\n+            logger.debug(\"Exception details:\", t);\n+        });\n+    }\n+\n+    protected void triggerPowerState(final boolean on) {\n+        performPutAction(() -> getWebservice().putPowerState(getDeviceId(), on), t -> {\n+            logger.warn(\"Failed to set the power state to '{}' for device '{}'.\", on, getDeviceId());\n+            logger.debug(\"Exception details:\", t);\n+        });\n+    }\n+\n+    protected void triggerProgram(final long programId) {\n+        performPutAction(() -> getWebservice().putProgram(getDeviceId(), programId), t -> {\n+            logger.warn(\"Failed to activate program with ID '{}' for device '{}'.\", programId, getDeviceId());\n+            logger.debug(\"Exception details:\", t);\n+        });\n+    }\n+\n+    private void performPutAction(Runnable action, Consumer<Exception> onError) {\n+        scheduler.schedule(() -> {\n+            try {\n+                action.run();\n+            } catch (TooManyRequestsException e) {\n+                logger.warn(\"Rate limit is reached.\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        I18NKeys.THING_STATUS_DESCRIPTION_RATELIMIT);\n+                onError.accept(e);\n+            } catch (Exception e) {\n+                onError.accept(e);\n+            }\n+        }, 1, TimeUnit.NANOSECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjg0NzU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODoyNjoxOVrOH9ocIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTo0Mjo1NFrOIDw5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4Nzc0Ng==", "bodyText": "You could add the exception's message as the ThingStatusDetailMessage. Then, the logging can be removed, too. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534387746", "createdAt": "2020-12-02T18:26:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgxNzY3Mg==", "bodyText": "We would prefer not to do that for several reasons:\n\ni18n of all messages is planned (we could write the localized message to the status, though)\nWhen this exception is thrown then no system resources could be allocated to fire up an HttpClient (cf. RequestFactoryImpl). In that case something seems to be really wrong with the system openHAB is running on and the user/admin should look into the logs anyway.\n\nWhat we could do in my opinion is to define a localizable constant that gives a hint for this, something like \"Could not allocate required system resources, please check your system.\". How about that?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540817672", "createdAt": "2020-12-11T09:42:54Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4Nzc0Ng=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjkwNzkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo0MToxOVrOH9pBpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo0MToxOVrOH9pBpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5NzM0OA==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534397348", "createdAt": "2020-12-02T18:41:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.warn(\"Could not initialize Miele Cloud bridge: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");\n+            logger.warn(\"If using things-files reload your thing configuration afterwards.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCOUNT_NOT_AUTHORIZED);\n+            // When the authorization takes place handleConfigurationUpdate() will be called which triggers a new\n+            // initialization. Therefore we can leave the bridge in this state.\n+            return;\n+        }\n+        languageProvider.setPrioritizedLanguageProvider(this);\n+        tryInitializeWebservice();\n+\n+        MieleWebservice webservice = getWebservice();\n+        webservice.addConnectionStatusListener(this);\n+        webservice.addDeviceStateListener(this);\n+        if (webservice.hasAccessToken()) {\n+            webservice.connectSse();\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        performLogout();\n+        tokenRefresher.removeTokensFromStorage(getOAuthServiceHandle());\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing {}\", this.getClass().getName());\n+        getWebservice().removeConnectionStatusListener(this);\n+        getWebservice().removeDeviceStateListener(this);\n+        getWebservice().disconnectSse();\n+        languageProvider.unsetPrioritizedLanguageProvider();\n+        tokenRefresher.unsetRefreshListener(getOAuthServiceHandle());\n+\n+        stopWebservice();\n+    }\n+\n+    private void stopWebservice() {\n+        final MieleWebservice webService = this.webService;\n+        this.webService = null;\n+        if (webService == null) {\n+            return;\n+        }\n+\n+        scheduler.submit(() -> {\n+            CompletableFuture<@Nullable Void> logoutFuture = this.logoutFuture;\n+            if (logoutFuture != null) {\n+                try {\n+                    logoutFuture.get();\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Interrupted while waiting for logout!\");\n+                } catch (ExecutionException e) {\n+                    logger.warn(\"Failed to wait for logout: {}\", e.getMessage());\n+                    logger.debug(\"Exception details:\", e);\n+                }\n+            }\n+\n+            try {\n+                webService.close();\n+            } catch (Exception e) {\n+                logger.warn(\"Failed to close webservice: {}\", e.getMessage());\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onNewAccessToken(String accessToken) {\n+        logger.info(\"Setting new access token for webservice access.\");\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken);\n+\n+        // Without this the retry would fail causing the thing to go OFFLINE\n+        getWebservice().setAccessToken(accessToken);\n+\n+        // If there was no access token during initialization then the SSE connection was not established.\n+        getWebservice().connectSse();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void performLogout() {\n+        logoutFuture = new CompletableFuture<>();\n+        scheduler.schedule(() -> {\n+            try {\n+                getWebservice().logout();\n+            } catch (Exception exception) {\n+                logger.warn(\"Failed to logout from Miele cloud.\");\n+                logger.debug(\"Exception details:\", exception);\n+            }\n+            OptionalUtils.ofNullable(logoutFuture).map(future -> future.complete(null));\n+        }, 1, TimeUnit.NANOSECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjkxNzQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo0Mzo1NlrOH9pHvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQyMDowMDoxM1rOJHkYbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5ODkwOQ==", "bodyText": "Actually updateStatus() shouldn't be called when the Thing was already disposed. What's the purpose of this?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534398909", "createdAt": "2020-12-02T18:43:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.warn(\"Could not initialize Miele Cloud bridge: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");\n+            logger.warn(\"If using things-files reload your thing configuration afterwards.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCOUNT_NOT_AUTHORIZED);\n+            // When the authorization takes place handleConfigurationUpdate() will be called which triggers a new\n+            // initialization. Therefore we can leave the bridge in this state.\n+            return;\n+        }\n+        languageProvider.setPrioritizedLanguageProvider(this);\n+        tryInitializeWebservice();\n+\n+        MieleWebservice webservice = getWebservice();\n+        webservice.addConnectionStatusListener(this);\n+        webservice.addDeviceStateListener(this);\n+        if (webservice.hasAccessToken()) {\n+            webservice.connectSse();\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        performLogout();\n+        tokenRefresher.removeTokensFromStorage(getOAuthServiceHandle());\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing {}\", this.getClass().getName());\n+        getWebservice().removeConnectionStatusListener(this);\n+        getWebservice().removeDeviceStateListener(this);\n+        getWebservice().disconnectSse();\n+        languageProvider.unsetPrioritizedLanguageProvider();\n+        tokenRefresher.unsetRefreshListener(getOAuthServiceHandle());\n+\n+        stopWebservice();\n+    }\n+\n+    private void stopWebservice() {\n+        final MieleWebservice webService = this.webService;\n+        this.webService = null;\n+        if (webService == null) {\n+            return;\n+        }\n+\n+        scheduler.submit(() -> {\n+            CompletableFuture<@Nullable Void> logoutFuture = this.logoutFuture;\n+            if (logoutFuture != null) {\n+                try {\n+                    logoutFuture.get();\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Interrupted while waiting for logout!\");\n+                } catch (ExecutionException e) {\n+                    logger.warn(\"Failed to wait for logout: {}\", e.getMessage());\n+                    logger.debug(\"Exception details:\", e);\n+                }\n+            }\n+\n+            try {\n+                webService.close();\n+            } catch (Exception e) {\n+                logger.warn(\"Failed to close webservice: {}\", e.getMessage());\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onNewAccessToken(String accessToken) {\n+        logger.info(\"Setting new access token for webservice access.\");\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken);\n+\n+        // Without this the retry would fail causing the thing to go OFFLINE\n+        getWebservice().setAccessToken(accessToken);\n+\n+        // If there was no access token during initialization then the SSE connection was not established.\n+        getWebservice().connectSse();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void performLogout() {\n+        logoutFuture = new CompletableFuture<>();\n+        scheduler.schedule(() -> {\n+            try {\n+                getWebservice().logout();\n+            } catch (Exception exception) {\n+                logger.warn(\"Failed to logout from Miele cloud.\");\n+                logger.debug(\"Exception details:\", exception);\n+            }\n+            OptionalUtils.ofNullable(logoutFuture).map(future -> future.complete(null));\n+        }, 1, TimeUnit.NANOSECONDS);\n+    }\n+\n+    private void tryInitializeWebservice() {\n+        Optional<String> accessToken = tokenRefresher.getAccessTokenFromStorage(getOAuthServiceHandle());\n+        if (!accessToken.isPresent()) {\n+            logger.info(\"No OAuth2 access token available. Retrying later.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCESS_TOKEN_NOT_CONFIGURED);\n+            return;\n+        }\n+        getWebservice().setAccessToken(accessToken.get());\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken.get());\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        synchronized (this) {\n+            if (getThing().getStatus() == ThingStatus.REMOVING && status != ThingStatus.REMOVED) {\n+                return;\n+            }\n+\n+            super.updateStatus(status, statusDetail, description);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyNDQzOQ==", "bodyText": "In short: Preventing status updates from asynchronous operations after the thing was disposed.\nIn long: In the unlikely event that an OAuth token refresh is triggered short before the bridge is placed in REMOVING the token refresh will run asynchronously and on success try to update the thing status on a then REMOVING bridge. We cannot simply cancel refreshing the tokens as this is handled by the framework. However, checking whether the thing is REMOVING before updating the status is not intuitive either and may cause problems in the future as the caller must synchronize on this, then check whether the thing is disposing and only then update the status. In our opinion it is less error prone to simply suppress status updates while transitioning from REMOVING into REMOVED state.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r536124439", "createdAt": "2020-12-04T14:08:17Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.warn(\"Could not initialize Miele Cloud bridge: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");\n+            logger.warn(\"If using things-files reload your thing configuration afterwards.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCOUNT_NOT_AUTHORIZED);\n+            // When the authorization takes place handleConfigurationUpdate() will be called which triggers a new\n+            // initialization. Therefore we can leave the bridge in this state.\n+            return;\n+        }\n+        languageProvider.setPrioritizedLanguageProvider(this);\n+        tryInitializeWebservice();\n+\n+        MieleWebservice webservice = getWebservice();\n+        webservice.addConnectionStatusListener(this);\n+        webservice.addDeviceStateListener(this);\n+        if (webservice.hasAccessToken()) {\n+            webservice.connectSse();\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        performLogout();\n+        tokenRefresher.removeTokensFromStorage(getOAuthServiceHandle());\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing {}\", this.getClass().getName());\n+        getWebservice().removeConnectionStatusListener(this);\n+        getWebservice().removeDeviceStateListener(this);\n+        getWebservice().disconnectSse();\n+        languageProvider.unsetPrioritizedLanguageProvider();\n+        tokenRefresher.unsetRefreshListener(getOAuthServiceHandle());\n+\n+        stopWebservice();\n+    }\n+\n+    private void stopWebservice() {\n+        final MieleWebservice webService = this.webService;\n+        this.webService = null;\n+        if (webService == null) {\n+            return;\n+        }\n+\n+        scheduler.submit(() -> {\n+            CompletableFuture<@Nullable Void> logoutFuture = this.logoutFuture;\n+            if (logoutFuture != null) {\n+                try {\n+                    logoutFuture.get();\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Interrupted while waiting for logout!\");\n+                } catch (ExecutionException e) {\n+                    logger.warn(\"Failed to wait for logout: {}\", e.getMessage());\n+                    logger.debug(\"Exception details:\", e);\n+                }\n+            }\n+\n+            try {\n+                webService.close();\n+            } catch (Exception e) {\n+                logger.warn(\"Failed to close webservice: {}\", e.getMessage());\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onNewAccessToken(String accessToken) {\n+        logger.info(\"Setting new access token for webservice access.\");\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken);\n+\n+        // Without this the retry would fail causing the thing to go OFFLINE\n+        getWebservice().setAccessToken(accessToken);\n+\n+        // If there was no access token during initialization then the SSE connection was not established.\n+        getWebservice().connectSse();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void performLogout() {\n+        logoutFuture = new CompletableFuture<>();\n+        scheduler.schedule(() -> {\n+            try {\n+                getWebservice().logout();\n+            } catch (Exception exception) {\n+                logger.warn(\"Failed to logout from Miele cloud.\");\n+                logger.debug(\"Exception details:\", exception);\n+            }\n+            OptionalUtils.ofNullable(logoutFuture).map(future -> future.complete(null));\n+        }, 1, TimeUnit.NANOSECONDS);\n+    }\n+\n+    private void tryInitializeWebservice() {\n+        Optional<String> accessToken = tokenRefresher.getAccessTokenFromStorage(getOAuthServiceHandle());\n+        if (!accessToken.isPresent()) {\n+            logger.info(\"No OAuth2 access token available. Retrying later.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCESS_TOKEN_NOT_CONFIGURED);\n+            return;\n+        }\n+        getWebservice().setAccessToken(accessToken.get());\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken.get());\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        synchronized (this) {\n+            if (getThing().getStatus() == ThingStatus.REMOVING && status != ThingStatus.REMOVED) {\n+                return;\n+            }\n+\n+            super.updateStatus(status, statusDetail, description);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5ODkwOQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxNTg4NQ==", "bodyText": "Wouldn't it then make sense to do this in the framework for ALL bindings and not here as a specific implementation just for this one? I'd also prefer to remove this here and rather have an issue/PR filed for openhab-core.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r611915885", "createdAt": "2021-04-12T20:00:13Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.warn(\"Could not initialize Miele Cloud bridge: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");\n+            logger.warn(\"If using things-files reload your thing configuration afterwards.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCOUNT_NOT_AUTHORIZED);\n+            // When the authorization takes place handleConfigurationUpdate() will be called which triggers a new\n+            // initialization. Therefore we can leave the bridge in this state.\n+            return;\n+        }\n+        languageProvider.setPrioritizedLanguageProvider(this);\n+        tryInitializeWebservice();\n+\n+        MieleWebservice webservice = getWebservice();\n+        webservice.addConnectionStatusListener(this);\n+        webservice.addDeviceStateListener(this);\n+        if (webservice.hasAccessToken()) {\n+            webservice.connectSse();\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        performLogout();\n+        tokenRefresher.removeTokensFromStorage(getOAuthServiceHandle());\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing {}\", this.getClass().getName());\n+        getWebservice().removeConnectionStatusListener(this);\n+        getWebservice().removeDeviceStateListener(this);\n+        getWebservice().disconnectSse();\n+        languageProvider.unsetPrioritizedLanguageProvider();\n+        tokenRefresher.unsetRefreshListener(getOAuthServiceHandle());\n+\n+        stopWebservice();\n+    }\n+\n+    private void stopWebservice() {\n+        final MieleWebservice webService = this.webService;\n+        this.webService = null;\n+        if (webService == null) {\n+            return;\n+        }\n+\n+        scheduler.submit(() -> {\n+            CompletableFuture<@Nullable Void> logoutFuture = this.logoutFuture;\n+            if (logoutFuture != null) {\n+                try {\n+                    logoutFuture.get();\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Interrupted while waiting for logout!\");\n+                } catch (ExecutionException e) {\n+                    logger.warn(\"Failed to wait for logout: {}\", e.getMessage());\n+                    logger.debug(\"Exception details:\", e);\n+                }\n+            }\n+\n+            try {\n+                webService.close();\n+            } catch (Exception e) {\n+                logger.warn(\"Failed to close webservice: {}\", e.getMessage());\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onNewAccessToken(String accessToken) {\n+        logger.info(\"Setting new access token for webservice access.\");\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken);\n+\n+        // Without this the retry would fail causing the thing to go OFFLINE\n+        getWebservice().setAccessToken(accessToken);\n+\n+        // If there was no access token during initialization then the SSE connection was not established.\n+        getWebservice().connectSse();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void performLogout() {\n+        logoutFuture = new CompletableFuture<>();\n+        scheduler.schedule(() -> {\n+            try {\n+                getWebservice().logout();\n+            } catch (Exception exception) {\n+                logger.warn(\"Failed to logout from Miele cloud.\");\n+                logger.debug(\"Exception details:\", exception);\n+            }\n+            OptionalUtils.ofNullable(logoutFuture).map(future -> future.complete(null));\n+        }, 1, TimeUnit.NANOSECONDS);\n+    }\n+\n+    private void tryInitializeWebservice() {\n+        Optional<String> accessToken = tokenRefresher.getAccessTokenFromStorage(getOAuthServiceHandle());\n+        if (!accessToken.isPresent()) {\n+            logger.info(\"No OAuth2 access token available. Retrying later.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCESS_TOKEN_NOT_CONFIGURED);\n+            return;\n+        }\n+        getWebservice().setAccessToken(accessToken.get());\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken.get());\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        synchronized (this) {\n+            if (getThing().getStatus() == ThingStatus.REMOVING && status != ThingStatus.REMOVED) {\n+                return;\n+            }\n+\n+            super.updateStatus(status, statusDetail, description);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM5ODkwOQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjkyNjk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo0NjowN1rOH9pNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwOTo0Njo0N1rOIIcAew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMDM1OQ==", "bodyText": "Can you somehow include a detail message, which will be displayed in the UI, that the user gets a clue what's wrong?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534400359", "createdAt": "2020-12-02T18:46:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.warn(\"Could not initialize Miele Cloud bridge: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");\n+            logger.warn(\"If using things-files reload your thing configuration afterwards.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCOUNT_NOT_AUTHORIZED);\n+            // When the authorization takes place handleConfigurationUpdate() will be called which triggers a new\n+            // initialization. Therefore we can leave the bridge in this state.\n+            return;\n+        }\n+        languageProvider.setPrioritizedLanguageProvider(this);\n+        tryInitializeWebservice();\n+\n+        MieleWebservice webservice = getWebservice();\n+        webservice.addConnectionStatusListener(this);\n+        webservice.addDeviceStateListener(this);\n+        if (webservice.hasAccessToken()) {\n+            webservice.connectSse();\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        performLogout();\n+        tokenRefresher.removeTokensFromStorage(getOAuthServiceHandle());\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing {}\", this.getClass().getName());\n+        getWebservice().removeConnectionStatusListener(this);\n+        getWebservice().removeDeviceStateListener(this);\n+        getWebservice().disconnectSse();\n+        languageProvider.unsetPrioritizedLanguageProvider();\n+        tokenRefresher.unsetRefreshListener(getOAuthServiceHandle());\n+\n+        stopWebservice();\n+    }\n+\n+    private void stopWebservice() {\n+        final MieleWebservice webService = this.webService;\n+        this.webService = null;\n+        if (webService == null) {\n+            return;\n+        }\n+\n+        scheduler.submit(() -> {\n+            CompletableFuture<@Nullable Void> logoutFuture = this.logoutFuture;\n+            if (logoutFuture != null) {\n+                try {\n+                    logoutFuture.get();\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Interrupted while waiting for logout!\");\n+                } catch (ExecutionException e) {\n+                    logger.warn(\"Failed to wait for logout: {}\", e.getMessage());\n+                    logger.debug(\"Exception details:\", e);\n+                }\n+            }\n+\n+            try {\n+                webService.close();\n+            } catch (Exception e) {\n+                logger.warn(\"Failed to close webservice: {}\", e.getMessage());\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onNewAccessToken(String accessToken) {\n+        logger.info(\"Setting new access token for webservice access.\");\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken);\n+\n+        // Without this the retry would fail causing the thing to go OFFLINE\n+        getWebservice().setAccessToken(accessToken);\n+\n+        // If there was no access token during initialization then the SSE connection was not established.\n+        getWebservice().connectSse();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void performLogout() {\n+        logoutFuture = new CompletableFuture<>();\n+        scheduler.schedule(() -> {\n+            try {\n+                getWebservice().logout();\n+            } catch (Exception exception) {\n+                logger.warn(\"Failed to logout from Miele cloud.\");\n+                logger.debug(\"Exception details:\", exception);\n+            }\n+            OptionalUtils.ofNullable(logoutFuture).map(future -> future.complete(null));\n+        }, 1, TimeUnit.NANOSECONDS);\n+    }\n+\n+    private void tryInitializeWebservice() {\n+        Optional<String> accessToken = tokenRefresher.getAccessTokenFromStorage(getOAuthServiceHandle());\n+        if (!accessToken.isPresent()) {\n+            logger.info(\"No OAuth2 access token available. Retrying later.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCESS_TOKEN_NOT_CONFIGURED);\n+            return;\n+        }\n+        getWebservice().setAccessToken(accessToken.get());\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken.get());\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        synchronized (this) {\n+            if (getThing().getStatus() == ThingStatus.REMOVING && status != ThingStatus.REMOVED) {\n+                return;\n+            }\n+\n+            super.updateStatus(status, statusDetail, description);\n+        }\n+    }\n+\n+    @Override\n+    public void onConnectionAlive() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void onConnectionError(ConnectionError connectionError, int failedReconnectionAttempts) {\n+        if (connectionError == ConnectionError.AUTHORIZATION_FAILED) {\n+            tryToRefreshAccessToken();\n+            return;\n+        }\n+\n+        if (failedReconnectionAttempts <= NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED\n+                && getThing().getStatus() != ThingStatus.UNKNOWN) {\n+            return;\n+        }\n+\n+        if (getThing().getStatus() == ThingStatus.UNKNOWN && connectionError == ConnectionError.REQUEST_INTERRUPTED\n+                && failedReconnectionAttempts <= NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED) {\n+            return;\n+        }\n+\n+        switch (connectionError) {\n+            case AUTHORIZATION_FAILED:\n+                // Handled above.\n+                break;\n+\n+            case REQUEST_EXECUTION_FAILED:\n+            case SERVICE_UNAVAILABLE:\n+            case RESPONSE_MALFORMED:\n+            case TIMEOUT:\n+            case TOO_MANY_RERQUESTS:\n+            case SSE_STREAM_ENDED:\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                break;\n+\n+            case SERVER_ERROR:\n+            case REQUEST_INTERRUPTED:\n+            case OTHER_HTTP_ERROR:\n+            default:\n+                updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyNzkxOQ==", "bodyText": "I think it wouldn't be helpful as this case handles\n\nHTTP errors we cannot handle any other way than retrying later (what we do)\nInterruptions while sending a request (likely because openHAB is shutting down)\n\nWe could include some generic messages like \"Request to cloud service failed\", but does that really provide reasonable assistance to the user?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540827919", "createdAt": "2020-12-11T09:58:59Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.warn(\"Could not initialize Miele Cloud bridge: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");\n+            logger.warn(\"If using things-files reload your thing configuration afterwards.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCOUNT_NOT_AUTHORIZED);\n+            // When the authorization takes place handleConfigurationUpdate() will be called which triggers a new\n+            // initialization. Therefore we can leave the bridge in this state.\n+            return;\n+        }\n+        languageProvider.setPrioritizedLanguageProvider(this);\n+        tryInitializeWebservice();\n+\n+        MieleWebservice webservice = getWebservice();\n+        webservice.addConnectionStatusListener(this);\n+        webservice.addDeviceStateListener(this);\n+        if (webservice.hasAccessToken()) {\n+            webservice.connectSse();\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        performLogout();\n+        tokenRefresher.removeTokensFromStorage(getOAuthServiceHandle());\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing {}\", this.getClass().getName());\n+        getWebservice().removeConnectionStatusListener(this);\n+        getWebservice().removeDeviceStateListener(this);\n+        getWebservice().disconnectSse();\n+        languageProvider.unsetPrioritizedLanguageProvider();\n+        tokenRefresher.unsetRefreshListener(getOAuthServiceHandle());\n+\n+        stopWebservice();\n+    }\n+\n+    private void stopWebservice() {\n+        final MieleWebservice webService = this.webService;\n+        this.webService = null;\n+        if (webService == null) {\n+            return;\n+        }\n+\n+        scheduler.submit(() -> {\n+            CompletableFuture<@Nullable Void> logoutFuture = this.logoutFuture;\n+            if (logoutFuture != null) {\n+                try {\n+                    logoutFuture.get();\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Interrupted while waiting for logout!\");\n+                } catch (ExecutionException e) {\n+                    logger.warn(\"Failed to wait for logout: {}\", e.getMessage());\n+                    logger.debug(\"Exception details:\", e);\n+                }\n+            }\n+\n+            try {\n+                webService.close();\n+            } catch (Exception e) {\n+                logger.warn(\"Failed to close webservice: {}\", e.getMessage());\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onNewAccessToken(String accessToken) {\n+        logger.info(\"Setting new access token for webservice access.\");\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken);\n+\n+        // Without this the retry would fail causing the thing to go OFFLINE\n+        getWebservice().setAccessToken(accessToken);\n+\n+        // If there was no access token during initialization then the SSE connection was not established.\n+        getWebservice().connectSse();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void performLogout() {\n+        logoutFuture = new CompletableFuture<>();\n+        scheduler.schedule(() -> {\n+            try {\n+                getWebservice().logout();\n+            } catch (Exception exception) {\n+                logger.warn(\"Failed to logout from Miele cloud.\");\n+                logger.debug(\"Exception details:\", exception);\n+            }\n+            OptionalUtils.ofNullable(logoutFuture).map(future -> future.complete(null));\n+        }, 1, TimeUnit.NANOSECONDS);\n+    }\n+\n+    private void tryInitializeWebservice() {\n+        Optional<String> accessToken = tokenRefresher.getAccessTokenFromStorage(getOAuthServiceHandle());\n+        if (!accessToken.isPresent()) {\n+            logger.info(\"No OAuth2 access token available. Retrying later.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCESS_TOKEN_NOT_CONFIGURED);\n+            return;\n+        }\n+        getWebservice().setAccessToken(accessToken.get());\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken.get());\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        synchronized (this) {\n+            if (getThing().getStatus() == ThingStatus.REMOVING && status != ThingStatus.REMOVED) {\n+                return;\n+            }\n+\n+            super.updateStatus(status, statusDetail, description);\n+        }\n+    }\n+\n+    @Override\n+    public void onConnectionAlive() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void onConnectionError(ConnectionError connectionError, int failedReconnectionAttempts) {\n+        if (connectionError == ConnectionError.AUTHORIZATION_FAILED) {\n+            tryToRefreshAccessToken();\n+            return;\n+        }\n+\n+        if (failedReconnectionAttempts <= NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED\n+                && getThing().getStatus() != ThingStatus.UNKNOWN) {\n+            return;\n+        }\n+\n+        if (getThing().getStatus() == ThingStatus.UNKNOWN && connectionError == ConnectionError.REQUEST_INTERRUPTED\n+                && failedReconnectionAttempts <= NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED) {\n+            return;\n+        }\n+\n+        switch (connectionError) {\n+            case AUTHORIZATION_FAILED:\n+                // Handled above.\n+                break;\n+\n+            case REQUEST_EXECUTION_FAILED:\n+            case SERVICE_UNAVAILABLE:\n+            case RESPONSE_MALFORMED:\n+            case TIMEOUT:\n+            case TOO_MANY_RERQUESTS:\n+            case SSE_STREAM_ENDED:\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                break;\n+\n+            case SERVER_ERROR:\n+            case REQUEST_INTERRUPTED:\n+            case OTHER_HTTP_ERROR:\n+            default:\n+                updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMDM1OQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk2MDQ1Nw==", "bodyText": "You could set a generic message that this is a transient error. InterruptedExceptions might not be seen by the user at all in the UI.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r541960457", "createdAt": "2020-12-13T16:42:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.warn(\"Could not initialize Miele Cloud bridge: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");\n+            logger.warn(\"If using things-files reload your thing configuration afterwards.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCOUNT_NOT_AUTHORIZED);\n+            // When the authorization takes place handleConfigurationUpdate() will be called which triggers a new\n+            // initialization. Therefore we can leave the bridge in this state.\n+            return;\n+        }\n+        languageProvider.setPrioritizedLanguageProvider(this);\n+        tryInitializeWebservice();\n+\n+        MieleWebservice webservice = getWebservice();\n+        webservice.addConnectionStatusListener(this);\n+        webservice.addDeviceStateListener(this);\n+        if (webservice.hasAccessToken()) {\n+            webservice.connectSse();\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        performLogout();\n+        tokenRefresher.removeTokensFromStorage(getOAuthServiceHandle());\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing {}\", this.getClass().getName());\n+        getWebservice().removeConnectionStatusListener(this);\n+        getWebservice().removeDeviceStateListener(this);\n+        getWebservice().disconnectSse();\n+        languageProvider.unsetPrioritizedLanguageProvider();\n+        tokenRefresher.unsetRefreshListener(getOAuthServiceHandle());\n+\n+        stopWebservice();\n+    }\n+\n+    private void stopWebservice() {\n+        final MieleWebservice webService = this.webService;\n+        this.webService = null;\n+        if (webService == null) {\n+            return;\n+        }\n+\n+        scheduler.submit(() -> {\n+            CompletableFuture<@Nullable Void> logoutFuture = this.logoutFuture;\n+            if (logoutFuture != null) {\n+                try {\n+                    logoutFuture.get();\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Interrupted while waiting for logout!\");\n+                } catch (ExecutionException e) {\n+                    logger.warn(\"Failed to wait for logout: {}\", e.getMessage());\n+                    logger.debug(\"Exception details:\", e);\n+                }\n+            }\n+\n+            try {\n+                webService.close();\n+            } catch (Exception e) {\n+                logger.warn(\"Failed to close webservice: {}\", e.getMessage());\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onNewAccessToken(String accessToken) {\n+        logger.info(\"Setting new access token for webservice access.\");\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken);\n+\n+        // Without this the retry would fail causing the thing to go OFFLINE\n+        getWebservice().setAccessToken(accessToken);\n+\n+        // If there was no access token during initialization then the SSE connection was not established.\n+        getWebservice().connectSse();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void performLogout() {\n+        logoutFuture = new CompletableFuture<>();\n+        scheduler.schedule(() -> {\n+            try {\n+                getWebservice().logout();\n+            } catch (Exception exception) {\n+                logger.warn(\"Failed to logout from Miele cloud.\");\n+                logger.debug(\"Exception details:\", exception);\n+            }\n+            OptionalUtils.ofNullable(logoutFuture).map(future -> future.complete(null));\n+        }, 1, TimeUnit.NANOSECONDS);\n+    }\n+\n+    private void tryInitializeWebservice() {\n+        Optional<String> accessToken = tokenRefresher.getAccessTokenFromStorage(getOAuthServiceHandle());\n+        if (!accessToken.isPresent()) {\n+            logger.info(\"No OAuth2 access token available. Retrying later.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCESS_TOKEN_NOT_CONFIGURED);\n+            return;\n+        }\n+        getWebservice().setAccessToken(accessToken.get());\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken.get());\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        synchronized (this) {\n+            if (getThing().getStatus() == ThingStatus.REMOVING && status != ThingStatus.REMOVED) {\n+                return;\n+            }\n+\n+            super.updateStatus(status, statusDetail, description);\n+        }\n+    }\n+\n+    @Override\n+    public void onConnectionAlive() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void onConnectionError(ConnectionError connectionError, int failedReconnectionAttempts) {\n+        if (connectionError == ConnectionError.AUTHORIZATION_FAILED) {\n+            tryToRefreshAccessToken();\n+            return;\n+        }\n+\n+        if (failedReconnectionAttempts <= NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED\n+                && getThing().getStatus() != ThingStatus.UNKNOWN) {\n+            return;\n+        }\n+\n+        if (getThing().getStatus() == ThingStatus.UNKNOWN && connectionError == ConnectionError.REQUEST_INTERRUPTED\n+                && failedReconnectionAttempts <= NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED) {\n+            return;\n+        }\n+\n+        switch (connectionError) {\n+            case AUTHORIZATION_FAILED:\n+                // Handled above.\n+                break;\n+\n+            case REQUEST_EXECUTION_FAILED:\n+            case SERVICE_UNAVAILABLE:\n+            case RESPONSE_MALFORMED:\n+            case TIMEOUT:\n+            case TOO_MANY_RERQUESTS:\n+            case SSE_STREAM_ENDED:\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                break;\n+\n+            case SERVER_ERROR:\n+            case REQUEST_INTERRUPTED:\n+            case OTHER_HTTP_ERROR:\n+            default:\n+                updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMDM1OQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcxODM5NQ==", "bodyText": "I added an error message. Please check again.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r545718395", "createdAt": "2020-12-18T09:46:47Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.util.OptionalUtils;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.warn(\"Could not initialize Miele Cloud bridge: {}\", e.getMessage());\n+            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");\n+            logger.warn(\"If using things-files reload your thing configuration afterwards.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCOUNT_NOT_AUTHORIZED);\n+            // When the authorization takes place handleConfigurationUpdate() will be called which triggers a new\n+            // initialization. Therefore we can leave the bridge in this state.\n+            return;\n+        }\n+        languageProvider.setPrioritizedLanguageProvider(this);\n+        tryInitializeWebservice();\n+\n+        MieleWebservice webservice = getWebservice();\n+        webservice.addConnectionStatusListener(this);\n+        webservice.addDeviceStateListener(this);\n+        if (webservice.hasAccessToken()) {\n+            webservice.connectSse();\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        performLogout();\n+        tokenRefresher.removeTokensFromStorage(getOAuthServiceHandle());\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing {}\", this.getClass().getName());\n+        getWebservice().removeConnectionStatusListener(this);\n+        getWebservice().removeDeviceStateListener(this);\n+        getWebservice().disconnectSse();\n+        languageProvider.unsetPrioritizedLanguageProvider();\n+        tokenRefresher.unsetRefreshListener(getOAuthServiceHandle());\n+\n+        stopWebservice();\n+    }\n+\n+    private void stopWebservice() {\n+        final MieleWebservice webService = this.webService;\n+        this.webService = null;\n+        if (webService == null) {\n+            return;\n+        }\n+\n+        scheduler.submit(() -> {\n+            CompletableFuture<@Nullable Void> logoutFuture = this.logoutFuture;\n+            if (logoutFuture != null) {\n+                try {\n+                    logoutFuture.get();\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Interrupted while waiting for logout!\");\n+                } catch (ExecutionException e) {\n+                    logger.warn(\"Failed to wait for logout: {}\", e.getMessage());\n+                    logger.debug(\"Exception details:\", e);\n+                }\n+            }\n+\n+            try {\n+                webService.close();\n+            } catch (Exception e) {\n+                logger.warn(\"Failed to close webservice: {}\", e.getMessage());\n+                logger.debug(\"Exception details:\", e);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void onNewAccessToken(String accessToken) {\n+        logger.info(\"Setting new access token for webservice access.\");\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken);\n+\n+        // Without this the retry would fail causing the thing to go OFFLINE\n+        getWebservice().setAccessToken(accessToken);\n+\n+        // If there was no access token during initialization then the SSE connection was not established.\n+        getWebservice().connectSse();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void performLogout() {\n+        logoutFuture = new CompletableFuture<>();\n+        scheduler.schedule(() -> {\n+            try {\n+                getWebservice().logout();\n+            } catch (Exception exception) {\n+                logger.warn(\"Failed to logout from Miele cloud.\");\n+                logger.debug(\"Exception details:\", exception);\n+            }\n+            OptionalUtils.ofNullable(logoutFuture).map(future -> future.complete(null));\n+        }, 1, TimeUnit.NANOSECONDS);\n+    }\n+\n+    private void tryInitializeWebservice() {\n+        Optional<String> accessToken = tokenRefresher.getAccessTokenFromStorage(getOAuthServiceHandle());\n+        if (!accessToken.isPresent()) {\n+            logger.info(\"No OAuth2 access token available. Retrying later.\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    I18NKeys.BRIDGE_STATUS_DESCRIPTION_ACCESS_TOKEN_NOT_CONFIGURED);\n+            return;\n+        }\n+        getWebservice().setAccessToken(accessToken.get());\n+        updateProperty(MieleCloudBindingConstants.PROPERTY_ACCESS_TOKEN, accessToken.get());\n+    }\n+\n+    @Override\n+    protected void updateStatus(ThingStatus status, ThingStatusDetail statusDetail, @Nullable String description) {\n+        synchronized (this) {\n+            if (getThing().getStatus() == ThingStatus.REMOVING && status != ThingStatus.REMOVED) {\n+                return;\n+            }\n+\n+            super.updateStatus(status, statusDetail, description);\n+        }\n+    }\n+\n+    @Override\n+    public void onConnectionAlive() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void onConnectionError(ConnectionError connectionError, int failedReconnectionAttempts) {\n+        if (connectionError == ConnectionError.AUTHORIZATION_FAILED) {\n+            tryToRefreshAccessToken();\n+            return;\n+        }\n+\n+        if (failedReconnectionAttempts <= NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED\n+                && getThing().getStatus() != ThingStatus.UNKNOWN) {\n+            return;\n+        }\n+\n+        if (getThing().getStatus() == ThingStatus.UNKNOWN && connectionError == ConnectionError.REQUEST_INTERRUPTED\n+                && failedReconnectionAttempts <= NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED) {\n+            return;\n+        }\n+\n+        switch (connectionError) {\n+            case AUTHORIZATION_FAILED:\n+                // Handled above.\n+                break;\n+\n+            case REQUEST_EXECUTION_FAILED:\n+            case SERVICE_UNAVAILABLE:\n+            case RESPONSE_MALFORMED:\n+            case TIMEOUT:\n+            case TOO_MANY_RERQUESTS:\n+            case SSE_STREAM_ENDED:\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                break;\n+\n+            case SERVER_ERROR:\n+            case REQUEST_INTERRUPTED:\n+            case OTHER_HTTP_ERROR:\n+            default:\n+                updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMDM1OQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjkzMjczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo0NzozM1rOH9pQ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo0NzozM1rOH9pQ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMTI2Nw==", "bodyText": "This shouldn't be necessary.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.mielecloud\")\n          \n          \n            \n            @Component(service = ThingHandlerFactory.class, configurationPid = \"binding.mielecloud\")", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534401267", "createdAt": "2020-12-02T18:47:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.i18n.LocaleProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.webservice.DefaultMieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceConfiguration;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.JvmLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.OpenHabLanguageProvider;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory producing the {@link ThingHandler}s for all things supported by this binding.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Added language provider, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.mielecloud\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjkzODEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo0ODo1NFrOH9pUYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo0ODo1NFrOH9pUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwMjE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(new HashSet<ThingTypeUID>(\n          \n          \n            \n                        Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_WASHING_MACHINE, THING_TYPE_WASHER_DRYER,\n          \n          \n            \n                                THING_TYPE_COFFEE_SYSTEM, THING_TYPE_FRIDGE_FREEZER, THING_TYPE_FRIDGE, THING_TYPE_FREEZER,\n          \n          \n            \n                                THING_TYPE_OVEN, THING_TYPE_WINE_STORAGE, THING_TYPE_HOB, THING_TYPE_DRYER, THING_TYPE_DISHWASHER,\n          \n          \n            \n                                THING_TYPE_HOOD, THING_TYPE_DISH_WARMER, THING_TYPE_ROBOTIC_VACUUM_CLEANER)));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(THING_TYPE_BRIDGE, THING_TYPE_WASHING_MACHINE,\n          \n          \n            \n                        THING_TYPE_WASHER_DRYER, THING_TYPE_COFFEE_SYSTEM, THING_TYPE_FRIDGE_FREEZER, THING_TYPE_FRIDGE,\n          \n          \n            \n                        THING_TYPE_FREEZER, THING_TYPE_OVEN, THING_TYPE_WINE_STORAGE, THING_TYPE_HOB, THING_TYPE_DRYER,\n          \n          \n            \n                        THING_TYPE_DISHWASHER, THING_TYPE_HOOD, THING_TYPE_DISH_WARMER, THING_TYPE_ROBOTIC_VACUUM_CLEANER);", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534402145", "createdAt": "2020-12-02T18:48:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.i18n.LocaleProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.webservice.DefaultMieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceConfiguration;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.JvmLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.OpenHabLanguageProvider;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory producing the {@link ThingHandler}s for all things supported by this binding.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Added language provider, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.mielecloud\")\n+public class MieleHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private HttpClientFactory httpClientFactory;\n+    @Nullable\n+    private OAuthTokenRefresher tokenRefresher;\n+    @Nullable\n+    private LocaleProvider localeProvider;\n+\n+    private final MieleWebserviceFactory webserviceFactory = new DefaultMieleWebserviceFactory();\n+\n+    private final Map<ThingUID, @Nullable ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = httpClientFactory;\n+    }\n+\n+    protected void unsetHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = null;\n+    }\n+\n+    @Reference\n+    protected void setOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = tokenRefresher;\n+    }\n+\n+    protected void unsetOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = null;\n+    }\n+\n+    @Reference\n+    protected void setLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = localeProvider;\n+    }\n+\n+    protected void unsetLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = null;\n+    }\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(new HashSet<ThingTypeUID>(\n+            Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_WASHING_MACHINE, THING_TYPE_WASHER_DRYER,\n+                    THING_TYPE_COFFEE_SYSTEM, THING_TYPE_FRIDGE_FREEZER, THING_TYPE_FRIDGE, THING_TYPE_FREEZER,\n+                    THING_TYPE_OVEN, THING_TYPE_WINE_STORAGE, THING_TYPE_HOB, THING_TYPE_DRYER, THING_TYPE_DISHWASHER,\n+                    THING_TYPE_HOOD, THING_TYPE_DISH_WARMER, THING_TYPE_ROBOTIC_VACUUM_CLEANER)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjk2MDE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo1NDoxNVrOH9phlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDozNjo0NlrOIDy8VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwNTUyNg==", "bodyText": "You could use ThingHandlerService which would make this code unnecessary. The documentation for this is not yet merged, but available in the PR: https://github.com/openhab/openhab-docs/pull/1262/files#diff-c4a4d8725430bc2ea046182bfc73ac51349d989c7f6a8a6fa3001a226a09ad98R932", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534405526", "createdAt": "2020-12-02T18:54:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.i18n.LocaleProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.webservice.DefaultMieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceConfiguration;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.JvmLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.OpenHabLanguageProvider;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory producing the {@link ThingHandler}s for all things supported by this binding.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Added language provider, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.mielecloud\")\n+public class MieleHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private HttpClientFactory httpClientFactory;\n+    @Nullable\n+    private OAuthTokenRefresher tokenRefresher;\n+    @Nullable\n+    private LocaleProvider localeProvider;\n+\n+    private final MieleWebserviceFactory webserviceFactory = new DefaultMieleWebserviceFactory();\n+\n+    private final Map<ThingUID, @Nullable ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = httpClientFactory;\n+    }\n+\n+    protected void unsetHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = null;\n+    }\n+\n+    @Reference\n+    protected void setOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = tokenRefresher;\n+    }\n+\n+    protected void unsetOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = null;\n+    }\n+\n+    @Reference\n+    protected void setLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = localeProvider;\n+    }\n+\n+    protected void unsetLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = null;\n+    }\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(new HashSet<ThingTypeUID>(\n+            Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_WASHING_MACHINE, THING_TYPE_WASHER_DRYER,\n+                    THING_TYPE_COFFEE_SYSTEM, THING_TYPE_FRIDGE_FREEZER, THING_TYPE_FRIDGE, THING_TYPE_FREEZER,\n+                    THING_TYPE_OVEN, THING_TYPE_WINE_STORAGE, THING_TYPE_HOB, THING_TYPE_DRYER, THING_TYPE_DISHWASHER,\n+                    THING_TYPE_HOOD, THING_TYPE_DISH_WARMER, THING_TYPE_ROBOTIC_VACUUM_CLEANER)));\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_BRIDGE)) {\n+            return createBridgeHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_WASHING_MACHINE) || thingTypeUID.equals(THING_TYPE_WASHER_DRYER)) {\n+            return new WashingDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_COFFEE_SYSTEM)) {\n+            return new CoffeeSystemThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_FRIDGE_FREEZER) || thingTypeUID.equals(THING_TYPE_FRIDGE)\n+                || thingTypeUID.equals(THING_TYPE_FREEZER)) {\n+            return new CoolingDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_WINE_STORAGE)) {\n+            return new WineStorageDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_OVEN)) {\n+            return new OvenDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HOB)) {\n+            return new HobDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DISHWASHER)) {\n+            return new DishwasherDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DRYER)) {\n+            return new DryerDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HOOD)) {\n+            return new HoodDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DISH_WARMER)) {\n+            return new DishWarmerDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_ROBOTIC_VACUUM_CLEANER)) {\n+            return new RoboticVacuumCleanerDeviceThingHandler(thing);\n+        }\n+\n+        return null;\n+    }\n+\n+    private ThingHandler createBridgeHandler(Thing thing) {\n+        CombiningLanguageProvider languageProvider = getLanguageProvider();\n+        Function<ScheduledExecutorService, MieleWebservice> webserviceFactoryFunction = scheduler -> webserviceFactory\n+                .create(MieleWebserviceConfiguration.builder()\n+                        .withHttpClientFactory(requireNonNull(httpClientFactory, \"httpClientFactory\"))\n+                        .withLanguageProvider(languageProvider)\n+                        .withTokenRefresher(requireNonNull(tokenRefresher, \"tokenRefreseher\"))\n+                        .withServiceHandle(thing.getUID().getAsString()).withScheduler(scheduler).build());\n+\n+        MieleBridgeHandler bridgeHandler = new MieleBridgeHandler((Bridge) thing, webserviceFactoryFunction,\n+                requireNonNull(tokenRefresher, \"tokenRefresher\"), languageProvider);\n+        registerThingDiscoveryService(bridgeHandler);\n+        return bridgeHandler;\n+    }\n+\n+    private CombiningLanguageProvider getLanguageProvider() {\n+        final LocaleProvider localeProvider = this.localeProvider;\n+        if (localeProvider == null) {\n+            return new CombiningLanguageProvider(null, new JvmLanguageProvider());\n+        } else {\n+            return new CombiningLanguageProvider(null, new OpenHabLanguageProvider(localeProvider));\n+        }\n+    }\n+\n+    private synchronized void registerThingDiscoveryService(MieleBridgeHandler bridgeHandler) {\n+        ThingDiscoveryService discoveryService = new ThingDiscoveryService(bridgeHandler);\n+        discoveryService.activate();\n+\n+        ServiceRegistration<?> registration = bundleContext.registerService(DiscoveryService.class.getName(),\n+                discoveryService, new Hashtable<String, Object>());\n+        discoveryServiceRegs.put(bridgeHandler.getThing().getUID(), registration);\n+\n+        logger.debug(\"OSGi service [{}] for {} registered.\", discoveryService.getClass().getName(),\n+                DiscoveryService.class.getName());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1MTI4NA==", "bodyText": "That's pretty cool! Changed it!", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540851284", "createdAt": "2020-12-11T10:36:46Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.i18n.LocaleProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.webservice.DefaultMieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceConfiguration;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.JvmLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.OpenHabLanguageProvider;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory producing the {@link ThingHandler}s for all things supported by this binding.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Added language provider, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.mielecloud\")\n+public class MieleHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private HttpClientFactory httpClientFactory;\n+    @Nullable\n+    private OAuthTokenRefresher tokenRefresher;\n+    @Nullable\n+    private LocaleProvider localeProvider;\n+\n+    private final MieleWebserviceFactory webserviceFactory = new DefaultMieleWebserviceFactory();\n+\n+    private final Map<ThingUID, @Nullable ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = httpClientFactory;\n+    }\n+\n+    protected void unsetHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = null;\n+    }\n+\n+    @Reference\n+    protected void setOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = tokenRefresher;\n+    }\n+\n+    protected void unsetOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = null;\n+    }\n+\n+    @Reference\n+    protected void setLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = localeProvider;\n+    }\n+\n+    protected void unsetLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = null;\n+    }\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(new HashSet<ThingTypeUID>(\n+            Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_WASHING_MACHINE, THING_TYPE_WASHER_DRYER,\n+                    THING_TYPE_COFFEE_SYSTEM, THING_TYPE_FRIDGE_FREEZER, THING_TYPE_FRIDGE, THING_TYPE_FREEZER,\n+                    THING_TYPE_OVEN, THING_TYPE_WINE_STORAGE, THING_TYPE_HOB, THING_TYPE_DRYER, THING_TYPE_DISHWASHER,\n+                    THING_TYPE_HOOD, THING_TYPE_DISH_WARMER, THING_TYPE_ROBOTIC_VACUUM_CLEANER)));\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_BRIDGE)) {\n+            return createBridgeHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_WASHING_MACHINE) || thingTypeUID.equals(THING_TYPE_WASHER_DRYER)) {\n+            return new WashingDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_COFFEE_SYSTEM)) {\n+            return new CoffeeSystemThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_FRIDGE_FREEZER) || thingTypeUID.equals(THING_TYPE_FRIDGE)\n+                || thingTypeUID.equals(THING_TYPE_FREEZER)) {\n+            return new CoolingDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_WINE_STORAGE)) {\n+            return new WineStorageDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_OVEN)) {\n+            return new OvenDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HOB)) {\n+            return new HobDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DISHWASHER)) {\n+            return new DishwasherDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DRYER)) {\n+            return new DryerDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HOOD)) {\n+            return new HoodDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DISH_WARMER)) {\n+            return new DishWarmerDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_ROBOTIC_VACUUM_CLEANER)) {\n+            return new RoboticVacuumCleanerDeviceThingHandler(thing);\n+        }\n+\n+        return null;\n+    }\n+\n+    private ThingHandler createBridgeHandler(Thing thing) {\n+        CombiningLanguageProvider languageProvider = getLanguageProvider();\n+        Function<ScheduledExecutorService, MieleWebservice> webserviceFactoryFunction = scheduler -> webserviceFactory\n+                .create(MieleWebserviceConfiguration.builder()\n+                        .withHttpClientFactory(requireNonNull(httpClientFactory, \"httpClientFactory\"))\n+                        .withLanguageProvider(languageProvider)\n+                        .withTokenRefresher(requireNonNull(tokenRefresher, \"tokenRefreseher\"))\n+                        .withServiceHandle(thing.getUID().getAsString()).withScheduler(scheduler).build());\n+\n+        MieleBridgeHandler bridgeHandler = new MieleBridgeHandler((Bridge) thing, webserviceFactoryFunction,\n+                requireNonNull(tokenRefresher, \"tokenRefresher\"), languageProvider);\n+        registerThingDiscoveryService(bridgeHandler);\n+        return bridgeHandler;\n+    }\n+\n+    private CombiningLanguageProvider getLanguageProvider() {\n+        final LocaleProvider localeProvider = this.localeProvider;\n+        if (localeProvider == null) {\n+            return new CombiningLanguageProvider(null, new JvmLanguageProvider());\n+        } else {\n+            return new CombiningLanguageProvider(null, new OpenHabLanguageProvider(localeProvider));\n+        }\n+    }\n+\n+    private synchronized void registerThingDiscoveryService(MieleBridgeHandler bridgeHandler) {\n+        ThingDiscoveryService discoveryService = new ThingDiscoveryService(bridgeHandler);\n+        discoveryService.activate();\n+\n+        ServiceRegistration<?> registration = bundleContext.registerService(DiscoveryService.class.getName(),\n+                discoveryService, new Hashtable<String, Object>());\n+        discoveryServiceRegs.put(bridgeHandler.getThing().getUID(), registration);\n+\n+        logger.debug(\"OSGi service [{}] for {} registered.\", discoveryService.getClass().getName(),\n+                DiscoveryService.class.getName());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwNTUyNg=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjk2MzUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo1NTowMlrOH9pjrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDozODowNlrOIDy_qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwNjA2MQ==", "bodyText": "What about Objects.requireNonNull()?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534406061", "createdAt": "2020-12-02T18:55:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.i18n.LocaleProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.webservice.DefaultMieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceConfiguration;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.JvmLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.OpenHabLanguageProvider;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory producing the {@link ThingHandler}s for all things supported by this binding.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Added language provider, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.mielecloud\")\n+public class MieleHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private HttpClientFactory httpClientFactory;\n+    @Nullable\n+    private OAuthTokenRefresher tokenRefresher;\n+    @Nullable\n+    private LocaleProvider localeProvider;\n+\n+    private final MieleWebserviceFactory webserviceFactory = new DefaultMieleWebserviceFactory();\n+\n+    private final Map<ThingUID, @Nullable ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = httpClientFactory;\n+    }\n+\n+    protected void unsetHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = null;\n+    }\n+\n+    @Reference\n+    protected void setOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = tokenRefresher;\n+    }\n+\n+    protected void unsetOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = null;\n+    }\n+\n+    @Reference\n+    protected void setLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = localeProvider;\n+    }\n+\n+    protected void unsetLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = null;\n+    }\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(new HashSet<ThingTypeUID>(\n+            Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_WASHING_MACHINE, THING_TYPE_WASHER_DRYER,\n+                    THING_TYPE_COFFEE_SYSTEM, THING_TYPE_FRIDGE_FREEZER, THING_TYPE_FRIDGE, THING_TYPE_FREEZER,\n+                    THING_TYPE_OVEN, THING_TYPE_WINE_STORAGE, THING_TYPE_HOB, THING_TYPE_DRYER, THING_TYPE_DISHWASHER,\n+                    THING_TYPE_HOOD, THING_TYPE_DISH_WARMER, THING_TYPE_ROBOTIC_VACUUM_CLEANER)));\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_BRIDGE)) {\n+            return createBridgeHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_WASHING_MACHINE) || thingTypeUID.equals(THING_TYPE_WASHER_DRYER)) {\n+            return new WashingDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_COFFEE_SYSTEM)) {\n+            return new CoffeeSystemThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_FRIDGE_FREEZER) || thingTypeUID.equals(THING_TYPE_FRIDGE)\n+                || thingTypeUID.equals(THING_TYPE_FREEZER)) {\n+            return new CoolingDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_WINE_STORAGE)) {\n+            return new WineStorageDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_OVEN)) {\n+            return new OvenDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HOB)) {\n+            return new HobDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DISHWASHER)) {\n+            return new DishwasherDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DRYER)) {\n+            return new DryerDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HOOD)) {\n+            return new HoodDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DISH_WARMER)) {\n+            return new DishWarmerDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_ROBOTIC_VACUUM_CLEANER)) {\n+            return new RoboticVacuumCleanerDeviceThingHandler(thing);\n+        }\n+\n+        return null;\n+    }\n+\n+    private ThingHandler createBridgeHandler(Thing thing) {\n+        CombiningLanguageProvider languageProvider = getLanguageProvider();\n+        Function<ScheduledExecutorService, MieleWebservice> webserviceFactoryFunction = scheduler -> webserviceFactory\n+                .create(MieleWebserviceConfiguration.builder()\n+                        .withHttpClientFactory(requireNonNull(httpClientFactory, \"httpClientFactory\"))\n+                        .withLanguageProvider(languageProvider)\n+                        .withTokenRefresher(requireNonNull(tokenRefresher, \"tokenRefreseher\"))\n+                        .withServiceHandle(thing.getUID().getAsString()).withScheduler(scheduler).build());\n+\n+        MieleBridgeHandler bridgeHandler = new MieleBridgeHandler((Bridge) thing, webserviceFactoryFunction,\n+                requireNonNull(tokenRefresher, \"tokenRefresher\"), languageProvider);\n+        registerThingDiscoveryService(bridgeHandler);\n+        return bridgeHandler;\n+    }\n+\n+    private CombiningLanguageProvider getLanguageProvider() {\n+        final LocaleProvider localeProvider = this.localeProvider;\n+        if (localeProvider == null) {\n+            return new CombiningLanguageProvider(null, new JvmLanguageProvider());\n+        } else {\n+            return new CombiningLanguageProvider(null, new OpenHabLanguageProvider(localeProvider));\n+        }\n+    }\n+\n+    private synchronized void registerThingDiscoveryService(MieleBridgeHandler bridgeHandler) {\n+        ThingDiscoveryService discoveryService = new ThingDiscoveryService(bridgeHandler);\n+        discoveryService.activate();\n+\n+        ServiceRegistration<?> registration = bundleContext.registerService(DiscoveryService.class.getName(),\n+                discoveryService, new Hashtable<String, Object>());\n+        discoveryServiceRegs.put(bridgeHandler.getThing().getUID(), registration);\n+\n+        logger.debug(\"OSGi service [{}] for {} registered.\", discoveryService.getClass().getName(),\n+                DiscoveryService.class.getName());\n+    }\n+\n+    @Override\n+    protected void removeHandler(ThingHandler thingHandler) {\n+        if (!(thingHandler instanceof MieleBridgeHandler)) {\n+            return;\n+        }\n+\n+        unregisterDiscoveryService(thingHandler.getThing().getUID());\n+    }\n+\n+    private synchronized void unregisterDiscoveryService(ThingUID uid) {\n+        ServiceRegistration<?> registration = discoveryServiceRegs.remove(uid);\n+        if (registration != null) {\n+            ThingDiscoveryService service = (ThingDiscoveryService) bundleContext\n+                    .getService(registration.getReference());\n+            registration.unregister();\n+            if (service != null) {\n+                service.deactivate();\n+            }\n+        }\n+    }\n+\n+    private <T> T requireNonNull(@Nullable T obj, String objName) {\n+        if (obj == null) {\n+            throw new IllegalArgumentException(objName + \" must not be null\");\n+        }\n+        return obj;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1MjEzNw==", "bodyText": "This was a remnant of our workarounds for the static null-checks and became obsolete through constructor injection. I deleted it.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540852137", "createdAt": "2020-12-11T10:38:06Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleHandlerFactory.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.i18n.LocaleProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.webservice.DefaultMieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceConfiguration;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebserviceFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.JvmLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.OpenHabLanguageProvider;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory producing the {@link ThingHandler}s for all things supported by this binding.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Added language provider, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.mielecloud\")\n+public class MieleHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private HttpClientFactory httpClientFactory;\n+    @Nullable\n+    private OAuthTokenRefresher tokenRefresher;\n+    @Nullable\n+    private LocaleProvider localeProvider;\n+\n+    private final MieleWebserviceFactory webserviceFactory = new DefaultMieleWebserviceFactory();\n+\n+    private final Map<ThingUID, @Nullable ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = httpClientFactory;\n+    }\n+\n+    protected void unsetHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClientFactory = null;\n+    }\n+\n+    @Reference\n+    protected void setOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = tokenRefresher;\n+    }\n+\n+    protected void unsetOAuthTokenRefresher(OAuthTokenRefresher tokenRefresher) {\n+        this.tokenRefresher = null;\n+    }\n+\n+    @Reference\n+    protected void setLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = localeProvider;\n+    }\n+\n+    protected void unsetLocaleProvider(LocaleProvider localeProvider) {\n+        this.localeProvider = null;\n+    }\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(new HashSet<ThingTypeUID>(\n+            Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_WASHING_MACHINE, THING_TYPE_WASHER_DRYER,\n+                    THING_TYPE_COFFEE_SYSTEM, THING_TYPE_FRIDGE_FREEZER, THING_TYPE_FRIDGE, THING_TYPE_FREEZER,\n+                    THING_TYPE_OVEN, THING_TYPE_WINE_STORAGE, THING_TYPE_HOB, THING_TYPE_DRYER, THING_TYPE_DISHWASHER,\n+                    THING_TYPE_HOOD, THING_TYPE_DISH_WARMER, THING_TYPE_ROBOTIC_VACUUM_CLEANER)));\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_BRIDGE)) {\n+            return createBridgeHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_WASHING_MACHINE) || thingTypeUID.equals(THING_TYPE_WASHER_DRYER)) {\n+            return new WashingDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_COFFEE_SYSTEM)) {\n+            return new CoffeeSystemThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_FRIDGE_FREEZER) || thingTypeUID.equals(THING_TYPE_FRIDGE)\n+                || thingTypeUID.equals(THING_TYPE_FREEZER)) {\n+            return new CoolingDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_WINE_STORAGE)) {\n+            return new WineStorageDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_OVEN)) {\n+            return new OvenDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HOB)) {\n+            return new HobDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DISHWASHER)) {\n+            return new DishwasherDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DRYER)) {\n+            return new DryerDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HOOD)) {\n+            return new HoodDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DISH_WARMER)) {\n+            return new DishWarmerDeviceThingHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_ROBOTIC_VACUUM_CLEANER)) {\n+            return new RoboticVacuumCleanerDeviceThingHandler(thing);\n+        }\n+\n+        return null;\n+    }\n+\n+    private ThingHandler createBridgeHandler(Thing thing) {\n+        CombiningLanguageProvider languageProvider = getLanguageProvider();\n+        Function<ScheduledExecutorService, MieleWebservice> webserviceFactoryFunction = scheduler -> webserviceFactory\n+                .create(MieleWebserviceConfiguration.builder()\n+                        .withHttpClientFactory(requireNonNull(httpClientFactory, \"httpClientFactory\"))\n+                        .withLanguageProvider(languageProvider)\n+                        .withTokenRefresher(requireNonNull(tokenRefresher, \"tokenRefreseher\"))\n+                        .withServiceHandle(thing.getUID().getAsString()).withScheduler(scheduler).build());\n+\n+        MieleBridgeHandler bridgeHandler = new MieleBridgeHandler((Bridge) thing, webserviceFactoryFunction,\n+                requireNonNull(tokenRefresher, \"tokenRefresher\"), languageProvider);\n+        registerThingDiscoveryService(bridgeHandler);\n+        return bridgeHandler;\n+    }\n+\n+    private CombiningLanguageProvider getLanguageProvider() {\n+        final LocaleProvider localeProvider = this.localeProvider;\n+        if (localeProvider == null) {\n+            return new CombiningLanguageProvider(null, new JvmLanguageProvider());\n+        } else {\n+            return new CombiningLanguageProvider(null, new OpenHabLanguageProvider(localeProvider));\n+        }\n+    }\n+\n+    private synchronized void registerThingDiscoveryService(MieleBridgeHandler bridgeHandler) {\n+        ThingDiscoveryService discoveryService = new ThingDiscoveryService(bridgeHandler);\n+        discoveryService.activate();\n+\n+        ServiceRegistration<?> registration = bundleContext.registerService(DiscoveryService.class.getName(),\n+                discoveryService, new Hashtable<String, Object>());\n+        discoveryServiceRegs.put(bridgeHandler.getThing().getUID(), registration);\n+\n+        logger.debug(\"OSGi service [{}] for {} registered.\", discoveryService.getClass().getName(),\n+                DiscoveryService.class.getName());\n+    }\n+\n+    @Override\n+    protected void removeHandler(ThingHandler thingHandler) {\n+        if (!(thingHandler instanceof MieleBridgeHandler)) {\n+            return;\n+        }\n+\n+        unregisterDiscoveryService(thingHandler.getThing().getUID());\n+    }\n+\n+    private synchronized void unregisterDiscoveryService(ThingUID uid) {\n+        ServiceRegistration<?> registration = discoveryServiceRegs.remove(uid);\n+        if (registration != null) {\n+            ThingDiscoveryService service = (ThingDiscoveryService) bundleContext\n+                    .getService(registration.getReference());\n+            registration.unregister();\n+            if (service != null) {\n+                service.deactivate();\n+            }\n+        }\n+    }\n+\n+    private <T> T requireNonNull(@Nullable T obj, String objName) {\n+        if (obj == null) {\n+            throw new IllegalArgumentException(objName + \" must not be null\");\n+        }\n+        return obj;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwNjA2MQ=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjk3Nzc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/util/OptionalUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODo1ODo0MVrOH9psUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1Mjo0MlrOIDzhmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwODI3NA==", "bodyText": "We had an update to the null annotation checks recently. Did you check if this is still necessary?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r534408274", "createdAt": "2020-12-02T18:58:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/util/OptionalUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.util;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * Utility class to prevent problems with null annotations with {@link Optional}s.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2MDgyNQ==", "bodyText": "It isn't, I inlined the class.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540860825", "createdAt": "2020-12-11T10:52:42Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/util/OptionalUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.util;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * Utility class to prevent problems with null annotations with {@link Optional}s.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwODI3NA=="}, "originalCommit": {"oid": "6582025c1528e8b30c0ace82e86da942293af0d5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2Mjk5MTgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/api/WineStorageDeviceTemperatureState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTo1NjowOVrOH_JX7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTo1NjowOVrOH_JX7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3NTkxNg==", "bodyText": "Set.of()", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r535975916", "createdAt": "2020-12-04T09:56:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/api/WineStorageDeviceTemperatureState.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.api;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.DeviceType;\n+\n+/**\n+ * Provides easy access to temperature values mapped for wine storage devices.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WineStorageDeviceTemperatureState {\n+    private static final Set<DeviceType> ALL_WINE_STORAGES = Collections.unmodifiableSet(\n+            new HashSet<>(Arrays.asList(DeviceType.WINE_CABINET, DeviceType.WINE_CABINET_FREEZER_COMBINATION,\n+                    DeviceType.WINE_CONDITIONING_UNIT, DeviceType.WINE_STORAGE_CONDITIONING_UNIT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTEwMjY3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/binding/binding.xml", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODozNTo1N1rOIAN2pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzoyNDowNFrOIJxAoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5Nzg5NQ==", "bodyText": "The author tag is deprecated and should therefore be removed. See openhab/openhab-core#1844.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537097895", "createdAt": "2020-12-06T18:35:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"mielecloud\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>@text/binding.mielecloud.name</name>\n+\t<description>@text/binding.mielecloud.description</description>\n+\t<author>Miele &amp; Cie. KG</author>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NjY0Nw==", "bodyText": "We removed it. Is there any other (openHAB official) possibility for Miele to state that they kicked-off development of this binding?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540866647", "createdAt": "2020-12-11T11:02:24Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"mielecloud\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>@text/binding.mielecloud.name</name>\n+\t<description>@text/binding.mielecloud.description</description>\n+\t<author>Miele &amp; Cie. KG</author>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5Nzg5NQ=="}, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk2MDU2NA==", "bodyText": "You could include Miele in the author tag in each file.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r541960564", "createdAt": "2020-12-13T16:43:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"mielecloud\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>@text/binding.mielecloud.name</name>\n+\t<description>@text/binding.mielecloud.description</description>\n+\t<author>Miele &amp; Cie. KG</author>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5Nzg5NQ=="}, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNzA0MA==", "bodyText": "We discussed this with Miele and came to the conclusion that including them as author in every file isn't reasonable. Miele would rather like to include a small section at the end of the README. Something like\nDevelopment of this binding was initiated by Miele & Cie. KG.\n\nCan we do this?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r545617040", "createdAt": "2020-12-18T07:22:46Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"mielecloud\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>@text/binding.mielecloud.name</name>\n+\t<description>@text/binding.mielecloud.description</description>\n+\t<author>Miele &amp; Cie. KG</author>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5Nzg5NQ=="}, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc0NzEyOQ==", "bodyText": "Sure.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r545747129", "createdAt": "2020-12-18T10:39:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"mielecloud\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>@text/binding.mielecloud.name</name>\n+\t<description>@text/binding.mielecloud.description</description>\n+\t<author>Miele &amp; Cie. KG</author>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5Nzg5NQ=="}, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExMTA3Mw==", "bodyText": "We added a paragraph with an acknowledgement.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r547111073", "createdAt": "2020-12-22T07:24:04Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"mielecloud\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>@text/binding.mielecloud.name</name>\n+\t<description>@text/binding.mielecloud.description</description>\n+\t<author>Miele &amp; Cie. KG</author>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5Nzg5NQ=="}, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTEwMzg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/config/configDescription.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODozNjo0MlrOIAN3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo0MDoxMFrOID1I-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5ODAzMQ==", "bodyText": "What's the purpose of this file?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537098031", "createdAt": "2020-12-06T18:36:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/config/configDescription.xml", "diffHunk": "@@ -0,0 +1,6 @@\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 http://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\t<config-description uri=\"thing-type:mielecloud:device\" />\n+</config-description:config-descriptions>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4NzI5MA==", "bodyText": "We used to have something in there, but it is not required any more. Removed it.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540887290", "createdAt": "2020-12-11T11:40:10Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/config/configDescription.xml", "diffHunk": "@@ -0,0 +1,6 @@\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 http://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\t<config-description uri=\"thing-type:mielecloud:device\" />\n+</config-description:config-descriptions>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5ODAzMQ=="}, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTExODY2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/i18n/mielecloud.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODo0NzoxMFrOIAN93Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODo0NzoxMFrOIAN93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5OTc0MQ==", "bodyText": "Words in labels should be capitalized (except prepositions and so on). See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions\nLabels are expected to be as short as possible. Guideline is 2-3 words with up to 25 chars.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537099741", "createdAt": "2020-12-06T18:47:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/i18n/mielecloud.properties", "diffHunk": "@@ -0,0 +1,248 @@\n+# Binding related texts\n+binding.mielecloud.name=Miele@home Cloud Binding\n+binding.mielecloud.description=This is the cloud-based Miele@home binding.\n+\n+# Thing related texts\n+thing-type.mielecloud.account.label=Miele@home Account\n+thing-type.mielecloud.account.description=The Miele@home Account is used to access linked Miele Conn@ct smart home devices.\n+\n+thing-type.config.mielecloud.account.locale.label=Locale\n+thing-type.config.mielecloud.account.locale.description=Locale to be used for API calls.\n+\n+thing-type.mielecloud.coffee_system.label=Coffee System\n+thing-type.mielecloud.coffee_system.description=The generic thing type for all Miele coffee systems.\n+\n+thing-type.mielecloud.dishwasher.label=Dishwasher\n+thing-type.mielecloud.dishwasher.description=The generic thing type for all Miele dish washing devices.\n+\n+thing-type.mielecloud.dish_warmer.label=Dish Warmer\n+thing-type.mielecloud.dish_warmer.description=The generic thing type for all Miele dish warmer devices.\n+\n+thing-type.mielecloud.dryer.label=Tumble Dryer\n+thing-type.mielecloud.dryer.description=The generic thing type for all Miele drying devices.\n+\n+thing-type.mielecloud.freezer.label=Freezer\n+thing-type.mielecloud.freezer.description=The generic thing type for all Miele freezer devices.\n+\n+thing-type.mielecloud.fridge.label=Fridge\n+thing-type.mielecloud.fridge.description=The generic thing type for all Miele fridge devices.\n+\n+thing-type.mielecloud.fridge_freezer.label=Fridge Freezer\n+thing-type.mielecloud.fridge_freezer.description=The generic thing type for all Miele fridge freezer devices.\n+\n+thing-type.mielecloud.hob.label=Hob\n+thing-type.mielecloud.hob.description=The generic thing type for all Miele hob devices.\n+\n+thing-type.mielecloud.hood.label=Hood\n+thing-type.mielecloud.hood.description=The generic thing type for all Miele hood devices.\n+\n+thing-type.mielecloud.oven.label=Oven\n+thing-type.mielecloud.oven.description=The generic thing type for all Miele oven devices. Includes also Steam Ovens and Dialog Oven.\n+\n+thing-type.mielecloud.robotic_vacuum_cleaner.label=Robotic Vacuum Cleaner\n+thing-type.mielecloud.robotic_vacuum_cleaner.description=The generic thing type for all Miele robotic vacuum cleaner devices.\n+\n+thing-type.mielecloud.washer_dryer.label=Washer Dryer\n+thing-type.mielecloud.washer_dryer.description=The generic thing type for all Miele washer dryer devices.\n+\n+thing-type.mielecloud.washing_machine.label=Washing Machine\n+thing-type.mielecloud.washing_machine.description=The generic thing type for all Miele washing devices.\n+\n+thing-type.mielecloud.wine_storage.label=Wine Storage\n+thing-type.mielecloud.wine_storage.description=The generic thing type for all Miele wine storage devices.\n+\n+# Channel related texts\n+channel-type.mielecloud.remote_control_can_be_started.label=Remote control can be started", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTEyMDI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/thing/bridge.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODo0Nzo1OFrOIAN-kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODo0Nzo1OFrOIAN-kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5OTkyMA==", "bodyText": "The required tag is deprecated. You could use the attribute instead: required=\"true\"", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537099920", "createdAt": "2020-12-06T18:47:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,28 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mielecloud\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Miele Cloud Connector Bridge -->\n+\t<bridge-type id=\"account\">\n+\t\t<label>@text/thing-type.mielecloud.account.label</label>\n+\t\t<description>@text/thing-type.mielecloud.account.description</description>\n+\t\t<category>WebService</category>\n+\n+\t\t<properties>\n+\t\t\t<property name=\"vendor\">Miele</property>\n+\t\t\t<property name=\"modelId\">Cloud Connector</property>\n+\t\t\t<property name=\"connection\">INTERNET</property>\n+\t\t\t<!-- accessToken property is set on creation. -->\n+\t\t</properties>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"locale\" type=\"text\">\n+\t\t\t\t<label>@text/thing-type.config.mielecloud.account.locale.label</label>\n+\t\t\t\t<description>@text/thing-type.config.mielecloud.account.locale.description</description>\n+\t\t\t\t<required>true</required>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTEyMjkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/thing/channelTypes.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODo1MDowNlrOIAN_xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODo1MDowNlrOIAN_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMDIyOQ==", "bodyText": "Please check all.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<category>Number:Time</category>\n          \n          \n            \n            \t\t<category>Number</category>", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537100229", "createdAt": "2020-12-06T18:50:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/thing/channelTypes.xml", "diffHunk": "@@ -0,0 +1,448 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mielecloud\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"remote_control_can_be_started\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_started.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_started.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_stopped\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_stopped.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_stopped.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_paused\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_paused.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_paused.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_switched_on\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_switched_on.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_switched_on.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_switched_off\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_switched_off.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_switched_off.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_set_program_active\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_set_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_set_program_active.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"spinning_speed\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.spinning_speed.label</label>\n+\t\t<description>@text/channel-type.mielecloud.spinning_speed.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"spinning_speed_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.spinning_speed_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.spinning_speed_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_active.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_active_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_active_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_active_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"dish_warmer_program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.dish_warmer_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.dish_warmer_program_active.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">@text/channel-option.mielecloud.dish_warmer_program_active.warming_cups_glasses</option>\n+\t\t\t\t<option value=\"2\">@text/channel-option.mielecloud.dish_warmer_program_active.warming_dishes_plates</option>\n+\t\t\t\t<option value=\"3\">@text/channel-option.mielecloud.dish_warmer_program_active.keeping_food_warm</option>\n+\t\t\t\t<option value=\"4\">@text/channel-option.mielecloud.dish_warmer_program_active.low_temperature_cooking</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"vacuum_cleaner_program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.vacuum_cleaner_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.vacuum_cleaner_program_active.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.auto</option>\n+\t\t\t\t<option value=\"2\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.spot</option>\n+\t\t\t\t<option value=\"3\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.turbo</option>\n+\t\t\t\t<option value=\"4\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.silent</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_phase\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_phase.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_phase.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_phase_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_phase_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_phase_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"operation_state\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.operation_state.label</label>\n+\t\t<description>@text/channel-type.mielecloud.operation_state.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"operation_state_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.operation_state_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.operation_state_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start.description</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_stop\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_stop.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_stop.description</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start_stop\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start_stop.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start_stop.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"start\">@text/channel-option.mielecloud.program_start_stop.start</option>\n+\t\t\t\t<option value=\"stop\">@text/channel-option.mielecloud.program_start_stop.stop</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start_stop_pause\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start_stop_pause.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start_stop_pause.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"start\">@text/channel-option.mielecloud.program_start_stop_pause.start</option>\n+\t\t\t\t<option value=\"stop\">@text/channel-option.mielecloud.program_start_stop_pause.stop</option>\n+\t\t\t\t<option value=\"pause\">@text/channel-option.mielecloud.program_start_stop_pause.pause</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power_state_on_off\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.power_state_on_off.label</label>\n+\t\t<description>@text/channel-type.mielecloud.power_state_on_off.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"on\">@text/channel-option.mielecloud.power_state_on_off.on</option>\n+\t\t\t\t<option value=\"off\">@text/channel-option.mielecloud.power_state_on_off.off</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"finish_state\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.finish_state.label</label>\n+\t\t<description>@text/channel-type.mielecloud.finish_state.description</description>\n+\t\t<category>Alarm</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"delayed_start_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.delayed_start_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.delayed_start_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_remaining_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_remaining_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_remaining_time.description</description>\n+\t\t<category>Number:Time</category>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTEyNDU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/thing/channelTypes.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODo1MToyOVrOIAOAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1NjozOVrOID1rnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMDQxNw==", "bodyText": "%unit% does only work if you use Units of Measure.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537100417", "createdAt": "2020-12-06T18:51:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/thing/channelTypes.xml", "diffHunk": "@@ -0,0 +1,448 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mielecloud\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"remote_control_can_be_started\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_started.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_started.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_stopped\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_stopped.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_stopped.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_paused\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_paused.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_paused.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_switched_on\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_switched_on.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_switched_on.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_switched_off\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_switched_off.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_switched_off.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_set_program_active\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_set_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_set_program_active.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"spinning_speed\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.spinning_speed.label</label>\n+\t\t<description>@text/channel-type.mielecloud.spinning_speed.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"spinning_speed_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.spinning_speed_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.spinning_speed_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_active.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_active_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_active_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_active_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"dish_warmer_program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.dish_warmer_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.dish_warmer_program_active.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">@text/channel-option.mielecloud.dish_warmer_program_active.warming_cups_glasses</option>\n+\t\t\t\t<option value=\"2\">@text/channel-option.mielecloud.dish_warmer_program_active.warming_dishes_plates</option>\n+\t\t\t\t<option value=\"3\">@text/channel-option.mielecloud.dish_warmer_program_active.keeping_food_warm</option>\n+\t\t\t\t<option value=\"4\">@text/channel-option.mielecloud.dish_warmer_program_active.low_temperature_cooking</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"vacuum_cleaner_program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.vacuum_cleaner_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.vacuum_cleaner_program_active.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.auto</option>\n+\t\t\t\t<option value=\"2\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.spot</option>\n+\t\t\t\t<option value=\"3\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.turbo</option>\n+\t\t\t\t<option value=\"4\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.silent</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_phase\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_phase.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_phase.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_phase_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_phase_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_phase_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"operation_state\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.operation_state.label</label>\n+\t\t<description>@text/channel-type.mielecloud.operation_state.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"operation_state_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.operation_state_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.operation_state_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start.description</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_stop\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_stop.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_stop.description</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start_stop\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start_stop.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start_stop.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"start\">@text/channel-option.mielecloud.program_start_stop.start</option>\n+\t\t\t\t<option value=\"stop\">@text/channel-option.mielecloud.program_start_stop.stop</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start_stop_pause\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start_stop_pause.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start_stop_pause.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"start\">@text/channel-option.mielecloud.program_start_stop_pause.start</option>\n+\t\t\t\t<option value=\"stop\">@text/channel-option.mielecloud.program_start_stop_pause.stop</option>\n+\t\t\t\t<option value=\"pause\">@text/channel-option.mielecloud.program_start_stop_pause.pause</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power_state_on_off\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.power_state_on_off.label</label>\n+\t\t<description>@text/channel-type.mielecloud.power_state_on_off.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"on\">@text/channel-option.mielecloud.power_state_on_off.on</option>\n+\t\t\t\t<option value=\"off\">@text/channel-option.mielecloud.power_state_on_off.off</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"finish_state\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.finish_state.label</label>\n+\t\t<description>@text/channel-type.mielecloud.finish_state.description</description>\n+\t\t<category>Alarm</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"delayed_start_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.delayed_start_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.delayed_start_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_remaining_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_remaining_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_remaining_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_elapsed_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_elapsed_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_elapsed_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_progress\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_progress.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_progress.description</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" pattern=\"%d %%\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"drying_target\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.drying_target.label</label>\n+\t\t<description>@text/channel-type.mielecloud.drying_target.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"drying_target_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.drying_target_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.drying_target_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"pre_heat_finished\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.pre_heat_finished.label</label>\n+\t\t<description>@text/channel-type.mielecloud.pre_heat_finished.description</description>\n+\t\t<category>Alarm</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature_target\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.temperature_target.label</label>\n+\t\t<description>@text/channel-type.mielecloud.temperature_target.description</description>\n+\t\t<category>Number:Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NjE1Nw==", "bodyText": "As commented above, we added Units of Measure for temperature channels.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540896157", "createdAt": "2020-12-11T11:56:39Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/thing/channelTypes.xml", "diffHunk": "@@ -0,0 +1,448 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mielecloud\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"remote_control_can_be_started\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_started.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_started.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_stopped\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_stopped.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_stopped.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_paused\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_paused.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_paused.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_switched_on\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_switched_on.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_switched_on.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_switched_off\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_switched_off.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_switched_off.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_set_program_active\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_set_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_set_program_active.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"spinning_speed\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.spinning_speed.label</label>\n+\t\t<description>@text/channel-type.mielecloud.spinning_speed.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"spinning_speed_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.spinning_speed_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.spinning_speed_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_active.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_active_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_active_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_active_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"dish_warmer_program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.dish_warmer_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.dish_warmer_program_active.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">@text/channel-option.mielecloud.dish_warmer_program_active.warming_cups_glasses</option>\n+\t\t\t\t<option value=\"2\">@text/channel-option.mielecloud.dish_warmer_program_active.warming_dishes_plates</option>\n+\t\t\t\t<option value=\"3\">@text/channel-option.mielecloud.dish_warmer_program_active.keeping_food_warm</option>\n+\t\t\t\t<option value=\"4\">@text/channel-option.mielecloud.dish_warmer_program_active.low_temperature_cooking</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"vacuum_cleaner_program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.vacuum_cleaner_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.vacuum_cleaner_program_active.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.auto</option>\n+\t\t\t\t<option value=\"2\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.spot</option>\n+\t\t\t\t<option value=\"3\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.turbo</option>\n+\t\t\t\t<option value=\"4\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.silent</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_phase\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_phase.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_phase.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_phase_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_phase_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_phase_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"operation_state\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.operation_state.label</label>\n+\t\t<description>@text/channel-type.mielecloud.operation_state.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"operation_state_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.operation_state_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.operation_state_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start.description</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_stop\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_stop.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_stop.description</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start_stop\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start_stop.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start_stop.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"start\">@text/channel-option.mielecloud.program_start_stop.start</option>\n+\t\t\t\t<option value=\"stop\">@text/channel-option.mielecloud.program_start_stop.stop</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start_stop_pause\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start_stop_pause.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start_stop_pause.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"start\">@text/channel-option.mielecloud.program_start_stop_pause.start</option>\n+\t\t\t\t<option value=\"stop\">@text/channel-option.mielecloud.program_start_stop_pause.stop</option>\n+\t\t\t\t<option value=\"pause\">@text/channel-option.mielecloud.program_start_stop_pause.pause</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power_state_on_off\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.power_state_on_off.label</label>\n+\t\t<description>@text/channel-type.mielecloud.power_state_on_off.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"on\">@text/channel-option.mielecloud.power_state_on_off.on</option>\n+\t\t\t\t<option value=\"off\">@text/channel-option.mielecloud.power_state_on_off.off</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"finish_state\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.finish_state.label</label>\n+\t\t<description>@text/channel-type.mielecloud.finish_state.description</description>\n+\t\t<category>Alarm</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"delayed_start_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.delayed_start_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.delayed_start_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_remaining_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_remaining_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_remaining_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_elapsed_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_elapsed_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_elapsed_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_progress\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_progress.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_progress.description</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" pattern=\"%d %%\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"drying_target\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.drying_target.label</label>\n+\t\t<description>@text/channel-type.mielecloud.drying_target.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"drying_target_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.drying_target_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.drying_target_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"pre_heat_finished\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.pre_heat_finished.label</label>\n+\t\t<description>@text/channel-type.mielecloud.pre_heat_finished.description</description>\n+\t\t<category>Alarm</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature_target\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.temperature_target.label</label>\n+\t\t<description>@text/channel-type.mielecloud.temperature_target.description</description>\n+\t\t<category>Number:Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMDQxNw=="}, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTEyNTI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/thing/channelTypes.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODo1MTo0OFrOIAOAyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxODo1MTo0OFrOIAOAyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMDQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Temperature</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537100491", "createdAt": "2020-12-06T18:51:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/OH-INF/thing/channelTypes.xml", "diffHunk": "@@ -0,0 +1,448 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mielecloud\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"remote_control_can_be_started\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_started.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_started.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_stopped\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_stopped.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_stopped.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_paused\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_paused.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_paused.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_switched_on\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_switched_on.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_switched_on.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_be_switched_off\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_be_switched_off.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_be_switched_off.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"remote_control_can_set_program_active\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.remote_control_can_set_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.remote_control_can_set_program_active.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"spinning_speed\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.spinning_speed.label</label>\n+\t\t<description>@text/channel-type.mielecloud.spinning_speed.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"spinning_speed_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.spinning_speed_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.spinning_speed_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_active.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_active_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_active_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_active_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"dish_warmer_program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.dish_warmer_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.dish_warmer_program_active.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">@text/channel-option.mielecloud.dish_warmer_program_active.warming_cups_glasses</option>\n+\t\t\t\t<option value=\"2\">@text/channel-option.mielecloud.dish_warmer_program_active.warming_dishes_plates</option>\n+\t\t\t\t<option value=\"3\">@text/channel-option.mielecloud.dish_warmer_program_active.keeping_food_warm</option>\n+\t\t\t\t<option value=\"4\">@text/channel-option.mielecloud.dish_warmer_program_active.low_temperature_cooking</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"vacuum_cleaner_program_active\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.vacuum_cleaner_program_active.label</label>\n+\t\t<description>@text/channel-type.mielecloud.vacuum_cleaner_program_active.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.auto</option>\n+\t\t\t\t<option value=\"2\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.spot</option>\n+\t\t\t\t<option value=\"3\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.turbo</option>\n+\t\t\t\t<option value=\"4\">@text/channel-option.mielecloud.vacuum_cleaner_program_active.silent</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_phase\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_phase.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_phase.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_phase_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_phase_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_phase_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"operation_state\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.operation_state.label</label>\n+\t\t<description>@text/channel-type.mielecloud.operation_state.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"operation_state_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.operation_state_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.operation_state_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start.description</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_stop\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_stop.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_stop.description</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start_stop\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start_stop.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start_stop.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"start\">@text/channel-option.mielecloud.program_start_stop.start</option>\n+\t\t\t\t<option value=\"stop\">@text/channel-option.mielecloud.program_start_stop.stop</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_start_stop_pause\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_start_stop_pause.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_start_stop_pause.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"start\">@text/channel-option.mielecloud.program_start_stop_pause.start</option>\n+\t\t\t\t<option value=\"stop\">@text/channel-option.mielecloud.program_start_stop_pause.stop</option>\n+\t\t\t\t<option value=\"pause\">@text/channel-option.mielecloud.program_start_stop_pause.pause</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power_state_on_off\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.power_state_on_off.label</label>\n+\t\t<description>@text/channel-type.mielecloud.power_state_on_off.description</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"on\">@text/channel-option.mielecloud.power_state_on_off.on</option>\n+\t\t\t\t<option value=\"off\">@text/channel-option.mielecloud.power_state_on_off.off</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"finish_state\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.finish_state.label</label>\n+\t\t<description>@text/channel-type.mielecloud.finish_state.description</description>\n+\t\t<category>Alarm</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"delayed_start_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.delayed_start_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.delayed_start_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_remaining_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_remaining_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_remaining_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_elapsed_time\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_elapsed_time.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_elapsed_time.description</description>\n+\t\t<category>Number:Time</category>\n+\t\t<state pattern=\"%d sec\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"program_progress\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.program_progress.label</label>\n+\t\t<description>@text/channel-type.mielecloud.program_progress.description</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" pattern=\"%d %%\" readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"drying_target\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>@text/channel-type.mielecloud.drying_target.label</label>\n+\t\t<description>@text/channel-type.mielecloud.drying_target.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"drying_target_raw\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>@text/channel-type.mielecloud.drying_target_raw.label</label>\n+\t\t<description>@text/channel-type.mielecloud.drying_target_raw.description</description>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"pre_heat_finished\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>@text/channel-type.mielecloud.pre_heat_finished.label</label>\n+\t\t<description>@text/channel-type.mielecloud.pre_heat_finished.description</description>\n+\t\t<category>Alarm</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature_target\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTEzODIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/org/openhab/binding/mielecloud/internal/config/assets/css/main.css", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxOTowMDozMVrOIAOGmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjoyNDowNFrOID2i-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMTk3OQ==", "bodyText": "Is this really needed today?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537101979", "createdAt": "2020-12-06T19:00:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/org/openhab/binding/mielecloud/internal/config/assets/css/main.css", "diffHunk": "@@ -0,0 +1,15023 @@\n+/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMDMzMQ==", "bodyText": "It is still needed to have a common initial state across all browsers.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r540910331", "createdAt": "2020-12-11T12:24:04Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/resources/org/openhab/binding/mielecloud/internal/config/assets/css/main.css", "diffHunk": "@@ -0,0 +1,15023 @@\n+/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMTk3OQ=="}, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTE0ODY5OnYy", "diffSide": "RIGHT", "path": "bundles/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxOTowNzoyN1rOIAOLPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxOTowNzoyN1rOIAOLPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMzE2NA==", "bodyText": "Can your restore the formatting of this file?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r537103164", "createdAt": "2020-12-06T19:07:27Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -1,547 +1,1070 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e00ed69f68c36844faad18348fce47fead41cd3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDgwMDc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzozNzowOFrOIIjISw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzozMDo1NlrOIJOtkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNTA4Mw==", "bodyText": "It seems a bit unreasonable to log the stack trace when the authentication failed. You could log the exception's message. The stack trace should only be logged in rare cases e.g. a bug in your code has been detected.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r545835083", "createdAt": "2020-12-18T13:37:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -98,8 +98,7 @@ protected String getRedirectionDestination(HttpServletRequest request) {\n         try {\n             accessToken = authorizationHandler.getAccessToken(bridgeUid);\n         } catch (OAuthException e) {\n-            logger.warn(\"Failed to obtain access token\");\n-            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"Failed to obtain access token.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9c9198d65500475deee39d1608f61028972055"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0OTEzNg==", "bodyText": "Sorry for the inconvenience, this part of the code should have been removed. The access token is no longer part of the bridge configuration, so accessing it here is unnecessary. I removed the code.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r546549136", "createdAt": "2020-12-21T07:30:56Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -98,8 +98,7 @@ protected String getRedirectionDestination(HttpServletRequest request) {\n         try {\n             accessToken = authorizationHandler.getAccessToken(bridgeUid);\n         } catch (OAuthException e) {\n-            logger.warn(\"Failed to obtain access token\");\n-            logger.debug(\"Exception details:\", e);\n+            logger.warn(\"Failed to obtain access token.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNTA4Mw=="}, "originalCommit": {"oid": "5e9c9198d65500475deee39d1608f61028972055"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDgwNzI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzozODo1MFrOIIjL7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzozODo1MFrOIIjL7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNjAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Channe ID and channel type ID match unless noted.\n          \n          \n            \n            Channel ID and channel type ID match unless noted.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r545836013", "createdAt": "2020-12-18T13:38:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,632 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]\n+    Thing hob 000160102345 \"Cooktop KM7677\" [ ]\n+    Thing washing_machine 000148503456 \"Washing Machine WWV980\" [ ]\n+    Thing oven 000137434567 \"Oven\" [ ]\n+    Thing fridge 007109235678 \"Refrigerator K34483\" [ ]\n+    Thing dishwasher 000159456789 \"Dishwasher G5000\" [ ]\n+    Thing fridge_freezer 711397890 \"Fridge-freezer\" [ ]\n+    Thing dryer 000091098901 \"Dryer\" [ ]\n+}\n+```\n+\n+## Channels\n+\n+The following table lists all available channels.\n+See the following chapters for detailed information about which appliance supports which channels.\n+Depending on the exact appliance configuration not all channels might be supported, e.g. a hob with four plates will only fill the channels for plates 1-4.\n+Channe ID and channel type ID match unless noted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c1c86ea246483c8729fe7d2ee92cad1d307a24f"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIwNjExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseConnection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyMjo1MFrOIKjK4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyMjo1MFrOIKjK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzMjg5OA==", "bodyText": "Should be debug level", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r547932898", "createdAt": "2020-12-23T12:22:50Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseConnection.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.sse;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.InputStreamResponseListener;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.HttpUtil;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.AuthorizationFailedException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceDisconnectSseException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceTransientException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.AuthorizationFailedRetryStrategy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An active or inactive SSE connection emitting a stream of events.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class SseConnection {\n+    private static final long CONNECTION_TIMEOUT = 30;\n+    private static final TimeUnit CONNECTION_TIMEOUT_UNIT = TimeUnit.SECONDS;\n+\n+    private static final long MINIMUM_RECONNECT_ATTEMPT_WAIT_TIME_IN_SECONDS = 5;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SseConnection.class);\n+\n+    private final String endpoint;\n+    private final SseRequestFactory requestFactory;\n+    private final ScheduledExecutorService scheduler;\n+    private final BackoffStrategy backoffStrategy;\n+\n+    private final List<SseListener> listeners = new ArrayList<>();\n+\n+    private boolean active = false;\n+\n+    private int failedConnectionAttempts = 0;\n+\n+    @Nullable\n+    private Request sseRequest;\n+\n+    /**\n+     * Creates a new {@link SseConnection} to the given endpoint.\n+     *\n+     * Note: It is required to call {@link #connect()} in order to open the connection and start receiving events.\n+     *\n+     * @param endpoint The endpoint to connect to.\n+     * @param requestFactory Factory for creating requests.\n+     * @param scheduler Scheduler to run scheduled and concurrent tasks on.\n+     */\n+    public SseConnection(String endpoint, SseRequestFactory requestFactory, ScheduledExecutorService scheduler) {\n+        this(endpoint, requestFactory, scheduler, new ExponentialBackoffWithJitter());\n+    }\n+\n+    /**\n+     * Creates a new {@link SseConnection} to the given endpoint.\n+     *\n+     * Note: It is required to call {@link #connect()} in order to open the connection and start receiving events.\n+     *\n+     * @param endpoint The endpoint to connect to.\n+     * @param requestFactory Factory for creating requests.\n+     * @param scheduler Scheduler to run scheduled and concurrent tasks on.\n+     * @param backoffStrategy Strategy for deriving the wait time between connection attempts.\n+     */\n+    SseConnection(String endpoint, SseRequestFactory requestFactory, ScheduledExecutorService scheduler,\n+            BackoffStrategy backoffStrategy) {\n+        this.endpoint = endpoint;\n+        this.requestFactory = requestFactory;\n+        this.scheduler = scheduler;\n+        this.backoffStrategy = backoffStrategy;\n+    }\n+\n+    public synchronized void connect() {\n+        active = true;\n+        connectInternal();\n+    }\n+\n+    private synchronized void connectInternal() {\n+        if (!active) {\n+            return;\n+        }\n+\n+        Request runningRequest = this.sseRequest;\n+        if (runningRequest != null) {\n+            return;\n+        }\n+\n+        logger.info(\"Opening SSE connection...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5c8232f49175447ecf3f61cf135f66f327e79dc"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIwNzc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyMzoyNVrOIKjLyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyMzoyNVrOIKjLyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzMzEyOQ==", "bodyText": "Should be debug level", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r547933129", "createdAt": "2020-12-23T12:23:25Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseConnection.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.sse;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.InputStreamResponseListener;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.HttpUtil;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.AuthorizationFailedException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceDisconnectSseException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceTransientException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.AuthorizationFailedRetryStrategy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An active or inactive SSE connection emitting a stream of events.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class SseConnection {\n+    private static final long CONNECTION_TIMEOUT = 30;\n+    private static final TimeUnit CONNECTION_TIMEOUT_UNIT = TimeUnit.SECONDS;\n+\n+    private static final long MINIMUM_RECONNECT_ATTEMPT_WAIT_TIME_IN_SECONDS = 5;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SseConnection.class);\n+\n+    private final String endpoint;\n+    private final SseRequestFactory requestFactory;\n+    private final ScheduledExecutorService scheduler;\n+    private final BackoffStrategy backoffStrategy;\n+\n+    private final List<SseListener> listeners = new ArrayList<>();\n+\n+    private boolean active = false;\n+\n+    private int failedConnectionAttempts = 0;\n+\n+    @Nullable\n+    private Request sseRequest;\n+\n+    /**\n+     * Creates a new {@link SseConnection} to the given endpoint.\n+     *\n+     * Note: It is required to call {@link #connect()} in order to open the connection and start receiving events.\n+     *\n+     * @param endpoint The endpoint to connect to.\n+     * @param requestFactory Factory for creating requests.\n+     * @param scheduler Scheduler to run scheduled and concurrent tasks on.\n+     */\n+    public SseConnection(String endpoint, SseRequestFactory requestFactory, ScheduledExecutorService scheduler) {\n+        this(endpoint, requestFactory, scheduler, new ExponentialBackoffWithJitter());\n+    }\n+\n+    /**\n+     * Creates a new {@link SseConnection} to the given endpoint.\n+     *\n+     * Note: It is required to call {@link #connect()} in order to open the connection and start receiving events.\n+     *\n+     * @param endpoint The endpoint to connect to.\n+     * @param requestFactory Factory for creating requests.\n+     * @param scheduler Scheduler to run scheduled and concurrent tasks on.\n+     * @param backoffStrategy Strategy for deriving the wait time between connection attempts.\n+     */\n+    SseConnection(String endpoint, SseRequestFactory requestFactory, ScheduledExecutorService scheduler,\n+            BackoffStrategy backoffStrategy) {\n+        this.endpoint = endpoint;\n+        this.requestFactory = requestFactory;\n+        this.scheduler = scheduler;\n+        this.backoffStrategy = backoffStrategy;\n+    }\n+\n+    public synchronized void connect() {\n+        active = true;\n+        connectInternal();\n+    }\n+\n+    private synchronized void connectInternal() {\n+        if (!active) {\n+            return;\n+        }\n+\n+        Request runningRequest = this.sseRequest;\n+        if (runningRequest != null) {\n+            return;\n+        }\n+\n+        logger.info(\"Opening SSE connection...\");\n+        Request sseRequest = createRequest();\n+        if (sseRequest == null) {\n+            logger.warn(\"Could not create SSE request, not opening SSE connection.\");\n+            return;\n+        }\n+\n+        final InputStreamResponseListener stream = new InputStreamResponseListener();\n+        SseStreamParser eventStreamParser = new SseStreamParser(stream.getInputStream(), this::onServerSentEvent,\n+                this::onSseStreamClosed);\n+\n+        sseRequest = sseRequest\n+                .onResponseHeaders(\n+                        response -> scheduler.schedule(eventStreamParser::parseAndDispatchEvents, 0, TimeUnit.SECONDS))\n+                .onComplete(result -> onConnectionComplete(result));\n+        sseRequest.send(stream);\n+        this.sseRequest = sseRequest;\n+    }\n+\n+    @Nullable\n+    private Request createRequest() {\n+        Request sseRequest = requestFactory.createSseRequest(endpoint);\n+        if (sseRequest == null) {\n+            return null;\n+        }\n+\n+        return sseRequest.timeout(0, TimeUnit.SECONDS).idleTimeout(CONNECTION_TIMEOUT, CONNECTION_TIMEOUT_UNIT);\n+    }\n+\n+    private synchronized void onSseStreamClosed(@Nullable Throwable exception) {\n+        if (exception != null && AuthorizationFailedRetryStrategy.JETTY_401_HEADER_BODY_MISMATCH_EXCEPTION_MESSAGE\n+                .equals(exception.getMessage())) {\n+            onConnectionError(ConnectionError.AUTHORIZATION_FAILED);\n+        } else if (exception instanceof TimeoutException) {\n+            onConnectionError(ConnectionError.TIMEOUT);\n+        } else {\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+        }\n+    }\n+\n+    private synchronized void onConnectionComplete(@Nullable Result result) {\n+        sseRequest = null;\n+\n+        if (result == null) {\n+            logger.warn(\"SSE stream was closed but there was no result delivered.\");\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+            return;\n+        }\n+\n+        Response response = result.getResponse();\n+        if (response == null) {\n+            logger.warn(\"SSE stream was closed without response.\");\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+            return;\n+        }\n+\n+        onConnectionClosed(response);\n+    }\n+\n+    private void onConnectionClosed(Response response) {\n+        try {\n+            HttpUtil.checkHttpSuccess(response);\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+        } catch (AuthorizationFailedException e) {\n+            onConnectionError(ConnectionError.AUTHORIZATION_FAILED);\n+        } catch (TooManyRequestsException e) {\n+            long secondsUntilRetry = e.getSecondsUntilRetry();\n+            if (secondsUntilRetry < 0) {\n+                onConnectionError(ConnectionError.TOO_MANY_RERQUESTS);\n+            } else {\n+                onConnectionError(ConnectionError.TOO_MANY_RERQUESTS, secondsUntilRetry);\n+            }\n+        } catch (MieleWebserviceTransientException e) {\n+            onConnectionError(e.getConnectionError(), 0);\n+        } catch (MieleWebserviceException e) {\n+            onConnectionError(e.getConnectionError());\n+        }\n+    }\n+\n+    private void onConnectionError(ConnectionError connectionError) {\n+        onConnectionError(connectionError, backoffStrategy.getSecondsUntilRetry(failedConnectionAttempts));\n+    }\n+\n+    private synchronized void onConnectionError(ConnectionError connectionError, long secondsUntilRetry) {\n+        if (!active) {\n+            return;\n+        }\n+\n+        if (connectionError != ConnectionError.AUTHORIZATION_FAILED) {\n+            scheduleReconnect(secondsUntilRetry);\n+        }\n+\n+        fireConnectionError(connectionError);\n+        failedConnectionAttempts++;\n+    }\n+\n+    private void scheduleReconnect(long secondsUntilRetry) {\n+        long retryInSeconds = Math.max(MINIMUM_RECONNECT_ATTEMPT_WAIT_TIME_IN_SECONDS, secondsUntilRetry);\n+        scheduler.schedule(this::connectInternal, retryInSeconds, TimeUnit.SECONDS);\n+        logger.info(\"Scheduled reconnect attempt for Miele webservice to take place in {} seconds\", retryInSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5c8232f49175447ecf3f61cf135f66f327e79dc"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIwOTUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNDowM1rOIKjMwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNDowM1rOIKjMwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzMzM3Ng==", "bodyText": "Should be debug level", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r547933376", "createdAt": "2020-12-23T12:24:03Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseConnection.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.sse;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.InputStreamResponseListener;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.HttpUtil;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.AuthorizationFailedException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceDisconnectSseException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceTransientException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.AuthorizationFailedRetryStrategy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An active or inactive SSE connection emitting a stream of events.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class SseConnection {\n+    private static final long CONNECTION_TIMEOUT = 30;\n+    private static final TimeUnit CONNECTION_TIMEOUT_UNIT = TimeUnit.SECONDS;\n+\n+    private static final long MINIMUM_RECONNECT_ATTEMPT_WAIT_TIME_IN_SECONDS = 5;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SseConnection.class);\n+\n+    private final String endpoint;\n+    private final SseRequestFactory requestFactory;\n+    private final ScheduledExecutorService scheduler;\n+    private final BackoffStrategy backoffStrategy;\n+\n+    private final List<SseListener> listeners = new ArrayList<>();\n+\n+    private boolean active = false;\n+\n+    private int failedConnectionAttempts = 0;\n+\n+    @Nullable\n+    private Request sseRequest;\n+\n+    /**\n+     * Creates a new {@link SseConnection} to the given endpoint.\n+     *\n+     * Note: It is required to call {@link #connect()} in order to open the connection and start receiving events.\n+     *\n+     * @param endpoint The endpoint to connect to.\n+     * @param requestFactory Factory for creating requests.\n+     * @param scheduler Scheduler to run scheduled and concurrent tasks on.\n+     */\n+    public SseConnection(String endpoint, SseRequestFactory requestFactory, ScheduledExecutorService scheduler) {\n+        this(endpoint, requestFactory, scheduler, new ExponentialBackoffWithJitter());\n+    }\n+\n+    /**\n+     * Creates a new {@link SseConnection} to the given endpoint.\n+     *\n+     * Note: It is required to call {@link #connect()} in order to open the connection and start receiving events.\n+     *\n+     * @param endpoint The endpoint to connect to.\n+     * @param requestFactory Factory for creating requests.\n+     * @param scheduler Scheduler to run scheduled and concurrent tasks on.\n+     * @param backoffStrategy Strategy for deriving the wait time between connection attempts.\n+     */\n+    SseConnection(String endpoint, SseRequestFactory requestFactory, ScheduledExecutorService scheduler,\n+            BackoffStrategy backoffStrategy) {\n+        this.endpoint = endpoint;\n+        this.requestFactory = requestFactory;\n+        this.scheduler = scheduler;\n+        this.backoffStrategy = backoffStrategy;\n+    }\n+\n+    public synchronized void connect() {\n+        active = true;\n+        connectInternal();\n+    }\n+\n+    private synchronized void connectInternal() {\n+        if (!active) {\n+            return;\n+        }\n+\n+        Request runningRequest = this.sseRequest;\n+        if (runningRequest != null) {\n+            return;\n+        }\n+\n+        logger.info(\"Opening SSE connection...\");\n+        Request sseRequest = createRequest();\n+        if (sseRequest == null) {\n+            logger.warn(\"Could not create SSE request, not opening SSE connection.\");\n+            return;\n+        }\n+\n+        final InputStreamResponseListener stream = new InputStreamResponseListener();\n+        SseStreamParser eventStreamParser = new SseStreamParser(stream.getInputStream(), this::onServerSentEvent,\n+                this::onSseStreamClosed);\n+\n+        sseRequest = sseRequest\n+                .onResponseHeaders(\n+                        response -> scheduler.schedule(eventStreamParser::parseAndDispatchEvents, 0, TimeUnit.SECONDS))\n+                .onComplete(result -> onConnectionComplete(result));\n+        sseRequest.send(stream);\n+        this.sseRequest = sseRequest;\n+    }\n+\n+    @Nullable\n+    private Request createRequest() {\n+        Request sseRequest = requestFactory.createSseRequest(endpoint);\n+        if (sseRequest == null) {\n+            return null;\n+        }\n+\n+        return sseRequest.timeout(0, TimeUnit.SECONDS).idleTimeout(CONNECTION_TIMEOUT, CONNECTION_TIMEOUT_UNIT);\n+    }\n+\n+    private synchronized void onSseStreamClosed(@Nullable Throwable exception) {\n+        if (exception != null && AuthorizationFailedRetryStrategy.JETTY_401_HEADER_BODY_MISMATCH_EXCEPTION_MESSAGE\n+                .equals(exception.getMessage())) {\n+            onConnectionError(ConnectionError.AUTHORIZATION_FAILED);\n+        } else if (exception instanceof TimeoutException) {\n+            onConnectionError(ConnectionError.TIMEOUT);\n+        } else {\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+        }\n+    }\n+\n+    private synchronized void onConnectionComplete(@Nullable Result result) {\n+        sseRequest = null;\n+\n+        if (result == null) {\n+            logger.warn(\"SSE stream was closed but there was no result delivered.\");\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+            return;\n+        }\n+\n+        Response response = result.getResponse();\n+        if (response == null) {\n+            logger.warn(\"SSE stream was closed without response.\");\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+            return;\n+        }\n+\n+        onConnectionClosed(response);\n+    }\n+\n+    private void onConnectionClosed(Response response) {\n+        try {\n+            HttpUtil.checkHttpSuccess(response);\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+        } catch (AuthorizationFailedException e) {\n+            onConnectionError(ConnectionError.AUTHORIZATION_FAILED);\n+        } catch (TooManyRequestsException e) {\n+            long secondsUntilRetry = e.getSecondsUntilRetry();\n+            if (secondsUntilRetry < 0) {\n+                onConnectionError(ConnectionError.TOO_MANY_RERQUESTS);\n+            } else {\n+                onConnectionError(ConnectionError.TOO_MANY_RERQUESTS, secondsUntilRetry);\n+            }\n+        } catch (MieleWebserviceTransientException e) {\n+            onConnectionError(e.getConnectionError(), 0);\n+        } catch (MieleWebserviceException e) {\n+            onConnectionError(e.getConnectionError());\n+        }\n+    }\n+\n+    private void onConnectionError(ConnectionError connectionError) {\n+        onConnectionError(connectionError, backoffStrategy.getSecondsUntilRetry(failedConnectionAttempts));\n+    }\n+\n+    private synchronized void onConnectionError(ConnectionError connectionError, long secondsUntilRetry) {\n+        if (!active) {\n+            return;\n+        }\n+\n+        if (connectionError != ConnectionError.AUTHORIZATION_FAILED) {\n+            scheduleReconnect(secondsUntilRetry);\n+        }\n+\n+        fireConnectionError(connectionError);\n+        failedConnectionAttempts++;\n+    }\n+\n+    private void scheduleReconnect(long secondsUntilRetry) {\n+        long retryInSeconds = Math.max(MINIMUM_RECONNECT_ATTEMPT_WAIT_TIME_IN_SECONDS, secondsUntilRetry);\n+        scheduler.schedule(this::connectInternal, retryInSeconds, TimeUnit.SECONDS);\n+        logger.info(\"Scheduled reconnect attempt for Miele webservice to take place in {} seconds\", retryInSeconds);\n+    }\n+\n+    public synchronized void disconnect() {\n+        active = false;\n+\n+        Request runningRequest = sseRequest;\n+        if (runningRequest == null) {\n+            logger.info(\"SSE connection is not established, skipping SSE disconnect.\");\n+            return;\n+        }\n+\n+        logger.info(\"Disconnecting SSE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5c8232f49175447ecf3f61cf135f66f327e79dc"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIwOTg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNDoxMlrOIKjM9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNDoxMlrOIKjM9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzMzQzMQ==", "bodyText": "Should be debug level", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r547933431", "createdAt": "2020-12-23T12:24:12Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseConnection.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.sse;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.InputStreamResponseListener;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.HttpUtil;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.AuthorizationFailedException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceDisconnectSseException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceTransientException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.AuthorizationFailedRetryStrategy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An active or inactive SSE connection emitting a stream of events.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class SseConnection {\n+    private static final long CONNECTION_TIMEOUT = 30;\n+    private static final TimeUnit CONNECTION_TIMEOUT_UNIT = TimeUnit.SECONDS;\n+\n+    private static final long MINIMUM_RECONNECT_ATTEMPT_WAIT_TIME_IN_SECONDS = 5;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SseConnection.class);\n+\n+    private final String endpoint;\n+    private final SseRequestFactory requestFactory;\n+    private final ScheduledExecutorService scheduler;\n+    private final BackoffStrategy backoffStrategy;\n+\n+    private final List<SseListener> listeners = new ArrayList<>();\n+\n+    private boolean active = false;\n+\n+    private int failedConnectionAttempts = 0;\n+\n+    @Nullable\n+    private Request sseRequest;\n+\n+    /**\n+     * Creates a new {@link SseConnection} to the given endpoint.\n+     *\n+     * Note: It is required to call {@link #connect()} in order to open the connection and start receiving events.\n+     *\n+     * @param endpoint The endpoint to connect to.\n+     * @param requestFactory Factory for creating requests.\n+     * @param scheduler Scheduler to run scheduled and concurrent tasks on.\n+     */\n+    public SseConnection(String endpoint, SseRequestFactory requestFactory, ScheduledExecutorService scheduler) {\n+        this(endpoint, requestFactory, scheduler, new ExponentialBackoffWithJitter());\n+    }\n+\n+    /**\n+     * Creates a new {@link SseConnection} to the given endpoint.\n+     *\n+     * Note: It is required to call {@link #connect()} in order to open the connection and start receiving events.\n+     *\n+     * @param endpoint The endpoint to connect to.\n+     * @param requestFactory Factory for creating requests.\n+     * @param scheduler Scheduler to run scheduled and concurrent tasks on.\n+     * @param backoffStrategy Strategy for deriving the wait time between connection attempts.\n+     */\n+    SseConnection(String endpoint, SseRequestFactory requestFactory, ScheduledExecutorService scheduler,\n+            BackoffStrategy backoffStrategy) {\n+        this.endpoint = endpoint;\n+        this.requestFactory = requestFactory;\n+        this.scheduler = scheduler;\n+        this.backoffStrategy = backoffStrategy;\n+    }\n+\n+    public synchronized void connect() {\n+        active = true;\n+        connectInternal();\n+    }\n+\n+    private synchronized void connectInternal() {\n+        if (!active) {\n+            return;\n+        }\n+\n+        Request runningRequest = this.sseRequest;\n+        if (runningRequest != null) {\n+            return;\n+        }\n+\n+        logger.info(\"Opening SSE connection...\");\n+        Request sseRequest = createRequest();\n+        if (sseRequest == null) {\n+            logger.warn(\"Could not create SSE request, not opening SSE connection.\");\n+            return;\n+        }\n+\n+        final InputStreamResponseListener stream = new InputStreamResponseListener();\n+        SseStreamParser eventStreamParser = new SseStreamParser(stream.getInputStream(), this::onServerSentEvent,\n+                this::onSseStreamClosed);\n+\n+        sseRequest = sseRequest\n+                .onResponseHeaders(\n+                        response -> scheduler.schedule(eventStreamParser::parseAndDispatchEvents, 0, TimeUnit.SECONDS))\n+                .onComplete(result -> onConnectionComplete(result));\n+        sseRequest.send(stream);\n+        this.sseRequest = sseRequest;\n+    }\n+\n+    @Nullable\n+    private Request createRequest() {\n+        Request sseRequest = requestFactory.createSseRequest(endpoint);\n+        if (sseRequest == null) {\n+            return null;\n+        }\n+\n+        return sseRequest.timeout(0, TimeUnit.SECONDS).idleTimeout(CONNECTION_TIMEOUT, CONNECTION_TIMEOUT_UNIT);\n+    }\n+\n+    private synchronized void onSseStreamClosed(@Nullable Throwable exception) {\n+        if (exception != null && AuthorizationFailedRetryStrategy.JETTY_401_HEADER_BODY_MISMATCH_EXCEPTION_MESSAGE\n+                .equals(exception.getMessage())) {\n+            onConnectionError(ConnectionError.AUTHORIZATION_FAILED);\n+        } else if (exception instanceof TimeoutException) {\n+            onConnectionError(ConnectionError.TIMEOUT);\n+        } else {\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+        }\n+    }\n+\n+    private synchronized void onConnectionComplete(@Nullable Result result) {\n+        sseRequest = null;\n+\n+        if (result == null) {\n+            logger.warn(\"SSE stream was closed but there was no result delivered.\");\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+            return;\n+        }\n+\n+        Response response = result.getResponse();\n+        if (response == null) {\n+            logger.warn(\"SSE stream was closed without response.\");\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+            return;\n+        }\n+\n+        onConnectionClosed(response);\n+    }\n+\n+    private void onConnectionClosed(Response response) {\n+        try {\n+            HttpUtil.checkHttpSuccess(response);\n+            onConnectionError(ConnectionError.SSE_STREAM_ENDED);\n+        } catch (AuthorizationFailedException e) {\n+            onConnectionError(ConnectionError.AUTHORIZATION_FAILED);\n+        } catch (TooManyRequestsException e) {\n+            long secondsUntilRetry = e.getSecondsUntilRetry();\n+            if (secondsUntilRetry < 0) {\n+                onConnectionError(ConnectionError.TOO_MANY_RERQUESTS);\n+            } else {\n+                onConnectionError(ConnectionError.TOO_MANY_RERQUESTS, secondsUntilRetry);\n+            }\n+        } catch (MieleWebserviceTransientException e) {\n+            onConnectionError(e.getConnectionError(), 0);\n+        } catch (MieleWebserviceException e) {\n+            onConnectionError(e.getConnectionError());\n+        }\n+    }\n+\n+    private void onConnectionError(ConnectionError connectionError) {\n+        onConnectionError(connectionError, backoffStrategy.getSecondsUntilRetry(failedConnectionAttempts));\n+    }\n+\n+    private synchronized void onConnectionError(ConnectionError connectionError, long secondsUntilRetry) {\n+        if (!active) {\n+            return;\n+        }\n+\n+        if (connectionError != ConnectionError.AUTHORIZATION_FAILED) {\n+            scheduleReconnect(secondsUntilRetry);\n+        }\n+\n+        fireConnectionError(connectionError);\n+        failedConnectionAttempts++;\n+    }\n+\n+    private void scheduleReconnect(long secondsUntilRetry) {\n+        long retryInSeconds = Math.max(MINIMUM_RECONNECT_ATTEMPT_WAIT_TIME_IN_SECONDS, secondsUntilRetry);\n+        scheduler.schedule(this::connectInternal, retryInSeconds, TimeUnit.SECONDS);\n+        logger.info(\"Scheduled reconnect attempt for Miele webservice to take place in {} seconds\", retryInSeconds);\n+    }\n+\n+    public synchronized void disconnect() {\n+        active = false;\n+\n+        Request runningRequest = sseRequest;\n+        if (runningRequest == null) {\n+            logger.info(\"SSE connection is not established, skipping SSE disconnect.\");\n+            return;\n+        }\n+\n+        logger.info(\"Disconnecting SSE\");\n+        runningRequest.abort(new MieleWebserviceDisconnectSseException());\n+        sseRequest = null;\n+        logger.info(\"Disconnected\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5c8232f49175447ecf3f61cf135f66f327e79dc"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIxMTA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseStreamParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNDozOFrOIKjNnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNDozOFrOIKjNnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzMzU5OQ==", "bodyText": "Should be debug level", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r547933599", "createdAt": "2020-12-23T12:24:38Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseStreamParser.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.sse;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceDisconnectSseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Parses events from the SSE event stream and emits them via the given dispatcher.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+class SseStreamParser {\n+    private static final String SSE_KEY_EVENT = \"event:\";\n+    private static final String SSE_KEY_DATA = \"data:\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(SseStreamParser.class);\n+\n+    private final BufferedReader reader;\n+    private final Consumer<ServerSentEvent> onServerSentEventCallback;\n+    private final Consumer<@Nullable Throwable> onStreamClosedCallback;\n+\n+    @Nullable\n+    private String event;\n+\n+    SseStreamParser(InputStream inputStream, Consumer<ServerSentEvent> onServerSentEventCallback,\n+            Consumer<@Nullable Throwable> onStreamClosedCallback) {\n+        this.reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n+        this.onServerSentEventCallback = onServerSentEventCallback;\n+        this.onStreamClosedCallback = onStreamClosedCallback;\n+    }\n+\n+    void parseAndDispatchEvents() {\n+        try {\n+            String line = null;\n+            while ((line = reader.readLine()) != null) {\n+                onLineReceived(line);\n+            }\n+\n+            silentlyCloseReader();\n+            logger.info(\"SSE stream ended. Closing stream.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5c8232f49175447ecf3f61cf135f66f327e79dc"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIxMTQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseStreamParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNDo0OVrOIKjN5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyNDo0OVrOIKjN5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzMzY2OA==", "bodyText": "Should be debug level", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r547933668", "createdAt": "2020-12-23T12:24:49Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseStreamParser.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.sse;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceDisconnectSseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Parses events from the SSE event stream and emits them via the given dispatcher.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+class SseStreamParser {\n+    private static final String SSE_KEY_EVENT = \"event:\";\n+    private static final String SSE_KEY_DATA = \"data:\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(SseStreamParser.class);\n+\n+    private final BufferedReader reader;\n+    private final Consumer<ServerSentEvent> onServerSentEventCallback;\n+    private final Consumer<@Nullable Throwable> onStreamClosedCallback;\n+\n+    @Nullable\n+    private String event;\n+\n+    SseStreamParser(InputStream inputStream, Consumer<ServerSentEvent> onServerSentEventCallback,\n+            Consumer<@Nullable Throwable> onStreamClosedCallback) {\n+        this.reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n+        this.onServerSentEventCallback = onServerSentEventCallback;\n+        this.onStreamClosedCallback = onStreamClosedCallback;\n+    }\n+\n+    void parseAndDispatchEvents() {\n+        try {\n+            String line = null;\n+            while ((line = reader.readLine()) != null) {\n+                onLineReceived(line);\n+            }\n+\n+            silentlyCloseReader();\n+            logger.info(\"SSE stream ended. Closing stream.\");\n+            onStreamClosedCallback.accept(null);\n+        } catch (IOException exception) {\n+            silentlyCloseReader();\n+\n+            if (!(exception.getCause() instanceof MieleWebserviceDisconnectSseException)) {\n+                logger.warn(\"SSE connection failed unexpectedly: {}\", exception.getMessage());\n+                onStreamClosedCallback.accept(exception.getCause());\n+            }\n+        }\n+        logger.info(\"SSE stream closed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5c8232f49175447ecf3f61cf135f66f327e79dc"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjA3NDY1OnYy", "diffSide": "RIGHT", "path": "itests/org.openhab.binding.mielecloud.tests/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjowNzo0OFrOIhEuSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjowNzo0OFrOIhEuSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU1MTMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>3.0.0-SNAPSHOT</version>\n          \n          \n            \n                <version>3.1.0-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571551304", "createdAt": "2021-02-07T06:07:48Z", "author": {"login": "cpmeister"}, "path": "itests/org.openhab.binding.mielecloud.tests/pom.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.itests</groupId>\n+    <artifactId>org.openhab.addons.reactor.itests</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjA4MjExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/exception/TooManyRequestsException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjowODo0OVrOIhEzXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjowODo0OVrOIhEzXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU1MjYwNQ==", "bodyText": "You need to update the dates of all of your copyright headers.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571552605", "createdAt": "2021-02-07T06:08:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/exception/TooManyRequestsException.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjEwNDU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/DefaultMieleWebservice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjoxOTozNVrOIhFBEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjoxOTozNVrOIhFBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU1NjExMg==", "bodyText": "Because there is a lot of code getting called here, you should make sure that it isn't done unnecessarily.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"Send {} request to Miele webservice on uri {}\",\n          \n          \n            \n                                Optional.ofNullable(request).map(Request::getMethod).orElse(\"null\"),\n          \n          \n            \n                                Optional.ofNullable(request).map(Request::getURI).map(URI::toString).orElse(\"null\"));\n          \n          \n            \n                        if(logger.isDebugEnabled()){\n          \n          \n            \n                            logger.debug(\"Send {} request to Miele webservice on uri {}\",\n          \n          \n            \n                                Optional.ofNullable(request).map(Request::getMethod).orElse(\"null\"),\n          \n          \n            \n                                Optional.ofNullable(request).map(Request::getURI).map(URI::toString).orElse(\"null\"));\n          \n          \n            \n                        }", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571556112", "createdAt": "2021-02-07T06:19:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/DefaultMieleWebservice.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.Actions;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.DeviceCollection;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.Light;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.MieleSyntaxException;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.AuthorizationFailedException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceTransientException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.openhab.binding.mielecloud.internal.webservice.request.RequestFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.request.RequestFactoryImpl;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.AuthorizationFailedRetryStrategy;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.NTimesRetryStrategy;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.RetryStrategy;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.RetryStrategyCombiner;\n+import org.openhab.binding.mielecloud.internal.webservice.sse.ServerSentEvent;\n+import org.openhab.binding.mielecloud.internal.webservice.sse.SseConnection;\n+import org.openhab.binding.mielecloud.internal.webservice.sse.SseListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Default implementation of the {@link MieleWebservice}.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@NonNullByDefault\n+public final class DefaultMieleWebservice implements MieleWebservice, SseListener {\n+    private static final String SERVER_ADDRESS = \"https://api.mcs3.miele.com\";\n+    public static final String THIRD_PARTY_ENDPOINTS_BASENAME = SERVER_ADDRESS + \"/thirdparty\";\n+    private static final String ENDPOINT_DEVICES = SERVER_ADDRESS + \"/v1/devices/\";\n+    private static final String ENDPOINT_ACTIONS = ENDPOINT_DEVICES + \"%s\" + \"/actions\";\n+    private static final String ENDPOINT_LOGOUT = THIRD_PARTY_ENDPOINTS_BASENAME + \"/logout\";\n+    private static final String ENDPOINT_ALL_SSE_EVENTS = ENDPOINT_DEVICES + \"all/events\";\n+\n+    private static final String SSE_EVENT_TYPE_DEVICES = \"devices\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(DefaultMieleWebservice.class);\n+\n+    private Optional<String> accessToken = Optional.empty();\n+    private final RequestFactory requestFactory;\n+\n+    private final DeviceStateDispatcher deviceStateDispatcher;\n+    private final List<ConnectionStatusListener> connectionStatusListeners = new ArrayList<>();\n+\n+    private final RetryStrategy retryStrategy;\n+\n+    private final SseConnection sseConnection;\n+\n+    /**\n+     * Creates a new {@link DefaultMieleWebservice} with default retry configuration which is to retry failed operations\n+     * once on a transient error. In case an authorization error occurs, a new access token is requested and a retry of\n+     * the failed request is executed.\n+     *\n+     * @param configuration The configuration holding all parameters for constructing the instance.\n+     * @throws MieleWebserviceInitializationException if initializing the HTTP client fails.\n+     */\n+    public DefaultMieleWebservice(MieleWebserviceConfiguration configuration) {\n+        this(new RequestFactoryImpl(configuration.getHttpClientFactory(), configuration.getLanguageProvider()),\n+                new RetryStrategyCombiner(new NTimesRetryStrategy(1),\n+                        new AuthorizationFailedRetryStrategy(configuration.getTokenRefresher(),\n+                                configuration.getServiceHandle())),\n+                new DeviceStateDispatcher(), configuration.getScheduler());\n+    }\n+\n+    /**\n+     * This constructor only exists for testing.\n+     */\n+    DefaultMieleWebservice(RequestFactory requestFactory, RetryStrategy retryStrategy,\n+            DeviceStateDispatcher deviceStateDispatcher, ScheduledExecutorService scheduler) {\n+        this.requestFactory = requestFactory;\n+        this.retryStrategy = retryStrategy;\n+        this.deviceStateDispatcher = deviceStateDispatcher;\n+        this.sseConnection = new SseConnection(ENDPOINT_ALL_SSE_EVENTS, this::createSseRequest, scheduler);\n+        this.sseConnection.addSseListener(this);\n+    }\n+\n+    @Override\n+    public void setAccessToken(String accessToken) {\n+        this.accessToken = Optional.of(accessToken);\n+    }\n+\n+    @Override\n+    public boolean hasAccessToken() {\n+        return accessToken.isPresent();\n+    }\n+\n+    @Override\n+    public synchronized void connectSse() {\n+        sseConnection.connect();\n+    }\n+\n+    @Override\n+    public synchronized void disconnectSse() {\n+        sseConnection.disconnect();\n+    }\n+\n+    @Nullable\n+    private Request createSseRequest(String endpoint) {\n+        Optional<String> accessToken = this.accessToken;\n+        if (!accessToken.isPresent()) {\n+            logger.warn(\"No access token present.\");\n+            return null;\n+        }\n+\n+        return requestFactory.createSseRequest(endpoint, accessToken.get());\n+    }\n+\n+    @Override\n+    public void onServerSentEvent(ServerSentEvent event) {\n+        fireConnectionAlive();\n+\n+        if (!SSE_EVENT_TYPE_DEVICES.equals(event.getEvent())) {\n+            return;\n+        }\n+\n+        try {\n+            deviceStateDispatcher.dispatchDeviceStateUpdates(DeviceCollection.fromJson(event.getData()));\n+        } catch (MieleSyntaxException e) {\n+            logger.warn(\"SSE payload is not valid Json: {}\", event.getData());\n+        }\n+    }\n+\n+    private void fireConnectionAlive() {\n+        connectionStatusListeners.forEach(ConnectionStatusListener::onConnectionAlive);\n+    }\n+\n+    @Override\n+    public void onConnectionError(ConnectionError connectionError, int failedReconnectAttempts) {\n+        connectionStatusListeners.forEach(l -> l.onConnectionError(connectionError, failedReconnectAttempts));\n+    }\n+\n+    @Override\n+    public void fetchActions(String deviceId) {\n+        Actions actions = retryStrategy.performRetryableOperation(() -> getActions(deviceId),\n+                e -> logger.warn(\"Cannot poll action state: {}. Retrying...\", e.getMessage()));\n+        if (actions != null) {\n+            deviceStateDispatcher.dispatchActionStateUpdates(deviceId, actions);\n+        } else {\n+            logger.warn(\"Cannot poll action state. Response is missing actions.\");\n+        }\n+    }\n+\n+    @Override\n+    public void putProcessAction(String deviceId, ProcessAction processAction) {\n+        if (processAction.equals(ProcessAction.UNKNOWN)) {\n+            throw new IllegalArgumentException(\"Process action must not be UNKNOWN.\");\n+        }\n+\n+        String formattedProcessAction = new Gson().toJson(processAction, ProcessAction.class);\n+        formattedProcessAction = formattedProcessAction.substring(1, formattedProcessAction.length() - 1);\n+        String json = \"{\\\"processAction\\\":\" + formattedProcessAction + \"}\";\n+\n+        logger.debug(\"Activate process action {} of Miele device {}\", processAction.toString(), deviceId);\n+        putActions(deviceId, json);\n+    }\n+\n+    @Override\n+    public void putLight(String deviceId, boolean enabled) {\n+        Light light = enabled ? Light.ENABLE : Light.DISABLE;\n+        String json = \"{\\\"light\\\":\" + light.format() + \"}\";\n+\n+        logger.debug(\"Set light of Miele device {} to {}\", deviceId, enabled);\n+        putActions(deviceId, json);\n+    }\n+\n+    @Override\n+    public void putPowerState(String deviceId, boolean enabled) {\n+        String action = enabled ? \"powerOn\" : \"powerOff\";\n+        String json = \"{\\\"\" + action + \"\\\":true}\";\n+\n+        logger.debug(\"Set power state of Miele device {} to {}\", deviceId, action);\n+        putActions(deviceId, json);\n+    }\n+\n+    @Override\n+    public void putProgram(String deviceId, long programId) {\n+        String json = \"{\\\"programId\\\":\" + programId + \"}\";\n+\n+        logger.debug(\"Activate program with ID {} of Miele device {}\", programId, deviceId);\n+        putActions(deviceId, json);\n+    }\n+\n+    @Override\n+    public void logout() {\n+        Optional<String> accessToken = this.accessToken;\n+        if (!accessToken.isPresent()) {\n+            logger.debug(\"No access token present.\");\n+            return;\n+        }\n+\n+        try {\n+            logger.debug(\"Invalidating Miele webservice access token.\");\n+            Request request = requestFactory.createPostRequest(ENDPOINT_LOGOUT, accessToken.get());\n+            this.accessToken = Optional.empty();\n+            sendRequest(request);\n+        } catch (MieleWebserviceTransientException e) {\n+            throw new MieleWebserviceException(\"Transient error occurred during logout.\", e, e.getConnectionError());\n+        }\n+    }\n+\n+    /**\n+     * Sends the given request and wraps the possible exceptions in Miele exception types.\n+     *\n+     * @param request The {@link Request} to send.\n+     * @return The obtained {@link ContentResponse}.\n+     * @throws MieleWebserviceException if an irrecoverable error occurred.\n+     * @throws MieleWebserviceTransientException if a recoverable error occurred.\n+     */\n+    private ContentResponse sendRequest(Request request) {\n+        try {\n+            logger.debug(\"Send {} request to Miele webservice on uri {}\",\n+                    Optional.ofNullable(request).map(Request::getMethod).orElse(\"null\"),\n+                    Optional.ofNullable(request).map(Request::getURI).map(URI::toString).orElse(\"null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 244}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjExMDM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/DefaultMieleWebservice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjoyMDoxOVrOIhFE0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjoyMDoxOVrOIhFE0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU1NzA3NQ==", "bodyText": "Please reuse your Gson instances, preferably as a static final constant.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571557075", "createdAt": "2021-02-07T06:20:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/DefaultMieleWebservice.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.Actions;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.DeviceCollection;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.Light;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.MieleSyntaxException;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.AuthorizationFailedException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceTransientException;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.openhab.binding.mielecloud.internal.webservice.request.RequestFactory;\n+import org.openhab.binding.mielecloud.internal.webservice.request.RequestFactoryImpl;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.AuthorizationFailedRetryStrategy;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.NTimesRetryStrategy;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.RetryStrategy;\n+import org.openhab.binding.mielecloud.internal.webservice.retry.RetryStrategyCombiner;\n+import org.openhab.binding.mielecloud.internal.webservice.sse.ServerSentEvent;\n+import org.openhab.binding.mielecloud.internal.webservice.sse.SseConnection;\n+import org.openhab.binding.mielecloud.internal.webservice.sse.SseListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Default implementation of the {@link MieleWebservice}.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@NonNullByDefault\n+public final class DefaultMieleWebservice implements MieleWebservice, SseListener {\n+    private static final String SERVER_ADDRESS = \"https://api.mcs3.miele.com\";\n+    public static final String THIRD_PARTY_ENDPOINTS_BASENAME = SERVER_ADDRESS + \"/thirdparty\";\n+    private static final String ENDPOINT_DEVICES = SERVER_ADDRESS + \"/v1/devices/\";\n+    private static final String ENDPOINT_ACTIONS = ENDPOINT_DEVICES + \"%s\" + \"/actions\";\n+    private static final String ENDPOINT_LOGOUT = THIRD_PARTY_ENDPOINTS_BASENAME + \"/logout\";\n+    private static final String ENDPOINT_ALL_SSE_EVENTS = ENDPOINT_DEVICES + \"all/events\";\n+\n+    private static final String SSE_EVENT_TYPE_DEVICES = \"devices\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(DefaultMieleWebservice.class);\n+\n+    private Optional<String> accessToken = Optional.empty();\n+    private final RequestFactory requestFactory;\n+\n+    private final DeviceStateDispatcher deviceStateDispatcher;\n+    private final List<ConnectionStatusListener> connectionStatusListeners = new ArrayList<>();\n+\n+    private final RetryStrategy retryStrategy;\n+\n+    private final SseConnection sseConnection;\n+\n+    /**\n+     * Creates a new {@link DefaultMieleWebservice} with default retry configuration which is to retry failed operations\n+     * once on a transient error. In case an authorization error occurs, a new access token is requested and a retry of\n+     * the failed request is executed.\n+     *\n+     * @param configuration The configuration holding all parameters for constructing the instance.\n+     * @throws MieleWebserviceInitializationException if initializing the HTTP client fails.\n+     */\n+    public DefaultMieleWebservice(MieleWebserviceConfiguration configuration) {\n+        this(new RequestFactoryImpl(configuration.getHttpClientFactory(), configuration.getLanguageProvider()),\n+                new RetryStrategyCombiner(new NTimesRetryStrategy(1),\n+                        new AuthorizationFailedRetryStrategy(configuration.getTokenRefresher(),\n+                                configuration.getServiceHandle())),\n+                new DeviceStateDispatcher(), configuration.getScheduler());\n+    }\n+\n+    /**\n+     * This constructor only exists for testing.\n+     */\n+    DefaultMieleWebservice(RequestFactory requestFactory, RetryStrategy retryStrategy,\n+            DeviceStateDispatcher deviceStateDispatcher, ScheduledExecutorService scheduler) {\n+        this.requestFactory = requestFactory;\n+        this.retryStrategy = retryStrategy;\n+        this.deviceStateDispatcher = deviceStateDispatcher;\n+        this.sseConnection = new SseConnection(ENDPOINT_ALL_SSE_EVENTS, this::createSseRequest, scheduler);\n+        this.sseConnection.addSseListener(this);\n+    }\n+\n+    @Override\n+    public void setAccessToken(String accessToken) {\n+        this.accessToken = Optional.of(accessToken);\n+    }\n+\n+    @Override\n+    public boolean hasAccessToken() {\n+        return accessToken.isPresent();\n+    }\n+\n+    @Override\n+    public synchronized void connectSse() {\n+        sseConnection.connect();\n+    }\n+\n+    @Override\n+    public synchronized void disconnectSse() {\n+        sseConnection.disconnect();\n+    }\n+\n+    @Nullable\n+    private Request createSseRequest(String endpoint) {\n+        Optional<String> accessToken = this.accessToken;\n+        if (!accessToken.isPresent()) {\n+            logger.warn(\"No access token present.\");\n+            return null;\n+        }\n+\n+        return requestFactory.createSseRequest(endpoint, accessToken.get());\n+    }\n+\n+    @Override\n+    public void onServerSentEvent(ServerSentEvent event) {\n+        fireConnectionAlive();\n+\n+        if (!SSE_EVENT_TYPE_DEVICES.equals(event.getEvent())) {\n+            return;\n+        }\n+\n+        try {\n+            deviceStateDispatcher.dispatchDeviceStateUpdates(DeviceCollection.fromJson(event.getData()));\n+        } catch (MieleSyntaxException e) {\n+            logger.warn(\"SSE payload is not valid Json: {}\", event.getData());\n+        }\n+    }\n+\n+    private void fireConnectionAlive() {\n+        connectionStatusListeners.forEach(ConnectionStatusListener::onConnectionAlive);\n+    }\n+\n+    @Override\n+    public void onConnectionError(ConnectionError connectionError, int failedReconnectAttempts) {\n+        connectionStatusListeners.forEach(l -> l.onConnectionError(connectionError, failedReconnectAttempts));\n+    }\n+\n+    @Override\n+    public void fetchActions(String deviceId) {\n+        Actions actions = retryStrategy.performRetryableOperation(() -> getActions(deviceId),\n+                e -> logger.warn(\"Cannot poll action state: {}. Retrying...\", e.getMessage()));\n+        if (actions != null) {\n+            deviceStateDispatcher.dispatchActionStateUpdates(deviceId, actions);\n+        } else {\n+            logger.warn(\"Cannot poll action state. Response is missing actions.\");\n+        }\n+    }\n+\n+    @Override\n+    public void putProcessAction(String deviceId, ProcessAction processAction) {\n+        if (processAction.equals(ProcessAction.UNKNOWN)) {\n+            throw new IllegalArgumentException(\"Process action must not be UNKNOWN.\");\n+        }\n+\n+        String formattedProcessAction = new Gson().toJson(processAction, ProcessAction.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjEzMDY2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjozMjo1M1rOIhFRSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjozMjo1M1rOIhFRSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MDI2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private CompletableFuture<@Nullable Void> logoutFuture;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                private MieleWebservice webService;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                private ThingDiscoveryService discoveryService;\n          \n          \n            \n                private @Nullable CompletableFuture<@Nullable Void> logoutFuture;\n          \n          \n            \n                private @Nullable MieleWebservice webService;\n          \n          \n            \n                private @Nullable ThingDiscoveryService discoveryService;", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571560265", "createdAt": "2021-02-07T06:32:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,360 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    @Nullable\n+    private CompletableFuture<@Nullable Void> logoutFuture;\n+    @Nullable\n+    private MieleWebservice webService;\n+    @Nullable\n+    private ThingDiscoveryService discoveryService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjEzODk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/ThingsTemplateGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0MzoxOVrOIhFVJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQwNzoyMTowMlrOIlTOtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MTI1Mw==", "bodyText": "You already have a StringBuilder instance, so might as well use it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    result.append(\"Thing \" + thing.getThingTypeUID().getId() + \" \" + thing.getUID().getId() + \" \");\n          \n          \n            \n                    result.append(\"Thing \").append(thing.getThingTypeUID().getId()).append(\" \").append(thing.getUID().getId()) .append(\" \");\n          \n      \n    \n    \n  \n\nThere are many other places in this file that could use a similar change.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571561253", "createdAt": "2021-02-07T06:43:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/ThingsTemplateGenerator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config;\n+\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+\n+/**\n+ * Generator for templates which can be copy-pasted into .things files by the user.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class ThingsTemplateGenerator {\n+    /**\n+     * Creates a template for the bridge.\n+     *\n+     * @param bridgeId Id of the bridge (last part of the thing UID).\n+     * @param locale Locale for accessing the Miele cloud service.\n+     * @return The template.\n+     */\n+    public String createBridgeConfigurationTemplate(String bridgeId, String locale) {\n+        return \"Bridge \" + MieleCloudBindingConstants.THING_TYPE_BRIDGE.getAsString() + \":\" + bridgeId + \" [ locale=\\\"\"\n+                + locale + \"\\\" ]\";\n+    }\n+\n+    /**\n+     * Creates a complete template containing the bridge and all paired devices.\n+     *\n+     * @param bridge The bridge which is used to pair the things.\n+     * @param pairedThings The paired things.\n+     * @param discoveryResults The discovery results which can be paired.\n+     * @return The template.\n+     */\n+    public String createBridgeAndThingConfigurationTemplate(Bridge bridge, List<Thing> pairedThings,\n+            List<DiscoveryResult> discoveryResults) {\n+        StringBuilder result = new StringBuilder();\n+        result.append(createBridgeConfigurationTemplate(bridge.getUID().getId(),\n+                bridge.getConfiguration().get(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE).toString()));\n+        result.append(\" {\\n\");\n+\n+        for (Thing thing : pairedThings) {\n+            result.append(\"    \" + createThingConfigurationTemplate(thing) + \"\\n\");\n+        }\n+\n+        for (DiscoveryResult discoveryResult : discoveryResults) {\n+            result.append(\"    \" + createThingConfigurationTemplate(discoveryResult) + \"\\n\");\n+        }\n+\n+        result.append(\"}\");\n+        return result.toString();\n+    }\n+\n+    private String createThingConfigurationTemplate(Thing thing) {\n+        StringBuilder result = new StringBuilder();\n+        result.append(\"Thing \" + thing.getThingTypeUID().getId() + \" \" + thing.getUID().getId() + \" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTk4MzI4Ng==", "bodyText": "We prefer this style because it's easier to read than a chain of .appends and the performance impact is low because the code is only called when the user opens the configuration UI. However, this is opionionated so I changed it.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r575983286", "createdAt": "2021-02-15T07:21:02Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/ThingsTemplateGenerator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config;\n+\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+\n+/**\n+ * Generator for templates which can be copy-pasted into .things files by the user.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class ThingsTemplateGenerator {\n+    /**\n+     * Creates a template for the bridge.\n+     *\n+     * @param bridgeId Id of the bridge (last part of the thing UID).\n+     * @param locale Locale for accessing the Miele cloud service.\n+     * @return The template.\n+     */\n+    public String createBridgeConfigurationTemplate(String bridgeId, String locale) {\n+        return \"Bridge \" + MieleCloudBindingConstants.THING_TYPE_BRIDGE.getAsString() + \":\" + bridgeId + \" [ locale=\\\"\"\n+                + locale + \"\\\" ]\";\n+    }\n+\n+    /**\n+     * Creates a complete template containing the bridge and all paired devices.\n+     *\n+     * @param bridge The bridge which is used to pair the things.\n+     * @param pairedThings The paired things.\n+     * @param discoveryResults The discovery results which can be paired.\n+     * @return The template.\n+     */\n+    public String createBridgeAndThingConfigurationTemplate(Bridge bridge, List<Thing> pairedThings,\n+            List<DiscoveryResult> discoveryResults) {\n+        StringBuilder result = new StringBuilder();\n+        result.append(createBridgeConfigurationTemplate(bridge.getUID().getId(),\n+                bridge.getConfiguration().get(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE).toString()));\n+        result.append(\" {\\n\");\n+\n+        for (Thing thing : pairedThings) {\n+            result.append(\"    \" + createThingConfigurationTemplate(thing) + \"\\n\");\n+        }\n+\n+        for (DiscoveryResult discoveryResult : discoveryResults) {\n+            result.append(\"    \" + createThingConfigurationTemplate(discoveryResult) + \"\\n\");\n+        }\n+\n+        result.append(\"}\");\n+        return result.toString();\n+    }\n+\n+    private String createThingConfigurationTemplate(Thing thing) {\n+        StringBuilder result = new StringBuilder();\n+        result.append(\"Thing \" + thing.getThingTypeUID().getId() + \" \" + thing.getUID().getId() + \" \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MTI1Mw=="}, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjE0MDYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/OAuthAuthorizationHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0NTozM1rOIhFV6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0NTozM1rOIhFV6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MTQ0OA==", "bodyText": "You should always include the cause exception.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new OAuthException(\n          \n          \n            \n                                \"Network error during token refresh or error while reading from persistent storage: \"\n          \n          \n            \n                                        + e.getMessage());\n          \n          \n            \n                        throw new OAuthException(\n          \n          \n            \n                                \"Network error during token refresh or error while reading from persistent storage: \"\n          \n          \n            \n                                        + e.getMessage(), e);", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571561448", "createdAt": "2021-02-07T06:45:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/OAuthAuthorizationHandlerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config;\n+\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.config.exception.NoOngoingAuthorizationException;\n+import org.openhab.binding.mielecloud.internal.config.exception.OngoingAuthorizationException;\n+import org.openhab.binding.mielecloud.internal.webservice.DefaultMieleWebservice;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.openhab.core.thing.ThingUID;\n+\n+/**\n+ * {@link OAuthAuthorizationHandler} implementation handling the OAuth 2 authorization via openHAB services.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class OAuthAuthorizationHandlerImpl implements OAuthAuthorizationHandler {\n+    private static final String TOKEN_URL = DefaultMieleWebservice.THIRD_PARTY_ENDPOINTS_BASENAME + \"/token\";\n+    private static final String AUTHORIZATION_URL = DefaultMieleWebservice.THIRD_PARTY_ENDPOINTS_BASENAME + \"/login\";\n+\n+    private static final long AUTHORIZATION_TIMEOUT_IN_MINUTES = 5;\n+\n+    private final OAuthFactory oauthFactory;\n+    private final ScheduledExecutorService scheduler;\n+\n+    @Nullable\n+    private OAuthClientService oauthClientService;\n+    @Nullable\n+    private ThingUID bridgeUid;\n+    @Nullable\n+    private String redirectUri;\n+    @Nullable\n+    private ScheduledFuture<?> timer;\n+    @Nullable\n+    private LocalDateTime timerExpiryTimestamp;\n+\n+    /**\n+     * Creates a new {@link OAuthAuthorizationHandlerImpl}.\n+     *\n+     * @param oauthFactory Factory for accessing the {@link OAuthClientService}.\n+     * @param scheduler System-wide scheduler.\n+     */\n+    public OAuthAuthorizationHandlerImpl(OAuthFactory oauthFactory, ScheduledExecutorService scheduler) {\n+        this.oauthFactory = oauthFactory;\n+        this.scheduler = scheduler;\n+    }\n+\n+    @Override\n+    public synchronized void beginAuthorization(String clientId, String clientSecret, ThingUID bridgeUid) {\n+        if (this.oauthClientService != null) {\n+            throw new OngoingAuthorizationException(\"There is already an ongoing authorization!\", timerExpiryTimestamp);\n+        }\n+\n+        this.oauthClientService = oauthFactory.createOAuthClientService(bridgeUid.getAsString(), TOKEN_URL,\n+                AUTHORIZATION_URL, clientId, clientSecret, null, false);\n+        this.bridgeUid = bridgeUid;\n+        redirectUri = null;\n+        timer = null;\n+        timerExpiryTimestamp = null;\n+    }\n+\n+    @Override\n+    public synchronized String getAuthorizationUrl(String redirectUri) {\n+        final OAuthClientService oauthClientService = this.oauthClientService;\n+        if (oauthClientService == null) {\n+            throw new NoOngoingAuthorizationException(\"There is no ongoing authorization!\");\n+        }\n+\n+        this.redirectUri = redirectUri;\n+        try {\n+            timer = scheduler.schedule(this::cancelAuthorization, AUTHORIZATION_TIMEOUT_IN_MINUTES, TimeUnit.MINUTES);\n+            timerExpiryTimestamp = LocalDateTime.now().plusMinutes(AUTHORIZATION_TIMEOUT_IN_MINUTES);\n+            return oauthClientService.getAuthorizationUrl(redirectUri, null, null);\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            abortTimer();\n+            cancelAuthorization();\n+            throw new OAuthException(\"Failed to determine authorization URL: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public ThingUID getBridgeUid() {\n+        final ThingUID bridgeUid = this.bridgeUid;\n+        if (bridgeUid == null) {\n+            throw new NoOngoingAuthorizationException(\"There is no ongoing authorization.\");\n+        }\n+        return bridgeUid;\n+    }\n+\n+    @Override\n+    public synchronized void completeAuthorization(String redirectUrlWithParameters) {\n+        abortTimer();\n+\n+        final OAuthClientService oauthClientService = this.oauthClientService;\n+        if (oauthClientService == null) {\n+            throw new NoOngoingAuthorizationException(\"There is no ongoing authorization.\");\n+        }\n+\n+        try {\n+            String authorizationCode = oauthClientService.extractAuthCodeFromAuthResponse(redirectUrlWithParameters);\n+\n+            // Although this method is called \"get\" it actually fetches and stores the token response as a side effect.\n+            oauthClientService.getAccessTokenResponseByAuthorizationCode(authorizationCode, redirectUri);\n+        } catch (IOException e) {\n+            throw new OAuthException(\"Network error while retrieving token response: \" + e.getMessage());\n+        } catch (OAuthResponseException e) {\n+            throw new OAuthException(\"Failed to retrieve token response: \" + e.getMessage());\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"Error while processing Miele service response: \" + e.getMessage());\n+        } finally {\n+            this.oauthClientService = null;\n+            this.bridgeUid = null;\n+            this.redirectUri = null;\n+        }\n+    }\n+\n+    /**\n+     * Aborts the timer.\n+     *\n+     * Note: All calls to this method must be {@code synchronized} to ensure thread-safety. Also note that\n+     * {@link #cancelAuthorization()} is {@code synchronized} so the execution of this method and\n+     * {@link #cancelAuthorization()} cannot overlap. Therefore, this method is an atomic operation from the timer's\n+     * perspective.\n+     */\n+    private void abortTimer() {\n+        final ScheduledFuture<?> timer = this.timer;\n+        if (timer == null) {\n+            return;\n+        }\n+\n+        if (!timer.isDone()) {\n+            timer.cancel(false);\n+        }\n+        this.timer = null;\n+        timerExpiryTimestamp = null;\n+    }\n+\n+    private synchronized void cancelAuthorization() {\n+        oauthClientService = null;\n+        bridgeUid = null;\n+        redirectUri = null;\n+        final ScheduledFuture<?> timer = this.timer;\n+        if (timer != null) {\n+            timer.cancel(false);\n+            this.timer = null;\n+            timerExpiryTimestamp = null;\n+        }\n+    }\n+\n+    @Override\n+    public String getAccessToken(ThingUID bridgeUid) {\n+        OAuthClientService clientService = oauthFactory.getOAuthClientService(bridgeUid.getAsString());\n+        if (clientService == null) {\n+            throw new OAuthException(\"There is no access token registered for '\" + bridgeUid.getAsString() + \"'\");\n+        }\n+\n+        try {\n+            AccessTokenResponse response = clientService.getAccessTokenResponse();\n+            if (response == null) {\n+                throw new OAuthException(\n+                        \"There is no access token in the persistent storage or it already expired and could not be refreshed\");\n+            } else {\n+                return response.getAccessToken();\n+            }\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"Failed to read access token from persistent storage: \" + e.getMessage());\n+        } catch (IOException e) {\n+            throw new OAuthException(\n+                    \"Network error during token refresh or error while reading from persistent storage: \"\n+                            + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjE0MTE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/OAuthAuthorizationHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0NTo1NFrOIhFWJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0NTo1NFrOIhFWJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MTUxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new OAuthException(\"Failed to read access token from persistent storage: \" + e.getMessage());\n          \n          \n            \n                        throw new OAuthException(\"Failed to read access token from persistent storage: \" + e.getMessage(), e);", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571561510", "createdAt": "2021-02-07T06:45:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/OAuthAuthorizationHandlerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config;\n+\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.config.exception.NoOngoingAuthorizationException;\n+import org.openhab.binding.mielecloud.internal.config.exception.OngoingAuthorizationException;\n+import org.openhab.binding.mielecloud.internal.webservice.DefaultMieleWebservice;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.openhab.core.thing.ThingUID;\n+\n+/**\n+ * {@link OAuthAuthorizationHandler} implementation handling the OAuth 2 authorization via openHAB services.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class OAuthAuthorizationHandlerImpl implements OAuthAuthorizationHandler {\n+    private static final String TOKEN_URL = DefaultMieleWebservice.THIRD_PARTY_ENDPOINTS_BASENAME + \"/token\";\n+    private static final String AUTHORIZATION_URL = DefaultMieleWebservice.THIRD_PARTY_ENDPOINTS_BASENAME + \"/login\";\n+\n+    private static final long AUTHORIZATION_TIMEOUT_IN_MINUTES = 5;\n+\n+    private final OAuthFactory oauthFactory;\n+    private final ScheduledExecutorService scheduler;\n+\n+    @Nullable\n+    private OAuthClientService oauthClientService;\n+    @Nullable\n+    private ThingUID bridgeUid;\n+    @Nullable\n+    private String redirectUri;\n+    @Nullable\n+    private ScheduledFuture<?> timer;\n+    @Nullable\n+    private LocalDateTime timerExpiryTimestamp;\n+\n+    /**\n+     * Creates a new {@link OAuthAuthorizationHandlerImpl}.\n+     *\n+     * @param oauthFactory Factory for accessing the {@link OAuthClientService}.\n+     * @param scheduler System-wide scheduler.\n+     */\n+    public OAuthAuthorizationHandlerImpl(OAuthFactory oauthFactory, ScheduledExecutorService scheduler) {\n+        this.oauthFactory = oauthFactory;\n+        this.scheduler = scheduler;\n+    }\n+\n+    @Override\n+    public synchronized void beginAuthorization(String clientId, String clientSecret, ThingUID bridgeUid) {\n+        if (this.oauthClientService != null) {\n+            throw new OngoingAuthorizationException(\"There is already an ongoing authorization!\", timerExpiryTimestamp);\n+        }\n+\n+        this.oauthClientService = oauthFactory.createOAuthClientService(bridgeUid.getAsString(), TOKEN_URL,\n+                AUTHORIZATION_URL, clientId, clientSecret, null, false);\n+        this.bridgeUid = bridgeUid;\n+        redirectUri = null;\n+        timer = null;\n+        timerExpiryTimestamp = null;\n+    }\n+\n+    @Override\n+    public synchronized String getAuthorizationUrl(String redirectUri) {\n+        final OAuthClientService oauthClientService = this.oauthClientService;\n+        if (oauthClientService == null) {\n+            throw new NoOngoingAuthorizationException(\"There is no ongoing authorization!\");\n+        }\n+\n+        this.redirectUri = redirectUri;\n+        try {\n+            timer = scheduler.schedule(this::cancelAuthorization, AUTHORIZATION_TIMEOUT_IN_MINUTES, TimeUnit.MINUTES);\n+            timerExpiryTimestamp = LocalDateTime.now().plusMinutes(AUTHORIZATION_TIMEOUT_IN_MINUTES);\n+            return oauthClientService.getAuthorizationUrl(redirectUri, null, null);\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            abortTimer();\n+            cancelAuthorization();\n+            throw new OAuthException(\"Failed to determine authorization URL: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public ThingUID getBridgeUid() {\n+        final ThingUID bridgeUid = this.bridgeUid;\n+        if (bridgeUid == null) {\n+            throw new NoOngoingAuthorizationException(\"There is no ongoing authorization.\");\n+        }\n+        return bridgeUid;\n+    }\n+\n+    @Override\n+    public synchronized void completeAuthorization(String redirectUrlWithParameters) {\n+        abortTimer();\n+\n+        final OAuthClientService oauthClientService = this.oauthClientService;\n+        if (oauthClientService == null) {\n+            throw new NoOngoingAuthorizationException(\"There is no ongoing authorization.\");\n+        }\n+\n+        try {\n+            String authorizationCode = oauthClientService.extractAuthCodeFromAuthResponse(redirectUrlWithParameters);\n+\n+            // Although this method is called \"get\" it actually fetches and stores the token response as a side effect.\n+            oauthClientService.getAccessTokenResponseByAuthorizationCode(authorizationCode, redirectUri);\n+        } catch (IOException e) {\n+            throw new OAuthException(\"Network error while retrieving token response: \" + e.getMessage());\n+        } catch (OAuthResponseException e) {\n+            throw new OAuthException(\"Failed to retrieve token response: \" + e.getMessage());\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"Error while processing Miele service response: \" + e.getMessage());\n+        } finally {\n+            this.oauthClientService = null;\n+            this.bridgeUid = null;\n+            this.redirectUri = null;\n+        }\n+    }\n+\n+    /**\n+     * Aborts the timer.\n+     *\n+     * Note: All calls to this method must be {@code synchronized} to ensure thread-safety. Also note that\n+     * {@link #cancelAuthorization()} is {@code synchronized} so the execution of this method and\n+     * {@link #cancelAuthorization()} cannot overlap. Therefore, this method is an atomic operation from the timer's\n+     * perspective.\n+     */\n+    private void abortTimer() {\n+        final ScheduledFuture<?> timer = this.timer;\n+        if (timer == null) {\n+            return;\n+        }\n+\n+        if (!timer.isDone()) {\n+            timer.cancel(false);\n+        }\n+        this.timer = null;\n+        timerExpiryTimestamp = null;\n+    }\n+\n+    private synchronized void cancelAuthorization() {\n+        oauthClientService = null;\n+        bridgeUid = null;\n+        redirectUri = null;\n+        final ScheduledFuture<?> timer = this.timer;\n+        if (timer != null) {\n+            timer.cancel(false);\n+            this.timer = null;\n+            timerExpiryTimestamp = null;\n+        }\n+    }\n+\n+    @Override\n+    public String getAccessToken(ThingUID bridgeUid) {\n+        OAuthClientService clientService = oauthFactory.getOAuthClientService(bridgeUid.getAsString());\n+        if (clientService == null) {\n+            throw new OAuthException(\"There is no access token registered for '\" + bridgeUid.getAsString() + \"'\");\n+        }\n+\n+        try {\n+            AccessTokenResponse response = clientService.getAccessTokenResponse();\n+            if (response == null) {\n+                throw new OAuthException(\n+                        \"There is no access token in the persistent storage or it already expired and could not be refreshed\");\n+            } else {\n+                return response.getAccessToken();\n+            }\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"Failed to read access token from persistent storage: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjE0MTU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/OAuthAuthorizationHandlerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0NjozMVrOIhFWTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0NjozMVrOIhFWTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MTU1MQ==", "bodyText": "Similar suggestion here.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571561551", "createdAt": "2021-02-07T06:46:31Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/OAuthAuthorizationHandlerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config;\n+\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.config.exception.NoOngoingAuthorizationException;\n+import org.openhab.binding.mielecloud.internal.config.exception.OngoingAuthorizationException;\n+import org.openhab.binding.mielecloud.internal.webservice.DefaultMieleWebservice;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.openhab.core.thing.ThingUID;\n+\n+/**\n+ * {@link OAuthAuthorizationHandler} implementation handling the OAuth 2 authorization via openHAB services.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class OAuthAuthorizationHandlerImpl implements OAuthAuthorizationHandler {\n+    private static final String TOKEN_URL = DefaultMieleWebservice.THIRD_PARTY_ENDPOINTS_BASENAME + \"/token\";\n+    private static final String AUTHORIZATION_URL = DefaultMieleWebservice.THIRD_PARTY_ENDPOINTS_BASENAME + \"/login\";\n+\n+    private static final long AUTHORIZATION_TIMEOUT_IN_MINUTES = 5;\n+\n+    private final OAuthFactory oauthFactory;\n+    private final ScheduledExecutorService scheduler;\n+\n+    @Nullable\n+    private OAuthClientService oauthClientService;\n+    @Nullable\n+    private ThingUID bridgeUid;\n+    @Nullable\n+    private String redirectUri;\n+    @Nullable\n+    private ScheduledFuture<?> timer;\n+    @Nullable\n+    private LocalDateTime timerExpiryTimestamp;\n+\n+    /**\n+     * Creates a new {@link OAuthAuthorizationHandlerImpl}.\n+     *\n+     * @param oauthFactory Factory for accessing the {@link OAuthClientService}.\n+     * @param scheduler System-wide scheduler.\n+     */\n+    public OAuthAuthorizationHandlerImpl(OAuthFactory oauthFactory, ScheduledExecutorService scheduler) {\n+        this.oauthFactory = oauthFactory;\n+        this.scheduler = scheduler;\n+    }\n+\n+    @Override\n+    public synchronized void beginAuthorization(String clientId, String clientSecret, ThingUID bridgeUid) {\n+        if (this.oauthClientService != null) {\n+            throw new OngoingAuthorizationException(\"There is already an ongoing authorization!\", timerExpiryTimestamp);\n+        }\n+\n+        this.oauthClientService = oauthFactory.createOAuthClientService(bridgeUid.getAsString(), TOKEN_URL,\n+                AUTHORIZATION_URL, clientId, clientSecret, null, false);\n+        this.bridgeUid = bridgeUid;\n+        redirectUri = null;\n+        timer = null;\n+        timerExpiryTimestamp = null;\n+    }\n+\n+    @Override\n+    public synchronized String getAuthorizationUrl(String redirectUri) {\n+        final OAuthClientService oauthClientService = this.oauthClientService;\n+        if (oauthClientService == null) {\n+            throw new NoOngoingAuthorizationException(\"There is no ongoing authorization!\");\n+        }\n+\n+        this.redirectUri = redirectUri;\n+        try {\n+            timer = scheduler.schedule(this::cancelAuthorization, AUTHORIZATION_TIMEOUT_IN_MINUTES, TimeUnit.MINUTES);\n+            timerExpiryTimestamp = LocalDateTime.now().plusMinutes(AUTHORIZATION_TIMEOUT_IN_MINUTES);\n+            return oauthClientService.getAuthorizationUrl(redirectUri, null, null);\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            abortTimer();\n+            cancelAuthorization();\n+            throw new OAuthException(\"Failed to determine authorization URL: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public ThingUID getBridgeUid() {\n+        final ThingUID bridgeUid = this.bridgeUid;\n+        if (bridgeUid == null) {\n+            throw new NoOngoingAuthorizationException(\"There is no ongoing authorization.\");\n+        }\n+        return bridgeUid;\n+    }\n+\n+    @Override\n+    public synchronized void completeAuthorization(String redirectUrlWithParameters) {\n+        abortTimer();\n+\n+        final OAuthClientService oauthClientService = this.oauthClientService;\n+        if (oauthClientService == null) {\n+            throw new NoOngoingAuthorizationException(\"There is no ongoing authorization.\");\n+        }\n+\n+        try {\n+            String authorizationCode = oauthClientService.extractAuthCodeFromAuthResponse(redirectUrlWithParameters);\n+\n+            // Although this method is called \"get\" it actually fetches and stores the token response as a side effect.\n+            oauthClientService.getAccessTokenResponseByAuthorizationCode(authorizationCode, redirectUri);\n+        } catch (IOException e) {\n+            throw new OAuthException(\"Network error while retrieving token response: \" + e.getMessage());\n+        } catch (OAuthResponseException e) {\n+            throw new OAuthException(\"Failed to retrieve token response: \" + e.getMessage());\n+        } catch (org.openhab.core.auth.client.oauth2.OAuthException e) {\n+            throw new OAuthException(\"Error while processing Miele service response: \" + e.getMessage());\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjE0MzI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0Nzo1N1rOIhFXDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQwNzoyNzowNlrOIlTXjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MTc0MA==", "bodyText": "You should include the exception message or maybe even the exception stacktrace.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571561740", "createdAt": "2021-02-07T06:47:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    private final OAuthFactory oauthFactory;\n+    private Map<String, @Nullable AccessTokenRefreshListener> listenerByServiceHandle = new HashMap<>();\n+\n+    @Activate\n+    public OpenHabOAuthTokenRefresher(@Reference OAuthFactory oauthFactory) {\n+        this.oauthFactory = oauthFactory;\n+    }\n+\n+    @Override\n+    public void setRefreshListener(OAuthTokenRefreshListener listener, String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = tokenResponse -> {\n+            final String accessToken = tokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                // Fail without exception to ensure that the OAuthClientService notifies all listeners.\n+                logger.warn(\"Ignoring access token response without access token.\");\n+            } else {\n+                listener.onNewAccessToken(accessToken);\n+            }\n+        };\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        clientService.addAccessTokenRefreshListener(refreshListener);\n+        listenerByServiceHandle.put(serviceHandle, refreshListener);\n+    }\n+\n+    @Override\n+    public void unsetRefreshListener(String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = listenerByServiceHandle.get(serviceHandle);\n+        if (refreshListener != null) {\n+            try {\n+                OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+                clientService.removeAccessTokenRefreshListener(refreshListener);\n+            } catch (OAuthException e) {\n+                logger.warn(\"Failed to remove refresh listener: OAuth client service is unavailable.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTk4NTU1MA==", "bodyText": "Included the exception message.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r575985550", "createdAt": "2021-02-15T07:27:06Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/auth/OpenHabOAuthTokenRefresher.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.auth;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener;\n+import org.openhab.core.auth.client.oauth2.AccessTokenResponse;\n+import org.openhab.core.auth.client.oauth2.OAuthClientService;\n+import org.openhab.core.auth.client.oauth2.OAuthFactory;\n+import org.openhab.core.auth.client.oauth2.OAuthResponseException;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles refreshing of OAuth2 tokens managed by the openHAB runtime.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public final class OpenHabOAuthTokenRefresher implements OAuthTokenRefresher {\n+    private final Logger logger = LoggerFactory.getLogger(OpenHabOAuthTokenRefresher.class);\n+\n+    private final OAuthFactory oauthFactory;\n+    private Map<String, @Nullable AccessTokenRefreshListener> listenerByServiceHandle = new HashMap<>();\n+\n+    @Activate\n+    public OpenHabOAuthTokenRefresher(@Reference OAuthFactory oauthFactory) {\n+        this.oauthFactory = oauthFactory;\n+    }\n+\n+    @Override\n+    public void setRefreshListener(OAuthTokenRefreshListener listener, String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = tokenResponse -> {\n+            final String accessToken = tokenResponse.getAccessToken();\n+            if (accessToken == null) {\n+                // Fail without exception to ensure that the OAuthClientService notifies all listeners.\n+                logger.warn(\"Ignoring access token response without access token.\");\n+            } else {\n+                listener.onNewAccessToken(accessToken);\n+            }\n+        };\n+\n+        OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+        clientService.addAccessTokenRefreshListener(refreshListener);\n+        listenerByServiceHandle.put(serviceHandle, refreshListener);\n+    }\n+\n+    @Override\n+    public void unsetRefreshListener(String serviceHandle) {\n+        final AccessTokenRefreshListener refreshListener = listenerByServiceHandle.get(serviceHandle);\n+        if (refreshListener != null) {\n+            try {\n+                OAuthClientService clientService = getOAuthClientService(serviceHandle);\n+                clientService.removeAccessTokenRefreshListener(refreshListener);\n+            } catch (OAuthException e) {\n+                logger.warn(\"Failed to remove refresh listener: OAuth client service is unavailable.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MTc0MA=="}, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjE0NDE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0ODo1M1rOIhFXeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo0ODo1M1rOIhFXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MTg0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>3.0.0-SNAPSHOT</version>\n          \n          \n            \n                <version>3.1.0-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571561849", "createdAt": "2021-02-07T06:48:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/pom.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjE0NTI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/language/CombiningLanguageProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo1MDoxOFrOIhFYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo1MDoxOFrOIhFYBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MTk5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private LanguageProvider prioritizedLanguageProvider;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                private LanguageProvider fallbackLanguageProvider;\n          \n          \n            \n                private @Nullable LanguageProvider prioritizedLanguageProvider;\n          \n          \n            \n                private @Nullable LanguageProvider fallbackLanguageProvider;", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571561990", "createdAt": "2021-02-07T06:50:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/language/CombiningLanguageProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.language;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * {@link LanguageProvider} combining two {@link LanguageProvider}s, a prioritized and a fallback provider.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@NonNullByDefault\n+public class CombiningLanguageProvider implements LanguageProvider {\n+    @Nullable\n+    private LanguageProvider prioritizedLanguageProvider;\n+    @Nullable\n+    private LanguageProvider fallbackLanguageProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjE0NzI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/retry/RetryStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo1MzowMVrOIhFY8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo1MzowMVrOIhFY8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MjIyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @Nullable\n          \n          \n            \n                        public Void get() {\n          \n          \n            \n                        public @Nullable Void get() {", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571562227", "createdAt": "2021-02-07T06:53:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/retry/RetryStrategy.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.retry;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * Interface for strategies implementing the retry behavior of requests against the Miele cloud.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface RetryStrategy {\n+    /**\n+     * Performs an operation which may be retried several times.\n+     *\n+     * If retrying fails or a critical error occurred, this method may throw {@link Exception}s of any type.\n+     *\n+     * @param operation The operation to perform. To signal that an error can be resolved by retrying this operation it\n+     *            should throw an {@link Exception}. Whether the operation is retried is up to the {@link RetryStrategy}\n+     *            implementation.\n+     * @param onException Handler to invoke when an {@link Exception} is handled by retrying the {@code operation}. This\n+     *            handler should at least log a message. It must not throw any exception.\n+     * @return The object returned by {@code operation} if it completed successfully.\n+     */\n+    <@Nullable T> T performRetryableOperation(Supplier<T> operation, Consumer<Exception> onException);\n+\n+    /**\n+     * Performs an operation which may be retried several times.\n+     *\n+     * If retrying fails or a critical error occurred, this method may throw {@link Exception}s of any type.\n+     *\n+     * @param operation The operation to perform. To signal that an error can be resolved by retrying this operation it\n+     *            should throw an {@link Exception}. Whether the operation is retried is up to the {@link RetryStrategy}\n+     *            implementation\n+     * @param onException Handler to invoke when an {@link Exception} is handled by retrying the {@code operation}. This\n+     *            handler should at least log a message. It may not throw any exception.\n+     */\n+    default void performRetryableOperation(Runnable operation, Consumer<Exception> onException) {\n+        performRetryableOperation(new Supplier<@Nullable Void>() {\n+            @Override\n+            @Nullable\n+            public Void get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjE0OTUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseStreamParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo1NTo1NFrOIhFZ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QwNjo1NTo1NFrOIhFZ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTU2MjQ4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private String event;\n          \n          \n            \n                private @Nullable String event;", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r571562487", "createdAt": "2021-02-07T06:55:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/webservice/sse/SseStreamParser.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.webservice.sse;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceDisconnectSseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Parses events from the SSE event stream and emits them via the given dispatcher.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+class SseStreamParser {\n+    private static final String SSE_KEY_EVENT = \"event:\";\n+    private static final String SSE_KEY_DATA = \"data:\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(SseStreamParser.class);\n+\n+    private final BufferedReader reader;\n+    private final Consumer<ServerSentEvent> onServerSentEventCallback;\n+    private final Consumer<@Nullable Throwable> onStreamClosedCallback;\n+\n+    @Nullable\n+    private String event;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3144c8aac31f48ff8661aa1a9e928a3d017499e0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg3MTA0MTY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxOTozNjozNFrOJHjhXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yM1QxMzo1NzowOFrOJOjgSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwMTc5MQ==", "bodyText": "Please do not include the icon in the readme here - it is automatically added by our docs website.\nThe icon should hence be directly added to the openhab-docs repo with a PR like openhab/openhab-docs#1523.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r611901791", "createdAt": "2021-04-12T19:36:34Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTIwMjYxOA==", "bodyText": "I opened a PR in the docs repo.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r619202618", "createdAt": "2021-04-23T13:03:40Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwMTc5MQ=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTI0MTU0Ng==", "bodyText": "...and removed the logo here.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r619241546", "createdAt": "2021-04-23T13:57:08Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwMTc5MQ=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg3MTA2Mjc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxOTo0MjoyMlrOJHjucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxOTo0MjoyMlrOJHjucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNTEzOA==", "bodyText": "you can leave this out here as the full example follows below.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r611905138", "createdAt": "2021-04-12T19:42:22Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg3MTA2OTgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxOTo0NDoyNVrOJHjy8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMVQxMjo0MDowM1rOJfYauw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNjI4OQ==", "bodyText": "Again, there seems to be some issue with the modelling. Things MUST have at least one configuration parameter, which identifies them uniquely. Note that the Thing ID is NOT suitable for identification, since it can be arbitrarily set by the user.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r611906289", "createdAt": "2021-04-12T19:44:25Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjg4NTY5MQ==", "bodyText": "Added the unique deviceIdentifier used by the cloud API as a configuration parameter.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r636885691", "createdAt": "2021-05-21T12:40:03Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+\n+Example things-file:\n+\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ]\n+```\n+\n+### Appliance Configuration\n+\n+The binding configuration UI will show a things-file template containing things for all supported appliances from the paired account.\n+This can be used as a starting point for a custom things-file.\n+All Miele cloud appliance things have no configuration parameters.\n+\n+Example things-file:\n+\n+```\n+Bridge mielecloud:account:home [ locale=\"en\" ] {\n+    Thing coffee_system 000703261234 \"Coffee machine CVA7440\" [ ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNjI4OQ=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg3MTA3MzY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxOTo0NTozMVrOJHj1Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxOTo0NTozMVrOJHj1Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNjkwMw==", "bodyText": "It would be nice if you could add the technical thing type id here as a reference.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r611906903", "createdAt": "2021-04-12T19:45:31Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg3MTA3NDY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": false, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxOTo0NTo0MFrOJHj10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMVQxMToxNzozNFrOJfVjeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw==", "bodyText": "There is something fishy here. To identify the account, clearly the accessToken is required as well. Otherwise you stand no chance to textually configure the account.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r611907027", "createdAt": "2021-04-12T19:45:40Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDkwNzE2OA==", "bodyText": "It is possible to textually configure the account but it must still be authorized via the binding's configuration UI. I will try to explain why we did it in the way we did, maybe you have suggestions for improvements.\nAccess to the Miele cloud account is granted via OAuth2 which\n\nrequires the user to sign in on some website and\nthen transfer the tokens required to access the service to the binding in multiple steps.\n\nRegarding 1.: The \"common\" way to do this in openHAB is, as our research showed, to contribute a website to the repo for openhab.github.io/auth and redirect the user there with the instruction to copy the tokens over to the openHAB instance. This seemed cumbersome and error prone to us which is why we thought of an alternative way. We register a website in the binding which serves as a configuration UI and captures all required tokens so they can be directly processed. As the login step is required anyway we didn't see any advantage in introducing another manual step. The order of creating the textual configuration and authorizing the account doesn't matter to the binding.\nRegarding 2.: The openHAB OAuth2 client is used which handles the access and refresh tokens. Thus, duplicating the tokens in the thing configuration didn't seem reasonable to us. Apart from that, the tokens change in regular intervals and we do not want the users to have to swap them. The OAuth2 client needs a unique serviceHandle to identify the tokens. Currently the thing UID is used as we assumed that the users wouldn't change them once configured (we also warn that this shouldn't be done in this section of the documentation).\nRegarding the primary suggestion: Yes, the access token is used to identify the account, but it changes over time which is why we cannot (or can we?) use it to identify the bridge. The only solution I see is to introduce an artificial key that must not be changed. What are your thoughts on this? Are there alternative solutions? Or is it fine given these circumstances?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r614907168", "createdAt": "2021-04-16T15:00:24Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTMwNDYzNg==", "bodyText": "How long is the refreshToken valid here? Usually, it is long-living, so it serves as the credentials to a certain account, just as username+password does. We hence use refreshTokens as configuration parameters for the account in other bindings like e.g. the Tesla binding.\nI assume that Miele does not support the credentials grant type, so optionally allowing username+pwd as parameters is likely no option.\nWhat you have to keep in mind: The textual configuration should allow setting up your system without any additional manual steps. Tokens stored by the OAuthClient won't be available in this situation and must not be relied upon.\nIt is ok for the binding to update configuration values - so if a refreshToken becomes invalid and is replaced, the configuration can be automatically updated. This will work for both UI- and textual configured things, although clearly only for the UI-configured ones it will be persisted over a restart.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r615304636", "createdAt": "2021-04-17T21:08:31Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTYwNDQ3OA==", "bodyText": "How long is the refreshToken valid here? Usually, it is long-living, so it serves as the credentials to a certain account, just as username+password does.\n\nUnfortunately the refreshToken changes with each token refresh, so using it is not an option either.\n\nI assume that Miele does not support the credentials grant type, so optionally allowing username+pwd as parameters is likely no option.\n\nThe credentials grant type is not supported, only the authorization code grant flow.\n\nWhat you have to keep in mind: The textual configuration should allow setting up your system without any additional manual steps. Tokens stored by the OAuthClient won't be available in this situation and must not be relied upon.\n\nWe are aware of this, but it is difficult to achieve without duplicating the OAuth2 tokens in the thing configuration which has the downside of missing persistence for file based configuration. The user would need to manually adapt the files or re-authorize each time openHAB is restarted. Doesn't seem like a good option to me.\n\nIt is ok for the binding to update configuration values - so if a refreshToken becomes invalid and is replaced, the configuration can be automatically updated. This will work for both UI- and textual configured things, although clearly only for the UI-configured ones it will be persisted over a restart.\n\nThese persistence issues are the reason why we wanted to avoid replacing configuration values.\nHow can we solve this?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r615604478", "createdAt": "2021-04-19T07:30:12Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjUxOTMxMg==", "bodyText": "Unfortunately the refreshToken changes with each token refresh\n\nOk, then it indeed does not make any sense.\nWhat would you suggest as a unique identifier for an account then? The most logical choice is then probably the e-mail address. Can you get hold of this during the \"account pairing\" process? Can it be checked that it is the right one? This would make sure that the bridges can be cleanly differentiated and that the user can tell which is which in case there are multiple accounts configured on the same system.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r622519312", "createdAt": "2021-04-28T20:35:56Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzYyMjg1MQ==", "bodyText": "The most logical choice is then probably the e-mail address. Can you get hold of this during the \"account pairing\" process?\n\nNot directly. We could ask the user to enter it but we would stand no chance to verify it.\nI see two possible alternatives:\n\nThe client ID. This is unique for each Miele Account and we already ask for it because we need it in the authorization code flow.\nSome artificial identifier. We could generate one during authorization, e.g. a UUID, or ask the user to enter one.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r623622851", "createdAt": "2021-04-30T05:36:16Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTk5MDg4MQ==", "bodyText": "Then let's go for the client ID!", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r625990881", "createdAt": "2021-05-04T17:58:11Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyOTEwMTQxNA==", "bodyText": "I'm sorry to correct myself but we had a meeting with Miele and they told us that the client ID is not unique for each account. There is also no way to query information about the account from their API. Thus the only solution I see is to use an artificial identifier. My approach would be the following:\n\nEither use an existing one if there already is a configured account thing during authorization\nor randomly generate one if there is no configured account thing during authorization\n\nThis would allow for manual configuration using a things file followed by authorization as well as re-authorization if the stored tokens become invalid (e.g. manual logout) as well as direct configuration via the binding's configuration UI.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r629101414", "createdAt": "2021-05-10T07:17:22Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTQxNzYxNA==", "bodyText": "the client ID is not unique for each account\n\nDid they give any example/reason? I can hardly believe it as the client id looks like a random UUID that is generated when requesting a developer account.\nBesides this, one has to provide e-mail address and an application name when applying for a dev account. One of these values (e-mail/appName/ClientID) MUST be used to identify a dev account internally. I'd very much hope that we can use one of these as our id as an artificial id does not really make any sense here.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r631417614", "createdAt": "2021-05-12T21:35:06Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTY5MTExOA==", "bodyText": "Did they give any example/reason?\n\nThe problem is that you can pair multiple accounts using the same client ID and client secret in one openHAB installation. If we use the client ID as \"unique\" identifier then users who want to pair multiple accounts also need to register multiple developer accounts.\n\nBesides this, one has to provide e-mail address and an application name when applying for a dev account. One of these values (e-mail/appName/ClientID) MUST be used to identify a dev account internally. I'd very much hope that we can use one of these as our id\n\nAs far as I know the e-mail address is used internally, but we have no access to it. We neither have access to the app name. Isn't that the whole point of using OAuth? That clients don't have access to the login credentials? The only data we can access and that doesn't change with a token refresh are the client ID and client secret. But these are not unique if a user wishes to use the same client ID and client secret for two different accounts in the same openHAB installation.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r631691118", "createdAt": "2021-05-13T09:41:29Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA1OTQwNw==", "bodyText": "use the same client ID and client secret for two different accounts\n\nWhat makes these \"different accounts\"? The fact that the user logs in with different credentials? So what is the identifier there? It's the e-mail address that uniquely identifies an account then, isn't it? Even if we cannot validate it, it would nonetheless be the perfect identifier to use.\n\nusers who want to pair multiple accounts also need to register multiple developer accounts.\n\nSo do I understand it right, that a dev account / client id is not constrained to a user account, but it can be used with ANY user account for which the credentials are entered? Ok, in this case, the client id would rather be a configuration on the binding and not the thing (if it would need it as a config param at all).", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r633059407", "createdAt": "2021-05-16T08:08:29Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA4MjQ3NA==", "bodyText": "Sorry, my last message might have been a bit confusing, but you seem to have figured it out anyway...\n\nSo do I understand it right, that a dev account / client id is not constrained to a user account, but it can be used with ANY user account for which the credentials are entered? Ok, in this case, the client id would rather be a configuration on the binding and not the thing (if it would need it as a config param at all).\n\nExactly. That's why there is no config param at all at the moment.\n\nWhat makes these \"different accounts\"? The fact that the user logs in with different credentials?\n\nYes.\n\nIt's the e-mail address that uniquely identifies an account then, isn't it? Even if we cannot validate it, it would nonetheless be the perfect identifier to use.\n\nYes, the e-mail address is the unique \"username\" that's used to sign into the Miele Cloud Account when authorizing the bridge. So, in your opinion we should restrict the identifying config param to an e-mail address that is provided by the user?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r633082474", "createdAt": "2021-05-16T11:55:49Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA4NDU3MA==", "bodyText": "Yes, we should use the e-mail address as a config parameter as this is what uniquely identifies the account (also for the user himself). If it can be used to prefill any login form, it would be even nicer, but if not, so be it.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r633084570", "createdAt": "2021-05-16T12:17:42Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjgzODc3Nw==", "bodyText": "Hi @kaikreuzer! I added the a-mail address as a config parameter. Please check whether this is fine now. I will address the other open discussions shortly.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r636838777", "createdAt": "2021-05-21T11:17:34Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -0,0 +1,634 @@\n+# Miele Cloud Binding\n+\n+![Miele](doc/miele.png)\n+\n+This binding integrates [Miele@home](https://www.miele.de/brand/smarthome-42801.htm) appliances via a cloud connection.\n+A Miele cloud account and a set of developer credentials is required to use the binding.\n+The latter can be requested from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+\n+## Supported Things\n+\n+Most Miele appliances that directly connect to the cloud via a Wi-Fi module are supported.\n+Appliances connecting to the XGW3000 gateway via ZigBee are also supported when registered with the cloud account.\n+However they might be better supported by the [gateway-based Miele binding](https://www.openhab.org/addons/bindings/miele/).\n+Depending on the age of your appliance the functionality of the binding might be limited.\n+Appliances from recent generations will support all functionality.\n+\n+The following types of appliances are supported:\n+\n+- Coffee Machine\n+- Dishwasher\n+- Dish Warmer\n+- Freezer\n+- Fridge\n+- Fridge-Freezer Combination\n+- Hob\n+- Hood\n+- Microwave Oven\n+- Oven\n+- Robotic Vacuum Cleaner\n+- Tumble Dryer\n+- Washer Dryer\n+- Washing Machine\n+- Wine Cabinet\n+- Wine Cabinet Freezer Combination\n+\n+## Discovery\n+\n+Please take the following steps prior to using the binding. Create a Miele cloud account in the Miele@mobile app for [Android](https://play.google.com/store/apps/details?id=de.miele.infocontrol&hl=en_US) or [iOS](https://apps.apple.com/de/app/miele-mobile/id930406907?l=en) (if not already done).\n+Afterwards, pair your appliances.\n+Once your appliances are set up, register at the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+You will receive a pair of client ID and client secret which will be used to pair your Miele cloud account to the Miele cloud openHAB binding.\n+Keep these credentials to yourself and treat them like a password!\n+It may take some time until the registration e-mail arrives.\n+\n+There is no auto discovery for the Miele cloud account.\n+The account is paired using OAuth2 with your Miele login and the developer credentials obtained from the [Miele Developer Portal](https://www.miele.com/f/com/en/register_api.aspx).\n+To pair the account go to the binding's configuration UI at `https://<your openHAB address>/mielecloud`.\n+For a standard openHABian Pi installation the address is [https://openhabianpi:8443/mielecloud](https://openhabianpi:8443/mielecloud).\n+Note that your browser will file a warning that the certificate is self-signed.\n+This is fine and you can safely continue.\n+It is also possible to use an unsecured connection for pairing but it is strongly recommended to use a secured connection because your credentials will otherwise be transferred without encryption over the local network.\n+For more information on this topic, see [Securing access to openHAB](https://www.openhab.org/docs/installation/security.html#encrypted-communication).\n+For a detailed walk through the account configuration, see [Account Configuration Example](#account-configuration-example).\n+\n+Once a Miele account is paired, all supported appliances are automatically discovered as individual things and placed in the inbox.\n+They can then be paired with your favorite management UI.\n+As an alternative, the binding configuration UI provides a things-file template per paired account that can be used to pair the appliances.\n+\n+## Thing Configuration\n+\n+A Miele cloud account needs to be configured to get access to your appliances.\n+After that appliances can be configured.\n+\n+### Account Configuration\n+\n+The Miele cloud account must be paired via the binding configuration UI before a bridge that relies on it can be configured in openHAB.\n+For details on the configuration UI see [Discovery](#discovery) and [Account Configuration Example](#account-configuration-example).\n+The account serves as a bridge for the things representing your appliances.\n+On success the configuration assistant will directly configure the account without requiring further actions.\n+As an alternative, it provides a things-file template.\n+\n+The account has the following parameters:\n+\n+| Name        | Type      | Description                                                                                                                                                | Notes                                |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkwNzAyNw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg3MTExNTAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxOTo1NTo1MFrOJHkOBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0zMFQwNjozODoyOFrOJSwP6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxMzIyMw==", "bodyText": "Dispose and initialized are meant to be only called by the framework.\nIt's highly recommended to make the implementation of handleConfigurationUpdate in such a way that anything that needs to be restarted internally is done within that method directly.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r611913223", "createdAt": "2021-04-12T19:55:50Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config.servlet;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BooleanSupplier;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeCreationFailedException;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeReconfigurationFailedException;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.inbox.Inbox;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet that automatically creates a bridge and then redirects the browser to the account overview page.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class CreateBridgeServlet extends AbstractRedirectionServlet {\n+    private static final String MIELE_CLOUD_BRIDGE_NAME = \"Cloud Connector\";\n+    private static final String MIELE_CLOUD_BRIDGE_LABEL = \"Miele@home Account\";\n+\n+    private static final String LOCALE_PARAMETER_NAME = \"locale\";\n+    public static final String BRIDGE_UID_PARAMETER_NAME = \"bridgeUid\";\n+\n+    private static final long serialVersionUID = -2912042079128722887L;\n+\n+    private static final String DEFAULT_LOCALE = \"en\";\n+\n+    private static final long ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long DISCOVERY_COMPLETION_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long CHECK_INTERVAL_IN_MILLISECONDS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(CreateBridgeServlet.class);\n+\n+    private final Inbox inbox;\n+    private final ThingRegistry thingRegistry;\n+\n+    /**\n+     * Creates a new {@link CreateBridgeServlet}.\n+     *\n+     * @param inbox openHAB inbox for discovery results.\n+     * @param thingRegistry openHAB thing registry.\n+     */\n+    public CreateBridgeServlet(Inbox inbox, ThingRegistry thingRegistry) {\n+        this.inbox = inbox;\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    protected String getRedirectionDestination(HttpServletRequest request) {\n+        String bridgeUidString = request.getParameter(BRIDGE_UID_PARAMETER_NAME);\n+        if (bridgeUidString == null || bridgeUidString.isEmpty()) {\n+            logger.warn(\"Cannot create bridge: Bridge UID is missing.\");\n+            return \"/mielecloud/failure?\" + FailureServlet.MISSING_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        ThingUID bridgeUid = null;\n+        try {\n+            bridgeUid = new ThingUID(bridgeUidString);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Cannot create bridge: Bridge UID '{}' is malformed.\", bridgeUid);\n+            return \"/mielecloud/failure?\" + FailureServlet.MALFORMED_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        String locale = getValidLocale(request.getParameter(LOCALE_PARAMETER_NAME));\n+\n+        logger.debug(\"Auto configuring Miele account using locale '{}' (requested locale was '{}')\", locale,\n+                request.getParameter(LOCALE_PARAMETER_NAME));\n+        try {\n+            Thing bridge = pairOrReconfigureBridge(locale, bridgeUid);\n+            waitForBridgeToComeOnline(bridge);\n+            return \"/mielecloud\";\n+        } catch (BridgeReconfigurationFailedException e) {\n+            logger.warn(\"{}\", e.getMessage());\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_RECONFIGURATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        } catch (BridgeCreationFailedException e) {\n+            logger.warn(\"Thing creation failed because there was no binding available that supports the thing.\");\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_CREATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+    }\n+\n+    private Thing pairOrReconfigureBridge(String locale, ThingUID bridgeUid) {\n+        DiscoveryResult result = DiscoveryResultBuilder.create(bridgeUid)\n+                .withRepresentationProperty(Thing.PROPERTY_MODEL_ID).withLabel(MIELE_CLOUD_BRIDGE_LABEL)\n+                .withProperty(Thing.PROPERTY_MODEL_ID, MIELE_CLOUD_BRIDGE_NAME)\n+                .withProperty(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale).build();\n+        if (inbox.add(result)) {\n+            return pairBridge(bridgeUid);\n+        } else {\n+            return reconfigureBridge(bridgeUid, locale);\n+        }\n+    }\n+\n+    private Thing pairBridge(ThingUID thingUid) {\n+        Thing thing = inbox.approve(thingUid, MIELE_CLOUD_BRIDGE_LABEL, null);\n+        if (thing == null) {\n+            throw new BridgeCreationFailedException();\n+        }\n+\n+        logger.debug(\"Successfully created bridge {}\", thingUid);\n+        return thing;\n+    }\n+\n+    private Thing reconfigureBridge(ThingUID thingUid, String locale) {\n+        logger.debug(\"Thing already exists. Modifying configuration.\");\n+        Thing thing = thingRegistry.get(thingUid);\n+        if (thing == null) {\n+            throw new BridgeReconfigurationFailedException(\n+                    \"Cannot modify non existing bridge: Could neither add bridge via inbox nor find existing bridge.\");\n+        }\n+\n+        ThingHandler handler = thing.getHandler();\n+        if (handler == null) {\n+            throw new BridgeReconfigurationFailedException(\"Bridge exists but has no handler.\");\n+        }\n+\n+        handler.handleConfigurationUpdate(\n+                Collections.singletonMap(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale));\n+\n+        // As the parameters will not necessarily change we need to force the thing to re-initialize.\n+        handler.dispose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTIyMzI1OQ==", "bodyText": "I had a detailed look at the alternative implementation by overriding handleConfigurationUpdate in the MieleBridgeHandler. That would be copy-pasting the code from BaseThingHandler and removing the check whether the configuration parameters changed which isn't a better solution in imho. We really want to trigger a reinitialization here because we don't know in which state the Thing and  ThingHandler are. Isn't there a framework call we could use instead?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r619223259", "createdAt": "2021-04-23T13:32:58Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config.servlet;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BooleanSupplier;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeCreationFailedException;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeReconfigurationFailedException;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.inbox.Inbox;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet that automatically creates a bridge and then redirects the browser to the account overview page.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class CreateBridgeServlet extends AbstractRedirectionServlet {\n+    private static final String MIELE_CLOUD_BRIDGE_NAME = \"Cloud Connector\";\n+    private static final String MIELE_CLOUD_BRIDGE_LABEL = \"Miele@home Account\";\n+\n+    private static final String LOCALE_PARAMETER_NAME = \"locale\";\n+    public static final String BRIDGE_UID_PARAMETER_NAME = \"bridgeUid\";\n+\n+    private static final long serialVersionUID = -2912042079128722887L;\n+\n+    private static final String DEFAULT_LOCALE = \"en\";\n+\n+    private static final long ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long DISCOVERY_COMPLETION_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long CHECK_INTERVAL_IN_MILLISECONDS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(CreateBridgeServlet.class);\n+\n+    private final Inbox inbox;\n+    private final ThingRegistry thingRegistry;\n+\n+    /**\n+     * Creates a new {@link CreateBridgeServlet}.\n+     *\n+     * @param inbox openHAB inbox for discovery results.\n+     * @param thingRegistry openHAB thing registry.\n+     */\n+    public CreateBridgeServlet(Inbox inbox, ThingRegistry thingRegistry) {\n+        this.inbox = inbox;\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    protected String getRedirectionDestination(HttpServletRequest request) {\n+        String bridgeUidString = request.getParameter(BRIDGE_UID_PARAMETER_NAME);\n+        if (bridgeUidString == null || bridgeUidString.isEmpty()) {\n+            logger.warn(\"Cannot create bridge: Bridge UID is missing.\");\n+            return \"/mielecloud/failure?\" + FailureServlet.MISSING_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        ThingUID bridgeUid = null;\n+        try {\n+            bridgeUid = new ThingUID(bridgeUidString);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Cannot create bridge: Bridge UID '{}' is malformed.\", bridgeUid);\n+            return \"/mielecloud/failure?\" + FailureServlet.MALFORMED_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        String locale = getValidLocale(request.getParameter(LOCALE_PARAMETER_NAME));\n+\n+        logger.debug(\"Auto configuring Miele account using locale '{}' (requested locale was '{}')\", locale,\n+                request.getParameter(LOCALE_PARAMETER_NAME));\n+        try {\n+            Thing bridge = pairOrReconfigureBridge(locale, bridgeUid);\n+            waitForBridgeToComeOnline(bridge);\n+            return \"/mielecloud\";\n+        } catch (BridgeReconfigurationFailedException e) {\n+            logger.warn(\"{}\", e.getMessage());\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_RECONFIGURATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        } catch (BridgeCreationFailedException e) {\n+            logger.warn(\"Thing creation failed because there was no binding available that supports the thing.\");\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_CREATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+    }\n+\n+    private Thing pairOrReconfigureBridge(String locale, ThingUID bridgeUid) {\n+        DiscoveryResult result = DiscoveryResultBuilder.create(bridgeUid)\n+                .withRepresentationProperty(Thing.PROPERTY_MODEL_ID).withLabel(MIELE_CLOUD_BRIDGE_LABEL)\n+                .withProperty(Thing.PROPERTY_MODEL_ID, MIELE_CLOUD_BRIDGE_NAME)\n+                .withProperty(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale).build();\n+        if (inbox.add(result)) {\n+            return pairBridge(bridgeUid);\n+        } else {\n+            return reconfigureBridge(bridgeUid, locale);\n+        }\n+    }\n+\n+    private Thing pairBridge(ThingUID thingUid) {\n+        Thing thing = inbox.approve(thingUid, MIELE_CLOUD_BRIDGE_LABEL, null);\n+        if (thing == null) {\n+            throw new BridgeCreationFailedException();\n+        }\n+\n+        logger.debug(\"Successfully created bridge {}\", thingUid);\n+        return thing;\n+    }\n+\n+    private Thing reconfigureBridge(ThingUID thingUid, String locale) {\n+        logger.debug(\"Thing already exists. Modifying configuration.\");\n+        Thing thing = thingRegistry.get(thingUid);\n+        if (thing == null) {\n+            throw new BridgeReconfigurationFailedException(\n+                    \"Cannot modify non existing bridge: Could neither add bridge via inbox nor find existing bridge.\");\n+        }\n+\n+        ThingHandler handler = thing.getHandler();\n+        if (handler == null) {\n+            throw new BridgeReconfigurationFailedException(\"Bridge exists but has no handler.\");\n+        }\n+\n+        handler.handleConfigurationUpdate(\n+                Collections.singletonMap(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale));\n+\n+        // As the parameters will not necessarily change we need to force the thing to re-initialize.\n+        handler.dispose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxMzIyMw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjUyMDg1Mw==", "bodyText": "My suggestion would be to put the logic that is in dispose and that you want to call here into a separate method, which you can call from here and from dispose likewise. Same for initialize. This way you can avoid calling these methods directly.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r622520853", "createdAt": "2021-04-28T20:38:25Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config.servlet;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BooleanSupplier;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeCreationFailedException;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeReconfigurationFailedException;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.inbox.Inbox;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet that automatically creates a bridge and then redirects the browser to the account overview page.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class CreateBridgeServlet extends AbstractRedirectionServlet {\n+    private static final String MIELE_CLOUD_BRIDGE_NAME = \"Cloud Connector\";\n+    private static final String MIELE_CLOUD_BRIDGE_LABEL = \"Miele@home Account\";\n+\n+    private static final String LOCALE_PARAMETER_NAME = \"locale\";\n+    public static final String BRIDGE_UID_PARAMETER_NAME = \"bridgeUid\";\n+\n+    private static final long serialVersionUID = -2912042079128722887L;\n+\n+    private static final String DEFAULT_LOCALE = \"en\";\n+\n+    private static final long ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long DISCOVERY_COMPLETION_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long CHECK_INTERVAL_IN_MILLISECONDS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(CreateBridgeServlet.class);\n+\n+    private final Inbox inbox;\n+    private final ThingRegistry thingRegistry;\n+\n+    /**\n+     * Creates a new {@link CreateBridgeServlet}.\n+     *\n+     * @param inbox openHAB inbox for discovery results.\n+     * @param thingRegistry openHAB thing registry.\n+     */\n+    public CreateBridgeServlet(Inbox inbox, ThingRegistry thingRegistry) {\n+        this.inbox = inbox;\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    protected String getRedirectionDestination(HttpServletRequest request) {\n+        String bridgeUidString = request.getParameter(BRIDGE_UID_PARAMETER_NAME);\n+        if (bridgeUidString == null || bridgeUidString.isEmpty()) {\n+            logger.warn(\"Cannot create bridge: Bridge UID is missing.\");\n+            return \"/mielecloud/failure?\" + FailureServlet.MISSING_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        ThingUID bridgeUid = null;\n+        try {\n+            bridgeUid = new ThingUID(bridgeUidString);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Cannot create bridge: Bridge UID '{}' is malformed.\", bridgeUid);\n+            return \"/mielecloud/failure?\" + FailureServlet.MALFORMED_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        String locale = getValidLocale(request.getParameter(LOCALE_PARAMETER_NAME));\n+\n+        logger.debug(\"Auto configuring Miele account using locale '{}' (requested locale was '{}')\", locale,\n+                request.getParameter(LOCALE_PARAMETER_NAME));\n+        try {\n+            Thing bridge = pairOrReconfigureBridge(locale, bridgeUid);\n+            waitForBridgeToComeOnline(bridge);\n+            return \"/mielecloud\";\n+        } catch (BridgeReconfigurationFailedException e) {\n+            logger.warn(\"{}\", e.getMessage());\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_RECONFIGURATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        } catch (BridgeCreationFailedException e) {\n+            logger.warn(\"Thing creation failed because there was no binding available that supports the thing.\");\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_CREATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+    }\n+\n+    private Thing pairOrReconfigureBridge(String locale, ThingUID bridgeUid) {\n+        DiscoveryResult result = DiscoveryResultBuilder.create(bridgeUid)\n+                .withRepresentationProperty(Thing.PROPERTY_MODEL_ID).withLabel(MIELE_CLOUD_BRIDGE_LABEL)\n+                .withProperty(Thing.PROPERTY_MODEL_ID, MIELE_CLOUD_BRIDGE_NAME)\n+                .withProperty(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale).build();\n+        if (inbox.add(result)) {\n+            return pairBridge(bridgeUid);\n+        } else {\n+            return reconfigureBridge(bridgeUid, locale);\n+        }\n+    }\n+\n+    private Thing pairBridge(ThingUID thingUid) {\n+        Thing thing = inbox.approve(thingUid, MIELE_CLOUD_BRIDGE_LABEL, null);\n+        if (thing == null) {\n+            throw new BridgeCreationFailedException();\n+        }\n+\n+        logger.debug(\"Successfully created bridge {}\", thingUid);\n+        return thing;\n+    }\n+\n+    private Thing reconfigureBridge(ThingUID thingUid, String locale) {\n+        logger.debug(\"Thing already exists. Modifying configuration.\");\n+        Thing thing = thingRegistry.get(thingUid);\n+        if (thing == null) {\n+            throw new BridgeReconfigurationFailedException(\n+                    \"Cannot modify non existing bridge: Could neither add bridge via inbox nor find existing bridge.\");\n+        }\n+\n+        ThingHandler handler = thing.getHandler();\n+        if (handler == null) {\n+            throw new BridgeReconfigurationFailedException(\"Bridge exists but has no handler.\");\n+        }\n+\n+        handler.handleConfigurationUpdate(\n+                Collections.singletonMap(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale));\n+\n+        // As the parameters will not necessarily change we need to force the thing to re-initialize.\n+        handler.dispose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxMzIyMw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMzY0NDY1MQ==", "bodyText": "That would be the complete initialize and dispose cycle. I decided that overwriting handleConfiguationUpdate is probably the better alternative and did so.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r623644651", "createdAt": "2021-04-30T06:38:28Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/config/servlet/CreateBridgeServlet.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.config.servlet;\n+\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BooleanSupplier;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeCreationFailedException;\n+import org.openhab.binding.mielecloud.internal.config.exception.BridgeReconfigurationFailedException;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.inbox.Inbox;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Servlet that automatically creates a bridge and then redirects the browser to the account overview page.\n+ *\n+ * @author Bj\u00f6rn Lange - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class CreateBridgeServlet extends AbstractRedirectionServlet {\n+    private static final String MIELE_CLOUD_BRIDGE_NAME = \"Cloud Connector\";\n+    private static final String MIELE_CLOUD_BRIDGE_LABEL = \"Miele@home Account\";\n+\n+    private static final String LOCALE_PARAMETER_NAME = \"locale\";\n+    public static final String BRIDGE_UID_PARAMETER_NAME = \"bridgeUid\";\n+\n+    private static final long serialVersionUID = -2912042079128722887L;\n+\n+    private static final String DEFAULT_LOCALE = \"en\";\n+\n+    private static final long ONLINE_WAIT_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long DISCOVERY_COMPLETION_TIMEOUT_IN_MILLISECONDS = 5000;\n+    private static final long CHECK_INTERVAL_IN_MILLISECONDS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(CreateBridgeServlet.class);\n+\n+    private final Inbox inbox;\n+    private final ThingRegistry thingRegistry;\n+\n+    /**\n+     * Creates a new {@link CreateBridgeServlet}.\n+     *\n+     * @param inbox openHAB inbox for discovery results.\n+     * @param thingRegistry openHAB thing registry.\n+     */\n+    public CreateBridgeServlet(Inbox inbox, ThingRegistry thingRegistry) {\n+        this.inbox = inbox;\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    protected String getRedirectionDestination(HttpServletRequest request) {\n+        String bridgeUidString = request.getParameter(BRIDGE_UID_PARAMETER_NAME);\n+        if (bridgeUidString == null || bridgeUidString.isEmpty()) {\n+            logger.warn(\"Cannot create bridge: Bridge UID is missing.\");\n+            return \"/mielecloud/failure?\" + FailureServlet.MISSING_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        ThingUID bridgeUid = null;\n+        try {\n+            bridgeUid = new ThingUID(bridgeUidString);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Cannot create bridge: Bridge UID '{}' is malformed.\", bridgeUid);\n+            return \"/mielecloud/failure?\" + FailureServlet.MALFORMED_BRIDGE_UID_PARAMETER_NAME + \"=true\";\n+        }\n+\n+        String locale = getValidLocale(request.getParameter(LOCALE_PARAMETER_NAME));\n+\n+        logger.debug(\"Auto configuring Miele account using locale '{}' (requested locale was '{}')\", locale,\n+                request.getParameter(LOCALE_PARAMETER_NAME));\n+        try {\n+            Thing bridge = pairOrReconfigureBridge(locale, bridgeUid);\n+            waitForBridgeToComeOnline(bridge);\n+            return \"/mielecloud\";\n+        } catch (BridgeReconfigurationFailedException e) {\n+            logger.warn(\"{}\", e.getMessage());\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_RECONFIGURATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        } catch (BridgeCreationFailedException e) {\n+            logger.warn(\"Thing creation failed because there was no binding available that supports the thing.\");\n+            return \"/mielecloud/success?\" + SuccessServlet.BRIDGE_CREATION_FAILED_PARAMETER_NAME + \"=true&\"\n+                    + SuccessServlet.BRIDGE_UID_PARAMETER_NAME + \"=\" + bridgeUidString;\n+        }\n+    }\n+\n+    private Thing pairOrReconfigureBridge(String locale, ThingUID bridgeUid) {\n+        DiscoveryResult result = DiscoveryResultBuilder.create(bridgeUid)\n+                .withRepresentationProperty(Thing.PROPERTY_MODEL_ID).withLabel(MIELE_CLOUD_BRIDGE_LABEL)\n+                .withProperty(Thing.PROPERTY_MODEL_ID, MIELE_CLOUD_BRIDGE_NAME)\n+                .withProperty(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale).build();\n+        if (inbox.add(result)) {\n+            return pairBridge(bridgeUid);\n+        } else {\n+            return reconfigureBridge(bridgeUid, locale);\n+        }\n+    }\n+\n+    private Thing pairBridge(ThingUID thingUid) {\n+        Thing thing = inbox.approve(thingUid, MIELE_CLOUD_BRIDGE_LABEL, null);\n+        if (thing == null) {\n+            throw new BridgeCreationFailedException();\n+        }\n+\n+        logger.debug(\"Successfully created bridge {}\", thingUid);\n+        return thing;\n+    }\n+\n+    private Thing reconfigureBridge(ThingUID thingUid, String locale) {\n+        logger.debug(\"Thing already exists. Modifying configuration.\");\n+        Thing thing = thingRegistry.get(thingUid);\n+        if (thing == null) {\n+            throw new BridgeReconfigurationFailedException(\n+                    \"Cannot modify non existing bridge: Could neither add bridge via inbox nor find existing bridge.\");\n+        }\n+\n+        ThingHandler handler = thing.getHandler();\n+        if (handler == null) {\n+            throw new BridgeReconfigurationFailedException(\"Bridge exists but has no handler.\");\n+        }\n+\n+        handler.handleConfigurationUpdate(\n+                Collections.singletonMap(MieleCloudBindingConstants.CONFIG_PARAM_LOCALE, locale));\n+\n+        // As the parameters will not necessarily change we need to force the thing to re-initialize.\n+        handler.dispose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxMzIyMw=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg3MTEyMzA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQxOTo1Nzo0M1rOJHkSsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xN1QyMTowOToyOVrOJKzOMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxNDQxOQ==", "bodyText": "There should not be any warn logging in such cases - the feedback to the user happens through the Thing status message instead.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r611914419", "createdAt": "2021-04-12T19:57:43Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    private @Nullable CompletableFuture<@Nullable Void> logoutFuture;\n+    private @Nullable MieleWebservice webService;\n+    private @Nullable ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice.\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.debug(\"Could not initialize Miele Cloud bridge.\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDkwODcwNA==", "bodyText": "Both is done here (see the following lines). Should I still remove the log messages?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r614908704", "createdAt": "2021-04-16T15:02:39Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    private @Nullable CompletableFuture<@Nullable Void> logoutFuture;\n+    private @Nullable MieleWebservice webService;\n+    private @Nullable ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice.\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.debug(\"Could not initialize Miele Cloud bridge.\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxNDQxOQ=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTMwNDc1Mw==", "bodyText": "Yes, according to the logging guidelines, only the Thing status should be used.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r615304753", "createdAt": "2021-04-17T21:09:29Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -0,0 +1,357 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthException;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefreshListener;\n+import org.openhab.binding.mielecloud.internal.auth.OAuthTokenRefresher;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingDiscoveryService;\n+import org.openhab.binding.mielecloud.internal.util.LocaleValidator;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionError;\n+import org.openhab.binding.mielecloud.internal.webservice.ConnectionStatusListener;\n+import org.openhab.binding.mielecloud.internal.webservice.DeviceStateListener;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.MieleWebserviceInitializationException;\n+import org.openhab.binding.mielecloud.internal.webservice.language.CombiningLanguageProvider;\n+import org.openhab.binding.mielecloud.internal.webservice.language.LanguageProvider;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * BridgeHandler implementation for the Miele cloud account.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Introduced CombiningLanguageProvider field and interactions, added LanguageProvider super\n+ *         interface, switched from polling to SSE, added support for multiple bridges\n+ */\n+@NonNullByDefault\n+public class MieleBridgeHandler extends BaseBridgeHandler\n+        implements OAuthTokenRefreshListener, LanguageProvider, ConnectionStatusListener, DeviceStateListener {\n+    private static final int NUMBER_OF_SSE_RECONNECTION_ATTEMPTS_BEFORE_STATUS_IS_UPDATED = 6;\n+\n+    private final Supplier<MieleWebservice> webserviceFactory;\n+\n+    private final OAuthTokenRefresher tokenRefresher;\n+    private final CombiningLanguageProvider languageProvider;\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    private @Nullable CompletableFuture<@Nullable Void> logoutFuture;\n+    private @Nullable MieleWebservice webService;\n+    private @Nullable ThingDiscoveryService discoveryService;\n+\n+    /**\n+     * Creates a new {@link MieleBridgeHandler}.\n+     *\n+     * @param bridge The bridge to handle.\n+     * @param webserviceFactory Factory for creating {@link MieleWebservice} instances.\n+     * @param tokenRefresher Token refresher.\n+     * @param languageProvider Language provider.\n+     */\n+    public MieleBridgeHandler(Bridge bridge, Function<ScheduledExecutorService, MieleWebservice> webserviceFactory,\n+            OAuthTokenRefresher tokenRefresher, CombiningLanguageProvider languageProvider) {\n+        super(bridge);\n+        this.webserviceFactory = () -> webserviceFactory.apply(scheduler);\n+        this.tokenRefresher = tokenRefresher;\n+        this.languageProvider = languageProvider;\n+    }\n+\n+    public void setDiscoveryService(@Nullable ThingDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    /**\n+     * Gets the current webservice instance for communication with the Miele service.\n+     *\n+     * This function may return an {@link UnavailableMieleWebservice} in case no webservice is available at the moment.\n+     */\n+    public MieleWebservice getWebservice() {\n+        MieleWebservice webservice = webService;\n+        if (webservice != null) {\n+            return webservice;\n+        } else {\n+            return UnavailableMieleWebservice.INSTANCE;\n+        }\n+    }\n+\n+    private String getOAuthServiceHandle() {\n+        return getThing().getUID().getAsString();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // It is required to set a status in this method as stated in the Javadoc of ThingHandler.initialize\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        try {\n+            webService = webserviceFactory.get();\n+        } catch (MieleWebserviceInitializationException e) {\n+            logger.warn(\"Failed to initialize webservice.\", e);\n+            updateStatus(ThingStatus.OFFLINE);\n+            return;\n+        }\n+\n+        try {\n+            tokenRefresher.setRefreshListener(this, getOAuthServiceHandle());\n+        } catch (OAuthException e) {\n+            logger.debug(\"Could not initialize Miele Cloud bridge.\", e);\n+            logger.warn(\"The account has not been authorized. Please consult the documentation on how to do that.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxNDQxOQ=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzg3MTE0MjA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xMlQyMDowMjo0N1rOJHkeIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0xNlQxNToxMTo1MVrOJKbc7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxNzM0NQ==", "bodyText": "In case of a COMMUNICATION_ERROR, a message text to tell the user what happened is highly recommended.\nIn the situation here, I feel that you probably only want to say OFFLINE without actually knowing the exact reason for it, don't you?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r611917345", "createdAt": "2021-04-12T20:02:47Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.Channels.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction.*;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingInformationExtractor;\n+import org.openhab.binding.mielecloud.internal.handler.channel.ActionsChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.DeviceChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.TransitionChannelState;\n+import org.openhab.binding.mielecloud.internal.webservice.ActionStateFetcher;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.TransitionState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.StateType;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract base class for all Miele thing handlers.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Add channel state wrappers\n+ */\n+@NonNullByDefault\n+public abstract class AbstractMieleThingHandler extends BaseThingHandler {\n+    protected final ActionStateFetcher actionFetcher;\n+    protected DeviceState latestDeviceState = new DeviceState(getDeviceId(), null);\n+    protected TransitionState latestTransitionState = new TransitionState(null, latestDeviceState);\n+    protected ActionsState latestActionsState = new ActionsState(getDeviceId(), null);\n+\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    /**\n+     * Creates a new {@link AbstractMieleThingHandler}.\n+     *\n+     * @param thing The thing to handle.\n+     */\n+    public AbstractMieleThingHandler(Thing thing) {\n+        super(thing);\n+        this.actionFetcher = new ActionStateFetcher(this::getWebservice, scheduler);\n+    }\n+\n+    private Optional<MieleBridgeHandler> getMieleBridgeHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            return Optional.empty();\n+        }\n+\n+        BridgeHandler handler = bridge.getHandler();\n+        if (handler == null || !(handler instanceof MieleBridgeHandler)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of((MieleBridgeHandler) handler);\n+    }\n+\n+    protected MieleWebservice getWebservice() {\n+        return getMieleBridgeHandler().map(MieleBridgeHandler::getWebservice)\n+                .orElse(UnavailableMieleWebservice.INSTANCE);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        getWebservice().dispatchDeviceState(getDeviceId());\n+\n+        // If no device state update was received so far, set the device to OFFLINE.\n+        if (getThing().getStatus() == ThingStatus.INITIALIZING) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDkxNTMwOA==", "bodyText": "I must admit, if I think closely of this we take a slight guess here. When the thing is initialized, it calls out to the bridge to synchronously dispatch the current state of all things. This update is processed by the AbstractMieleThingHandler and the status is set accordingly. If the status is not set then either there is no connection to the Miele cloud or the thing was removed while the binding was inactive. The guess is that it is far more uncommon that a device was removed in the cloud than a communication problem is. You are right setting it to just OFFLINE seems to be the better option here.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r614915308", "createdAt": "2021-04-16T15:11:51Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/AbstractMieleThingHandler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mielecloud.internal.handler;\n+\n+import static org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.Channels.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus.*;\n+import static org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction.*;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.mielecloud.internal.MieleCloudBindingConstants.I18NKeys;\n+import org.openhab.binding.mielecloud.internal.discovery.ThingInformationExtractor;\n+import org.openhab.binding.mielecloud.internal.handler.channel.ActionsChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.DeviceChannelState;\n+import org.openhab.binding.mielecloud.internal.handler.channel.TransitionChannelState;\n+import org.openhab.binding.mielecloud.internal.webservice.ActionStateFetcher;\n+import org.openhab.binding.mielecloud.internal.webservice.MieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.UnavailableMieleWebservice;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ActionsState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.DeviceState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.PowerStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.ProgramStatus;\n+import org.openhab.binding.mielecloud.internal.webservice.api.TransitionState;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.ProcessAction;\n+import org.openhab.binding.mielecloud.internal.webservice.api.json.StateType;\n+import org.openhab.binding.mielecloud.internal.webservice.exception.TooManyRequestsException;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract base class for all Miele thing handlers.\n+ *\n+ * @author Roland Edelhoff - Initial contribution\n+ * @author Bj\u00f6rn Lange - Add channel state wrappers\n+ */\n+@NonNullByDefault\n+public abstract class AbstractMieleThingHandler extends BaseThingHandler {\n+    protected final ActionStateFetcher actionFetcher;\n+    protected DeviceState latestDeviceState = new DeviceState(getDeviceId(), null);\n+    protected TransitionState latestTransitionState = new TransitionState(null, latestDeviceState);\n+    protected ActionsState latestActionsState = new ActionsState(getDeviceId(), null);\n+\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    /**\n+     * Creates a new {@link AbstractMieleThingHandler}.\n+     *\n+     * @param thing The thing to handle.\n+     */\n+    public AbstractMieleThingHandler(Thing thing) {\n+        super(thing);\n+        this.actionFetcher = new ActionStateFetcher(this::getWebservice, scheduler);\n+    }\n+\n+    private Optional<MieleBridgeHandler> getMieleBridgeHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            return Optional.empty();\n+        }\n+\n+        BridgeHandler handler = bridge.getHandler();\n+        if (handler == null || !(handler instanceof MieleBridgeHandler)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of((MieleBridgeHandler) handler);\n+    }\n+\n+    protected MieleWebservice getWebservice() {\n+        return getMieleBridgeHandler().map(MieleBridgeHandler::getWebservice)\n+                .orElse(UnavailableMieleWebservice.INSTANCE);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        getWebservice().dispatchDeviceState(getDeviceId());\n+\n+        // If no device state update was received so far, set the device to OFFLINE.\n+        if (getThing().getStatus() == ThingStatus.INITIALIZING) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTkxNzM0NQ=="}, "originalCommit": {"oid": "2eb5614bcc65e1eaa6cb6ed642957665f340797c"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk0MTg4OTIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yOFQyMDo0MDozNlrOJRrwBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0yOFQyMDo0MDozNlrOJRrwBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyMjUyMjM3Mw==", "bodyText": "Actually, this parameter should be optional, since there is a default value defined.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r622522373", "createdAt": "2021-04-28T20:40:36Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/README.md", "diffHunk": "@@ -69,9 +69,9 @@ As an alternative, it provides a things-file template.\n \n The account has the following parameters:\n \n-| Name        | Type      | Description                                                                                                                                                | Notes                                |\n-| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n-| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. | Prior to the 7th January 2021 `da`, `es`, `fr`, `it`, `nl` and `nb` will default to English. |\n+| Name        | Type      | Description                                                                                                                                                | Notes |\n+| ----------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ----- |\n+| locale      | mandatory | The locale to use for full text channels of things from this account. Possible values are `en`, `de`, `da`, `es`, `fr`, `it`, `nl`, `nb`. Default is `en`. |       |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b60d96fd3bc15f9e251e809d09ec5e39bc820c1"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzk2NTg4ODAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0wNFQxNzo1NjoxM1rOJU_X7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMVQxMjo0MTo1OVrOJfYfSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTk4OTYxMw==", "bodyText": "Hm, this does not really make sense to me. This method is again one that is called by the framework and should behave accordingly. If the framework calls it and nothing has changed about the configuration, no re-initialization is necessary and should hence not be done.\nIsn't what you want to do to introduce a new private method instead, which you can call from reconfigureBridge() and that re-initializes what is necessary (without calling initialize() nor dispose())?", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r625989613", "createdAt": "2021-05-04T17:56:13Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -153,6 +158,39 @@ public void handleRemoval() {\n         super.handleRemoval();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * Note: This is the same implementation as in {@link BaseThingHandler} except that it is not checked whether the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2e35cf48e927016a813dc987bf9e7a2ff8bcde0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjU1NTM1OQ==", "bodyText": "Hm, this does not really make sense to me. This method is again one that is called by the framework and should behave accordingly. If the framework calls it and nothing has changed about the configuration, no re-initialization is necessary and should hence not be done.\n\nThe problem we try to solve by doing this is that the configuration of the bridge is made up of the configuration parameters and the current access token. We could check whether the access token changed prior to calling dispose() and initialize() here. Would that be a valid solution?\n\nIsn't what you want to do to introduce a new private method instead, which you can call from reconfigureBridge() and that re-initializes what is necessary (without calling initialize() nor dispose())?\n\nI could do so, but it is necessary to do everything that is done in initialize() and dispose(). I could put all of that into separate methods, like internalInitialize() and internalDispose() and call these from reconfigureBridge(), initialize() and dispose() but I don't see the advantage of doing this apart from not calling framework methods. It would rather confuse me when I would be reading such code.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r626555359", "createdAt": "2021-05-05T13:17:07Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -153,6 +158,39 @@ public void handleRemoval() {\n         super.handleRemoval();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * Note: This is the same implementation as in {@link BaseThingHandler} except that it is not checked whether the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTk4OTYxMw=="}, "originalCommit": {"oid": "f2e35cf48e927016a813dc987bf9e7a2ff8bcde0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMTQyMTczOQ==", "bodyText": "Maybe you better see the advantage if you think of better names for the private methods, e.g. something like startBackgroundThreads() and stopBackgroundThreads() or something describing what the code does.\nMy problem with dispose() is that the name of the method signals that after calling it, the object is/can be garbage collected and that it is not in use anymore. Calling such a method and still continuing to work with the object seems wrong.\nLikewise, initialize() as a method is similar to the OSGi services activate(), which is called exactly once in the lifecycle of an object. So any additional call seems fishy.\nThese issues can be escaped by defining your own private methods with a suitable naming.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r631421739", "createdAt": "2021-05-12T21:43:40Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -153,6 +158,39 @@ public void handleRemoval() {\n         super.handleRemoval();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * Note: This is the same implementation as in {@link BaseThingHandler} except that it is not checked whether the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTk4OTYxMw=="}, "originalCommit": {"oid": "f2e35cf48e927016a813dc987bf9e7a2ff8bcde0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjg4Njg1OA==", "bodyText": "I did as you requested and decided to use initializeWebservice and disposeWebservice as the webservice component used by the handler is disposed and initialized again. Hope this is fine now.", "url": "https://github.com/openhab/openhab-addons/pull/9146#discussion_r636886858", "createdAt": "2021-05-21T12:41:59Z", "author": {"login": "BjoernLange"}, "path": "bundles/org.openhab.binding.mielecloud/src/main/java/org/openhab/binding/mielecloud/internal/handler/MieleBridgeHandler.java", "diffHunk": "@@ -153,6 +158,39 @@ public void handleRemoval() {\n         super.handleRemoval();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     *\n+     * Note: This is the same implementation as in {@link BaseThingHandler} except that it is not checked whether the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTk4OTYxMw=="}, "originalCommit": {"oid": "f2e35cf48e927016a813dc987bf9e7a2ff8bcde0"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3725, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}