{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODIwNTIx", "number": 8362, "title": "[myStrom] Initial Contribution", "bodyText": "This is an initial version of a binding for the myStrom smart plug.", "createdAt": "2020-08-29T19:41:08Z", "url": "https://github.com/openhab/openhab-addons/pull/8362", "merged": true, "mergeCommit": {"oid": "4b8740945a2f164f129579879e6df4d1dcd4b7c6"}, "closed": true, "closedAt": "2020-09-07T06:44:06Z", "author": {"login": "pail23"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdENRXcAFqTQ3ODM1MDczNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGUWggAFqTQ4MzE3MDM2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MzUwNzM0", "url": "https://github.com/openhab/openhab-addons/pull/8362#pullrequestreview-478350734", "createdAt": "2020-08-31T06:37:08Z", "commit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjozNzowOFrOHJsM5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo1OTozNFrOHJs17Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMzQyOA==", "bodyText": "Can you add the unit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final int DEFAULT_WAIT_BEFORE_INITIAL_REFRESH = 10;\n          \n          \n            \n                public static final int DEFAULT_WAIT_BEFORE_INITIAL_REFRESH_SECONDS = 10;", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479923428", "createdAt": "2020-08-31T06:37:08Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromBindingConstants.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link MyStromBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromBindingConstants {\n+\n+    public static final int DEFAULT_WAIT_BEFORE_INITIAL_REFRESH = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMzU2MA==", "bodyText": "Same here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final int DEFAULT_REFRESH_RATE = 10;\n          \n          \n            \n                public static final int DEFAULT_REFRESH_RATE_SECONDS = 10;", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479923560", "createdAt": "2020-08-31T06:37:30Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromBindingConstants.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link MyStromBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromBindingConstants {\n+\n+    public static final int DEFAULT_WAIT_BEFORE_INITIAL_REFRESH = 10;\n+    public static final int DEFAULT_REFRESH_RATE = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNDMxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledFuture<?> pollingJob;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> pollingJob;", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479924313", "createdAt": "2020-08-31T06:39:29Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNzQ4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                scheduler.schedule(() -> {\n          \n          \n            \n                                    pollDevice();\n          \n          \n            \n                                }, 500, TimeUnit.MILLISECONDS);\n          \n          \n            \n                                scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479927483", "createdAt": "2020-08-31T06:45:13Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyOTE0NA==", "bodyText": "Please log this to warn. See documentation about what to log: https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479929144", "createdAt": "2020-08-31T06:48:07Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyOTM3Nw==", "bodyText": "This should be debug log as it already also set the state", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479929377", "createdAt": "2020-08-31T06:48:42Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyOTYxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        updateStatus(ThingStatus.OFFLINE);\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        updateStatus(ThingStatus.OFFLINE);\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479929614", "createdAt": "2020-08-31T06:49:20Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMDczNg==", "bodyText": "The polling job is started with a delay, but here it's started directly. Why not just start the scheduled job with 0 seconds delay?", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479930736", "createdAt": "2020-08-31T06:52:01Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(MyStromConfiguration.class);\n+        hostname = config.hostname;\n+\n+        pollingJob = scheduler.scheduleWithFixedDelay(this::pollDevice, DEFAULT_WAIT_BEFORE_INITIAL_REFRESH,\n+                config.refresh, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.execute(this::pollDevice);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMTM5Nw==", "bodyText": "Remove sample text", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479931397", "createdAt": "2020-08-31T06:53:38Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mystrom\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Sample Thing Type -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMTY4OQ==", "bodyText": "Put inner classes at the top or bottom of this class.", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479931689", "createdAt": "2020-08-31T06:54:19Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMzkzMw==", "bodyText": "refresh is called for each channel. So if you have 3 items linked to channels. This is called 3 times. It's also called in a different thread as the polling job, so they might be called at the same time. A solution is to use ExpiringCache from openHAB core. You can use MyStromReport as the data to manager and for example use a timeout of 3 seconds. So if the data is requested within 3 seconds it returns the cached data.", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479933933", "createdAt": "2020-08-31T06:59:34Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNTI2NjUy", "url": "https://github.com/openhab/openhab-addons/pull/8362#pullrequestreview-480526652", "createdAt": "2020-09-02T06:46:03Z", "commit": {"oid": "4fd16f8da47c4f7f1efa20d03d369469d3de181d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMDQ0MDQy", "url": "https://github.com/openhab/openhab-addons/pull/8362#pullrequestreview-483044042", "createdAt": "2020-09-05T09:34:47Z", "commit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwOTozNDo0N1rOHNg6bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwOTo0NToyN1rOHNg-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMjc4MQ==", "bodyText": "It seems a bit unreasonable logging the stack trace when the network fails. You could simply log the exception's message.", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483932781", "createdAt": "2020-09-05T09:34:47Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzAwNw==", "bodyText": "You could use the exception's message to fill the last argument of updateStatus(). The log message would be obsolete, then, as the status update is already logged.", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933007", "createdAt": "2020-09-05T09:37:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzA1MQ==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933051", "createdAt": "2020-09-05T09:37:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzEzMA==", "bodyText": "If you make config a local variable, the compiler warning would be gone.", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933130", "createdAt": "2020-09-05T09:38:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(MyStromConfiguration.class);\n+        hostname = config.hostname;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzE3Mg==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level?", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933172", "createdAt": "2020-09-05T09:39:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(MyStromConfiguration.class);\n+        hostname = config.hostname;\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        pollingJob = scheduler.scheduleWithFixedDelay(this::pollDevice, 0, config.refresh, TimeUnit.SECONDS);\n+\n+        logger.debug(\"Finished initializing!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzIyNA==", "bodyText": "Please add a reasonable timeout like 10 sec.", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933224", "createdAt": "2020-09-05T09:39:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(MyStromConfiguration.class);\n+        hostname = config.hostname;\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        pollingJob = scheduler.scheduleWithFixedDelay(this::pollDevice, 0, config.refresh, TimeUnit.SECONDS);\n+\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        if (pollingJob != null) {\n+            pollingJob.cancel(true);\n+            pollingJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Given a URL and a set parameters, send a HTTP GET request to the URL location\n+     * created by the URL and parameters.\n+     *\n+     * @param url The URL to send a GET request to.\n+     * @return String contents of the response for the GET request.\n+     * @throws Exception\n+     */\n+    public String sendHttpGet(String action) throws MyStromException {\n+\n+        String url = \"http://\" + hostname + \"/\" + action;\n+        ContentResponse response = null;\n+        try {\n+            response = httpClient.newRequest(url).method(HttpMethod.GET).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzQ4MA==", "bodyText": "Is there a reason why you don't use https by default? You could remove the protocol here and add <context>network-address</context> to get a free validation, then.", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933480", "createdAt": "2020-09-05T09:42:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mystrom\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"mystromplug\">\n+\t\t<label>myStrom Smart Plug</label>\n+\t\t<description>Controls the myStrom smart plug</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\"/>\n+\t\t\t<channel id=\"power\" typeId=\"power-channel\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"hostname\" type=\"text\">\n+\t\t\t\t<label>Hostname</label>\n+\t\t\t\t<description>The host name or IP address of the mystrom plug. It may or may not start with the\n+\t\t\t\t\tprotocol, e.g. in\n+\t\t\t\t\torder to use https:// instead of the default http://.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzU1Mw==", "bodyText": "You might want to specify a reasonable min value (e.g. 1). If the user specifys a 0 or a negative value, your code will crash.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refresh\" type=\"integer\">\n          \n          \n            \n            \t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933553", "createdAt": "2020-09-05T09:43:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mystrom\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"mystromplug\">\n+\t\t<label>myStrom Smart Plug</label>\n+\t\t<description>Controls the myStrom smart plug</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\"/>\n+\t\t\t<channel id=\"power\" typeId=\"power-channel\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"hostname\" type=\"text\">\n+\t\t\t\t<label>Hostname</label>\n+\t\t\t\t<description>The host name or IP address of the mystrom plug. It may or may not start with the\n+\t\t\t\t\tprotocol, e.g. in\n+\t\t\t\t\torder to use https:// instead of the default http://.</description>\n+\t\t\t\t<default>localhost</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzY5OQ==", "bodyText": "You could use the system type. Then, you don't need to specify your own Channel type.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<channel id=\"switch\" typeId=\"switch-channel\"/>\n          \n          \n            \n            \t\t\t<channel id=\"switch\" typeId=\"system.power\"/>", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933699", "createdAt": "2020-09-05T09:45:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mystrom\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"mystromplug\">\n+\t\t<label>myStrom Smart Plug</label>\n+\t\t<description>Controls the myStrom smart plug</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61e17dfba574b96e9b4d518098fbb13fe6bcdb4", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/b61e17dfba574b96e9b4d518098fbb13fe6bcdb4", "committedDate": "2020-09-06T16:02:42Z", "message": "initial commit of the skeletton\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd5b6ad89ccc806f038d9459812fe3f1dd0fafd9", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/bd5b6ad89ccc806f038d9459812fe3f1dd0fafd9", "committedDate": "2020-09-06T16:02:42Z", "message": "First feature set\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b7d68bfb1886678ca027f906bbcd84d25aebaf1", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/0b7d68bfb1886678ca027f906bbcd84d25aebaf1", "committedDate": "2020-09-06T16:02:42Z", "message": "finetuning and documentation\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96f2bd386f20345646ae5431f2c2fb3eb7c7c3b8", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/96f2bd386f20345646ae5431f2c2fb3eb7c7c3b8", "committedDate": "2020-09-06T16:02:42Z", "message": "remove i18n\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "958bf97301d36627528c6b91c6909d08f92cab4f", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/958bf97301d36627528c6b91c6909d08f92cab4f", "committedDate": "2020-09-06T16:04:09Z", "message": "fix pom file\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b715190dc88505859d55642a1a04f87431db8dcf", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/b715190dc88505859d55642a1a04f87431db8dcf", "committedDate": "2020-09-06T16:04:09Z", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromBindingConstants.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5587a5c46b003769831d9b61060ceb65d3ac60a6", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/5587a5c46b003769831d9b61060ceb65d3ac60a6", "committedDate": "2020-09-06T16:04:09Z", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromBindingConstants.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e099b307b0c2c90abbf94e17681cc667f03cac26", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/e099b307b0c2c90abbf94e17681cc667f03cac26", "committedDate": "2020-09-06T16:04:09Z", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8f5a2dd44ea3f87a42f565ed0a4343bab61d972", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/f8f5a2dd44ea3f87a42f565ed0a4343bab61d972", "committedDate": "2020-09-06T16:04:09Z", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5a705178f67ba6abb3b329c4a4614ba4ded9a7", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/8f5a705178f67ba6abb3b329c4a4614ba4ded9a7", "committedDate": "2020-09-06T16:04:09Z", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17afc224ef0507b39b4810e8441a2077b5a781f3", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/17afc224ef0507b39b4810e8441a2077b5a781f3", "committedDate": "2020-09-06T16:04:09Z", "message": "fixed review comments\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcbfbbaec4fcc0774ac45170ed519bcef426179e", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/fcbfbbaec4fcc0774ac45170ed519bcef426179e", "committedDate": "2020-09-06T16:04:09Z", "message": "apply spotless\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90de63b3fbcc14d755769dba735ee927b8067702", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/90de63b3fbcc14d755769dba735ee927b8067702", "committedDate": "2020-09-06T16:04:09Z", "message": "fix wrong offline state\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879947d0ec060b98411508ed5cb85e909e14b0de", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/879947d0ec060b98411508ed5cb85e909e14b0de", "committedDate": "2020-09-06T16:04:09Z", "message": "fixed review comments\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81229d71aec16b9cc0eb0d1ef74930f6bf75e49a", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/81229d71aec16b9cc0eb0d1ef74930f6bf75e49a", "committedDate": "2020-09-06T16:04:10Z", "message": "changes in .project\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "247dd57b571bfe25a5560fc0a460dc6a4a061866", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/247dd57b571bfe25a5560fc0a460dc6a4a061866", "committedDate": "2020-09-06T16:10:06Z", "message": "spotless:apply\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTU5MTkz", "url": "https://github.com/openhab/openhab-addons/pull/8362#pullrequestreview-483159193", "createdAt": "2020-09-06T17:07:33Z", "commit": {"oid": "247dd57b571bfe25a5560fc0a460dc6a4a061866"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzowNzozM1rOHNqsWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNzowNzozM1rOHNqsWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5MzAxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <module>org.openhab.binding.mystrom</module>    \n          \n          \n            \n                <module>org.openhab.binding.mystrom</module>", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484093018", "createdAt": "2020-09-06T17:07:33Z", "author": {"login": "Hilbrand"}, "path": "bundles/pom.xml", "diffHunk": "@@ -173,6 +173,7 @@\n     <module>org.openhab.binding.mqtt.generic</module>\n     <module>org.openhab.binding.mqtt.homeassistant</module>\n     <module>org.openhab.binding.mqtt.homie</module>\n+    <module>org.openhab.binding.mystrom</module>    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "247dd57b571bfe25a5560fc0a460dc6a4a061866"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a", "committedDate": "2020-09-06T17:09:56Z", "message": "apply spotless\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTYzMDQ3", "url": "https://github.com/openhab/openhab-addons/pull/8362#pullrequestreview-483163047", "createdAt": "2020-09-06T18:12:26Z", "commit": {"oid": "e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxODoxMjoyNlrOHNrDWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxODoxNTo0MVrOHNrEkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5ODkwNQ==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484098905", "createdAt": "2020-09-06T18:12:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/.project", "diffHunk": "@@ -0,0 +1,28 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<projectDescription>\n+\t<name>org.openhab.binding.mystrom</name>\n+\t<comment></comment>\n+\t<projects>\n+\t</projects>\n+\t<buildSpec>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.m2e.core.maven2Builder</name>\n+\t\t\t<arguments>\n+\t\t\t</arguments>\n+\t\t</buildCommand>\n+\t</buildSpec>\n+\t<natures>\n+\t\t<nature>org.eclipse.m2e.core.maven2Nature</nature>\n+\t</natures>\n+\t<filteredResources>\n+\t\t<filter>\n+\t\t\t<id>1599248758658</id>\n+\t\t\t<name></name>\n+\t\t\t<type>30</type>\n+\t\t\t<matcher>\n+\t\t\t\t<id>org.eclipse.core.resources.regexFilterMatcher</id>\n+\t\t\t\t<arguments>node_modules|.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>\n+\t\t\t</matcher>\n+\t\t</filter>\n+\t</filteredResources>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5OTE0NQ==", "bodyText": "Can this if be removed, then?", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484099145", "createdAt": "2020-09-06T18:14:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to the myStrom plug: \";\n+    private static final String HTTP_REQUEST_URL_PREFIX = \"http://\";\n+    private static final String HTTPS_REQUEST_URL_PREFIX = \"https://\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(\"Error while handling command {}\", e.getMessage());\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MyStromConfiguration config = getConfigAs(MyStromConfiguration.class);\n+        if (config.hostname.startsWith(HTTP_REQUEST_URL_PREFIX)\n+                || config.hostname.startsWith(HTTPS_REQUEST_URL_PREFIX)) {\n+            this.hostname = config.hostname;\n+        } else {\n+            this.hostname = HTTP_REQUEST_URL_PREFIX + config.hostname;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5OTIxNg==", "bodyText": "Base class destructors should be called at the end of the implementing destructors.", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484099216", "createdAt": "2020-09-06T18:15:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to the myStrom plug: \";\n+    private static final String HTTP_REQUEST_URL_PREFIX = \"http://\";\n+    private static final String HTTPS_REQUEST_URL_PREFIX = \"https://\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(\"Error while handling command {}\", e.getMessage());\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MyStromConfiguration config = getConfigAs(MyStromConfiguration.class);\n+        if (config.hostname.startsWith(HTTP_REQUEST_URL_PREFIX)\n+                || config.hostname.startsWith(HTTPS_REQUEST_URL_PREFIX)) {\n+            this.hostname = config.hostname;\n+        } else {\n+            this.hostname = HTTP_REQUEST_URL_PREFIX + config.hostname;\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        pollingJob = scheduler.scheduleWithFixedDelay(this::pollDevice, 0, config.refresh, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f1569c407a65a33eaf5f767f2ec9e9c27e44210", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/6f1569c407a65a33eaf5f767f2ec9e9c27e44210", "committedDate": "2020-09-06T20:01:35Z", "message": "fix review comments\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76e035309439e96d440271da3df5fbc7b8f7cb47", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/76e035309439e96d440271da3df5fbc7b8f7cb47", "committedDate": "2020-09-06T20:06:48Z", "message": "remove filtered resource\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c659befba0d64d8f88aa798e864402d38bebe657", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/c659befba0d64d8f88aa798e864402d38bebe657", "committedDate": "2020-09-06T20:15:26Z", "message": "always use hostname without prefix\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMTcwMzYy", "url": "https://github.com/openhab/openhab-addons/pull/8362#pullrequestreview-483170362", "createdAt": "2020-09-06T20:23:28Z", "commit": {"oid": "c659befba0d64d8f88aa798e864402d38bebe657"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4750, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}