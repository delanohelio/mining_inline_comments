{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzQ5NTIz", "number": 7760, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjoyNTo0OFrOD_Krgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNzo1MVrOD_zzEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTYxODU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjoyNTo0OFrOGZsSNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMDo1NzowN1rOGZuK_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MzE0MQ==", "bodyText": "Do you expect this method to be called concurrently?", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r429593141", "createdAt": "2020-05-24T02:25:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +56,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNDA2MQ==", "bodyText": "Yes, sir, I have seen more than on scheduler been created with a single Homie device and I can't synchronize on the future field because it is nullable \ud83d\ude09", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r429624061", "createdAt": "2020-05-24T10:57:07Z", "author": {"login": "bodiroga"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +56,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MzE0MQ=="}, "originalCommit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjIwMTY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMDoyMjo1OFrOGZxEyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMjo0Mjo1MVrOGaKorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MTYyNA==", "bodyText": "I can see a lot of potential concurrency issues around reassigning the future which mostly has to do with how this interacts with the other methods that cancel the future. I'm going to suggest a couple of changes which will make all of this thread-safe.\nFirst, create a utility method for cancelling the future:\nprivate static void cancel(@Nullable Future<?> future){\n    Future<?> future = this.future;\n    if(future != null){\n        future.cancel(false);\n    }\n}\n\nYou will notice I don't bother checking if it is done or not since nothing bad will happen if you try to cancel an already finished future.\nThen you will want to change\nprotected @Nullable ScheduledFuture<?> future;\nto\nprotected final AtomicReference<@Nullable Future<?>> futureRef = new AtomicReference<>().\nThen when you just want to cancel the future you call cancel(futureRef.getAndSet(null))\nAnd when you want to schedule the future while canceling the old one you call cancel(futureRef.getAndSet(executor.schedule(this::run, delay, TimeUnit.MILLISECONDS)));\nA few of the other methods would also change slightly.\n    /**\n     * Return true if there is a delayed processing going on.\n     */\n    public boolean isArmed() {\n        ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n        return scheduledFuture != null && !scheduledFuture.isDone();\n    }\n\nDoing all this will allow you to safely remove the synchronized you added to accept as well as making all sure all of your other code is interacting with your future in an atomic way. I think using an AtomicReference here is more performant and less error prone than trying to basically synchronize every method in this class.", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r429671624", "createdAt": "2020-05-24T20:22:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +56,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {\n         queue.add(t);\n         final ScheduledFuture<?> scheduledFuture = this.future;\n-        if (scheduledFuture == null || scheduledFuture.isDone()) {\n-            this.future = executor.schedule(this::run, delay, TimeUnit.MILLISECONDS);\n+        if (scheduledFuture != null && !scheduledFuture.isDone()) {\n+            scheduledFuture.cancel(true);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwNTQ4Nw==", "bodyText": "Wow, thanks for the detailed instructions @cpmeister, I will add them \ud83d\udc4d  @jochen314, do you have anything to add? Do you agree with the proposed solution? I don't want to touch the DelayedBatchProccesing class without your approval \ud83d\ude09", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430005487", "createdAt": "2020-05-25T16:10:01Z", "author": {"login": "bodiroga"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +56,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {\n         queue.add(t);\n         final ScheduledFuture<?> scheduledFuture = this.future;\n-        if (scheduledFuture == null || scheduledFuture.isDone()) {\n-            this.future = executor.schedule(this::run, delay, TimeUnit.MILLISECONDS);\n+        if (scheduledFuture != null && !scheduledFuture.isDone()) {\n+            scheduledFuture.cancel(true);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MTYyNA=="}, "originalCommit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2MzI2MQ==", "bodyText": "I am 100% with @cpmeister here.\nPersonally I would even try a method like\nprivate boolean setNewFuture(ScheduledFuture<?> newFuture) {\n    Future<?> oldFuture = this.future.getAndSet(newFuture);\n    boolean result = true;\n    if(future != null){\n        result = future.isDone();\n        future.cancel(false);\n    }\n    return result;\n}\n\nAnd just one more thing:\nThere is the possibility that:\n\nThe future times out\nWe receive a new call to accept()\n\nDoes your caode then schedule another timeout-future?\nI think, this should not be done. That's why my proposed method returns, if the old future was already done, so we could use that, not to trigger a new timeout, once a timeout occured.", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430063261", "createdAt": "2020-05-25T20:09:32Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +56,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {\n         queue.add(t);\n         final ScheduledFuture<?> scheduledFuture = this.future;\n-        if (scheduledFuture == null || scheduledFuture.isDone()) {\n-            this.future = executor.schedule(this::run, delay, TimeUnit.MILLISECONDS);\n+        if (scheduledFuture != null && !scheduledFuture.isDone()) {\n+            scheduledFuture.cancel(true);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MTYyNA=="}, "originalCommit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5MDQxMw==", "bodyText": "Hi @jochen314!\nFirst of all, many thanks for your message, it's good to see you here \ud83d\ude09 But... I don't understand what you mean with your last concerns.\n\nIf the future times out, that means that no new messages have arrived in X seconds, so the run method is called.\nA new call to accept() just reschedules the future, resetting the process.\n\nTo make things more clear, the current DelayedBatchProccesing class behavior is:\n\nThe first time the accept() method is called, the future timer is set and new objects are collected when accept() is triggered. After the delay time has passed, the run method is called.\n\nWith the proposed changes, the new behavior will be:\n\nThe first time the accept() method is called, the future timer is set, but it is rescheduled when a new object is accepted. The run method will be called only after delay seconds have passed since the last message.\n\nThe new logic ensures that discovery processes that take longer than initially anticipated can be completed successfully, as it was suggested in #5963 (comment). Perhaps I'm explaining something that is obvious, but I just wanted to avoid any misunderstanding.\nAnyway, tomorrow I will update the PR with the changes proposed by @cpmeister. Stay tuned!", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430090413", "createdAt": "2020-05-25T22:42:51Z", "author": {"login": "bodiroga"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +56,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {\n         queue.add(t);\n         final ScheduledFuture<?> scheduledFuture = this.future;\n-        if (scheduledFuture == null || scheduledFuture.isDone()) {\n-            this.future = executor.schedule(this::run, delay, TimeUnit.MILLISECONDS);\n+        if (scheduledFuture != null && !scheduledFuture.isDone()) {\n+            scheduledFuture.cancel(true);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MTYyNA=="}, "originalCommit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjM0Mjg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNDowMFrOGasPLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyNDozN1rOGas6bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MDk0MA==", "bodyText": "The AtomicReference handles your synchronization so you can remove the synchronized here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                synchronized public void accept(T t) {\n          \n          \n            \n                public void accept(T t) {", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430640940", "createdAt": "2020-05-26T19:04:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +57,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1MjAxNA==", "bodyText": "In my defense, I can say that in the first push it was removed... \ud83e\udd26", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430652014", "createdAt": "2020-05-26T19:24:37Z", "author": {"login": "bodiroga"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +57,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MDk0MA=="}, "originalCommit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjM0NTk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNTowMlrOGasRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNTowMlrOGasRLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MTQ1NA==", "bodyText": "The cancel is already handled in the next statement. So you can remove this logic.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n          \n          \n            \n                    if (scheduledFuture != null && !scheduledFuture.isDone()) {\n          \n          \n            \n                        cancel(futureRef.getAndSet(null));\n          \n          \n            \n                    }", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430641454", "createdAt": "2020-05-26T19:05:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +57,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {\n         queue.add(t);\n-        final ScheduledFuture<?> scheduledFuture = this.future;\n-        if (scheduledFuture == null || scheduledFuture.isDone()) {\n-            this.future = executor.schedule(this::run, delay, TimeUnit.MILLISECONDS);\n+        final ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n+        if (scheduledFuture != null && !scheduledFuture.isDone()) {\n+            cancel(futureRef.getAndSet(null));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjM1MjAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNjo0OVrOGasVCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNjo0OVrOGasVCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MjQ0MA==", "bodyText": "You can replace all this with just cancel(futureRef.getAndSet(null));", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430642440", "createdAt": "2020-05-26T19:06:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -76,9 +78,9 @@ public void accept(T t) {\n      * @return A list of accumulated objects\n      */\n     public List<T> join() {\n-        ScheduledFuture<?> scheduledFuture = this.future;\n+        ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n         if (scheduledFuture != null && !scheduledFuture.isDone()) {\n-            scheduledFuture.cancel(false);\n+            cancel(futureRef.getAndSet(null));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjM1NTM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNzo1MVrOGasXRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNzo1MVrOGasXRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MzAxMw==", "bodyText": "Same here, just replace all this with cancel(futureRef.getAndSet(null));.", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430643013", "createdAt": "2020-05-26T19:07:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -92,17 +94,17 @@ public void accept(T t) {\n      * Return true if there is a delayed processing going on.\n      */\n     public boolean isArmed() {\n-        ScheduledFuture<?> scheduledFuture = this.future;\n+        ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n         return scheduledFuture != null && !scheduledFuture.isDone();\n     }\n \n     /**\n      * Deliver queued items now to the target consumer.\n      */\n     public void forceProcessNow() {\n-        ScheduledFuture<?> scheduledFuture = this.future;\n+        ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n         if (scheduledFuture != null && !scheduledFuture.isDone()) {\n-            scheduledFuture.cancel(false);\n+            cancel(futureRef.getAndSet(null));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 119, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}