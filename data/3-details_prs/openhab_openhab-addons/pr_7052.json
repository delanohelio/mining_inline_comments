{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjE1NDM1", "number": 7052, "title": "[comfoair] Initial contribution for comfoair v2 binding", "bodyText": "This binding is a migration of the v1 comfoair binding.\nLogic is mainly re-used from v1 version with some straightforward changes/additions:\n\nTemperature and Voltage readings have been implemented using UoM\nBoolean-type values are now implemented as Switch channels\n\nSince, this is my first bigger java project, any suggestions on code quality improvements are highly appreciated.\nAlso thanks to @HolgerHees and @gieemek for their valuable work on the v1 binding.\nJAR-Files are available from (after initial build):\nhttps://openhab.jfrog.io/openhab/libs-pullrequest-local/org/openhab/addons/bundles/org.openhab.binding.comfoair/\nCommunity thread", "createdAt": "2020-02-22T18:02:38Z", "url": "https://github.com/openhab/openhab-addons/pull/7052", "merged": true, "mergeCommit": {"oid": "3842672e657a15254cb0886e6421f1edacc67a57"}, "closed": true, "closedAt": "2020-08-31T22:14:09Z", "author": {"login": "boehan"}, "timelineItems": {"totalCount": 86, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcG4Se7ABqjMwNjI4ODE4OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEaURCAFqTQ3ODk5MDI0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1264662955e9f90d612e25046d40ace3a851a870", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/1264662955e9f90d612e25046d40ace3a851a870", "committedDate": "2020-02-22T17:41:52Z", "message": "comfoair - first version"}, "afterCommit": {"oid": "b30bfcc3da7dcd8e28be58b02a58b44a97651346", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/b30bfcc3da7dcd8e28be58b02a58b44a97651346", "committedDate": "2020-02-22T18:03:50Z", "message": "comfoair - first version\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjgzNTUy", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-374683552", "createdAt": "2020-03-14T00:59:26Z", "commit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDo1OToyN1rOF2W14A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMTo1MzozNFrOF2XIjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MTY2NA==", "bodyText": "Please make all fields in enums private and final.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392541664", "createdAt": "2020-03-14T00:59:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,2263 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+public enum ComfoAirCommandType {\n+\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_tape\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE {\n+        {\n+            key = \"bindingControl#activate\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x03 };\n+            change_command = 0x9b;\n+            change_data_size = 1;\n+            change_data_pos = 0;\n+            change_affected = new String[] {};\n+            read_command = 0x9c;\n+            read_reply_command = 0x9c;\n+            read_reply_data_pos = new int[] { 0 };\n+            read_reply_data_bits = 0x03;\n+        }\n+    },\n+\n+    MENU20_MODE {\n+        {\n+            key = \"menuP1#menu20Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 6 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    MENU21_MODE {\n+        {\n+            key = \"menuP1#menu21Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 6 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    MENU22_MODE {\n+        {\n+            key = \"menuP1#menu22Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 6 };\n+            read_reply_data_bits = 0x04;\n+        }\n+    },\n+\n+    MENU23_MODE {\n+        {\n+            key = \"menuP1#menu23Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 6 };\n+            read_reply_data_bits = 0x08;\n+        }\n+    },\n+\n+    MENU24_MODE {\n+        {\n+            key = \"menuP1#menu24Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 6 };\n+            read_reply_data_bits = 0x10;\n+        }\n+    },\n+\n+    MENU25_MODE {\n+        {\n+            key = \"menuP1#menu25Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 6 };\n+            read_reply_data_bits = 0x20;\n+        }\n+    },\n+\n+    MENU26_MODE {\n+        {\n+            key = \"menuP1#menu26Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 6 };\n+            read_reply_data_bits = 0x40;\n+        }\n+    },\n+\n+    MENU27_MODE {\n+        {\n+            key = \"menuP1#menu27Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 6 };\n+            read_reply_data_bits = 0x80;\n+        }\n+    },\n+\n+    MENU28_MODE {\n+        {\n+            key = \"menuP1#menu28Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 7 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    MENU29_MODE {\n+        {\n+            key = \"menuP1#menu29Mode\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 7 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    BATHROOM_START_DELAY {\n+        {\n+            key = \"menuP2#bathroomStartDelay\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcb;\n+            change_data_size = 8;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"menuP1#menu21Mode\" };\n+            read_command = 0xc9;\n+            read_reply_command = 0xca;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    BATHROOM_END_DELAY {\n+        {\n+            key = \"menuP2#bathroomEndDelay\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcb;\n+            change_data_size = 8;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"menuP1#menu22Mode\" };\n+            read_command = 0xc9;\n+            read_reply_command = 0xca;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    L1_END_DELAY {\n+        {\n+            key = \"menuP2#L1EndDelay\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcb;\n+            change_data_size = 8;\n+            change_data_pos = 2;\n+            change_affected = new String[] { \"menuP1#menu27Mode\" };\n+            read_command = 0xc9;\n+            read_reply_command = 0xca;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    PULSE_VENTILATION {\n+        {\n+            key = \"menuP2#pulseVentilation\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcb;\n+            change_data_size = 8;\n+            change_data_pos = 3;\n+            change_affected = new String[] { \"menuP1#menu23Mode\" };\n+            read_command = 0xc9;\n+            read_reply_command = 0xca;\n+            read_reply_data_pos = new int[] { 3 };\n+        }\n+    },\n+\n+    FILTER_WEEKS {\n+        {\n+            key = \"menuP2#filterWeeks\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcb;\n+            change_data_size = 8;\n+            change_data_pos = 4;\n+            change_affected = new String[] { \"menuP1#menu24Mode\" };\n+            read_command = 0xc9;\n+            read_reply_command = 0xca;\n+            read_reply_data_pos = new int[] { 4 };\n+        }\n+    },\n+\n+    RF_SHORT_DELAY {\n+        {\n+            key = \"menuP2#RFShortDelay\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcb;\n+            change_data_size = 8;\n+            change_data_pos = 5;\n+            change_affected = new String[] { \"menuP1#menu25Mode\" };\n+            read_command = 0xc9;\n+            read_reply_command = 0xca;\n+            read_reply_data_pos = new int[] { 5 };\n+        }\n+    },\n+\n+    RF_LONG_DELAY {\n+        {\n+            key = \"menuP2#RFLongDelay\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcb;\n+            change_data_size = 8;\n+            change_data_pos = 6;\n+            change_affected = new String[] { \"menuP1#menu26Mode\" };\n+            read_command = 0xc9;\n+            read_reply_command = 0xca;\n+            read_reply_data_pos = new int[] { 6 };\n+        }\n+    },\n+\n+    COOKERHOOD_DELAY {\n+        {\n+            key = \"menuP2#cookerhoodDelay\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcb;\n+            change_data_size = 8;\n+            change_data_pos = 7;\n+            change_affected = new String[] { \"menuP1#menu20Mode\" };\n+            read_command = 0xc9;\n+            read_reply_command = 0xca;\n+            read_reply_data_pos = new int[] { 7 };\n+        }\n+    },\n+\n+    CHIMNEY_STATE {\n+        {\n+            key = \"menuP9#chimneyState\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 8 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    BYPASS_STATE {\n+        {\n+            key = \"menuP9#bypassState\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 8 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    EWT_STATE {\n+        {\n+            key = \"menuP9#EWTState\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 8 };\n+            read_reply_data_bits = 0x04;\n+        }\n+    },\n+\n+    HEATER_STATE {\n+        {\n+            key = \"menuP9#heaterState\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 8 };\n+            read_reply_data_bits = 0x08;\n+        }\n+    },\n+\n+    V_CONTROL_STATE {\n+        {\n+            key = \"menuP9#vControlState\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 8 };\n+            read_reply_data_bits = 0x10;\n+        }\n+    },\n+\n+    FROST_STATE {\n+        {\n+            key = \"menuP9#frostState\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 8 };\n+            read_reply_data_bits = 0x20;\n+        }\n+    },\n+\n+    COOKERHOOD_STATE {\n+        {\n+            key = \"menuP9#cookerhoodState\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 8 };\n+            read_reply_data_bits = 0x40;\n+        }\n+    },\n+\n+    ENTHALPY_STATE {\n+        {\n+            key = \"menuP9#enthalpyState\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 8 };\n+            read_reply_data_bits = 0x80;\n+        }\n+    },\n+\n+    FAN_OUT_0 {\n+        {\n+            key = \"ventilation#fanOut0\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcf;\n+            change_data_size = 9;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" };\n+            read_command = 0xcd;\n+            read_reply_command = 0xce;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    FAN_OUT_1 {\n+        {\n+            key = \"ventilation#fanOut1\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcf;\n+            change_data_size = 9;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" };\n+            read_command = 0xcd;\n+            read_reply_command = 0xce;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    FAN_OUT_2 {\n+        {\n+            key = \"ventilation#fanOut2\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcf;\n+            change_data_size = 9;\n+            change_data_pos = 2;\n+            change_affected = new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" };\n+            read_command = 0xcd;\n+            read_reply_command = 0xce;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    FAN_OUT_3 {\n+        {\n+            key = \"ventilation#fanOut3\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcf;\n+            change_data_size = 9;\n+            change_data_pos = 6;\n+            change_affected = new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" };\n+            read_command = 0xcd;\n+            read_reply_command = 0xce;\n+            read_reply_data_pos = new int[] { 10 };\n+        }\n+    },\n+\n+    FAN_IN_0 {\n+        {\n+            key = \"ventilation#fanIn0\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcf;\n+            change_data_size = 9;\n+            change_data_pos = 3;\n+            change_affected = new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" };\n+            read_command = 0xcd;\n+            read_reply_command = 0xce;\n+            read_reply_data_pos = new int[] { 3 };\n+        }\n+    },\n+\n+    FAN_IN_1 {\n+        {\n+            key = \"ventilation#fanIn1\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcf;\n+            change_data_size = 9;\n+            change_data_pos = 4;\n+            change_affected = new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" };\n+            read_command = 0xcd;\n+            read_reply_command = 0xce;\n+            read_reply_data_pos = new int[] { 4 };\n+        }\n+    },\n+\n+    FAN_IN_2 {\n+        {\n+            key = \"ventilation#fanIn2\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcf;\n+            change_data_size = 9;\n+            change_data_pos = 5;\n+            change_affected = new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" };\n+            read_command = 0xcd;\n+            read_reply_command = 0xce;\n+            read_reply_data_pos = new int[] { 5 };\n+        }\n+    },\n+\n+    FAN_IN_3 {\n+        {\n+            key = \"ventilation#fanIn3\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xcf;\n+            change_data_size = 9;\n+            change_data_pos = 7;\n+            change_affected = new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" };\n+            read_command = 0xcd;\n+            read_reply_command = 0xce;\n+            read_reply_data_pos = new int[] { 11 };\n+        }\n+    },\n+\n+    FAN_IN_PERCENT {\n+        {\n+            key = \"ventilation#fanInPercent\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0x0b;\n+            read_reply_command = 0x0c;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    FAN_O\u00daT_PERCENT {\n+        {\n+            key = \"ventilation#fanOutPercent\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0x0b;\n+            read_reply_command = 0x0c;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    FAN_IN_RPM {\n+        {\n+            key = \"ventilation#fanInRPM\";\n+            data_type = DataTypeRPM.class;\n+            read_command = 0x0b;\n+            read_reply_command = 0x0c;\n+            read_reply_data_pos = new int[] { 2, 3 };\n+        }\n+    },\n+\n+    FAN_OUT_RPM {\n+        {\n+            key = \"ventilation#fanOutRPM\";\n+            data_type = DataTypeRPM.class;\n+            read_command = 0x0b;\n+            read_reply_command = 0x0c;\n+            read_reply_data_pos = new int[] { 4, 5 };\n+        }\n+    },\n+\n+    FAN_LEVEL {\n+        {\n+            key = \"ccease#fanLevel\";\n+            data_type = DataTypeNumber.class;\n+            possible_values = new int[] { 0x01, 0x02, 0x03, 0x04 };\n+            change_command = 0x99;\n+            change_data_size = 1;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\",\n+                    \"ventilation#fanInRPM\", \"ventilation#fanOutRPM\" };\n+            read_command = 0xcd;\n+            read_reply_command = 0xce;\n+            read_reply_data_pos = new int[] { 8 };\n+        }\n+    },\n+\n+    TARGET_TEMPERATUR {\n+        {\n+            key = \"ccease#targetTemperature\";\n+            data_type = DataTypeTemperature.class;\n+            change_command = 0xd3;\n+            change_data_size = 1;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" };\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    OUTDOOR_TEMPERATURE_IN {\n+        {\n+            key = \"temperatures#outdoorTemperatureIn\";\n+            data_type = DataTypeTemperature.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    OUTDOOR_TEMPERATURE_OUT {\n+        {\n+            key = \"temperatures#outdoorTemperatureOut\";\n+            data_type = DataTypeTemperature.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 4 };\n+        }\n+    },\n+\n+    INDOOR_TEMPERATURE_IN {\n+        {\n+            key = \"temperatures#indoorTemperatureIn\";\n+            data_type = DataTypeTemperature.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    INDOOR_TEMPERATURE_OUT {\n+        {\n+            key = \"temperatures#indoorTemperatureOut\";\n+            data_type = DataTypeTemperature.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 3 };\n+        }\n+    },\n+\n+    IS_T1_SENSOR {\n+        {\n+            key = \"temperatures#isT1Sensor\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 5 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    IS_T2_SENSOR {\n+        {\n+            key = \"temperatures#isT2Sensor\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 5 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    IS_T3_SENSOR {\n+        {\n+            key = \"temperatures#isT3Sensor\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 5 };\n+            read_reply_data_bits = 0x04;\n+        }\n+    },\n+\n+    IS_T4_SENSOR {\n+        {\n+            key = \"temperatures#isT4Sensor\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 5 };\n+            read_reply_data_bits = 0x08;\n+        }\n+    },\n+\n+    IS_EWT_SENSOR {\n+        {\n+            key = \"temperatures#isEWTSensor\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 5 };\n+            read_reply_data_bits = 0x10;\n+        }\n+    },\n+\n+    IS_HEATER_SENSOR {\n+        {\n+            key = \"temperatures#isHeaterSensor\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 5 };\n+            read_reply_data_bits = 0x20;\n+        }\n+    },\n+\n+    IS_COOKERHOOD_SENSOR {\n+        {\n+            key = \"temperatures#isCookerhoodSensor\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 5 };\n+            read_reply_data_bits = 0x40;\n+        }\n+    },\n+\n+    EWT_TEMPERATUR {\n+        {\n+            key = \"temperatures#ewtTemperature\";\n+            data_type = DataTypeTemperature.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 6 };\n+        }\n+    },\n+\n+    HEATER_TEMPERATUR {\n+        {\n+            key = \"temperatures#heaterTemperature\";\n+            data_type = DataTypeTemperature.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 7 };\n+        }\n+    },\n+\n+    COOKERHOOD_TEMPERATUR {\n+        {\n+            key = \"temperatures#cookerhoodTemperature\";\n+            data_type = DataTypeTemperature.class;\n+            read_command = 0xd1;\n+            read_reply_command = 0xd2;\n+            read_reply_data_pos = new int[] { 8 };\n+        }\n+    },\n+\n+    IS_PREHEATER {\n+        {\n+            key = \"options#isPreheater\";\n+            data_type = DataTypeBoolean.class;\n+            change_command = 0xd7;\n+            change_data_size = 8;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" };\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    IS_BYPASS {\n+        {\n+            key = \"options#isBypass\";\n+            data_type = DataTypeBoolean.class;\n+            change_command = 0xd7;\n+            change_data_size = 8;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" };\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    RECU_TYPE {\n+        {\n+            key = \"options#recuType\";\n+            data_type = DataTypeNumber.class;\n+            possible_values = new int[] { 0x01, 0x02 };\n+            change_command = 0xd7;\n+            change_data_size = 8;\n+            change_data_pos = 2;\n+            change_affected = new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\",\n+                    \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\",\n+                    \"temperatures#indoorTemperatureOut\", \"temperatures#outdoorTemperatureIn\" };\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    RECU_SIZE {\n+        {\n+            key = \"options#recuSize\";\n+            data_type = DataTypeNumber.class;\n+            possible_values = new int[] { 0x01, 0x02 };\n+            change_command = 0xd7;\n+            change_data_size = 8;\n+            change_data_pos = 3;\n+            change_affected = new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\",\n+                    \"ventilation#fanOut0\", \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\",\n+                    \"ventilation#fanIn0\", \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" };\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 3 };\n+        }\n+    },\n+\n+    IS_CHIMNEY {\n+        {\n+            key = \"options#isChimney\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x01 };\n+            change_command = 0xd7;\n+            change_data_size = 8;\n+            change_data_pos = 4;\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 4 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    IS_COOKERHOOD {\n+        {\n+            key = \"options#isCookerhood\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x02 };\n+            change_command = 0xd7;\n+            change_data_size = 8;\n+            change_data_pos = 4;\n+            change_affected = new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\",\n+                    \"cookerhood#cookerhoodSpeed\", \"temperatures#cookerhoodTemperature\" };\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 4 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    IS_HEATER {\n+        {\n+            key = \"options#isHeater\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x04 };\n+            change_command = 0xd7;\n+            change_data_size = 8;\n+            change_data_pos = 4;\n+            change_affected = new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\",\n+                    \"menuP9#heaterState\", \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" };\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 4 };\n+            read_reply_data_bits = 0x04;\n+        }\n+    },\n+\n+    IS_ENTHALPY {\n+        {\n+            key = \"options#isEnthalpy\";\n+            data_type = DataTypeNumber.class;\n+            possible_values = new int[] { 0x00, 0x01, 0x02 };\n+            change_command = 0xd7;\n+            change_data_size = 8;\n+            change_data_pos = 6;\n+            change_affected = new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\",\n+                    \"enthalpy#enthalpyLevel\", \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" };\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 9 };\n+        }\n+    },\n+\n+    IS_EWT {\n+        {\n+            key = \"options#isEWT\";\n+            data_type = DataTypeNumber.class;\n+            possible_values = new int[] { 0x00, 0x01, 0x02 };\n+            change_command = 0xd7;\n+            change_data_size = 8;\n+            change_data_pos = 7;\n+            change_affected = new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\",\n+                    \"ewt#ewtTemperatureHigh\", \"temperatures#ewtTemperature\" };\n+            read_command = 0xd5;\n+            read_reply_command = 0xd6;\n+            read_reply_data_pos = new int[] { 10 };\n+        }\n+    },\n+\n+    EWT_SPEED {\n+        {\n+            key = \"ewt#ewtSpeed\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xed;\n+            change_data_size = 5;\n+            change_data_pos = 2;\n+            change_affected = new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" };\n+            read_command = 0xeb;\n+            read_reply_command = 0xec;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    EWT_TEMPERATURE_LOW {\n+        {\n+            key = \"ewt#ewtTemperatureLow\";\n+            data_type = DataTypeTemperature.class;\n+            change_command = 0xed;\n+            change_data_size = 5;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"menuP9#ewtState\" };\n+            read_command = 0xeb;\n+            read_reply_command = 0xec;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    EWT_TEMPERATURE_HIGH {\n+        {\n+            key = \"ewt#ewtTemperatureHigh\";\n+            data_type = DataTypeTemperature.class;\n+            change_command = 0xed;\n+            change_data_size = 5;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"menuP9#ewtState\" };\n+            read_command = 0xeb;\n+            read_reply_command = 0xec;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    COOKERHOOD_SPEED {\n+        {\n+            key = \"cookerhood#cookerhoodSpeed\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0xed;\n+            change_data_size = 5;\n+            change_data_pos = 3;\n+            change_affected = new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" };\n+            read_command = 0xeb;\n+            read_reply_command = 0xec;\n+            read_reply_data_pos = new int[] { 3 };\n+        }\n+    },\n+\n+    HEATER_POWER {\n+        {\n+            key = \"heater#heaterPower\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xeb;\n+            read_reply_command = 0xec;\n+            read_reply_data_pos = new int[] { 4 };\n+        }\n+    },\n+\n+    HEATER_POWER_I {\n+        {\n+            key = \"heater#heaterPowerI\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xeb;\n+            read_reply_command = 0xec;\n+            read_reply_data_pos = new int[] { 5 };\n+        }\n+    },\n+\n+    HEATER_TARGET_TEMPERATUR {\n+        {\n+            key = \"heater#heaterTargetTemperature\";\n+            data_type = DataTypeTemperature.class;\n+            change_command = 0xed;\n+            change_data_size = 5;\n+            change_data_pos = 4;\n+            change_affected = new String[] { \"menuP9#heaterState\", \"heater#heaterPower\",\n+                    \"temperatures#heaterTemperature\" };\n+            read_command = 0xeb;\n+            read_reply_command = 0xec;\n+            read_reply_data_pos = new int[] { 6 };\n+        }\n+    },\n+\n+    SOFTWARE_MAIN_VERSION {\n+        {\n+            key = \"software#softwareMainVersion\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0x69;\n+            read_reply_command = 0x6a;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    SOFTWARE_MINOR_VERSION {\n+        {\n+            key = \"software#softwareMinorVersion\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0x69;\n+            read_reply_command = 0x6a;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    SOFTWARE_BETA_VERSION {\n+        {\n+            key = \"software#softwareBetaVersion\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0x69;\n+            read_reply_command = 0x6a;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    ERROR_MESSAGE {\n+        {\n+            key = \"ccease#errorMessage\";\n+            data_type = DataTypeMessage.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 0, 1, 9, 13 };\n+        }\n+    },\n+\n+    ERRORA_CURRENT {\n+        {\n+            key = \"error#errorACurrent\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    ERRORA_LAST {\n+        {\n+            key = \"error#errorALast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    ERRORA_PRELAST {\n+        {\n+            key = \"error#errorAPrelast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 4 };\n+        }\n+    },\n+\n+    ERRORA_PREPRELAST {\n+        {\n+            key = \"error#errorAPrePrelast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 6 };\n+        }\n+    },\n+\n+    ERRORAHIGH_CURRENT {\n+        {\n+            key = \"error#errorAHighCurrent\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 13 };\n+        }\n+    },\n+\n+    ERRORAHIGH_LAST {\n+        {\n+            key = \"error#errorAHighLast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 14 };\n+        }\n+    },\n+\n+    ERRORAHIGH_PRELAST {\n+        {\n+            key = \"error#errorAHighPrelast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 15 };\n+        }\n+    },\n+\n+    ERRORAHIGH_PREPRELAST {\n+        {\n+            key = \"error#errorAHighPrePrelast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 16 };\n+        }\n+    },\n+\n+    ERRORE_CURRENT {\n+        {\n+            key = \"error#errorECurrent\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    ERRORE_LAST {\n+        {\n+            key = \"error#errorELast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 3 };\n+        }\n+    },\n+\n+    ERRORE_PRELAST {\n+        {\n+            key = \"error#errorEPrelast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 5 };\n+        }\n+    },\n+\n+    ERRORE_PREPRELAST {\n+        {\n+            key = \"error#errorEPrePrelast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 7 };\n+        }\n+    },\n+\n+    ERROREA_CURRENT {\n+        {\n+            key = \"error#errorEACurrent\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 9 };\n+        }\n+    },\n+\n+    ERROREA_LAST {\n+        {\n+            key = \"error#errorEALast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 10 };\n+        }\n+    },\n+\n+    ERROREA_PRELAST {\n+        {\n+            key = \"error#errorEAPrelast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 11 };\n+        }\n+    },\n+\n+    ERROREA_PREPRELAST {\n+        {\n+            key = \"error#errorEAPrePrelast\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 12 };\n+        }\n+    },\n+\n+    ERROR_RESET {\n+        {\n+            key = \"ccease#errorReset\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x01 };\n+            change_command = 0xdb;\n+            change_data_size = 4;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"ccease#errorMessage\" };\n+        }\n+    },\n+\n+    FILTER_HOURS {\n+        {\n+            key = \"times#filterHours\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdd;\n+            read_reply_command = 0xde;\n+            read_reply_data_pos = new int[] { 15, 16 };\n+        }\n+    },\n+\n+    FILTER_RESET {\n+        {\n+            key = \"ccease#filterReset\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x01 };\n+            change_command = 0xdb;\n+            change_data_size = 4;\n+            change_data_pos = 3;\n+            change_affected = new String[] { \"times#filterHours\", \"ccease#filterError\" };\n+        }\n+    },\n+\n+    FILTER_ERROR {\n+        {\n+            key = \"ccease#filterError\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xd9;\n+            read_reply_command = 0xda;\n+            read_reply_data_pos = new int[] { 8 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    BYPASS_FACTOR {\n+        {\n+            key = \"bypass#bypassFactor\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdf;\n+            read_reply_command = 0xe0;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    BYPASS_LEVEL {\n+        {\n+            key = \"bypass#bypassLevel\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdf;\n+            read_reply_command = 0xe0;\n+            read_reply_data_pos = new int[] { 3 };\n+        }\n+    },\n+\n+    BYPASS_CORRECTION {\n+        {\n+            key = \"bypass#bypassCorrection\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdf;\n+            read_reply_command = 0xe0;\n+            read_reply_data_pos = new int[] { 4 };\n+        }\n+    },\n+\n+    BYPASS_SUMMER {\n+        {\n+            key = \"bypass#bypassSummer\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xdf;\n+            read_reply_command = 0xe0;\n+            read_reply_data_pos = new int[] { 6 };\n+        }\n+    },\n+\n+    ENTHALPY_TEMPERATUR {\n+        {\n+            key = \"enthalpy#enthalpyTemperature\";\n+            data_type = DataTypeTemperature.class;\n+            read_command = 0x97;\n+            read_reply_command = 0x98;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    ENTHALPY_HUMIDITY {\n+        {\n+            key = \"enthalpy#enthalpyHumidity\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0x97;\n+            read_reply_command = 0x98;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    ENTHALPY_LEVEL {\n+        {\n+            key = \"enthalpy#enthalpyLevel\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0x97;\n+            read_reply_command = 0x98;\n+            read_reply_data_pos = new int[] { 4 };\n+        }\n+    },\n+\n+    ENTHALPY_TIME {\n+        {\n+            key = \"enthalpy#enthalpyTime\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0x97;\n+            read_reply_command = 0x98;\n+            read_reply_data_pos = new int[] { 5 };\n+        }\n+    },\n+\n+    PREHEATER_VALVE {\n+        {\n+            key = \"preheater#preheaterValve\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xe1;\n+            read_reply_command = 0xe2;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    PREHEATER_FROST_PROTECT {\n+        {\n+            key = \"preheater#preheaterFrostProtect\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xe1;\n+            read_reply_command = 0xe2;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    PREHEATER_HEATING {\n+        {\n+            key = \"preheater#preheaterHeating\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0xe1;\n+            read_reply_command = 0xe2;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    PREHEATER_FROST_TIME {\n+        {\n+            key = \"preheater#preheaterFrostTime\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xe1;\n+            read_reply_command = 0xe2;\n+            read_reply_data_pos = new int[] { 3, 4 };\n+        }\n+    },\n+\n+    PREHEATER_OPTION {\n+        {\n+            key = \"preheater#preheaterSafety\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xe1;\n+            read_reply_command = 0xe2;\n+            read_reply_data_pos = new int[] { 5 };\n+        }\n+    },\n+\n+    LEVEL0_TIME {\n+        {\n+            key = \"times#level0Time\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdd;\n+            read_reply_command = 0xde;\n+            read_reply_data_pos = new int[] { 0, 1, 2 };\n+        }\n+    },\n+\n+    LEVEL1_TIME {\n+        {\n+            key = \"times#level1Time\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdd;\n+            read_reply_command = 0xde;\n+            read_reply_data_pos = new int[] { 3, 4, 5 };\n+        }\n+    },\n+\n+    LEVEL2_TIME {\n+        {\n+            key = \"times#level2Time\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdd;\n+            read_reply_command = 0xde;\n+            read_reply_data_pos = new int[] { 6, 7, 8 };\n+        }\n+    },\n+\n+    LEVEL3_TIME {\n+        {\n+            key = \"times#level3Time\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdd;\n+            read_reply_command = 0xde;\n+            read_reply_data_pos = new int[] { 17, 18, 19 };\n+        }\n+    },\n+\n+    FREEZE_TIME {\n+        {\n+            key = \"times#freezeTime\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdd;\n+            read_reply_command = 0xde;\n+            read_reply_data_pos = new int[] { 9, 10 };\n+        }\n+    },\n+\n+    PREHEATER_TIME {\n+        {\n+            key = \"times#preheaterTime\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdd;\n+            read_reply_command = 0xde;\n+            read_reply_data_pos = new int[] { 11, 12 };\n+        }\n+    },\n+\n+    BYPASS_TIME {\n+        {\n+            key = \"times#bypassTime\";\n+            data_type = DataTypeNumber.class;\n+            read_command = 0xdd;\n+            read_reply_command = 0xde;\n+            read_reply_data_pos = new int[] { 13, 14 };\n+        }\n+    },\n+\n+    IS_ANALOG1 {\n+        {\n+            key = \"analog#isAnalog1\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x01 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\",\n+                    \"analog#analog1Max\", \"analog#analog1Value\", \"analog#analog1Volt\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 0 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    IS_ANALOG2 {\n+        {\n+            key = \"analog#isAnalog2\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x02 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\",\n+                    \"analog#analog2Max\", \"analog#analog2Value\", \"analog#analog2Volt\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 0 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    IS_ANALOG3 {\n+        {\n+            key = \"analog#isAnalog3\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x04 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\",\n+                    \"analog#analog3Max\", \"analog#analog3Value\", \"analog#analog3Volt\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 0 };\n+            read_reply_data_bits = 0x04;\n+        }\n+    },\n+\n+    IS_ANALOG4 {\n+        {\n+            key = \"analog#isAnalog4\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x08 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\",\n+                    \"analog#analog4Max\", \"analog#analog4Value\", \"analog#analog4Volt\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 0 };\n+            read_reply_data_bits = 0x08;\n+        }\n+    },\n+\n+    IS_RF {\n+        {\n+            key = \"analog#isRF\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x10 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 0;\n+            change_affected = new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\",\n+                    \"analog#RFValue\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 0 };\n+            read_reply_data_bits = 0x10;\n+        }\n+    },\n+\n+    ANALOG1_MODE {\n+        {\n+            key = \"analog#analog1Mode\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x01 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    ANALOG2_MODE {\n+        {\n+            key = \"analog#analog2Mode\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x02 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    ANALOG3_MODE {\n+        {\n+            key = \"analog#analog3Mode\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x04 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x04;\n+        }\n+    },\n+\n+    ANALOG4_MODE {\n+        {\n+            key = \"analog#analog4Mode\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x08 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x08;\n+        }\n+    },\n+\n+    RF_MODE {\n+        {\n+            key = \"analog#RFMode\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x10 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 1;\n+            change_affected = new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" };\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x10;\n+        }\n+    },\n+\n+    ANALOG1_NEGATIVE {\n+        {\n+            key = \"analog#analog1Negative\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x01 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 2;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 2 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    ANALOG2_NEGATIVE {\n+        {\n+            key = \"analog#analog2Negative\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x02 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 2;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 2 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    ANALOG3_NEGATIVE {\n+        {\n+            key = \"analog#analog3Negative\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x04 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 2;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 2 };\n+            read_reply_data_bits = 0x04;\n+        }\n+    },\n+\n+    ANALOG4_NEGATIVE {\n+        {\n+            key = \"analog#analog4Negative\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x08 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 2;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 2 };\n+            read_reply_data_bits = 0x08;\n+        }\n+    },\n+\n+    RF_NEGATIVE {\n+        {\n+            key = \"analog#RFNegative\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x10 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 2;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 2 };\n+            read_reply_data_bits = 0x10;\n+        }\n+    },\n+\n+    ANALOG1_MIN {\n+        {\n+            key = \"analog#analog1Min\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 3;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 3 };\n+        }\n+    },\n+\n+    ANALOG1_MAX {\n+        {\n+            key = \"analog#analog1Max\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 4;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 4 };\n+        }\n+    },\n+\n+    ANALOG1_VALUE {\n+        {\n+            key = \"analog#analog1Value\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 5;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 5 };\n+        }\n+    },\n+\n+    ANALOG2_MIN {\n+        {\n+            key = \"analog#analog2Min\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 6;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 6 };\n+        }\n+    },\n+\n+    ANALOG2_MAX {\n+        {\n+            key = \"analog#analog2Max\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 7;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 7 };\n+        }\n+    },\n+\n+    ANALOG2_VALUE {\n+        {\n+            key = \"analog#analog2Value\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 8;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 8 };\n+        }\n+    },\n+\n+    ANALOG3_MIN {\n+        {\n+            key = \"analog#analog3Min\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 9;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 9 };\n+        }\n+    },\n+\n+    ANALOG3_MAX {\n+        {\n+            key = \"analog#analog3Max\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 10;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 10 };\n+        }\n+    },\n+\n+    ANALOG3_VALUE {\n+        {\n+            key = \"analog#analog3Value\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 11;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 11 };\n+        }\n+    },\n+\n+    ANALOG4_MIN {\n+        {\n+            key = \"analog#analog4Min\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 12;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 12 };\n+        }\n+    },\n+\n+    ANALOG4_MAX {\n+        {\n+            key = \"analog#analog4Max\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 13;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 13 };\n+        }\n+    },\n+\n+    ANALOG4_VALUE {\n+        {\n+            key = \"analog#analog4Value\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 14;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 14 };\n+        }\n+    },\n+\n+    RF_MIN {\n+        {\n+            key = \"analog#RFMin\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 15;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 15 };\n+        }\n+    },\n+\n+    RF_MAX {\n+        {\n+            key = \"analog#RFMax\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 16;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 16 };\n+        }\n+    },\n+\n+    RF_VALUE {\n+        {\n+            key = \"analog#RFValue\";\n+            data_type = DataTypeNumber.class;\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 17;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 17 };\n+        }\n+    },\n+\n+    ANALOG_MODE {\n+        {\n+            key = \"analog#analogMode\";\n+            data_type = DataTypeNumber.class;\n+            possible_values = new int[] { 0x00, 0x01 };\n+            change_command = 0x9f;\n+            change_data_size = 19;\n+            change_data_pos = 18;\n+            change_affected = new String[] {};\n+            read_command = 0x9d;\n+            read_reply_command = 0x9e;\n+            read_reply_data_pos = new int[] { 18 };\n+        }\n+    },\n+\n+    ANALOG1_VOLT {\n+        {\n+            key = \"analog#analog1Volt\";\n+            data_type = DataTypeVolt.class;\n+            read_command = 0x13;\n+            read_reply_command = 0x14;\n+            read_reply_data_pos = new int[] { 0 };\n+        }\n+    },\n+\n+    ANALOG2_VOLT {\n+        {\n+            key = \"analog#analog2Volt\";\n+            data_type = DataTypeVolt.class;\n+            read_command = 0x13;\n+            read_reply_command = 0x14;\n+            read_reply_data_pos = new int[] { 1 };\n+        }\n+    },\n+\n+    ANALOG3_VOLT {\n+        {\n+            key = \"analog#analog3Volt\";\n+            data_type = DataTypeVolt.class;\n+            read_command = 0x13;\n+            read_reply_command = 0x14;\n+            read_reply_data_pos = new int[] { 2 };\n+        }\n+    },\n+\n+    ANALOG4_VOLT {\n+        {\n+            key = \"analog#analog4Volt\";\n+            data_type = DataTypeVolt.class;\n+            read_command = 0x13;\n+            read_reply_command = 0x14;\n+            read_reply_data_pos = new int[] { 3 };\n+        }\n+    },\n+\n+    IS_L1_SWITCH {\n+        {\n+            key = \"inputs#isL1Switch\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0x03;\n+            read_reply_command = 0x04;\n+            read_reply_data_pos = new int[] { 0 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    IS_L2_SWITCH {\n+        {\n+            key = \"inputs#isL2Switch\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0x03;\n+            read_reply_command = 0x04;\n+            read_reply_data_pos = new int[] { 0 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    IS_BATHROOM_SWITCH {\n+        {\n+            key = \"inputs#isBathroomSwitch\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0x03;\n+            read_reply_command = 0x04;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x01;\n+        }\n+    },\n+\n+    IS_COOKERHOOD_SWITCH {\n+        {\n+            key = \"inputs#isCookerhoodSwitch\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0x03;\n+            read_reply_command = 0x04;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x02;\n+        }\n+    },\n+\n+    IS_EXTERNAL_FILTER {\n+        {\n+            key = \"inputs#isExternalFilter\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0x03;\n+            read_reply_command = 0x04;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x04;\n+        }\n+    },\n+\n+    IS_WTW {\n+        {\n+            key = \"inputs#isWTW\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0x03;\n+            read_reply_command = 0x04;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x08;\n+        }\n+    },\n+\n+    IS_BATHROOM2_SWITCH {\n+        {\n+            key = \"inputs#isBathroom2Switch\";\n+            data_type = DataTypeBoolean.class;\n+            read_command = 0x03;\n+            read_reply_command = 0x04;\n+            read_reply_data_pos = new int[] { 1 };\n+            read_reply_data_bits = 0x10;\n+        }\n+    };\n+\n+    Logger logger = LoggerFactory.getLogger(ComfoAirCommandType.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 2000}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MTc1Nw==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392541757", "createdAt": "2020-03-14T01:00:16Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,2263 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+public enum ComfoAirCommandType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MzAxNg==", "bodyText": "I really dislike this kind of field initialization; it is easy to read but very hard to add new fields and maintain. Changing all of these to use standard constructor arguments would easily save a thousand lines of code. It is a lot of work but please do it.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392543016", "createdAt": "2020-03-14T01:12:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,2263 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+public enum ComfoAirCommandType {\n+\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_tape\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE {\n+        {\n+            key = \"bindingControl#activate\";\n+            data_type = DataTypeBoolean.class;\n+            possible_values = new int[] { 0x03 };\n+            change_command = 0x9b;\n+            change_data_size = 1;\n+            change_data_pos = 0;\n+            change_affected = new String[] {};\n+            read_command = 0x9c;\n+            read_reply_command = 0x9c;\n+            read_reply_data_pos = new int[] { 0 };\n+            read_reply_data_bits = 0x03;\n+        }\n+    },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MzI5NA==", "bodyText": "Isn't this required? I wouldn't make this nullable, instead just set it to a dummy value like an empty string. It will get overwritten by the actual configs.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392543294", "createdAt": "2020-03-14T01:15:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirConfiguration.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link ComfoAirConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirConfiguration {\n+\n+    /**\n+     * Serial port used for communication.\n+     */\n+    public @Nullable String serialPort;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0Mzc4OQ==", "bodyText": "This class isn't used as a Thread at all, instead it is used as a Runnable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private class AffectedItemsUpdateThread extends Thread {\n          \n          \n            \n                private class AffectedItemsUpdateThread implements Runnable {", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392543789", "createdAt": "2020-03-14T01:20:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+\n+                ComfoAirCommandType comfoAirCommandType = ComfoAirCommandType.getCommandTypeByKey(channelId);\n+                ComfoAirDataType dataType = comfoAirCommandType.getDataType();\n+                State state = null;\n+\n+                if (dataType instanceof DataTypeBoolean) {\n+                    state = (OnOffType) command;\n+                } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                    state = (DecimalType) command;\n+                } else if (dataType instanceof DataTypeTemperature) {\n+                    if (command instanceof QuantityType<?>) {\n+                        QuantityType<?> celsius = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                        if (celsius != null) {\n+                            state = new DecimalType(celsius.doubleValue());\n+                        }\n+                    } else {\n+                        state = (DecimalType) command;\n+                    }\n+                } else if (dataType instanceof DataTypeVolt) {\n+                    if (command instanceof QuantityType<?>) {\n+                        QuantityType<?> volts = ((QuantityType<?>) command).toUnit(SmartHomeUnits.VOLT);\n+                        if (volts != null) {\n+                            state = new DecimalType(volts.doubleValue());\n+                        }\n+                    } else {\n+                        state = (DecimalType) command;\n+                    }\n+                }\n+\n+                if (state != null) {\n+                    ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n+                    sendCommand(changeCommand, channelId);\n+\n+                    Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                            .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                    if (affectedReadCommands.size() > 0) {\n+                        Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                        scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                    }\n+                } else {\n+                    logger.warn(\"Unhandled command type: {}\", command.toString());\n+                }\n+            } catch (final RuntimeException e) {\n+                logger.warn(\"Updating ComfoAir failed: \", e);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+        String serialPort = (config.serialPort != null) ? config.serialPort : \"\";\n+\n+        if (StringUtils.isNotEmpty(serialPort)) {\n+            comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort, BAUDRATE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        }\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.open();\n+            updateStatus(ThingStatus.ONLINE);\n+\n+            List<Channel> channels = this.thing.getChannels();\n+\n+            poller = scheduler.scheduleWithFixedDelay(() -> {\n+                for (Channel channel : channels) {\n+                    updateChannelState(channel);\n+                }\n+            }, 0, (config.refreshInterval > 0) ? config.refreshInterval : DEFAULT_REFRESH_INTERVAL, TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.close();\n+        }\n+\n+        final ScheduledFuture<?> localPoller = poller;\n+\n+        if (localPoller != null && !localPoller.isCancelled()) {\n+            localPoller.cancel(true);\n+            poller = null;\n+        }\n+    }\n+\n+    private void updateChannelState(Channel channel) {\n+        try {\n+            if (!isLinked(channel.getUID())) {\n+                return;\n+            }\n+            String commandKey = channel.getUID().getId();\n+            ComfoAirCommand readCommand = ComfoAirCommandType.getReadCommand(commandKey);\n+            State state = sendCommand(readCommand, commandKey);\n+\n+            updateState(channel.getUID(), state);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Unknown channel {}\", channel.getUID().getId());\n+        }\n+    }\n+\n+    private State sendCommand(ComfoAirCommand command, String commandKey) {\n+        ComfoAirSerialConnector comfoAirConnector = this.comfoAirConnector;\n+\n+        if (comfoAirConnector != null) {\n+            Integer requestCmd = command.getRequestCmd();\n+            Integer replyCmd = command.getReplyCmd();\n+            int[] requestData = command.getRequestData();\n+\n+            Integer preRequestCmd;\n+            Integer preReplyCmd;\n+            int[] preResponse = new int[0];\n+\n+            if (requestCmd != null) {\n+                switch (requestCmd) {\n+                    case 0x9f:\n+                        preRequestCmd = 0x9d;\n+                        preReplyCmd = 0x9e;\n+                        break;\n+                    case 0xcb:\n+                        preRequestCmd = 0xc9;\n+                        preReplyCmd = 0xca;\n+                        break;\n+                    case 0xcf:\n+                        preRequestCmd = 0xcd;\n+                        preReplyCmd = 0xce;\n+                        break;\n+                    case 0xd7:\n+                        preRequestCmd = 0xd5;\n+                        preReplyCmd = 0xd6;\n+                        break;\n+                    case 0xed:\n+                        preRequestCmd = 0xeb;\n+                        preReplyCmd = 0xec;\n+                        break;\n+                    default:\n+                        preRequestCmd = requestCmd;\n+                        preReplyCmd = replyCmd;\n+                }\n+\n+                if (!preRequestCmd.equals(requestCmd)) {\n+                    command.setRequestCmd(preRequestCmd);\n+                    command.setReplyCmd(preReplyCmd);\n+                    command.setRequestData(new int[0]);\n+\n+                    preResponse = comfoAirConnector.sendCommand(command, new int[0]);\n+\n+                    if (preResponse.length <= 0) {\n+                        return UnDefType.NULL;\n+                    } else {\n+                        command.setRequestCmd(requestCmd);\n+                        command.setReplyCmd(replyCmd);\n+                        command.setRequestData(requestData);\n+                    }\n+                }\n+\n+                int[] response = comfoAirConnector.sendCommand(command, preResponse);\n+\n+                if (response.length > 0) {\n+                    ComfoAirCommandType comfoAirCommandType = ComfoAirCommandType.getCommandTypeByKey(commandKey);\n+\n+                    ComfoAirDataType dataType = comfoAirCommandType.getDataType();\n+                    State value = dataType.convertToState(response, comfoAirCommandType);\n+\n+                    if (value == null) {\n+                        logger.warn(\"unexpected value for DATA: {}\", ComfoAirSerialConnector.dumpData(response));\n+                        return UnDefType.UNDEF;\n+                    } else {\n+                        return value;\n+                    }\n+                }\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private class AffectedItemsUpdateThread extends Thread {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NDg5Nw==", "bodyText": "Interruptions usually mean that the thread should stop what it is doing and exit. It definitely isn't something that should be ignored in a loop. I would suggest throwing an exception instead, possibly the InterruptedException itself.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392544897", "createdAt": "2020-03-14T01:33:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            // ignore interruption", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTAxNw==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545017", "createdAt": "2020-03-14T01:35:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            // ignore interruption\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+\n+                                    logger.trace(\"receive CMD: {} DATA: {}\",\n+                                            String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                    dumpData(cleanedBlock));\n+                        }\n+                    }\n+\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+\n+                    Thread.sleep(1000);\n+                    logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                            dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+\n+                } catch (InterruptedException e) {\n+                    // ignore interruption", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTM4OA==", "bodyText": "dumpData is an expensive operation, so it shouldn't be executed if the log wouldn't be output anyway.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    logger.warn(\"unexpected value for DATA: {}\", ComfoAirSerialConnector.dumpData(response));\n          \n          \n            \n                                    if(logger.isWarnEnabled()){\n          \n          \n            \n                                          logger.warn(\"unexpected value for DATA: {}\", ComfoAirSerialConnector.dumpData(response));\n          \n          \n            \n                                    }", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545388", "createdAt": "2020-03-14T01:39:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+\n+                ComfoAirCommandType comfoAirCommandType = ComfoAirCommandType.getCommandTypeByKey(channelId);\n+                ComfoAirDataType dataType = comfoAirCommandType.getDataType();\n+                State state = null;\n+\n+                if (dataType instanceof DataTypeBoolean) {\n+                    state = (OnOffType) command;\n+                } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                    state = (DecimalType) command;\n+                } else if (dataType instanceof DataTypeTemperature) {\n+                    if (command instanceof QuantityType<?>) {\n+                        QuantityType<?> celsius = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                        if (celsius != null) {\n+                            state = new DecimalType(celsius.doubleValue());\n+                        }\n+                    } else {\n+                        state = (DecimalType) command;\n+                    }\n+                } else if (dataType instanceof DataTypeVolt) {\n+                    if (command instanceof QuantityType<?>) {\n+                        QuantityType<?> volts = ((QuantityType<?>) command).toUnit(SmartHomeUnits.VOLT);\n+                        if (volts != null) {\n+                            state = new DecimalType(volts.doubleValue());\n+                        }\n+                    } else {\n+                        state = (DecimalType) command;\n+                    }\n+                }\n+\n+                if (state != null) {\n+                    ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n+                    sendCommand(changeCommand, channelId);\n+\n+                    Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                            .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                    if (affectedReadCommands.size() > 0) {\n+                        Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                        scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                    }\n+                } else {\n+                    logger.warn(\"Unhandled command type: {}\", command.toString());\n+                }\n+            } catch (final RuntimeException e) {\n+                logger.warn(\"Updating ComfoAir failed: \", e);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+        String serialPort = (config.serialPort != null) ? config.serialPort : \"\";\n+\n+        if (StringUtils.isNotEmpty(serialPort)) {\n+            comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort, BAUDRATE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        }\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.open();\n+            updateStatus(ThingStatus.ONLINE);\n+\n+            List<Channel> channels = this.thing.getChannels();\n+\n+            poller = scheduler.scheduleWithFixedDelay(() -> {\n+                for (Channel channel : channels) {\n+                    updateChannelState(channel);\n+                }\n+            }, 0, (config.refreshInterval > 0) ? config.refreshInterval : DEFAULT_REFRESH_INTERVAL, TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.close();\n+        }\n+\n+        final ScheduledFuture<?> localPoller = poller;\n+\n+        if (localPoller != null && !localPoller.isCancelled()) {\n+            localPoller.cancel(true);\n+            poller = null;\n+        }\n+    }\n+\n+    private void updateChannelState(Channel channel) {\n+        try {\n+            if (!isLinked(channel.getUID())) {\n+                return;\n+            }\n+            String commandKey = channel.getUID().getId();\n+            ComfoAirCommand readCommand = ComfoAirCommandType.getReadCommand(commandKey);\n+            State state = sendCommand(readCommand, commandKey);\n+\n+            updateState(channel.getUID(), state);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Unknown channel {}\", channel.getUID().getId());\n+        }\n+    }\n+\n+    private State sendCommand(ComfoAirCommand command, String commandKey) {\n+        ComfoAirSerialConnector comfoAirConnector = this.comfoAirConnector;\n+\n+        if (comfoAirConnector != null) {\n+            Integer requestCmd = command.getRequestCmd();\n+            Integer replyCmd = command.getReplyCmd();\n+            int[] requestData = command.getRequestData();\n+\n+            Integer preRequestCmd;\n+            Integer preReplyCmd;\n+            int[] preResponse = new int[0];\n+\n+            if (requestCmd != null) {\n+                switch (requestCmd) {\n+                    case 0x9f:\n+                        preRequestCmd = 0x9d;\n+                        preReplyCmd = 0x9e;\n+                        break;\n+                    case 0xcb:\n+                        preRequestCmd = 0xc9;\n+                        preReplyCmd = 0xca;\n+                        break;\n+                    case 0xcf:\n+                        preRequestCmd = 0xcd;\n+                        preReplyCmd = 0xce;\n+                        break;\n+                    case 0xd7:\n+                        preRequestCmd = 0xd5;\n+                        preReplyCmd = 0xd6;\n+                        break;\n+                    case 0xed:\n+                        preRequestCmd = 0xeb;\n+                        preReplyCmd = 0xec;\n+                        break;\n+                    default:\n+                        preRequestCmd = requestCmd;\n+                        preReplyCmd = replyCmd;\n+                }\n+\n+                if (!preRequestCmd.equals(requestCmd)) {\n+                    command.setRequestCmd(preRequestCmd);\n+                    command.setReplyCmd(preReplyCmd);\n+                    command.setRequestData(new int[0]);\n+\n+                    preResponse = comfoAirConnector.sendCommand(command, new int[0]);\n+\n+                    if (preResponse.length <= 0) {\n+                        return UnDefType.NULL;\n+                    } else {\n+                        command.setRequestCmd(requestCmd);\n+                        command.setReplyCmd(replyCmd);\n+                        command.setRequestData(requestData);\n+                    }\n+                }\n+\n+                int[] response = comfoAirConnector.sendCommand(command, preResponse);\n+\n+                if (response.length > 0) {\n+                    ComfoAirCommandType comfoAirCommandType = ComfoAirCommandType.getCommandTypeByKey(commandKey);\n+\n+                    ComfoAirDataType dataType = comfoAirCommandType.getDataType();\n+                    State value = dataType.convertToState(response, comfoAirCommandType);\n+\n+                    if (value == null) {\n+                        logger.warn(\"unexpected value for DATA: {}\", ComfoAirSerialConnector.dumpData(response));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTQyOA==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545428", "createdAt": "2020-03-14T01:40:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTQzMg==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545432", "createdAt": "2020-03-14T01:40:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            // ignore interruption\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTQ0MQ==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545441", "createdAt": "2020-03-14T01:40:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            // ignore interruption\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+\n+                                    logger.trace(\"receive CMD: {} DATA: {}\",\n+                                            String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTQ3MQ==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545471", "createdAt": "2020-03-14T01:40:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            // ignore interruption\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+\n+                                    logger.trace(\"receive CMD: {} DATA: {}\",\n+                                            String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                    dumpData(cleanedBlock));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTQ5MQ==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545491", "createdAt": "2020-03-14T01:40:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            // ignore interruption\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+\n+                                    logger.trace(\"receive CMD: {} DATA: {}\",\n+                                            String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                    dumpData(cleanedBlock));\n+                        }\n+                    }\n+\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+\n+                    Thread.sleep(1000);\n+                    logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                            dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTUyNA==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545524", "createdAt": "2020-03-14T01:41:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            // ignore interruption\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+\n+                                    logger.trace(\"receive CMD: {} DATA: {}\",\n+                                            String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                    dumpData(cleanedBlock));\n+                        }\n+                    }\n+\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+\n+                    Thread.sleep(1000);\n+                    logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                            dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+\n+                } catch (InterruptedException e) {\n+                    // ignore interruption\n+                }\n+\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        logger.trace(\"send DATA: {}\", dumpData(request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTU4Ng==", "bodyText": "please remove the excess blank lines", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545586", "createdAt": "2020-03-14T01:42:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            // ignore interruption\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+\n+                                    logger.trace(\"receive CMD: {} DATA: {}\",\n+                                            String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                    dumpData(cleanedBlock));\n+                        }\n+                    }\n+\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+\n+                    Thread.sleep(1000);\n+                    logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                            dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+\n+                } catch (InterruptedException e) {\n+                    // ignore interruption\n+                }\n+\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 391}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NTYyMA==", "bodyText": "please remove excess blank lines", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392545620", "createdAt": "2020-03-14T01:42:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,652 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.key,\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            // ignore interruption\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+\n+                                    logger.trace(\"receive CMD: {} DATA: {}\",\n+                                            String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                    dumpData(cleanedBlock));\n+                        }\n+                    }\n+\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+\n+                    Thread.sleep(1000);\n+                    logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                            dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+\n+                } catch (InterruptedException e) {\n+                    // ignore interruption\n+                }\n+\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        logger.trace(\"send DATA: {}\", dumpData(request));\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+        logger.debug(\"Building request data: requestCmd = {}, dataPosition = {}, requestValue = {}\", requestCmd,\n+                dataPosition, requestValue);\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            if (requestCmd == 0xcb) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[i];\n+                        }\n+                    }\n+\n+                } else {\n+                    return new int[0];\n+                }\n+\n+            } else if (requestCmd == 0xcf) {\n+                newRequestData = new int[9];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 5 ? i + 4 : i;\n+\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }\n+\n+                } else {\n+                    return new int[0];\n+                }\n+\n+            } else if (requestCmd == 0xd7) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 5 ? i + 3 : i;\n+\n+                        if (dataPosition == i) {\n+\n+                            if (dataPosition == 4) {\n+                                requestValue = checkByteAndCalculateValue(command, requestValue, preRequestData[j]);\n+\n+                                newRequestData[i] = preRequestData[j] + requestValue;\n+\n+                            } else {\n+                                newRequestData[i] = requestValue;\n+                            }\n+\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }\n+\n+                } else {\n+                    return new int[0];\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 546}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjAzNQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392546035", "createdAt": "2020-03-14T01:48:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeBoolean.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle boolean values which are handled as decimal 0/1 states\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+public class DataTypeBoolean implements ComfoAirDataType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjA1MQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392546051", "createdAt": "2020-03-14T01:48:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle error messages\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ */\n+public class DataTypeMessage implements ComfoAirDataType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjEyOQ==", "bodyText": "What is the point of this if it gets overwritten anyway?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392546129", "createdAt": "2020-03-14T01:49:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeMessage.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle error messages\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ */\n+public class DataTypeMessage implements ComfoAirDataType {\n+\n+    private Logger logger = LoggerFactory.getLogger(DataTypeMessage.class);\n+\n+    @Override\n+    public State convertToState(int[] data, ComfoAirCommandType commandType) {\n+\n+        if (data == null || commandType == null) {\n+            logger.trace(\"\\\"DataTypeMessage\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return null;\n+        } else {\n+\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+\n+            int errorAlo = data[get_reply_data_pos[0]];\n+            int errorE = data[get_reply_data_pos[1]];\n+            int errorEA = data[get_reply_data_pos[2]];\n+            int errorAhi = data[get_reply_data_pos[3]];\n+\n+            String errorCode = \"\";\n+\n+            if (errorAlo > 0) {\n+                errorCode = \"A:\" + convertToCode(errorAlo);\n+            }\n+\n+            else if (errorAhi > 0) {\n+                if (errorAhi == 0x80) {\n+                    errorCode = \"A0\";\n+                }\n+                errorCode = \"A:\" + (convertToCode(errorAhi) + 8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjIxOA==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392546218", "createdAt": "2020-03-14T01:50:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeNumber.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle numeric values\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ */\n+public class DataTypeNumber implements ComfoAirDataType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjMyNA==", "bodyText": "Where did this number come from?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392546324", "createdAt": "2020-03-14T01:52:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeRPM.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle revolutions per minute values\n+ *\n+ * @author Grzegorz Miasko - Initial Contribution\n+ */\n+public class DataTypeRPM implements ComfoAirDataType {\n+\n+    private Logger logger = LoggerFactory.getLogger(DataTypeRPM.class);\n+\n+    @Override\n+    public State convertToState(int[] data, ComfoAirCommandType commandType) {\n+\n+        if (data == null || commandType == null) {\n+            logger.trace(\"\\\"DataTypeRPM\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return null;\n+        } else {\n+\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+\n+            int value = 0;\n+            int base = 0;\n+\n+            for (int i = get_reply_data_pos.length - 1; i >= 0; i--) {\n+\n+                if (get_reply_data_pos[i] < data.length) {\n+                    value += data[get_reply_data_pos[i]] << base;\n+                    base += 8;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            return new DecimalType((int) (1875000.0 / value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjM2MQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392546361", "createdAt": "2020-03-14T01:52:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeRPM.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle revolutions per minute values\n+ *\n+ * @author Grzegorz Miasko - Initial Contribution\n+ */\n+public class DataTypeRPM implements ComfoAirDataType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjQzMA==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392546430", "createdAt": "2020-03-14T01:53:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeTemperature.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle temperature values\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - QuantityTypes\n+ */\n+public class DataTypeTemperature implements ComfoAirDataType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0NjQ0NA==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r392546444", "createdAt": "2020-03-14T01:53:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeVolt.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle volt values\n+ *\n+ * @author Grzegorz Miasko - Initial Contribution\n+ * @author Hans B\u00f6hm - QuantityTypes\n+ */\n+public class DataTypeVolt implements ComfoAirDataType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aee971882a6445ff4061cab02d669899aca889c1", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/aee971882a6445ff4061cab02d669899aca889c1", "committedDate": "2020-02-24T21:08:45Z", "message": "small improvements on channel declaration\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}, "afterCommit": {"oid": "2b915a1faa9df04096fc01e8e8198877c53d7df6", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/2b915a1faa9df04096fc01e8e8198877c53d7df6", "committedDate": "2020-03-22T16:47:41Z", "message": "address review comments 2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b915a1faa9df04096fc01e8e8198877c53d7df6", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/2b915a1faa9df04096fc01e8e8198877c53d7df6", "committedDate": "2020-03-22T16:47:41Z", "message": "address review comments 2"}, "afterCommit": {"oid": "523613710db7bf8a5135bbeb0a09225721b5777f", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/523613710db7bf8a5135bbeb0a09225721b5777f", "committedDate": "2020-03-22T16:49:02Z", "message": "address review comments 2\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "523613710db7bf8a5135bbeb0a09225721b5777f", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/523613710db7bf8a5135bbeb0a09225721b5777f", "committedDate": "2020-03-22T16:49:02Z", "message": "address review comments 2\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}, "afterCommit": {"oid": "15d74a66222932173db6e802e9f2e14688f5d111", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/15d74a66222932173db6e802e9f2e14688f5d111", "committedDate": "2020-03-23T21:01:36Z", "message": "add constructors to enum\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjI4OTgy", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-381628982", "createdAt": "2020-03-26T00:28:45Z", "commit": {"oid": "15d74a66222932173db6e802e9f2e14688f5d111"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDoyODo0NVrOF7zRsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDo0NjoyNFrOF7zkUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MDQxOQ==", "bodyText": "Operating hours makes it sound like store hours.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r398250419", "createdAt": "2020-03-26T00:28:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/README.md", "diffHunk": "@@ -0,0 +1,889 @@\n+# ComfoAir Binding\n+\n+This binding allows to monitor and control Zehnder ComfoAir serial controlled ventilation systems.\n+\n+## Supported Things\n+\n+The binding supports ComfoAir ventilation systems supporting control via RS232 serial connection.\n+Though the binding is developed based on the protocol description for Zehnder ComfoAir devices it should also work for mostly identical systems from different manufacturers, like StorkAir WHR930, Wernig G90-380 and Paul Santos 370 DC.\n+It was also successfully tested on a Wernig G90-160.\n+\n+### Prerequisites\n+\n+Computer communication between ComfoAir device and openHAB via RS232 connection has to be set up.\n+The connection should be made with a 3-wire cable connecting pins: GND, TX, RX of RS232 sockets, but RX and TX pins should be crossed (TX of ComfoAir to RX of PC, RX of ComfoAir to TX of PC).\n+\n+### Serial Port Access Rights\n+\n+* Take care that the user that runs openHAB has rights to access the serial port\n+* On Ubuntu/Debian based systems (incl. openHABian) that usually means adding the user (e.g. openhab) to the group \"dialout\", i.e.\n+\n+```\n+sudo usermod -a -G dialout openhab\n+```\n+\n+### Limitations\n+\n+* Either the ComfoAir binding or the CCEase Comfocontrol can be active, but not together.\n+* You must implement auto mode by yourself with rules. But it is more powerful.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+\n+## Thing Configuration\n+\n+For the thing creation, the appropriate serial port has to be set.\n+\n+|Parameter      |Values                                   |Default        |\n+|---------------|-----------------------------------------|---------------|\n+|serialPort     |`/dev/ttyUSB0`, `COM1`, etc.             |-              |\n+|refreshInterval|Refresh interval in seconds (10...65535) |60             |\n+\n+## Channels\n+\n+The ComfoAir binding supports the following channels\n+\n+| Channel ID                         | Item Type                | Label                             | Description                                                                                 | Advanced | Read Only |\n+|------------------------------------|--------------------------|-----------------------------------|---------------------------------------------------------------------------------------------|----------|-----------|\n+| bindingControl#activate            | Switch                   | Activate Binding Control          | Activate (control through openHAB) or deactivate (return control to CCEase) binding control | no       | false     |\n+| ccease#fanLevel                    | Number                   | Fan Level                         | Fan level                                                                                   | no       | false     |\n+| ccease#targetTemperature           | Number:Temperature       | Target Temperature                | Target (comfort) temperature                                                                | no       | false     |\n+| ccease#filterError                 | Switch                   | Filter Error                      | Filter full                                                                                 | no       | true      |\n+| ccease#errorMessage                | String                   | Error Message                     | Current errors                                                                              | no       | true      |\n+| ccease#filterReset                 | Switch                   | Filter Reset                      | Reset filter operating hours                                                                | no       | false     |\n+| ccease#errorReset                  | Switch                   | Error Reset                       | Reset errors                                                                                | no       | false     |\n+| ventilation#fanOut0                | Number                   | Fan Out Level 0 (away)            | Fan level 0 performance (%) of outgoing fan                                                 | yes      | false     |\n+| ventilation#fanOut1                | Number                   | Fan Out Level 1                   | Fan level 1 performance (%) of outgoing fan                                                 | yes      | false     |\n+| ventilation#fanOut2                | Number                   | Fan Out Level 2                   | Fan level 2 performance (%) of outgoing fan                                                 | yes      | false     |\n+| ventilation#fanOut3                | Number                   | Fan Out Level 3                   | Fan level 3 performance (%) of outgoing fan                                                 | yes      | false     |\n+| ventilation#fanIn0                 | Number                   | Fan In Level 0 (away)             | Fan level 0 performance (%) of incoming fan                                                 | yes      | false     |\n+| ventilation#fanIn1                 | Number                   | Fan In Level 1                    | Fan level 1 performance (%) of incoming fan                                                 | yes      | false     |\n+| ventilation#fanIn2                 | Number                   | Fan In Level 2                    | Fan level 2 performance (%) of incoming fan                                                 | yes      | false     |\n+| ventilation#fanIn3                 | Number                   | Fan In Level 3                    | Fan level 3 performance (%) of incoming fan                                                 | yes      | false     |\n+| ventilation#fanInPercent           | Number                   | Fan In (%)                        | Current relative speed (%) of incoming fan                                                  | no       | true      |\n+| ventilation#fanOutPercent          | Number                   | Fan Out (%)                       | Current relative speed (%) of outgoing fan                                                  | no       | true      |\n+| ventilation#fanInRPM               | Number                   | Fan In (rpm)                      | Current absolute speed (rpm) of incoming fan                                                | yes      | true      |\n+| ventilation#fanOutRPM              | Number                   | Fan Out (rpm)                     | Current absolute speed (rpm) of outgoing fan                                                | yes      | true      |\n+| temperatures#outdoorTemperatureIn  | Number:Temperature       | Outdoor Temperature Incoming      | Intake air temperature (outside)                                                            | no       | true      |\n+| temperatures#outdoorTemperatureOut | Number:Temperature       | Outdoor Temperature Outgoing      | Outlet air temperature (outside)                                                            | no       | true      |\n+| temperatures#indoorTemperatureIn   | Number:Temperature       | Indoor Temperature Incoming       | Inlet air temperature (inside)                                                              | no       | true      |\n+| temperatures#indoorTemperatureOut  | Number:Temperature       | Indoor Temperature Outgoing       | Uptake air temperature (inside)                                                             | no       | true      |\n+| temperatures#isT1Sensor            | Switch                   | Sensor T1 Available               | Availability of temperature sensor T1 (outdoor in)                                          | yes      | true      |\n+| temperatures#isT2Sensor            | Switch                   | Sensor T2 Available               | Availability of temperature sensor T2 (indoor in)                                           | yes      | true      |\n+| temperatures#isT3Sensor            | Switch                   | Sensor T3 Available               | Availability of temperature sensor T3 (indoor out)                                          | yes      | true      |\n+| temperatures#isT4Sensor            | Switch                   | Sensor T4 Available               | Availability of temperature sensor T4 (outdoor out)                                         | yes      | true      |\n+| temperatures#isEWTSensor           | Switch                   | EWT Sensor Available              | Availability of EWT temperature sensor                                                      | yes      | true      |\n+| temperatures#isHeaterSensor        | Switch                   | Heater Sensor Available           | Availability of heater temperature sensor                                                   | yes      | true      |\n+| temperatures#isCookerhoodSensor    | Switch                   | Cookerhood Sensor Available       | Availability of cookerhood temperature sensor                                               | yes      | true      |\n+| temperatures#ewtTemperature        | Number:Temperature       | EWT Temperature                   | Temperature of geothermal heat exchanger sensor                                             | yes      | true      |\n+| temperatures#heaterTemperature     | Number:Temperature       | Heater Temperature                | Temperature of heater sensor                                                                | yes      | true      |\n+| temperatures#cookerhoodTemperature | Number:Temperature       | Cookerhood Temperature            | Temperature of cookerhood sensor                                                            | yes      | true      |\n+| times#level0Time                   | Number                   | Level 0 duration                  | Operating hours at level 0 (away)                                                           | yes      | true      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d74a66222932173db6e802e9f2e14688f5d111"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MTI3NQ==", "bodyText": "Can any of these be made final?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r398251275", "createdAt": "2020-03-26T00:31:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommand.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * Class to encapsulate all data which is needed to send a cmd to comfoair\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public class ComfoAirCommand {\n+\n+    private List<String> keys;\n+    private @Nullable Integer requestCmd;\n+    private @Nullable Integer replyCmd;\n+    private int[] requestData;\n+    private @Nullable Integer requestValue;\n+    private @Nullable Integer dataPosition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d74a66222932173db6e802e9f2e14688f5d111"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MTU2MQ==", "bodyText": "Would it be possible to give these constants names? Or do they not really have names to begin with?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r398251561", "createdAt": "2020-03-26T00:32:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+\n+                ComfoAirCommandType comfoAirCommandType = ComfoAirCommandType.getCommandTypeByKey(channelId);\n+                ComfoAirDataType dataType = comfoAirCommandType.getDataType();\n+                State state = null;\n+\n+                if (dataType instanceof DataTypeBoolean) {\n+                    state = (OnOffType) command;\n+                } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                    state = (DecimalType) command;\n+                } else if (dataType instanceof DataTypeTemperature) {\n+                    if (command instanceof QuantityType<?>) {\n+                        QuantityType<?> celsius = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                        if (celsius != null) {\n+                            state = new DecimalType(celsius.doubleValue());\n+                        }\n+                    } else {\n+                        state = (DecimalType) command;\n+                    }\n+                } else if (dataType instanceof DataTypeVolt) {\n+                    if (command instanceof QuantityType<?>) {\n+                        QuantityType<?> volts = ((QuantityType<?>) command).toUnit(SmartHomeUnits.VOLT);\n+                        if (volts != null) {\n+                            state = new DecimalType(volts.doubleValue());\n+                        }\n+                    } else {\n+                        state = (DecimalType) command;\n+                    }\n+                }\n+\n+                if (state != null) {\n+                    ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n+                    sendCommand(changeCommand, channelId);\n+\n+                    Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                            .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                    if (affectedReadCommands.size() > 0) {\n+                        Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                        scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                    }\n+                } else {\n+                    logger.warn(\"Unhandled command type: {}\", command.toString());\n+                }\n+            } catch (final RuntimeException e) {\n+                logger.warn(\"Updating ComfoAir failed: {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+        String serialPort = config.serialPort;\n+\n+        if (StringUtils.isNotEmpty(serialPort)) {\n+            comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort, BAUDRATE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        }\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.open();\n+            updateStatus(ThingStatus.ONLINE);\n+\n+            List<Channel> channels = this.thing.getChannels();\n+\n+            poller = scheduler.scheduleWithFixedDelay(() -> {\n+                for (Channel channel : channels) {\n+                    updateChannelState(channel);\n+                }\n+            }, 0, (config.refreshInterval > 0) ? config.refreshInterval : DEFAULT_REFRESH_INTERVAL, TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.close();\n+        }\n+\n+        final ScheduledFuture<?> localPoller = poller;\n+\n+        if (localPoller != null && !localPoller.isCancelled()) {\n+            localPoller.cancel(true);\n+            poller = null;\n+        }\n+    }\n+\n+    private void updateChannelState(Channel channel) {\n+        try {\n+            if (!isLinked(channel.getUID())) {\n+                return;\n+            }\n+            String commandKey = channel.getUID().getId();\n+            ComfoAirCommand readCommand = ComfoAirCommandType.getReadCommand(commandKey);\n+            State state = sendCommand(readCommand, commandKey);\n+\n+            updateState(channel.getUID(), state);\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Unknown channel {}\", channel.getUID().getId());\n+        }\n+    }\n+\n+    private State sendCommand(ComfoAirCommand command, String commandKey) {\n+        ComfoAirSerialConnector comfoAirConnector = this.comfoAirConnector;\n+\n+        if (comfoAirConnector != null) {\n+            Integer requestCmd = command.getRequestCmd();\n+            Integer replyCmd = command.getReplyCmd();\n+            int[] requestData = command.getRequestData();\n+\n+            Integer preRequestCmd;\n+            Integer preReplyCmd;\n+            int[] preResponse = new int[0];\n+\n+            if (requestCmd != null) {\n+                switch (requestCmd) {\n+                    case 0x9f:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d74a66222932173db6e802e9f2e14688f5d111"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NDE0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return (result) ? OnOffType.ON : OnOffType.OFF;\n          \n          \n            \n                            return OnOffType.from(result);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r398254144", "createdAt": "2020-03-26T00:42:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeBoolean.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle boolean values which are handled as decimal 0/1 states\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+public class DataTypeBoolean implements ComfoAirDataType {\n+    private Logger logger = LoggerFactory.getLogger(DataTypeBoolean.class);\n+\n+    @Override\n+    public State convertToState(int[] data, ComfoAirCommandType commandType) {\n+        if (data == null || commandType == null) {\n+            logger.trace(\"\\\"DataTypeBoolean\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return UnDefType.NULL;\n+        } else {\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+            int get_reply_data_bits = commandType.getGetReplyDataBits();\n+\n+            if (get_reply_data_pos[0] < data.length) {\n+                boolean result = (data[get_reply_data_pos[0]] & get_reply_data_bits) == get_reply_data_bits;\n+                return (result) ? OnOffType.ON : OnOffType.OFF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d74a66222932173db6e802e9f2e14688f5d111"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NDYwNQ==", "bodyText": "Can you please use StringBuilder here instead of raw String concatenation?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r398254605", "createdAt": "2020-03-26T00:44:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeMessage.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle error messages\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ */\n+public class DataTypeMessage implements ComfoAirDataType {\n+\n+    private Logger logger = LoggerFactory.getLogger(DataTypeMessage.class);\n+\n+    @Override\n+    public State convertToState(int[] data, ComfoAirCommandType commandType) {\n+        if (data == null || commandType == null) {\n+            logger.trace(\"\\\"DataTypeMessage\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return UnDefType.NULL;\n+        } else {\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+            int errorAlo = data[get_reply_data_pos[0]];\n+            int errorE = data[get_reply_data_pos[1]];\n+            int errorEA = data[get_reply_data_pos[2]];\n+            int errorAhi = data[get_reply_data_pos[3]];\n+\n+            String errorCode = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d74a66222932173db6e802e9f2e14688f5d111"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1NTE4Ng==", "bodyText": "Can you refactor this code so it can be reused?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r398255186", "createdAt": "2020-03-26T00:46:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeNumber.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle numeric values\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+public class DataTypeNumber implements ComfoAirDataType {\n+\n+    private Logger logger = LoggerFactory.getLogger(DataTypeNumber.class);\n+\n+    @Override\n+    public State convertToState(int[] data, ComfoAirCommandType commandType) {\n+        if (data == null || commandType == null) {\n+            logger.trace(\"\\\"DataTypeNumber\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return UnDefType.NULL;\n+        } else {\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+            int value = 0;\n+            int base = 0;\n+\n+            for (int i = get_reply_data_pos.length - 1; i >= 0; i--) {\n+                if (get_reply_data_pos[i] < data.length) {\n+                    value += data[get_reply_data_pos[i]] << base;\n+                    base += 8;\n+                } else {\n+                    return UnDefType.NULL;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d74a66222932173db6e802e9f2e14688f5d111"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15d74a66222932173db6e802e9f2e14688f5d111", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/15d74a66222932173db6e802e9f2e14688f5d111", "committedDate": "2020-03-23T21:01:36Z", "message": "add constructors to enum\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}, "afterCommit": {"oid": "ac3d5e134538bcec47316269f7afa74582481dea", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/ac3d5e134538bcec47316269f7afa74582481dea", "committedDate": "2020-03-26T21:12:54Z", "message": "remove rules from README"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac3d5e134538bcec47316269f7afa74582481dea", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/ac3d5e134538bcec47316269f7afa74582481dea", "committedDate": "2020-03-26T21:12:54Z", "message": "remove rules from README"}, "afterCommit": {"oid": "9b989c43e6c6eb8988fe1bde1a290cc81d6844ce", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/9b989c43e6c6eb8988fe1bde1a290cc81d6844ce", "committedDate": "2020-03-26T21:31:44Z", "message": "remove rules from README\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDc1Mzk0", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-386075394", "createdAt": "2020-04-02T02:48:02Z", "commit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMjo0ODowM1rOF_ZeDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDozNTo0MFrOF_a-fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyMTkwMQ==", "bodyText": "this would be a good place for a switch statement", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402021901", "createdAt": "2020-04-02T02:48:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeMessage.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle error messages\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public class DataTypeMessage implements ComfoAirDataType {\n+\n+    private Logger logger = LoggerFactory.getLogger(DataTypeMessage.class);\n+\n+    @Override\n+    public State convertToState(int @Nullable [] data, ComfoAirCommandType commandType) {\n+        if (data == null) {\n+            logger.trace(\"\\\"DataTypeMessage\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return UnDefType.NULL;\n+        } else {\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+            if (get_reply_data_pos != null) {\n+                int errorAlo = data[get_reply_data_pos[0]];\n+                int errorE = data[get_reply_data_pos[1]];\n+                int errorEA = data[get_reply_data_pos[2]];\n+                int errorAhi = data[get_reply_data_pos[3]];\n+\n+                StringBuilder errorCode = new StringBuilder();\n+\n+                if (errorAlo > 0) {\n+                    errorCode.append(\"A\");\n+                    errorCode.append(convertToCode(errorAlo));\n+                } else if (errorAhi > 0) {\n+                    if (errorAhi == 0x80) {\n+                        errorCode.append(\"A0\");\n+                    } else {\n+                        errorCode.append(\"A\");\n+                        errorCode.append(convertToCode(errorAhi) + 8);\n+                    }\n+                }\n+\n+                if (errorE > 0) {\n+                    if (errorCode.length() > 0) {\n+                        errorCode.append(\" \");\n+                    }\n+                    errorCode.append(\"E\");\n+                    errorCode.append(convertToCode(errorE));\n+                } else if (errorEA > 0) {\n+                    if (errorCode.length() > 0) {\n+                        errorCode.append(\" \");\n+                    }\n+                    errorCode.append(\"EA\");\n+                    errorCode.append(convertToCode(errorEA));\n+                }\n+                return new StringType(errorCode.length() > 0 ? errorCode.toString() : \"OK\");\n+            } else {\n+                return UnDefType.UNDEF;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public int @Nullable [] convertFromState(State value, ComfoAirCommandType commandType) {\n+        return null;\n+    }\n+\n+    private int convertToCode(int code) {\n+        if (code == 0x1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyNDE3MA==", "bodyText": "Please use UoM for readonly time channels.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Time</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402024170", "createdAt": "2020-04-02T02:57:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1596 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"comfoair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"comfoair\">\n+\t\t<label>Generic ComfoAir Ventilation System</label>\n+\t\t<description>Provides a generic access to a ComfoAir compatible ventilation system</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"bindingControl\" typeId=\"bindingControl\" />\n+\t\t\t<channel-group id=\"ccease\" typeId=\"ccease\" />\n+\t\t\t<channel-group id=\"ventilation\" typeId=\"ventilation\" />\n+\t\t\t<channel-group id=\"temperatures\" typeId=\"temperatures\" />\n+\t\t\t<channel-group id=\"times\" typeId=\"times\" />\n+\t\t\t<channel-group id=\"bypass\" typeId=\"bypass\" />\n+\t\t\t<channel-group id=\"preheater\" typeId=\"preheater\" />\n+\t\t\t<channel-group id=\"ewt\" typeId=\"ewt\" />\n+\t\t\t<channel-group id=\"heater\" typeId=\"heater\" />\n+\t\t\t<channel-group id=\"cookerhood\" typeId=\"cookerhood\" />\n+\t\t\t<channel-group id=\"enthalpy\" typeId=\"enthalpy\" />\n+\t\t\t<channel-group id=\"options\" typeId=\"options\" />\n+\t\t\t<channel-group id=\"menuP1\" typeId=\"menuP1\" />\n+\t\t\t<channel-group id=\"menuP2\" typeId=\"menuP2\" />\n+\t\t\t<channel-group id=\"menuP9\" typeId=\"menuP9\" />\n+\t\t\t<channel-group id=\"inputs\" typeId=\"inputs\" />\n+\t\t\t<channel-group id=\"analog\" typeId=\"analog\" />\n+\t\t\t<channel-group id=\"error\" typeId=\"error\" />\n+\t\t\t<channel-group id=\"software\" typeId=\"software\" />\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial port that the ComfoAir is connected to</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-group-type id=\"bindingControl\">\n+\t\t<label>Binding Control</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activate\" typeId=\"activate\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ccease\">\n+\t\t<label>CC Ease Functions</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanLevel\" typeId=\"fan_evel\" />\n+\t\t\t<channel id=\"targetTemperature\" typeId=\"target_temperature\" />\n+\t\t\t<channel id=\"filterError\" typeId=\"filter_error\" />\n+\t\t\t<channel id=\"errorMessage\" typeId=\"error_message\" />\n+\t\t\t<channel id=\"filterReset\" typeId=\"filter_reset\" />\n+\t\t\t<channel id=\"errorReset\" typeId=\"error_reset\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ventilation\">\n+\t\t<label>Ventilation Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanOut0\" typeId=\"fan_out_0\" />\n+\t\t\t<channel id=\"fanOut1\" typeId=\"fan_out_1\" />\n+\t\t\t<channel id=\"fanOut2\" typeId=\"fan_out_2\" />\n+\t\t\t<channel id=\"fanOut3\" typeId=\"fan_out_3\" />\n+\t\t\t<channel id=\"fanIn0\" typeId=\"fan_in_0\" />\n+\t\t\t<channel id=\"fanIn1\" typeId=\"fan_in_1\" />\n+\t\t\t<channel id=\"fanIn2\" typeId=\"fan_in_2\" />\n+\t\t\t<channel id=\"fanIn3\" typeId=\"fan_in_3\" />\n+\t\t\t<channel id=\"fanInPercent\" typeId=\"fan_in_percent\" />\n+\t\t\t<channel id=\"fanOutPercent\" typeId=\"fan_out_percent\" />\n+\t\t\t<channel id=\"fanInRPM\" typeId=\"fan_in_RPM\" />\n+\t\t\t<channel id=\"fanOutRPM\" typeId=\"fan_out_RPM\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"temperatures\">\n+\t\t<label>Temperature Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"outdoorTemperatureIn\" typeId=\"outdoor_temperature_in\" />\n+\t\t\t<channel id=\"outdoorTemperatureOut\" typeId=\"outdoor_temperature_out\" />\n+\t\t\t<channel id=\"indoorTemperatureIn\" typeId=\"indoor_temperature_in\" />\n+\t\t\t<channel id=\"indoorTemperatureOut\" typeId=\"indoor_temperature_out\" />\n+\t\t\t<channel id=\"isT1Sensor\" typeId=\"is_T1_sensor\" />\n+\t\t\t<channel id=\"isT2Sensor\" typeId=\"is_T2_sensor\" />\n+\t\t\t<channel id=\"isT3Sensor\" typeId=\"is_T3_sensor\" />\n+\t\t\t<channel id=\"isT4Sensor\" typeId=\"is_T4_sensor\" />\n+\t\t\t<channel id=\"isEWTSensor\" typeId=\"is_EWT_sensor\" />\n+\t\t\t<channel id=\"isHeaterSensor\" typeId=\"is_heater_sensor\" />\n+\t\t\t<channel id=\"isCookerhoodSensor\" typeId=\"is_cookerhood_sensor\" />\n+\t\t\t<channel id=\"ewtTemperature\" typeId=\"ewt_temperature\" />\n+\t\t\t<channel id=\"heaterTemperature\" typeId=\"heater_temperature\" />\n+\t\t\t<channel id=\"cookerhoodTemperature\" typeId=\"cookerhood_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"times\">\n+\t\t<label>Uptimes</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"level0Time\" typeId=\"level0_time\" />\n+\t\t\t<channel id=\"level1Time\" typeId=\"level1_time\" />\n+\t\t\t<channel id=\"level2Time\" typeId=\"level2_time\" />\n+\t\t\t<channel id=\"level3Time\" typeId=\"level3_time\" />\n+\t\t\t<channel id=\"freezeTime\" typeId=\"freeze_time\" />\n+\t\t\t<channel id=\"preheaterTime\" typeId=\"preheater_time\" />\n+\t\t\t<channel id=\"bypassTime\" typeId=\"bypass_time\" />\n+\t\t\t<channel id=\"filterHours\" typeId=\"filter_hours\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"bypass\">\n+\t\t<label>Bypass Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bypassFactor\" typeId=\"bypass_factor\" />\n+\t\t\t<channel id=\"bypassLevel\" typeId=\"bypass_level\" />\n+\t\t\t<channel id=\"bypassCorrection\" typeId=\"bypass_correction\" />\n+\t\t\t<channel id=\"bypassSummer\" typeId=\"bypass_summer\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"preheater\">\n+\t\t<label>Preheater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"preheaterValve\" typeId=\"preheater_valve\" />\n+\t\t\t<channel id=\"preheaterFrostProtect\" typeId=\"preheater_frost_protect\" />\n+\t\t\t<channel id=\"preheaterHeating\" typeId=\"preheater_heating\" />\n+\t\t\t<channel id=\"preheaterFrostTime\" typeId=\"preheater_frost_time\" />\n+\t\t\t<channel id=\"preheaterSafety\" typeId=\"preheater_safety\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ewt\">\n+\t\t<label>EWT Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"ewtTemperatureLow\" typeId=\"ewt_temperature_low\" />\n+\t\t\t<channel id=\"ewtTemperatureHigh\" typeId=\"ewt_temperature_high\" />\n+\t\t\t<channel id=\"ewtSpeed\" typeId=\"ewt_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"heater\">\n+\t\t<label>Heater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"heaterPower\" typeId=\"heater_power\" />\n+\t\t\t<channel id=\"heaterPowerI\" typeId=\"heater_power_I\" />\n+\t\t\t<channel id=\"heaterTargetTemperature\" typeId=\"heater_target_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"cookerhood\">\n+\t\t<label>Cookerhood Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"cookerhoodSpeed\" typeId=\"cookerhood_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"enthalpy\">\n+\t\t<label>Enthalpy Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"enthalpyTemperature\" typeId=\"enthalpy_temperature\" />\n+\t\t\t<channel id=\"enthalpyHumidity\" typeId=\"enthalpy_humidity\" />\n+\t\t\t<channel id=\"enthalpyLevel\" typeId=\"enthalpy_level\" />\n+\t\t\t<channel id=\"enthalpyTime\" typeId=\"enthalpy_time\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"options\">\n+\t\t<label>Option States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isPreheater\" typeId=\"is_preheater\" />\n+\t\t\t<channel id=\"isBypass\" typeId=\"is_bypass\" />\n+\t\t\t<channel id=\"recuType\" typeId=\"recu_type\" />\n+\t\t\t<channel id=\"recuSize\" typeId=\"recu_size\" />\n+\t\t\t<channel id=\"isChimney\" typeId=\"is_chimney\" />\n+\t\t\t<channel id=\"isCookerhood\" typeId=\"is_cookerhood\" />\n+\t\t\t<channel id=\"isHeater\" typeId=\"is_heater\" />\n+\t\t\t<channel id=\"isEnthalpy\" typeId=\"is_enthalpy\" />\n+\t\t\t<channel id=\"isEWT\" typeId=\"is_ewt\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP1\">\n+\t\t<label>Menu P1: Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"menu20Mode\" typeId=\"menu20_mode\" />\n+\t\t\t<channel id=\"menu21Mode\" typeId=\"menu21_mode\" />\n+\t\t\t<channel id=\"menu22Mode\" typeId=\"menu22_mode\" />\n+\t\t\t<channel id=\"menu23Mode\" typeId=\"menu23_mode\" />\n+\t\t\t<channel id=\"menu24Mode\" typeId=\"menu24_mode\" />\n+\t\t\t<channel id=\"menu25Mode\" typeId=\"menu25_mode\" />\n+\t\t\t<channel id=\"menu26Mode\" typeId=\"menu26_mode\" />\n+\t\t\t<channel id=\"menu27Mode\" typeId=\"menu27_mode\" />\n+\t\t\t<channel id=\"menu28Mode\" typeId=\"menu28_mode\" />\n+\t\t\t<channel id=\"menu29Mode\" typeId=\"menu29_mode\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP2\">\n+\t\t<label>Menu P2: Delay Settings</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bathroomStartDelay\" typeId=\"bathroom_start_delay\" />\n+\t\t\t<channel id=\"bathroomEndDelay\" typeId=\"bathroom_end_delay\" />\n+\t\t\t<channel id=\"L1EndDelay\" typeId=\"L1_end_delay\" />\n+\t\t\t<channel id=\"pulseVentilation\" typeId=\"pulse_ventilation\" />\n+\t\t\t<channel id=\"filterWeeks\" typeId=\"filter_weeks\" />\n+\t\t\t<channel id=\"RFShortDelay\" typeId=\"RF_short_delay\" />\n+\t\t\t<channel id=\"RFLongDelay\" typeId=\"RF_long_delay\" />\n+\t\t\t<channel id=\"cookerhoodDelay\" typeId=\"cookerhood_delay\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP9\">\n+\t\t<label>Menu P9: Option Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"chimneyState\" typeId=\"chimney_state\" />\n+\t\t\t<channel id=\"bypassState\" typeId=\"bypass_state\" />\n+\t\t\t<channel id=\"ewtState\" typeId=\"ewt_state\" />\n+\t\t\t<channel id=\"heaterState\" typeId=\"heater_state\" />\n+\t\t\t<channel id=\"vControlState\" typeId=\"v_control_state\" />\n+\t\t\t<channel id=\"frostState\" typeId=\"frost_state\" />\n+\t\t\t<channel id=\"cookerhoodState\" typeId=\"cookerhood_state\" />\n+\t\t\t<channel id=\"enthalpyState\" typeId=\"enthalpy_state\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"inputs\">\n+\t\t<label>Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isL1Switch\" typeId=\"is_L1_switch\" />\n+\t\t\t<channel id=\"isL2Switch\" typeId=\"is_L2_switch\" />\n+\t\t\t<channel id=\"isBathroomSwitch\" typeId=\"is_bathroom_switch\" />\n+\t\t\t<channel id=\"isCookerhoodSwitch\" typeId=\"is_cookerhood_switch\" />\n+\t\t\t<channel id=\"isExternalFilter\" typeId=\"is_external_filter\" />\n+\t\t\t<channel id=\"isWTW\" typeId=\"is_wtw\" />\n+\t\t\t<channel id=\"isBathroom2Switch\" typeId=\"is_bathroom2_switch\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"analog\">\n+\t\t<label>Analog Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isAnalog1\" typeId=\"is_analog1\" />\n+\t\t\t<channel id=\"isAnalog2\" typeId=\"is_analog2\" />\n+\t\t\t<channel id=\"isAnalog3\" typeId=\"is_analog3\" />\n+\t\t\t<channel id=\"isAnalog4\" typeId=\"is_analog4\" />\n+\t\t\t<channel id=\"isRF\" typeId=\"is_RF\" />\n+\t\t\t<channel id=\"analog1Mode\" typeId=\"analog1_mode\" />\n+\t\t\t<channel id=\"analog2Mode\" typeId=\"analog2_mode\" />\n+\t\t\t<channel id=\"analog3Mode\" typeId=\"analog3_mode\" />\n+\t\t\t<channel id=\"analog4Mode\" typeId=\"analog4_mode\" />\n+\t\t\t<channel id=\"RFMode\" typeId=\"RF_mode\" />\n+\t\t\t<channel id=\"analog1Negative\" typeId=\"analog1_negative\" />\n+\t\t\t<channel id=\"analog2Negative\" typeId=\"analog2_negative\" />\n+\t\t\t<channel id=\"analog3Negative\" typeId=\"analog3_negative\" />\n+\t\t\t<channel id=\"analog4Negative\" typeId=\"analog4_negative\" />\n+\t\t\t<channel id=\"RFNegative\" typeId=\"RF_negative\" />\n+\t\t\t<channel id=\"analog1Volt\" typeId=\"analog1_volt\" />\n+\t\t\t<channel id=\"analog1Min\" typeId=\"analog1_min\" />\n+\t\t\t<channel id=\"analog1Max\" typeId=\"analog1_max\" />\n+\t\t\t<channel id=\"analog1Value\" typeId=\"analog1_value\" />\n+\t\t\t<channel id=\"analog2Volt\" typeId=\"analog2_volt\" />\n+\t\t\t<channel id=\"analog2Min\" typeId=\"analog2_min\" />\n+\t\t\t<channel id=\"analog2Max\" typeId=\"analog2_max\" />\n+\t\t\t<channel id=\"analog2Value\" typeId=\"analog2_value\" />\n+\t\t\t<channel id=\"analog3Volt\" typeId=\"analog3_volt\" />\n+\t\t\t<channel id=\"analog3Min\" typeId=\"analog3_min\" />\n+\t\t\t<channel id=\"analog3Max\" typeId=\"analog3_max\" />\n+\t\t\t<channel id=\"analog3Value\" typeId=\"analog3_value\" />\n+\t\t\t<channel id=\"analog4Volt\" typeId=\"analog4_volt\" />\n+\t\t\t<channel id=\"analog4Min\" typeId=\"analog4_min\" />\n+\t\t\t<channel id=\"analog4Max\" typeId=\"analog4_max\" />\n+\t\t\t<channel id=\"analog4Value\" typeId=\"analog4_value\" />\n+\t\t\t<channel id=\"RFMin\" typeId=\"RF_min\" />\n+\t\t\t<channel id=\"RFMax\" typeId=\"RF_max\" />\n+\t\t\t<channel id=\"RFValue\" typeId=\"RF_value\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"error\">\n+\t\t<label>Error States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"errorACurrent\" typeId=\"errorA_current\" />\n+\t\t\t<channel id=\"errorECurrent\" typeId=\"errorE_current\" />\n+\t\t\t<channel id=\"errorALast\" typeId=\"errorA_last\" />\n+\t\t\t<channel id=\"errorELast\" typeId=\"errorE_last\" />\n+\t\t\t<channel id=\"errorAPrelast\" typeId=\"errorA_prelast\" />\n+\t\t\t<channel id=\"errorEPrelast\" typeId=\"errorE_prelast\" />\n+\t\t\t<channel id=\"errorAPrePrelast\" typeId=\"errorA_pre_prelast\" />\n+\t\t\t<channel id=\"errorEPrePrelast\" typeId=\"errorE_pre_prelast\" />\n+\t\t\t<channel id=\"errorEACurrent\" typeId=\"errorEA_current\" />\n+\t\t\t<channel id=\"errorEALast\" typeId=\"errorEA_last\" />\n+\t\t\t<channel id=\"errorEAPrelast\" typeId=\"errorEA_prelast\" />\n+\t\t\t<channel id=\"errorEAPrePrelast\" typeId=\"errorEA_pre_prelast\" />\n+\t\t\t<channel id=\"errorAHighCurrent\" typeId=\"errorA_high_current\" />\n+\t\t\t<channel id=\"errorAHighLast\" typeId=\"errorA_high_last\" />\n+\t\t\t<channel id=\"errorAHighPrelast\" typeId=\"errorA_high_prelast\" />\n+\t\t\t<channel id=\"errorAHighPrePrelast\" typeId=\"errorA_high_pre_prelast\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"software\">\n+\t\t<label>Software Version</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"softwareMainVersion\" typeId=\"software_main_version\" />\n+\t\t\t<channel id=\"softwareMinorVersion\" typeId=\"software_minor_version\" />\n+\t\t\t<channel id=\"softwareBetaVersion\" typeId=\"software_beta_version\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-type id=\"activate\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Activate Binding Control</label>\n+\t\t<description>Activate (control through openHAB) or deactivate (return control to CCEase) binding control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_evel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Level</label>\n+\t\t<description>Fan level</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Away</option>\n+\t\t\t\t<option value=\"2\">Level 1</option>\n+\t\t\t\t<option value=\"3\">Level 2</option>\n+\t\t\t\t<option value=\"4\">Level 3</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"target_temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Target Temperature</label>\n+\t\t<description>Target (comfort) temperature</description>\n+\t\t<category>Temperature</category>\n+\t\t<state min=\"12\" max=\"28\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_error\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Filter Error</label>\n+\t\t<description>Filter full</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"error_message\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Message</label>\n+\t\t<description>Current errors</description>\n+\t\t<category>Text</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_reset\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Filter Reset</label>\n+\t\t<description>Reset filter uptime</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"error_reset\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Error Reset</label>\n+\t\t<description>Reset errors</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_0\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 0 (away)</label>\n+\t\t<description>Fan level 0 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"97\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_1\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 1</label>\n+\t\t<description>Fan level 1 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"16\" max=\"98\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_2\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 2</label>\n+\t\t<description>Fan level 2 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"17\" max=\"99\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_3\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 3</label>\n+\t\t<description>Fan level 3 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"18\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_0\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 0 (away)</label>\n+\t\t<description>Fan level 0 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"97\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_1\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 1</label>\n+\t\t<description>Fan level 1 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"16\" max=\"98\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_2\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 2</label>\n+\t\t<description>Fan level 2 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"17\" max=\"99\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_3\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 3</label>\n+\t\t<description>Fan level 3 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"18\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_percent\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In (%)</label>\n+\t\t<description>Current relative speed (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_percent\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out (%)</label>\n+\t\t<description>Current relative speed (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_RPM\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In (rpm)</label>\n+\t\t<description>Current absolute speed (rpm) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_RPM\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out (rpm)</label>\n+\t\t<description>Current absolute speed (rpm) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"outdoor_temperature_in\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Outdoor Temperature Incoming</label>\n+\t\t<description>Intake air temperature (outside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"outdoor_temperature_out\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Outdoor Temperature Outgoing</label>\n+\t\t<description>Outlet air temperature (outside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"indoor_temperature_in\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Indoor Temperature Incoming</label>\n+\t\t<description>Inlet air temperature (inside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"indoor_temperature_out\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Indoor Temperature Outgoing</label>\n+\t\t<description>Uptake air temperature (inside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T1_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T1 Available</label>\n+\t\t<description>Availability of temperature sensor T1 (outdoor in)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T2_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T2 Available</label>\n+\t\t<description>Availability of temperature sensor T2 (indoor in)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T3_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T3 Available</label>\n+\t\t<description>Availability of temperature sensor T3 (indoor out)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T4_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T4 Available</label>\n+\t\t<description>Availability of temperature sensor T4 (outdoor out)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_EWT_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>EWT Sensor Available</label>\n+\t\t<description>Availability of EWT temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_heater_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heater Sensor Available</label>\n+\t\t<description>Availability of heater temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_cookerhood_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood Sensor Available</label>\n+\t\t<description>Availability of cookerhood temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"chimney_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Chimney Control State</label>\n+\t\t<description>State of the chimney control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bypass State</label>\n+\t\t<description>State of the bypass (ON = open / OFF = closed)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>EWT State</label>\n+\t\t<description>State of the EWT valve (ON = open / OFF = closed)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heater State</label>\n+\t\t<description>State of the heater</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"v_control_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>0-10V Control State</label>\n+\t\t<description>State of the 0-10V control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"frost_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Antifrost State</label>\n+\t\t<description>State of the antifrost control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood State</label>\n+\t\t<description>State of the cookerhood control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Enthalpy State</label>\n+\t\t<description>State of the enthalpy module</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>EWT Temperature</label>\n+\t\t<description>Temperature of geothermal heat exchanger sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Heater Temperature</label>\n+\t\t<description>Temperature of heater sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Cookerhood Temperature</label>\n+\t\t<description>Temperature of cookerhood sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"level0_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 654}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMjY4Mg==", "bodyText": "How many of these channels is the user actually supposed to interact with? Would it be more appropriate for these to be configurations instead?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402032682", "createdAt": "2020-04-02T03:32:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1596 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"comfoair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"comfoair\">\n+\t\t<label>Generic ComfoAir Ventilation System</label>\n+\t\t<description>Provides a generic access to a ComfoAir compatible ventilation system</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"bindingControl\" typeId=\"bindingControl\" />\n+\t\t\t<channel-group id=\"ccease\" typeId=\"ccease\" />\n+\t\t\t<channel-group id=\"ventilation\" typeId=\"ventilation\" />\n+\t\t\t<channel-group id=\"temperatures\" typeId=\"temperatures\" />\n+\t\t\t<channel-group id=\"times\" typeId=\"times\" />\n+\t\t\t<channel-group id=\"bypass\" typeId=\"bypass\" />\n+\t\t\t<channel-group id=\"preheater\" typeId=\"preheater\" />\n+\t\t\t<channel-group id=\"ewt\" typeId=\"ewt\" />\n+\t\t\t<channel-group id=\"heater\" typeId=\"heater\" />\n+\t\t\t<channel-group id=\"cookerhood\" typeId=\"cookerhood\" />\n+\t\t\t<channel-group id=\"enthalpy\" typeId=\"enthalpy\" />\n+\t\t\t<channel-group id=\"options\" typeId=\"options\" />\n+\t\t\t<channel-group id=\"menuP1\" typeId=\"menuP1\" />\n+\t\t\t<channel-group id=\"menuP2\" typeId=\"menuP2\" />\n+\t\t\t<channel-group id=\"menuP9\" typeId=\"menuP9\" />\n+\t\t\t<channel-group id=\"inputs\" typeId=\"inputs\" />\n+\t\t\t<channel-group id=\"analog\" typeId=\"analog\" />\n+\t\t\t<channel-group id=\"error\" typeId=\"error\" />\n+\t\t\t<channel-group id=\"software\" typeId=\"software\" />\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial port that the ComfoAir is connected to</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-group-type id=\"bindingControl\">\n+\t\t<label>Binding Control</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activate\" typeId=\"activate\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ccease\">\n+\t\t<label>CC Ease Functions</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanLevel\" typeId=\"fan_evel\" />\n+\t\t\t<channel id=\"targetTemperature\" typeId=\"target_temperature\" />\n+\t\t\t<channel id=\"filterError\" typeId=\"filter_error\" />\n+\t\t\t<channel id=\"errorMessage\" typeId=\"error_message\" />\n+\t\t\t<channel id=\"filterReset\" typeId=\"filter_reset\" />\n+\t\t\t<channel id=\"errorReset\" typeId=\"error_reset\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ventilation\">\n+\t\t<label>Ventilation Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanOut0\" typeId=\"fan_out_0\" />\n+\t\t\t<channel id=\"fanOut1\" typeId=\"fan_out_1\" />\n+\t\t\t<channel id=\"fanOut2\" typeId=\"fan_out_2\" />\n+\t\t\t<channel id=\"fanOut3\" typeId=\"fan_out_3\" />\n+\t\t\t<channel id=\"fanIn0\" typeId=\"fan_in_0\" />\n+\t\t\t<channel id=\"fanIn1\" typeId=\"fan_in_1\" />\n+\t\t\t<channel id=\"fanIn2\" typeId=\"fan_in_2\" />\n+\t\t\t<channel id=\"fanIn3\" typeId=\"fan_in_3\" />\n+\t\t\t<channel id=\"fanInPercent\" typeId=\"fan_in_percent\" />\n+\t\t\t<channel id=\"fanOutPercent\" typeId=\"fan_out_percent\" />\n+\t\t\t<channel id=\"fanInRPM\" typeId=\"fan_in_RPM\" />\n+\t\t\t<channel id=\"fanOutRPM\" typeId=\"fan_out_RPM\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"temperatures\">\n+\t\t<label>Temperature Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"outdoorTemperatureIn\" typeId=\"outdoor_temperature_in\" />\n+\t\t\t<channel id=\"outdoorTemperatureOut\" typeId=\"outdoor_temperature_out\" />\n+\t\t\t<channel id=\"indoorTemperatureIn\" typeId=\"indoor_temperature_in\" />\n+\t\t\t<channel id=\"indoorTemperatureOut\" typeId=\"indoor_temperature_out\" />\n+\t\t\t<channel id=\"isT1Sensor\" typeId=\"is_T1_sensor\" />\n+\t\t\t<channel id=\"isT2Sensor\" typeId=\"is_T2_sensor\" />\n+\t\t\t<channel id=\"isT3Sensor\" typeId=\"is_T3_sensor\" />\n+\t\t\t<channel id=\"isT4Sensor\" typeId=\"is_T4_sensor\" />\n+\t\t\t<channel id=\"isEWTSensor\" typeId=\"is_EWT_sensor\" />\n+\t\t\t<channel id=\"isHeaterSensor\" typeId=\"is_heater_sensor\" />\n+\t\t\t<channel id=\"isCookerhoodSensor\" typeId=\"is_cookerhood_sensor\" />\n+\t\t\t<channel id=\"ewtTemperature\" typeId=\"ewt_temperature\" />\n+\t\t\t<channel id=\"heaterTemperature\" typeId=\"heater_temperature\" />\n+\t\t\t<channel id=\"cookerhoodTemperature\" typeId=\"cookerhood_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"times\">\n+\t\t<label>Uptimes</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"level0Time\" typeId=\"level0_time\" />\n+\t\t\t<channel id=\"level1Time\" typeId=\"level1_time\" />\n+\t\t\t<channel id=\"level2Time\" typeId=\"level2_time\" />\n+\t\t\t<channel id=\"level3Time\" typeId=\"level3_time\" />\n+\t\t\t<channel id=\"freezeTime\" typeId=\"freeze_time\" />\n+\t\t\t<channel id=\"preheaterTime\" typeId=\"preheater_time\" />\n+\t\t\t<channel id=\"bypassTime\" typeId=\"bypass_time\" />\n+\t\t\t<channel id=\"filterHours\" typeId=\"filter_hours\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"bypass\">\n+\t\t<label>Bypass Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bypassFactor\" typeId=\"bypass_factor\" />\n+\t\t\t<channel id=\"bypassLevel\" typeId=\"bypass_level\" />\n+\t\t\t<channel id=\"bypassCorrection\" typeId=\"bypass_correction\" />\n+\t\t\t<channel id=\"bypassSummer\" typeId=\"bypass_summer\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"preheater\">\n+\t\t<label>Preheater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"preheaterValve\" typeId=\"preheater_valve\" />\n+\t\t\t<channel id=\"preheaterFrostProtect\" typeId=\"preheater_frost_protect\" />\n+\t\t\t<channel id=\"preheaterHeating\" typeId=\"preheater_heating\" />\n+\t\t\t<channel id=\"preheaterFrostTime\" typeId=\"preheater_frost_time\" />\n+\t\t\t<channel id=\"preheaterSafety\" typeId=\"preheater_safety\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ewt\">\n+\t\t<label>EWT Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"ewtTemperatureLow\" typeId=\"ewt_temperature_low\" />\n+\t\t\t<channel id=\"ewtTemperatureHigh\" typeId=\"ewt_temperature_high\" />\n+\t\t\t<channel id=\"ewtSpeed\" typeId=\"ewt_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"heater\">\n+\t\t<label>Heater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"heaterPower\" typeId=\"heater_power\" />\n+\t\t\t<channel id=\"heaterPowerI\" typeId=\"heater_power_I\" />\n+\t\t\t<channel id=\"heaterTargetTemperature\" typeId=\"heater_target_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"cookerhood\">\n+\t\t<label>Cookerhood Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"cookerhoodSpeed\" typeId=\"cookerhood_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"enthalpy\">\n+\t\t<label>Enthalpy Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"enthalpyTemperature\" typeId=\"enthalpy_temperature\" />\n+\t\t\t<channel id=\"enthalpyHumidity\" typeId=\"enthalpy_humidity\" />\n+\t\t\t<channel id=\"enthalpyLevel\" typeId=\"enthalpy_level\" />\n+\t\t\t<channel id=\"enthalpyTime\" typeId=\"enthalpy_time\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"options\">\n+\t\t<label>Option States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isPreheater\" typeId=\"is_preheater\" />\n+\t\t\t<channel id=\"isBypass\" typeId=\"is_bypass\" />\n+\t\t\t<channel id=\"recuType\" typeId=\"recu_type\" />\n+\t\t\t<channel id=\"recuSize\" typeId=\"recu_size\" />\n+\t\t\t<channel id=\"isChimney\" typeId=\"is_chimney\" />\n+\t\t\t<channel id=\"isCookerhood\" typeId=\"is_cookerhood\" />\n+\t\t\t<channel id=\"isHeater\" typeId=\"is_heater\" />\n+\t\t\t<channel id=\"isEnthalpy\" typeId=\"is_enthalpy\" />\n+\t\t\t<channel id=\"isEWT\" typeId=\"is_ewt\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzMzIzNg==", "bodyText": "It is likely that many of these channels would be irrelevant for certain configurations. Why not make these channels dynamic instead?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402033236", "createdAt": "2020-04-02T03:34:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1596 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"comfoair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"comfoair\">\n+\t\t<label>Generic ComfoAir Ventilation System</label>\n+\t\t<description>Provides a generic access to a ComfoAir compatible ventilation system</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"bindingControl\" typeId=\"bindingControl\" />\n+\t\t\t<channel-group id=\"ccease\" typeId=\"ccease\" />\n+\t\t\t<channel-group id=\"ventilation\" typeId=\"ventilation\" />\n+\t\t\t<channel-group id=\"temperatures\" typeId=\"temperatures\" />\n+\t\t\t<channel-group id=\"times\" typeId=\"times\" />\n+\t\t\t<channel-group id=\"bypass\" typeId=\"bypass\" />\n+\t\t\t<channel-group id=\"preheater\" typeId=\"preheater\" />\n+\t\t\t<channel-group id=\"ewt\" typeId=\"ewt\" />\n+\t\t\t<channel-group id=\"heater\" typeId=\"heater\" />\n+\t\t\t<channel-group id=\"cookerhood\" typeId=\"cookerhood\" />\n+\t\t\t<channel-group id=\"enthalpy\" typeId=\"enthalpy\" />\n+\t\t\t<channel-group id=\"options\" typeId=\"options\" />\n+\t\t\t<channel-group id=\"menuP1\" typeId=\"menuP1\" />\n+\t\t\t<channel-group id=\"menuP2\" typeId=\"menuP2\" />\n+\t\t\t<channel-group id=\"menuP9\" typeId=\"menuP9\" />\n+\t\t\t<channel-group id=\"inputs\" typeId=\"inputs\" />\n+\t\t\t<channel-group id=\"analog\" typeId=\"analog\" />\n+\t\t\t<channel-group id=\"error\" typeId=\"error\" />\n+\t\t\t<channel-group id=\"software\" typeId=\"software\" />\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial port that the ComfoAir is connected to</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-group-type id=\"bindingControl\">\n+\t\t<label>Binding Control</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activate\" typeId=\"activate\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ccease\">\n+\t\t<label>CC Ease Functions</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanLevel\" typeId=\"fan_evel\" />\n+\t\t\t<channel id=\"targetTemperature\" typeId=\"target_temperature\" />\n+\t\t\t<channel id=\"filterError\" typeId=\"filter_error\" />\n+\t\t\t<channel id=\"errorMessage\" typeId=\"error_message\" />\n+\t\t\t<channel id=\"filterReset\" typeId=\"filter_reset\" />\n+\t\t\t<channel id=\"errorReset\" typeId=\"error_reset\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ventilation\">\n+\t\t<label>Ventilation Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanOut0\" typeId=\"fan_out_0\" />\n+\t\t\t<channel id=\"fanOut1\" typeId=\"fan_out_1\" />\n+\t\t\t<channel id=\"fanOut2\" typeId=\"fan_out_2\" />\n+\t\t\t<channel id=\"fanOut3\" typeId=\"fan_out_3\" />\n+\t\t\t<channel id=\"fanIn0\" typeId=\"fan_in_0\" />\n+\t\t\t<channel id=\"fanIn1\" typeId=\"fan_in_1\" />\n+\t\t\t<channel id=\"fanIn2\" typeId=\"fan_in_2\" />\n+\t\t\t<channel id=\"fanIn3\" typeId=\"fan_in_3\" />\n+\t\t\t<channel id=\"fanInPercent\" typeId=\"fan_in_percent\" />\n+\t\t\t<channel id=\"fanOutPercent\" typeId=\"fan_out_percent\" />\n+\t\t\t<channel id=\"fanInRPM\" typeId=\"fan_in_RPM\" />\n+\t\t\t<channel id=\"fanOutRPM\" typeId=\"fan_out_RPM\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"temperatures\">\n+\t\t<label>Temperature Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"outdoorTemperatureIn\" typeId=\"outdoor_temperature_in\" />\n+\t\t\t<channel id=\"outdoorTemperatureOut\" typeId=\"outdoor_temperature_out\" />\n+\t\t\t<channel id=\"indoorTemperatureIn\" typeId=\"indoor_temperature_in\" />\n+\t\t\t<channel id=\"indoorTemperatureOut\" typeId=\"indoor_temperature_out\" />\n+\t\t\t<channel id=\"isT1Sensor\" typeId=\"is_T1_sensor\" />\n+\t\t\t<channel id=\"isT2Sensor\" typeId=\"is_T2_sensor\" />\n+\t\t\t<channel id=\"isT3Sensor\" typeId=\"is_T3_sensor\" />\n+\t\t\t<channel id=\"isT4Sensor\" typeId=\"is_T4_sensor\" />\n+\t\t\t<channel id=\"isEWTSensor\" typeId=\"is_EWT_sensor\" />\n+\t\t\t<channel id=\"isHeaterSensor\" typeId=\"is_heater_sensor\" />\n+\t\t\t<channel id=\"isCookerhoodSensor\" typeId=\"is_cookerhood_sensor\" />\n+\t\t\t<channel id=\"ewtTemperature\" typeId=\"ewt_temperature\" />\n+\t\t\t<channel id=\"heaterTemperature\" typeId=\"heater_temperature\" />\n+\t\t\t<channel id=\"cookerhoodTemperature\" typeId=\"cookerhood_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"times\">\n+\t\t<label>Uptimes</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"level0Time\" typeId=\"level0_time\" />\n+\t\t\t<channel id=\"level1Time\" typeId=\"level1_time\" />\n+\t\t\t<channel id=\"level2Time\" typeId=\"level2_time\" />\n+\t\t\t<channel id=\"level3Time\" typeId=\"level3_time\" />\n+\t\t\t<channel id=\"freezeTime\" typeId=\"freeze_time\" />\n+\t\t\t<channel id=\"preheaterTime\" typeId=\"preheater_time\" />\n+\t\t\t<channel id=\"bypassTime\" typeId=\"bypass_time\" />\n+\t\t\t<channel id=\"filterHours\" typeId=\"filter_hours\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"bypass\">\n+\t\t<label>Bypass Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bypassFactor\" typeId=\"bypass_factor\" />\n+\t\t\t<channel id=\"bypassLevel\" typeId=\"bypass_level\" />\n+\t\t\t<channel id=\"bypassCorrection\" typeId=\"bypass_correction\" />\n+\t\t\t<channel id=\"bypassSummer\" typeId=\"bypass_summer\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"preheater\">\n+\t\t<label>Preheater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"preheaterValve\" typeId=\"preheater_valve\" />\n+\t\t\t<channel id=\"preheaterFrostProtect\" typeId=\"preheater_frost_protect\" />\n+\t\t\t<channel id=\"preheaterHeating\" typeId=\"preheater_heating\" />\n+\t\t\t<channel id=\"preheaterFrostTime\" typeId=\"preheater_frost_time\" />\n+\t\t\t<channel id=\"preheaterSafety\" typeId=\"preheater_safety\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ewt\">\n+\t\t<label>EWT Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"ewtTemperatureLow\" typeId=\"ewt_temperature_low\" />\n+\t\t\t<channel id=\"ewtTemperatureHigh\" typeId=\"ewt_temperature_high\" />\n+\t\t\t<channel id=\"ewtSpeed\" typeId=\"ewt_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"heater\">\n+\t\t<label>Heater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"heaterPower\" typeId=\"heater_power\" />\n+\t\t\t<channel id=\"heaterPowerI\" typeId=\"heater_power_I\" />\n+\t\t\t<channel id=\"heaterTargetTemperature\" typeId=\"heater_target_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"cookerhood\">\n+\t\t<label>Cookerhood Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"cookerhoodSpeed\" typeId=\"cookerhood_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"enthalpy\">\n+\t\t<label>Enthalpy Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"enthalpyTemperature\" typeId=\"enthalpy_temperature\" />\n+\t\t\t<channel id=\"enthalpyHumidity\" typeId=\"enthalpy_humidity\" />\n+\t\t\t<channel id=\"enthalpyLevel\" typeId=\"enthalpy_level\" />\n+\t\t\t<channel id=\"enthalpyTime\" typeId=\"enthalpy_time\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"options\">\n+\t\t<label>Option States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isPreheater\" typeId=\"is_preheater\" />\n+\t\t\t<channel id=\"isBypass\" typeId=\"is_bypass\" />\n+\t\t\t<channel id=\"recuType\" typeId=\"recu_type\" />\n+\t\t\t<channel id=\"recuSize\" typeId=\"recu_size\" />\n+\t\t\t<channel id=\"isChimney\" typeId=\"is_chimney\" />\n+\t\t\t<channel id=\"isCookerhood\" typeId=\"is_cookerhood\" />\n+\t\t\t<channel id=\"isHeater\" typeId=\"is_heater\" />\n+\t\t\t<channel id=\"isEnthalpy\" typeId=\"is_enthalpy\" />\n+\t\t\t<channel id=\"isEWT\" typeId=\"is_ewt\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP1\">\n+\t\t<label>Menu P1: Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"menu20Mode\" typeId=\"menu20_mode\" />\n+\t\t\t<channel id=\"menu21Mode\" typeId=\"menu21_mode\" />\n+\t\t\t<channel id=\"menu22Mode\" typeId=\"menu22_mode\" />\n+\t\t\t<channel id=\"menu23Mode\" typeId=\"menu23_mode\" />\n+\t\t\t<channel id=\"menu24Mode\" typeId=\"menu24_mode\" />\n+\t\t\t<channel id=\"menu25Mode\" typeId=\"menu25_mode\" />\n+\t\t\t<channel id=\"menu26Mode\" typeId=\"menu26_mode\" />\n+\t\t\t<channel id=\"menu27Mode\" typeId=\"menu27_mode\" />\n+\t\t\t<channel id=\"menu28Mode\" typeId=\"menu28_mode\" />\n+\t\t\t<channel id=\"menu29Mode\" typeId=\"menu29_mode\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP2\">\n+\t\t<label>Menu P2: Delay Settings</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bathroomStartDelay\" typeId=\"bathroom_start_delay\" />\n+\t\t\t<channel id=\"bathroomEndDelay\" typeId=\"bathroom_end_delay\" />\n+\t\t\t<channel id=\"L1EndDelay\" typeId=\"L1_end_delay\" />\n+\t\t\t<channel id=\"pulseVentilation\" typeId=\"pulse_ventilation\" />\n+\t\t\t<channel id=\"filterWeeks\" typeId=\"filter_weeks\" />\n+\t\t\t<channel id=\"RFShortDelay\" typeId=\"RF_short_delay\" />\n+\t\t\t<channel id=\"RFLongDelay\" typeId=\"RF_long_delay\" />\n+\t\t\t<channel id=\"cookerhoodDelay\" typeId=\"cookerhood_delay\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP9\">\n+\t\t<label>Menu P9: Option Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"chimneyState\" typeId=\"chimney_state\" />\n+\t\t\t<channel id=\"bypassState\" typeId=\"bypass_state\" />\n+\t\t\t<channel id=\"ewtState\" typeId=\"ewt_state\" />\n+\t\t\t<channel id=\"heaterState\" typeId=\"heater_state\" />\n+\t\t\t<channel id=\"vControlState\" typeId=\"v_control_state\" />\n+\t\t\t<channel id=\"frostState\" typeId=\"frost_state\" />\n+\t\t\t<channel id=\"cookerhoodState\" typeId=\"cookerhood_state\" />\n+\t\t\t<channel id=\"enthalpyState\" typeId=\"enthalpy_state\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzNDA1Ng==", "bodyText": "For writable number inputs you should specify a number range with min and max.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402034056", "createdAt": "2020-04-02T03:38:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1596 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"comfoair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"comfoair\">\n+\t\t<label>Generic ComfoAir Ventilation System</label>\n+\t\t<description>Provides a generic access to a ComfoAir compatible ventilation system</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"bindingControl\" typeId=\"bindingControl\" />\n+\t\t\t<channel-group id=\"ccease\" typeId=\"ccease\" />\n+\t\t\t<channel-group id=\"ventilation\" typeId=\"ventilation\" />\n+\t\t\t<channel-group id=\"temperatures\" typeId=\"temperatures\" />\n+\t\t\t<channel-group id=\"times\" typeId=\"times\" />\n+\t\t\t<channel-group id=\"bypass\" typeId=\"bypass\" />\n+\t\t\t<channel-group id=\"preheater\" typeId=\"preheater\" />\n+\t\t\t<channel-group id=\"ewt\" typeId=\"ewt\" />\n+\t\t\t<channel-group id=\"heater\" typeId=\"heater\" />\n+\t\t\t<channel-group id=\"cookerhood\" typeId=\"cookerhood\" />\n+\t\t\t<channel-group id=\"enthalpy\" typeId=\"enthalpy\" />\n+\t\t\t<channel-group id=\"options\" typeId=\"options\" />\n+\t\t\t<channel-group id=\"menuP1\" typeId=\"menuP1\" />\n+\t\t\t<channel-group id=\"menuP2\" typeId=\"menuP2\" />\n+\t\t\t<channel-group id=\"menuP9\" typeId=\"menuP9\" />\n+\t\t\t<channel-group id=\"inputs\" typeId=\"inputs\" />\n+\t\t\t<channel-group id=\"analog\" typeId=\"analog\" />\n+\t\t\t<channel-group id=\"error\" typeId=\"error\" />\n+\t\t\t<channel-group id=\"software\" typeId=\"software\" />\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial port that the ComfoAir is connected to</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-group-type id=\"bindingControl\">\n+\t\t<label>Binding Control</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activate\" typeId=\"activate\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ccease\">\n+\t\t<label>CC Ease Functions</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanLevel\" typeId=\"fan_evel\" />\n+\t\t\t<channel id=\"targetTemperature\" typeId=\"target_temperature\" />\n+\t\t\t<channel id=\"filterError\" typeId=\"filter_error\" />\n+\t\t\t<channel id=\"errorMessage\" typeId=\"error_message\" />\n+\t\t\t<channel id=\"filterReset\" typeId=\"filter_reset\" />\n+\t\t\t<channel id=\"errorReset\" typeId=\"error_reset\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ventilation\">\n+\t\t<label>Ventilation Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanOut0\" typeId=\"fan_out_0\" />\n+\t\t\t<channel id=\"fanOut1\" typeId=\"fan_out_1\" />\n+\t\t\t<channel id=\"fanOut2\" typeId=\"fan_out_2\" />\n+\t\t\t<channel id=\"fanOut3\" typeId=\"fan_out_3\" />\n+\t\t\t<channel id=\"fanIn0\" typeId=\"fan_in_0\" />\n+\t\t\t<channel id=\"fanIn1\" typeId=\"fan_in_1\" />\n+\t\t\t<channel id=\"fanIn2\" typeId=\"fan_in_2\" />\n+\t\t\t<channel id=\"fanIn3\" typeId=\"fan_in_3\" />\n+\t\t\t<channel id=\"fanInPercent\" typeId=\"fan_in_percent\" />\n+\t\t\t<channel id=\"fanOutPercent\" typeId=\"fan_out_percent\" />\n+\t\t\t<channel id=\"fanInRPM\" typeId=\"fan_in_RPM\" />\n+\t\t\t<channel id=\"fanOutRPM\" typeId=\"fan_out_RPM\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"temperatures\">\n+\t\t<label>Temperature Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"outdoorTemperatureIn\" typeId=\"outdoor_temperature_in\" />\n+\t\t\t<channel id=\"outdoorTemperatureOut\" typeId=\"outdoor_temperature_out\" />\n+\t\t\t<channel id=\"indoorTemperatureIn\" typeId=\"indoor_temperature_in\" />\n+\t\t\t<channel id=\"indoorTemperatureOut\" typeId=\"indoor_temperature_out\" />\n+\t\t\t<channel id=\"isT1Sensor\" typeId=\"is_T1_sensor\" />\n+\t\t\t<channel id=\"isT2Sensor\" typeId=\"is_T2_sensor\" />\n+\t\t\t<channel id=\"isT3Sensor\" typeId=\"is_T3_sensor\" />\n+\t\t\t<channel id=\"isT4Sensor\" typeId=\"is_T4_sensor\" />\n+\t\t\t<channel id=\"isEWTSensor\" typeId=\"is_EWT_sensor\" />\n+\t\t\t<channel id=\"isHeaterSensor\" typeId=\"is_heater_sensor\" />\n+\t\t\t<channel id=\"isCookerhoodSensor\" typeId=\"is_cookerhood_sensor\" />\n+\t\t\t<channel id=\"ewtTemperature\" typeId=\"ewt_temperature\" />\n+\t\t\t<channel id=\"heaterTemperature\" typeId=\"heater_temperature\" />\n+\t\t\t<channel id=\"cookerhoodTemperature\" typeId=\"cookerhood_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"times\">\n+\t\t<label>Uptimes</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"level0Time\" typeId=\"level0_time\" />\n+\t\t\t<channel id=\"level1Time\" typeId=\"level1_time\" />\n+\t\t\t<channel id=\"level2Time\" typeId=\"level2_time\" />\n+\t\t\t<channel id=\"level3Time\" typeId=\"level3_time\" />\n+\t\t\t<channel id=\"freezeTime\" typeId=\"freeze_time\" />\n+\t\t\t<channel id=\"preheaterTime\" typeId=\"preheater_time\" />\n+\t\t\t<channel id=\"bypassTime\" typeId=\"bypass_time\" />\n+\t\t\t<channel id=\"filterHours\" typeId=\"filter_hours\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"bypass\">\n+\t\t<label>Bypass Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bypassFactor\" typeId=\"bypass_factor\" />\n+\t\t\t<channel id=\"bypassLevel\" typeId=\"bypass_level\" />\n+\t\t\t<channel id=\"bypassCorrection\" typeId=\"bypass_correction\" />\n+\t\t\t<channel id=\"bypassSummer\" typeId=\"bypass_summer\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"preheater\">\n+\t\t<label>Preheater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"preheaterValve\" typeId=\"preheater_valve\" />\n+\t\t\t<channel id=\"preheaterFrostProtect\" typeId=\"preheater_frost_protect\" />\n+\t\t\t<channel id=\"preheaterHeating\" typeId=\"preheater_heating\" />\n+\t\t\t<channel id=\"preheaterFrostTime\" typeId=\"preheater_frost_time\" />\n+\t\t\t<channel id=\"preheaterSafety\" typeId=\"preheater_safety\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ewt\">\n+\t\t<label>EWT Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"ewtTemperatureLow\" typeId=\"ewt_temperature_low\" />\n+\t\t\t<channel id=\"ewtTemperatureHigh\" typeId=\"ewt_temperature_high\" />\n+\t\t\t<channel id=\"ewtSpeed\" typeId=\"ewt_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"heater\">\n+\t\t<label>Heater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"heaterPower\" typeId=\"heater_power\" />\n+\t\t\t<channel id=\"heaterPowerI\" typeId=\"heater_power_I\" />\n+\t\t\t<channel id=\"heaterTargetTemperature\" typeId=\"heater_target_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"cookerhood\">\n+\t\t<label>Cookerhood Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"cookerhoodSpeed\" typeId=\"cookerhood_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"enthalpy\">\n+\t\t<label>Enthalpy Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"enthalpyTemperature\" typeId=\"enthalpy_temperature\" />\n+\t\t\t<channel id=\"enthalpyHumidity\" typeId=\"enthalpy_humidity\" />\n+\t\t\t<channel id=\"enthalpyLevel\" typeId=\"enthalpy_level\" />\n+\t\t\t<channel id=\"enthalpyTime\" typeId=\"enthalpy_time\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"options\">\n+\t\t<label>Option States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isPreheater\" typeId=\"is_preheater\" />\n+\t\t\t<channel id=\"isBypass\" typeId=\"is_bypass\" />\n+\t\t\t<channel id=\"recuType\" typeId=\"recu_type\" />\n+\t\t\t<channel id=\"recuSize\" typeId=\"recu_size\" />\n+\t\t\t<channel id=\"isChimney\" typeId=\"is_chimney\" />\n+\t\t\t<channel id=\"isCookerhood\" typeId=\"is_cookerhood\" />\n+\t\t\t<channel id=\"isHeater\" typeId=\"is_heater\" />\n+\t\t\t<channel id=\"isEnthalpy\" typeId=\"is_enthalpy\" />\n+\t\t\t<channel id=\"isEWT\" typeId=\"is_ewt\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP1\">\n+\t\t<label>Menu P1: Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"menu20Mode\" typeId=\"menu20_mode\" />\n+\t\t\t<channel id=\"menu21Mode\" typeId=\"menu21_mode\" />\n+\t\t\t<channel id=\"menu22Mode\" typeId=\"menu22_mode\" />\n+\t\t\t<channel id=\"menu23Mode\" typeId=\"menu23_mode\" />\n+\t\t\t<channel id=\"menu24Mode\" typeId=\"menu24_mode\" />\n+\t\t\t<channel id=\"menu25Mode\" typeId=\"menu25_mode\" />\n+\t\t\t<channel id=\"menu26Mode\" typeId=\"menu26_mode\" />\n+\t\t\t<channel id=\"menu27Mode\" typeId=\"menu27_mode\" />\n+\t\t\t<channel id=\"menu28Mode\" typeId=\"menu28_mode\" />\n+\t\t\t<channel id=\"menu29Mode\" typeId=\"menu29_mode\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP2\">\n+\t\t<label>Menu P2: Delay Settings</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bathroomStartDelay\" typeId=\"bathroom_start_delay\" />\n+\t\t\t<channel id=\"bathroomEndDelay\" typeId=\"bathroom_end_delay\" />\n+\t\t\t<channel id=\"L1EndDelay\" typeId=\"L1_end_delay\" />\n+\t\t\t<channel id=\"pulseVentilation\" typeId=\"pulse_ventilation\" />\n+\t\t\t<channel id=\"filterWeeks\" typeId=\"filter_weeks\" />\n+\t\t\t<channel id=\"RFShortDelay\" typeId=\"RF_short_delay\" />\n+\t\t\t<channel id=\"RFLongDelay\" typeId=\"RF_long_delay\" />\n+\t\t\t<channel id=\"cookerhoodDelay\" typeId=\"cookerhood_delay\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP9\">\n+\t\t<label>Menu P9: Option Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"chimneyState\" typeId=\"chimney_state\" />\n+\t\t\t<channel id=\"bypassState\" typeId=\"bypass_state\" />\n+\t\t\t<channel id=\"ewtState\" typeId=\"ewt_state\" />\n+\t\t\t<channel id=\"heaterState\" typeId=\"heater_state\" />\n+\t\t\t<channel id=\"vControlState\" typeId=\"v_control_state\" />\n+\t\t\t<channel id=\"frostState\" typeId=\"frost_state\" />\n+\t\t\t<channel id=\"cookerhoodState\" typeId=\"cookerhood_state\" />\n+\t\t\t<channel id=\"enthalpyState\" typeId=\"enthalpy_state\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"inputs\">\n+\t\t<label>Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isL1Switch\" typeId=\"is_L1_switch\" />\n+\t\t\t<channel id=\"isL2Switch\" typeId=\"is_L2_switch\" />\n+\t\t\t<channel id=\"isBathroomSwitch\" typeId=\"is_bathroom_switch\" />\n+\t\t\t<channel id=\"isCookerhoodSwitch\" typeId=\"is_cookerhood_switch\" />\n+\t\t\t<channel id=\"isExternalFilter\" typeId=\"is_external_filter\" />\n+\t\t\t<channel id=\"isWTW\" typeId=\"is_wtw\" />\n+\t\t\t<channel id=\"isBathroom2Switch\" typeId=\"is_bathroom2_switch\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"analog\">\n+\t\t<label>Analog Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isAnalog1\" typeId=\"is_analog1\" />\n+\t\t\t<channel id=\"isAnalog2\" typeId=\"is_analog2\" />\n+\t\t\t<channel id=\"isAnalog3\" typeId=\"is_analog3\" />\n+\t\t\t<channel id=\"isAnalog4\" typeId=\"is_analog4\" />\n+\t\t\t<channel id=\"isRF\" typeId=\"is_RF\" />\n+\t\t\t<channel id=\"analog1Mode\" typeId=\"analog1_mode\" />\n+\t\t\t<channel id=\"analog2Mode\" typeId=\"analog2_mode\" />\n+\t\t\t<channel id=\"analog3Mode\" typeId=\"analog3_mode\" />\n+\t\t\t<channel id=\"analog4Mode\" typeId=\"analog4_mode\" />\n+\t\t\t<channel id=\"RFMode\" typeId=\"RF_mode\" />\n+\t\t\t<channel id=\"analog1Negative\" typeId=\"analog1_negative\" />\n+\t\t\t<channel id=\"analog2Negative\" typeId=\"analog2_negative\" />\n+\t\t\t<channel id=\"analog3Negative\" typeId=\"analog3_negative\" />\n+\t\t\t<channel id=\"analog4Negative\" typeId=\"analog4_negative\" />\n+\t\t\t<channel id=\"RFNegative\" typeId=\"RF_negative\" />\n+\t\t\t<channel id=\"analog1Volt\" typeId=\"analog1_volt\" />\n+\t\t\t<channel id=\"analog1Min\" typeId=\"analog1_min\" />\n+\t\t\t<channel id=\"analog1Max\" typeId=\"analog1_max\" />\n+\t\t\t<channel id=\"analog1Value\" typeId=\"analog1_value\" />\n+\t\t\t<channel id=\"analog2Volt\" typeId=\"analog2_volt\" />\n+\t\t\t<channel id=\"analog2Min\" typeId=\"analog2_min\" />\n+\t\t\t<channel id=\"analog2Max\" typeId=\"analog2_max\" />\n+\t\t\t<channel id=\"analog2Value\" typeId=\"analog2_value\" />\n+\t\t\t<channel id=\"analog3Volt\" typeId=\"analog3_volt\" />\n+\t\t\t<channel id=\"analog3Min\" typeId=\"analog3_min\" />\n+\t\t\t<channel id=\"analog3Max\" typeId=\"analog3_max\" />\n+\t\t\t<channel id=\"analog3Value\" typeId=\"analog3_value\" />\n+\t\t\t<channel id=\"analog4Volt\" typeId=\"analog4_volt\" />\n+\t\t\t<channel id=\"analog4Min\" typeId=\"analog4_min\" />\n+\t\t\t<channel id=\"analog4Max\" typeId=\"analog4_max\" />\n+\t\t\t<channel id=\"analog4Value\" typeId=\"analog4_value\" />\n+\t\t\t<channel id=\"RFMin\" typeId=\"RF_min\" />\n+\t\t\t<channel id=\"RFMax\" typeId=\"RF_max\" />\n+\t\t\t<channel id=\"RFValue\" typeId=\"RF_value\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"error\">\n+\t\t<label>Error States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"errorACurrent\" typeId=\"errorA_current\" />\n+\t\t\t<channel id=\"errorECurrent\" typeId=\"errorE_current\" />\n+\t\t\t<channel id=\"errorALast\" typeId=\"errorA_last\" />\n+\t\t\t<channel id=\"errorELast\" typeId=\"errorE_last\" />\n+\t\t\t<channel id=\"errorAPrelast\" typeId=\"errorA_prelast\" />\n+\t\t\t<channel id=\"errorEPrelast\" typeId=\"errorE_prelast\" />\n+\t\t\t<channel id=\"errorAPrePrelast\" typeId=\"errorA_pre_prelast\" />\n+\t\t\t<channel id=\"errorEPrePrelast\" typeId=\"errorE_pre_prelast\" />\n+\t\t\t<channel id=\"errorEACurrent\" typeId=\"errorEA_current\" />\n+\t\t\t<channel id=\"errorEALast\" typeId=\"errorEA_last\" />\n+\t\t\t<channel id=\"errorEAPrelast\" typeId=\"errorEA_prelast\" />\n+\t\t\t<channel id=\"errorEAPrePrelast\" typeId=\"errorEA_pre_prelast\" />\n+\t\t\t<channel id=\"errorAHighCurrent\" typeId=\"errorA_high_current\" />\n+\t\t\t<channel id=\"errorAHighLast\" typeId=\"errorA_high_last\" />\n+\t\t\t<channel id=\"errorAHighPrelast\" typeId=\"errorA_high_prelast\" />\n+\t\t\t<channel id=\"errorAHighPrePrelast\" typeId=\"errorA_high_pre_prelast\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"software\">\n+\t\t<label>Software Version</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"softwareMainVersion\" typeId=\"software_main_version\" />\n+\t\t\t<channel id=\"softwareMinorVersion\" typeId=\"software_minor_version\" />\n+\t\t\t<channel id=\"softwareBetaVersion\" typeId=\"software_beta_version\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-type id=\"activate\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Activate Binding Control</label>\n+\t\t<description>Activate (control through openHAB) or deactivate (return control to CCEase) binding control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_evel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Level</label>\n+\t\t<description>Fan level</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Away</option>\n+\t\t\t\t<option value=\"2\">Level 1</option>\n+\t\t\t\t<option value=\"3\">Level 2</option>\n+\t\t\t\t<option value=\"4\">Level 3</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"target_temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Target Temperature</label>\n+\t\t<description>Target (comfort) temperature</description>\n+\t\t<category>Temperature</category>\n+\t\t<state min=\"12\" max=\"28\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_error\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Filter Error</label>\n+\t\t<description>Filter full</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"error_message\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Message</label>\n+\t\t<description>Current errors</description>\n+\t\t<category>Text</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_reset\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Filter Reset</label>\n+\t\t<description>Reset filter uptime</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"error_reset\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Error Reset</label>\n+\t\t<description>Reset errors</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_0\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 0 (away)</label>\n+\t\t<description>Fan level 0 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"97\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_1\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 1</label>\n+\t\t<description>Fan level 1 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"16\" max=\"98\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_2\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 2</label>\n+\t\t<description>Fan level 2 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"17\" max=\"99\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_3\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 3</label>\n+\t\t<description>Fan level 3 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"18\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_0\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 0 (away)</label>\n+\t\t<description>Fan level 0 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"97\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_1\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 1</label>\n+\t\t<description>Fan level 1 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"16\" max=\"98\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_2\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 2</label>\n+\t\t<description>Fan level 2 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"17\" max=\"99\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_3\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 3</label>\n+\t\t<description>Fan level 3 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"18\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_percent\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In (%)</label>\n+\t\t<description>Current relative speed (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_percent\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out (%)</label>\n+\t\t<description>Current relative speed (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_RPM\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In (rpm)</label>\n+\t\t<description>Current absolute speed (rpm) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_RPM\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out (rpm)</label>\n+\t\t<description>Current absolute speed (rpm) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"outdoor_temperature_in\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Outdoor Temperature Incoming</label>\n+\t\t<description>Intake air temperature (outside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"outdoor_temperature_out\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Outdoor Temperature Outgoing</label>\n+\t\t<description>Outlet air temperature (outside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"indoor_temperature_in\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Indoor Temperature Incoming</label>\n+\t\t<description>Inlet air temperature (inside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"indoor_temperature_out\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Indoor Temperature Outgoing</label>\n+\t\t<description>Uptake air temperature (inside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T1_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T1 Available</label>\n+\t\t<description>Availability of temperature sensor T1 (outdoor in)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T2_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T2 Available</label>\n+\t\t<description>Availability of temperature sensor T2 (indoor in)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T3_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T3 Available</label>\n+\t\t<description>Availability of temperature sensor T3 (indoor out)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T4_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T4 Available</label>\n+\t\t<description>Availability of temperature sensor T4 (outdoor out)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_EWT_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>EWT Sensor Available</label>\n+\t\t<description>Availability of EWT temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_heater_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heater Sensor Available</label>\n+\t\t<description>Availability of heater temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_cookerhood_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood Sensor Available</label>\n+\t\t<description>Availability of cookerhood temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"chimney_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Chimney Control State</label>\n+\t\t<description>State of the chimney control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bypass State</label>\n+\t\t<description>State of the bypass (ON = open / OFF = closed)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>EWT State</label>\n+\t\t<description>State of the EWT valve (ON = open / OFF = closed)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heater State</label>\n+\t\t<description>State of the heater</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"v_control_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>0-10V Control State</label>\n+\t\t<description>State of the 0-10V control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"frost_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Antifrost State</label>\n+\t\t<description>State of the antifrost control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood State</label>\n+\t\t<description>State of the cookerhood control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Enthalpy State</label>\n+\t\t<description>State of the enthalpy module</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>EWT Temperature</label>\n+\t\t<description>Temperature of geothermal heat exchanger sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Heater Temperature</label>\n+\t\t<description>Temperature of heater sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Cookerhood Temperature</label>\n+\t\t<description>Temperature of cookerhood sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"level0_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Level 0 Duration</label>\n+\t\t<description>Uptime at level 0 (away)</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"level1_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Level 1 Duration</label>\n+\t\t<description>Uptime at level 1</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"level2_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Level 2 Duration</label>\n+\t\t<description>Uptime at level 2</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"level3_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Level 3 Duration</label>\n+\t\t<description>Uptime at level 3</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"freeze_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Antifrost Duration</label>\n+\t\t<description>Uptime of antifrost</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Preheater Duration</label>\n+\t\t<description>Uptime of preheater</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bypass Duration</label>\n+\t\t<description>Hours of bypass open</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_hours\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Filter Duration</label>\n+\t\t<description>Uptime of the filter</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_factor\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bypass Factor</label>\n+\t\t<description>Bypass factor value</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_level\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bypass Level</label>\n+\t\t<description>Bypass level state</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_correction\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bypass Correction</label>\n+\t\t<description>Bypass correction state</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_summer\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bypass Summer Mode</label>\n+\t\t<description>Bypass summer mode</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_valve\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Preheater Valve</label>\n+\t\t<description>State of the preheater valve</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_frost_protect\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Frost Protection</label>\n+\t\t<description>State of the frost protection</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_heating\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Preheater</label>\n+\t\t<description>State of the preheater</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_frost_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Preheater Frost Time</label>\n+\t\t<description>Frost minutes</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_safety\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Preheater Frost Safety</label>\n+\t\t<description>Frost safety setting</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_temperature_low\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>EWT Temperature (low)</label>\n+\t\t<description>Lower temperature of the geothermal heat exchanger</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_temperature_high\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>EWT Temperature (high)</label>\n+\t\t<description>Upper temperature of the geothermal heat exchanger</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_speed\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>EWT Speed Up (%)</label>\n+\t\t<description>Speed up of the geothermal heat exchanger</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_power\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Heater Power</label>\n+\t\t<description>Heater power value</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_power_I\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Heater Power I-Parameter</label>\n+\t\t<description>Heater power I-parameter value</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_target_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Heater Target Temperature</label>\n+\t\t<description>Target temperature of the heater</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_speed\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cookerhood Speed Up (%)</label>\n+\t\t<description>Speed up of the cookerhood</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Enthalpy Sensor Temperature</label>\n+\t\t<description>Temperature of the enthalpy sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_humidity\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Enthalpy Sensor Humidity</label>\n+\t\t<description>Humidity of the enthalpy sensor</description>\n+\t\t<category>Humidity</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_level\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Enthalpy Sensor Level</label>\n+\t\t<description>Level of the enthalpy sensor</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Enthalpy Sensor Timer</label>\n+\t\t<description>Timer state of the enthalpy sensor</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_preheater\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Preheater</label>\n+\t\t<description>Preheater option installed</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_bypass\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bypass</label>\n+\t\t<description>Bypass option installed</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"recu_type\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Comfoair Type</label>\n+\t\t<description>Type of the ComfoAir (1 = left / 2 = right)</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Left</option>\n+\t\t\t\t<option value=\"2\">Right</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"recu_size\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Comfoair Size</label>\n+\t\t<description>Size of the ComfoAir (1 = big / 2 = small)</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Big</option>\n+\t\t\t\t<option value=\"2\">Small</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_chimney\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Chimney</label>\n+\t\t<description>Chimney option installed</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_cookerhood\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood</label>\n+\t\t<description>Cookerhood option installed</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_heater\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heater</label>\n+\t\t<description>Heater option installed</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_enthalpy\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Enthalpy</label>\n+\t\t<description>Enthalpy option installed</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"0\">Not installed</option>\n+\t\t\t\t<option value=\"1\">Installed</option>\n+\t\t\t\t<option value=\"2\">Installed w/o sensor</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_ewt\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>EWT</label>\n+\t\t<description>EWT option installed</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"0\">Not installed</option>\n+\t\t\t\t<option value=\"1\">Regulated</option>\n+\t\t\t\t<option value=\"2\">Not Regulated</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_L1_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>L1 Switch</label>\n+\t\t<description>Availability of L1 step switch</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_L2_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>L2 Switch</label>\n+\t\t<description>Availability of L2 step switch</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_bathroom_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bathroom Switch</label>\n+\t\t<description>Availability of bathroom switch</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_cookerhood_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood Switch</label>\n+\t\t<description>Availability of cookerhood switch</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_external_filter\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>External Filter</label>\n+\t\t<description>Availability of external filter</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_wtw\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heat Recovery</label>\n+\t\t<description>Availability of heat recovery (WTW)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_bathroom2_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bathroom Switch 2</label>\n+\t\t<description>Availability of bathroom switch 2 (luxe)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\n+\t<channel-type id=\"menu20_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 20 Mode (P10)</label>\n+\t\t<description>State of menu 20 mode (P10)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu21_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 21 Mode (P11)</label>\n+\t\t<description>State of menu 21 mode (P11)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu22_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 22 Mode (P12)</label>\n+\t\t<description>State of menu 22 mode (P12)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu23_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 23 Mode (P13)</label>\n+\t\t<description>State of menu 23 mode (P13)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu24_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 24 Mode (P14)</label>\n+\t\t<description>State of menu 24 mode (P14)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu25_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 25 Mode (P15)</label>\n+\t\t<description>State of menu 25 mode (P15)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu26_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 26 Mode (P16)</label>\n+\t\t<description>State of menu 26 mode (P16)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu27_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 27 Mode (P17)</label>\n+\t\t<description>State of menu 27 mode (P17)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu28_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 28 Mode (P18)</label>\n+\t\t<description>State of menu 28 mode (P18)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu29_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 29 Mode (P19)</label>\n+\t\t<description>State of menu 29 mode (P19)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cookerhood Delay (P20)</label>\n+\t\t<description>End delay for cooker hood control (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"180\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bathroom_start_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bathroom Switch Start Delay (P21)</label>\n+\t\t<description>Start delay for bathroom switch (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bathroom_end_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bathroom Switch End Delay (P22)</label>\n+\t\t<description>End delay for bathroom switch (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"L1_end_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>L1 Switch End Delay (P23)</label>\n+\t\t<description>End delay for L1 switch (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_weeks\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Filter Period (P24)</label>\n+\t\t<description>Usage period until filter pollution message (weeks)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"10\" max=\"26\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_short_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>RF Short Delay (P25)</label>\n+\t\t<description>End delay (RF short actuation) for ventilation level 3 (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"1\" max=\"20\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_long_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>RF Long Delay (P26)</label>\n+\t\t<description>End delay (RF long actuation) for ventilation level 3 (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"1\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"pulse_ventilation\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Pulse Ventilation Period (P27)</label>\n+\t\t<description>Period for pulse ventilation (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_analog1\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 1 Availability</label>\n+\t\t<description>Availability of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_analog2\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 2 Availability</label>\n+\t\t<description>Availability of analog input 2</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_analog3\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 3 Availability</label>\n+\t\t<description>Availability of analog input 3</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_analog4\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 4 Availability</label>\n+\t\t<description>Availability of analog input 4</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_RF\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>RF Input Availability</label>\n+\t\t<description>Availability of RF input</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 1 State</label>\n+\t\t<description>State of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog2_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 2 State</label>\n+\t\t<description>State of analog input 2</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog3_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 3 State</label>\n+\t\t<description>State of analog input 3</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog4_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 4 State</label>\n+\t\t<description>State of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>RF Input State</label>\n+\t\t<description>State of RF input</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 1 Postive/Negative</label>\n+\t\t<description>Postive/Negative state of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog2_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 2 Postive/Negative</label>\n+\t\t<description>Postive/Negative state of analog input 2</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog3_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 3 Postive/Negative</label>\n+\t\t<description>Postive/Negative state of analog input 3</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog4_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 4 Postive/Negative</label>\n+\t\t<description>Postive/Negative state of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>RF Input Postive/Negative</label>\n+\t\t<description>Postive/Negative state of RF input</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_volt\" advanced=\"true\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Analog Input 1 Voltage Level</label>\n+\t\t<description>Voltage level of analog input 1</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_min\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 1 Min</label>\n+\t\t<description>Minimum setting for analog input 1</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_max\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 1 Max</label>\n+\t\t<description>Maximum setting for analog input 1</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_value\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 1 Target</label>\n+\t\t<description>Target setting for analog input 1</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 1321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzNDY1OA==", "bodyText": "These would be better suited as Thing properties instead of channels.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402034658", "createdAt": "2020-04-02T03:40:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1596 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"comfoair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"comfoair\">\n+\t\t<label>Generic ComfoAir Ventilation System</label>\n+\t\t<description>Provides a generic access to a ComfoAir compatible ventilation system</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"bindingControl\" typeId=\"bindingControl\" />\n+\t\t\t<channel-group id=\"ccease\" typeId=\"ccease\" />\n+\t\t\t<channel-group id=\"ventilation\" typeId=\"ventilation\" />\n+\t\t\t<channel-group id=\"temperatures\" typeId=\"temperatures\" />\n+\t\t\t<channel-group id=\"times\" typeId=\"times\" />\n+\t\t\t<channel-group id=\"bypass\" typeId=\"bypass\" />\n+\t\t\t<channel-group id=\"preheater\" typeId=\"preheater\" />\n+\t\t\t<channel-group id=\"ewt\" typeId=\"ewt\" />\n+\t\t\t<channel-group id=\"heater\" typeId=\"heater\" />\n+\t\t\t<channel-group id=\"cookerhood\" typeId=\"cookerhood\" />\n+\t\t\t<channel-group id=\"enthalpy\" typeId=\"enthalpy\" />\n+\t\t\t<channel-group id=\"options\" typeId=\"options\" />\n+\t\t\t<channel-group id=\"menuP1\" typeId=\"menuP1\" />\n+\t\t\t<channel-group id=\"menuP2\" typeId=\"menuP2\" />\n+\t\t\t<channel-group id=\"menuP9\" typeId=\"menuP9\" />\n+\t\t\t<channel-group id=\"inputs\" typeId=\"inputs\" />\n+\t\t\t<channel-group id=\"analog\" typeId=\"analog\" />\n+\t\t\t<channel-group id=\"error\" typeId=\"error\" />\n+\t\t\t<channel-group id=\"software\" typeId=\"software\" />\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial port that the ComfoAir is connected to</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-group-type id=\"bindingControl\">\n+\t\t<label>Binding Control</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activate\" typeId=\"activate\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ccease\">\n+\t\t<label>CC Ease Functions</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanLevel\" typeId=\"fan_evel\" />\n+\t\t\t<channel id=\"targetTemperature\" typeId=\"target_temperature\" />\n+\t\t\t<channel id=\"filterError\" typeId=\"filter_error\" />\n+\t\t\t<channel id=\"errorMessage\" typeId=\"error_message\" />\n+\t\t\t<channel id=\"filterReset\" typeId=\"filter_reset\" />\n+\t\t\t<channel id=\"errorReset\" typeId=\"error_reset\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ventilation\">\n+\t\t<label>Ventilation Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanOut0\" typeId=\"fan_out_0\" />\n+\t\t\t<channel id=\"fanOut1\" typeId=\"fan_out_1\" />\n+\t\t\t<channel id=\"fanOut2\" typeId=\"fan_out_2\" />\n+\t\t\t<channel id=\"fanOut3\" typeId=\"fan_out_3\" />\n+\t\t\t<channel id=\"fanIn0\" typeId=\"fan_in_0\" />\n+\t\t\t<channel id=\"fanIn1\" typeId=\"fan_in_1\" />\n+\t\t\t<channel id=\"fanIn2\" typeId=\"fan_in_2\" />\n+\t\t\t<channel id=\"fanIn3\" typeId=\"fan_in_3\" />\n+\t\t\t<channel id=\"fanInPercent\" typeId=\"fan_in_percent\" />\n+\t\t\t<channel id=\"fanOutPercent\" typeId=\"fan_out_percent\" />\n+\t\t\t<channel id=\"fanInRPM\" typeId=\"fan_in_RPM\" />\n+\t\t\t<channel id=\"fanOutRPM\" typeId=\"fan_out_RPM\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"temperatures\">\n+\t\t<label>Temperature Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"outdoorTemperatureIn\" typeId=\"outdoor_temperature_in\" />\n+\t\t\t<channel id=\"outdoorTemperatureOut\" typeId=\"outdoor_temperature_out\" />\n+\t\t\t<channel id=\"indoorTemperatureIn\" typeId=\"indoor_temperature_in\" />\n+\t\t\t<channel id=\"indoorTemperatureOut\" typeId=\"indoor_temperature_out\" />\n+\t\t\t<channel id=\"isT1Sensor\" typeId=\"is_T1_sensor\" />\n+\t\t\t<channel id=\"isT2Sensor\" typeId=\"is_T2_sensor\" />\n+\t\t\t<channel id=\"isT3Sensor\" typeId=\"is_T3_sensor\" />\n+\t\t\t<channel id=\"isT4Sensor\" typeId=\"is_T4_sensor\" />\n+\t\t\t<channel id=\"isEWTSensor\" typeId=\"is_EWT_sensor\" />\n+\t\t\t<channel id=\"isHeaterSensor\" typeId=\"is_heater_sensor\" />\n+\t\t\t<channel id=\"isCookerhoodSensor\" typeId=\"is_cookerhood_sensor\" />\n+\t\t\t<channel id=\"ewtTemperature\" typeId=\"ewt_temperature\" />\n+\t\t\t<channel id=\"heaterTemperature\" typeId=\"heater_temperature\" />\n+\t\t\t<channel id=\"cookerhoodTemperature\" typeId=\"cookerhood_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"times\">\n+\t\t<label>Uptimes</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"level0Time\" typeId=\"level0_time\" />\n+\t\t\t<channel id=\"level1Time\" typeId=\"level1_time\" />\n+\t\t\t<channel id=\"level2Time\" typeId=\"level2_time\" />\n+\t\t\t<channel id=\"level3Time\" typeId=\"level3_time\" />\n+\t\t\t<channel id=\"freezeTime\" typeId=\"freeze_time\" />\n+\t\t\t<channel id=\"preheaterTime\" typeId=\"preheater_time\" />\n+\t\t\t<channel id=\"bypassTime\" typeId=\"bypass_time\" />\n+\t\t\t<channel id=\"filterHours\" typeId=\"filter_hours\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"bypass\">\n+\t\t<label>Bypass Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bypassFactor\" typeId=\"bypass_factor\" />\n+\t\t\t<channel id=\"bypassLevel\" typeId=\"bypass_level\" />\n+\t\t\t<channel id=\"bypassCorrection\" typeId=\"bypass_correction\" />\n+\t\t\t<channel id=\"bypassSummer\" typeId=\"bypass_summer\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"preheater\">\n+\t\t<label>Preheater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"preheaterValve\" typeId=\"preheater_valve\" />\n+\t\t\t<channel id=\"preheaterFrostProtect\" typeId=\"preheater_frost_protect\" />\n+\t\t\t<channel id=\"preheaterHeating\" typeId=\"preheater_heating\" />\n+\t\t\t<channel id=\"preheaterFrostTime\" typeId=\"preheater_frost_time\" />\n+\t\t\t<channel id=\"preheaterSafety\" typeId=\"preheater_safety\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ewt\">\n+\t\t<label>EWT Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"ewtTemperatureLow\" typeId=\"ewt_temperature_low\" />\n+\t\t\t<channel id=\"ewtTemperatureHigh\" typeId=\"ewt_temperature_high\" />\n+\t\t\t<channel id=\"ewtSpeed\" typeId=\"ewt_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"heater\">\n+\t\t<label>Heater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"heaterPower\" typeId=\"heater_power\" />\n+\t\t\t<channel id=\"heaterPowerI\" typeId=\"heater_power_I\" />\n+\t\t\t<channel id=\"heaterTargetTemperature\" typeId=\"heater_target_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"cookerhood\">\n+\t\t<label>Cookerhood Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"cookerhoodSpeed\" typeId=\"cookerhood_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"enthalpy\">\n+\t\t<label>Enthalpy Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"enthalpyTemperature\" typeId=\"enthalpy_temperature\" />\n+\t\t\t<channel id=\"enthalpyHumidity\" typeId=\"enthalpy_humidity\" />\n+\t\t\t<channel id=\"enthalpyLevel\" typeId=\"enthalpy_level\" />\n+\t\t\t<channel id=\"enthalpyTime\" typeId=\"enthalpy_time\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"options\">\n+\t\t<label>Option States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isPreheater\" typeId=\"is_preheater\" />\n+\t\t\t<channel id=\"isBypass\" typeId=\"is_bypass\" />\n+\t\t\t<channel id=\"recuType\" typeId=\"recu_type\" />\n+\t\t\t<channel id=\"recuSize\" typeId=\"recu_size\" />\n+\t\t\t<channel id=\"isChimney\" typeId=\"is_chimney\" />\n+\t\t\t<channel id=\"isCookerhood\" typeId=\"is_cookerhood\" />\n+\t\t\t<channel id=\"isHeater\" typeId=\"is_heater\" />\n+\t\t\t<channel id=\"isEnthalpy\" typeId=\"is_enthalpy\" />\n+\t\t\t<channel id=\"isEWT\" typeId=\"is_ewt\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP1\">\n+\t\t<label>Menu P1: Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"menu20Mode\" typeId=\"menu20_mode\" />\n+\t\t\t<channel id=\"menu21Mode\" typeId=\"menu21_mode\" />\n+\t\t\t<channel id=\"menu22Mode\" typeId=\"menu22_mode\" />\n+\t\t\t<channel id=\"menu23Mode\" typeId=\"menu23_mode\" />\n+\t\t\t<channel id=\"menu24Mode\" typeId=\"menu24_mode\" />\n+\t\t\t<channel id=\"menu25Mode\" typeId=\"menu25_mode\" />\n+\t\t\t<channel id=\"menu26Mode\" typeId=\"menu26_mode\" />\n+\t\t\t<channel id=\"menu27Mode\" typeId=\"menu27_mode\" />\n+\t\t\t<channel id=\"menu28Mode\" typeId=\"menu28_mode\" />\n+\t\t\t<channel id=\"menu29Mode\" typeId=\"menu29_mode\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP2\">\n+\t\t<label>Menu P2: Delay Settings</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bathroomStartDelay\" typeId=\"bathroom_start_delay\" />\n+\t\t\t<channel id=\"bathroomEndDelay\" typeId=\"bathroom_end_delay\" />\n+\t\t\t<channel id=\"L1EndDelay\" typeId=\"L1_end_delay\" />\n+\t\t\t<channel id=\"pulseVentilation\" typeId=\"pulse_ventilation\" />\n+\t\t\t<channel id=\"filterWeeks\" typeId=\"filter_weeks\" />\n+\t\t\t<channel id=\"RFShortDelay\" typeId=\"RF_short_delay\" />\n+\t\t\t<channel id=\"RFLongDelay\" typeId=\"RF_long_delay\" />\n+\t\t\t<channel id=\"cookerhoodDelay\" typeId=\"cookerhood_delay\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP9\">\n+\t\t<label>Menu P9: Option Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"chimneyState\" typeId=\"chimney_state\" />\n+\t\t\t<channel id=\"bypassState\" typeId=\"bypass_state\" />\n+\t\t\t<channel id=\"ewtState\" typeId=\"ewt_state\" />\n+\t\t\t<channel id=\"heaterState\" typeId=\"heater_state\" />\n+\t\t\t<channel id=\"vControlState\" typeId=\"v_control_state\" />\n+\t\t\t<channel id=\"frostState\" typeId=\"frost_state\" />\n+\t\t\t<channel id=\"cookerhoodState\" typeId=\"cookerhood_state\" />\n+\t\t\t<channel id=\"enthalpyState\" typeId=\"enthalpy_state\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"inputs\">\n+\t\t<label>Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isL1Switch\" typeId=\"is_L1_switch\" />\n+\t\t\t<channel id=\"isL2Switch\" typeId=\"is_L2_switch\" />\n+\t\t\t<channel id=\"isBathroomSwitch\" typeId=\"is_bathroom_switch\" />\n+\t\t\t<channel id=\"isCookerhoodSwitch\" typeId=\"is_cookerhood_switch\" />\n+\t\t\t<channel id=\"isExternalFilter\" typeId=\"is_external_filter\" />\n+\t\t\t<channel id=\"isWTW\" typeId=\"is_wtw\" />\n+\t\t\t<channel id=\"isBathroom2Switch\" typeId=\"is_bathroom2_switch\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"analog\">\n+\t\t<label>Analog Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isAnalog1\" typeId=\"is_analog1\" />\n+\t\t\t<channel id=\"isAnalog2\" typeId=\"is_analog2\" />\n+\t\t\t<channel id=\"isAnalog3\" typeId=\"is_analog3\" />\n+\t\t\t<channel id=\"isAnalog4\" typeId=\"is_analog4\" />\n+\t\t\t<channel id=\"isRF\" typeId=\"is_RF\" />\n+\t\t\t<channel id=\"analog1Mode\" typeId=\"analog1_mode\" />\n+\t\t\t<channel id=\"analog2Mode\" typeId=\"analog2_mode\" />\n+\t\t\t<channel id=\"analog3Mode\" typeId=\"analog3_mode\" />\n+\t\t\t<channel id=\"analog4Mode\" typeId=\"analog4_mode\" />\n+\t\t\t<channel id=\"RFMode\" typeId=\"RF_mode\" />\n+\t\t\t<channel id=\"analog1Negative\" typeId=\"analog1_negative\" />\n+\t\t\t<channel id=\"analog2Negative\" typeId=\"analog2_negative\" />\n+\t\t\t<channel id=\"analog3Negative\" typeId=\"analog3_negative\" />\n+\t\t\t<channel id=\"analog4Negative\" typeId=\"analog4_negative\" />\n+\t\t\t<channel id=\"RFNegative\" typeId=\"RF_negative\" />\n+\t\t\t<channel id=\"analog1Volt\" typeId=\"analog1_volt\" />\n+\t\t\t<channel id=\"analog1Min\" typeId=\"analog1_min\" />\n+\t\t\t<channel id=\"analog1Max\" typeId=\"analog1_max\" />\n+\t\t\t<channel id=\"analog1Value\" typeId=\"analog1_value\" />\n+\t\t\t<channel id=\"analog2Volt\" typeId=\"analog2_volt\" />\n+\t\t\t<channel id=\"analog2Min\" typeId=\"analog2_min\" />\n+\t\t\t<channel id=\"analog2Max\" typeId=\"analog2_max\" />\n+\t\t\t<channel id=\"analog2Value\" typeId=\"analog2_value\" />\n+\t\t\t<channel id=\"analog3Volt\" typeId=\"analog3_volt\" />\n+\t\t\t<channel id=\"analog3Min\" typeId=\"analog3_min\" />\n+\t\t\t<channel id=\"analog3Max\" typeId=\"analog3_max\" />\n+\t\t\t<channel id=\"analog3Value\" typeId=\"analog3_value\" />\n+\t\t\t<channel id=\"analog4Volt\" typeId=\"analog4_volt\" />\n+\t\t\t<channel id=\"analog4Min\" typeId=\"analog4_min\" />\n+\t\t\t<channel id=\"analog4Max\" typeId=\"analog4_max\" />\n+\t\t\t<channel id=\"analog4Value\" typeId=\"analog4_value\" />\n+\t\t\t<channel id=\"RFMin\" typeId=\"RF_min\" />\n+\t\t\t<channel id=\"RFMax\" typeId=\"RF_max\" />\n+\t\t\t<channel id=\"RFValue\" typeId=\"RF_value\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"error\">\n+\t\t<label>Error States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"errorACurrent\" typeId=\"errorA_current\" />\n+\t\t\t<channel id=\"errorECurrent\" typeId=\"errorE_current\" />\n+\t\t\t<channel id=\"errorALast\" typeId=\"errorA_last\" />\n+\t\t\t<channel id=\"errorELast\" typeId=\"errorE_last\" />\n+\t\t\t<channel id=\"errorAPrelast\" typeId=\"errorA_prelast\" />\n+\t\t\t<channel id=\"errorEPrelast\" typeId=\"errorE_prelast\" />\n+\t\t\t<channel id=\"errorAPrePrelast\" typeId=\"errorA_pre_prelast\" />\n+\t\t\t<channel id=\"errorEPrePrelast\" typeId=\"errorE_pre_prelast\" />\n+\t\t\t<channel id=\"errorEACurrent\" typeId=\"errorEA_current\" />\n+\t\t\t<channel id=\"errorEALast\" typeId=\"errorEA_last\" />\n+\t\t\t<channel id=\"errorEAPrelast\" typeId=\"errorEA_prelast\" />\n+\t\t\t<channel id=\"errorEAPrePrelast\" typeId=\"errorEA_pre_prelast\" />\n+\t\t\t<channel id=\"errorAHighCurrent\" typeId=\"errorA_high_current\" />\n+\t\t\t<channel id=\"errorAHighLast\" typeId=\"errorA_high_last\" />\n+\t\t\t<channel id=\"errorAHighPrelast\" typeId=\"errorA_high_prelast\" />\n+\t\t\t<channel id=\"errorAHighPrePrelast\" typeId=\"errorA_high_pre_prelast\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"software\">\n+\t\t<label>Software Version</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"softwareMainVersion\" typeId=\"software_main_version\" />\n+\t\t\t<channel id=\"softwareMinorVersion\" typeId=\"software_minor_version\" />\n+\t\t\t<channel id=\"softwareBetaVersion\" typeId=\"software_beta_version\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 314}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzNTIwOQ==", "bodyText": "It would be safe to swap your if/else logic to make sure that the you have a value instanceof DecimalType check before you attempt to cast.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402035209", "createdAt": "2020-04-02T03:43:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeVolt.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle volt values\n+ *\n+ * @author Grzegorz Miasko - Initial Contribution\n+ * @author Hans B\u00f6hm - QuantityTypes\n+ */\n+@NonNullByDefault\n+public class DataTypeVolt implements ComfoAirDataType {\n+\n+    private Logger logger = LoggerFactory.getLogger(DataTypeVolt.class);\n+\n+    @Override\n+    public State convertToState(int @Nullable [] data, ComfoAirCommandType commandType) {\n+        if (data == null) {\n+            logger.trace(\"\\\"DataTypeVolt\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return UnDefType.NULL;\n+        } else {\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+            if (get_reply_data_pos != null && get_reply_data_pos[0] < data.length) {\n+                return new QuantityType<>((double) data[get_reply_data_pos[0]] * 10 / 255, SmartHomeUnits.VOLT);\n+            } else {\n+                return UnDefType.NULL;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public int @Nullable [] convertFromState(State value, ComfoAirCommandType commandType) {\n+        if (value instanceof UnDefType) {\n+            logger.trace(\"\\\"DataTypeVolt\\\" class \\\"convertFromState\\\" undefined state\");\n+            return null;\n+        } else {\n+            int[] template = commandType.getChangeDataTemplate();\n+\n+            template[commandType.getChangeDataPos()] = (int) (((DecimalType) value).doubleValue() * 255 / 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzNTIzOQ==", "bodyText": "Please make all loggers private and final.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Logger logger = LoggerFactory.getLogger(DataTypeVolt.class);\n          \n          \n            \n                private final Logger logger = LoggerFactory.getLogger(DataTypeVolt.class);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402035239", "createdAt": "2020-04-02T03:43:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeVolt.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle volt values\n+ *\n+ * @author Grzegorz Miasko - Initial Contribution\n+ * @author Hans B\u00f6hm - QuantityTypes\n+ */\n+@NonNullByDefault\n+public class DataTypeVolt implements ComfoAirDataType {\n+\n+    private Logger logger = LoggerFactory.getLogger(DataTypeVolt.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzNTQ0NQ==", "bodyText": "see other comment", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402035445", "createdAt": "2020-04-02T03:44:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeTemperature.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle temperature values\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - QuantityTypes\n+ */\n+@NonNullByDefault\n+public class DataTypeTemperature implements ComfoAirDataType {\n+\n+    private Logger logger = LoggerFactory.getLogger(DataTypeTemperature.class);\n+\n+    @Override\n+    public State convertToState(int @Nullable [] data, ComfoAirCommandType commandType) {\n+        if (data == null) {\n+            logger.trace(\"\\\"DataTypeTemperature\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return UnDefType.NULL;\n+        } else {\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+            if (get_reply_data_pos != null && get_reply_data_pos[0] < data.length) {\n+                return new QuantityType<>((((double) data[get_reply_data_pos[0]]) / 2) - 20, SIUnits.CELSIUS);\n+            } else {\n+                return UnDefType.NULL;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public int @Nullable [] convertFromState(State value, ComfoAirCommandType commandType) {\n+        if (value instanceof UnDefType) {\n+            logger.trace(\"\\\"DataTypeTemperature\\\" class \\\"convertFromState\\\" undefined state\");\n+            return null;\n+        } else {\n+            int[] template = commandType.getChangeDataTemplate();\n+\n+            template[commandType.getChangeDataPos()] = (int) (((DecimalType) value).doubleValue() + 20) * 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzNjE0OQ==", "bodyText": "I would suggest making constants out of some of your frequently used empty array values, like new int[0].", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402036149", "createdAt": "2020-04-02T03:47:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+                State state = null;\n+\n+                ComfoAirCommandType comfoAirCommandType = ComfoAirCommandType.getCommandTypeByKey(channelId);\n+                if (comfoAirCommandType != null) {\n+                    ComfoAirDataType dataType = comfoAirCommandType.getDataType();\n+\n+                    if (dataType != null) {\n+                        if (dataType instanceof DataTypeBoolean) {\n+                            state = (OnOffType) command;\n+                        } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                            state = (DecimalType) command;\n+                        } else if (dataType instanceof DataTypeTemperature) {\n+                            if (command instanceof QuantityType<?>) {\n+                                QuantityType<?> celsius = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                                if (celsius != null) {\n+                                    state = new DecimalType(celsius.doubleValue());\n+                                }\n+                            } else {\n+                                state = (DecimalType) command;\n+                            }\n+                        } else if (dataType instanceof DataTypeVolt) {\n+                            if (command instanceof QuantityType<?>) {\n+                                QuantityType<?> volts = ((QuantityType<?>) command).toUnit(SmartHomeUnits.VOLT);\n+                                if (volts != null) {\n+                                    state = new DecimalType(volts.doubleValue());\n+                                }\n+                            } else {\n+                                state = (DecimalType) command;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                if (state != null) {\n+                    ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n+\n+                    if (changeCommand != null) {\n+                        sendCommand(changeCommand, channelId);\n+\n+                        Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                                .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                        if (affectedReadCommands.size() > 0) {\n+                            Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                            scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                        }\n+                    }\n+                } else {\n+                    logger.warn(\"Unhandled command type: {}\", command.toString());\n+                }\n+            } catch (final RuntimeException e) {\n+                logger.warn(\"Updating ComfoAir failed: {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+        String serialPort = config.serialPort;\n+\n+        if (StringUtils.isNotEmpty(serialPort)) {\n+            comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort, BAUDRATE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        }\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.open();\n+            if (comfoAirConnector != null && comfoAirConnector.isConnected()) {\n+                updateStatus(ThingStatus.ONLINE);\n+\n+                List<Channel> channels = this.thing.getChannels();\n+\n+                poller = scheduler.scheduleWithFixedDelay(() -> {\n+                    for (Channel channel : channels) {\n+                        updateChannelState(channel);\n+                    }\n+                }, 0, (config.refreshInterval > 0) ? config.refreshInterval : DEFAULT_REFRESH_INTERVAL,\n+                        TimeUnit.SECONDS);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.close();\n+        }\n+\n+        final ScheduledFuture<?> localPoller = poller;\n+\n+        if (localPoller != null && !localPoller.isCancelled()) {\n+            localPoller.cancel(true);\n+            poller = null;\n+        }\n+    }\n+\n+    private void updateChannelState(Channel channel) {\n+        try {\n+            if (!isLinked(channel.getUID())) {\n+                return;\n+            }\n+            String commandKey = channel.getUID().getId();\n+            ComfoAirCommand readCommand = ComfoAirCommandType.getReadCommand(commandKey);\n+            if (readCommand != null) {\n+                State state = sendCommand(readCommand, commandKey);\n+\n+                updateState(channel.getUID(), state);\n+            }\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Unknown channel {}\", channel.getUID().getId());\n+        }\n+    }\n+\n+    private State sendCommand(ComfoAirCommand command, String commandKey) {\n+        ComfoAirSerialConnector comfoAirConnector = this.comfoAirConnector;\n+\n+        if (comfoAirConnector != null) {\n+            Integer requestCmd = command.getRequestCmd();\n+            Integer replyCmd = command.getReplyCmd();\n+            int[] requestData = command.getRequestData();\n+\n+            Integer preRequestCmd;\n+            Integer preReplyCmd;\n+            int[] preResponse = new int[0];\n+\n+            if (requestCmd != null) {\n+                switch (requestCmd) {\n+                    case ComfoAirCommandType.Constants.REQUEST_SET_ANALOGS:\n+                        preRequestCmd = ComfoAirCommandType.Constants.REQUEST_GET_ANALOGS;\n+                        preReplyCmd = ComfoAirCommandType.Constants.REPLY_GET_ANALOGS;\n+                        break;\n+                    case ComfoAirCommandType.Constants.REQUEST_SET_DELAYS:\n+                        preRequestCmd = ComfoAirCommandType.Constants.REQUEST_GET_DELAYS;\n+                        preReplyCmd = ComfoAirCommandType.Constants.REPLY_GET_DELAYS;\n+                        break;\n+                    case ComfoAirCommandType.Constants.REQUEST_SET_FAN_LEVEL:\n+                        preRequestCmd = ComfoAirCommandType.Constants.REQUEST_GET_FAN_LEVEL;\n+                        preReplyCmd = ComfoAirCommandType.Constants.REPLY_GET_FAN_LEVEL;\n+                        break;\n+                    case ComfoAirCommandType.Constants.REQUEST_SET_STATES:\n+                        preRequestCmd = ComfoAirCommandType.Constants.REQUEST_SET_STATES;\n+                        preReplyCmd = ComfoAirCommandType.Constants.REPLY_GET_STATES;\n+                        break;\n+                    case ComfoAirCommandType.Constants.REQUEST_SET_EWT:\n+                        preRequestCmd = ComfoAirCommandType.Constants.REQUEST_GET_EWT;\n+                        preReplyCmd = ComfoAirCommandType.Constants.REPLY_GET_EWT;\n+                        break;\n+                    default:\n+                        preRequestCmd = requestCmd;\n+                        preReplyCmd = replyCmd;\n+                }\n+\n+                if (!preRequestCmd.equals(requestCmd)) {\n+                    command.setRequestCmd(preRequestCmd);\n+                    command.setReplyCmd(preReplyCmd);\n+                    command.setRequestData(new int[0]);\n+\n+                    preResponse = comfoAirConnector.sendCommand(command, new int[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzNjYyMQ==", "bodyText": "The purpose of this code is to populate the state variable. It would be cleaner to turn this into a function that returns a state instead.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402036621", "createdAt": "2020-04-02T03:49:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+                State state = null;\n+\n+                ComfoAirCommandType comfoAirCommandType = ComfoAirCommandType.getCommandTypeByKey(channelId);\n+                if (comfoAirCommandType != null) {\n+                    ComfoAirDataType dataType = comfoAirCommandType.getDataType();\n+\n+                    if (dataType != null) {\n+                        if (dataType instanceof DataTypeBoolean) {\n+                            state = (OnOffType) command;\n+                        } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                            state = (DecimalType) command;\n+                        } else if (dataType instanceof DataTypeTemperature) {\n+                            if (command instanceof QuantityType<?>) {\n+                                QuantityType<?> celsius = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                                if (celsius != null) {\n+                                    state = new DecimalType(celsius.doubleValue());\n+                                }\n+                            } else {\n+                                state = (DecimalType) command;\n+                            }\n+                        } else if (dataType instanceof DataTypeVolt) {\n+                            if (command instanceof QuantityType<?>) {\n+                                QuantityType<?> volts = ((QuantityType<?>) command).toUnit(SmartHomeUnits.VOLT);\n+                                if (volts != null) {\n+                                    state = new DecimalType(volts.doubleValue());\n+                                }\n+                            } else {\n+                                state = (DecimalType) command;\n+                            }\n+                        }\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzODQxOQ==", "bodyText": "This should be done asynchronously since it might be called from a UI thread (due to a refresh command). Http requests can be unpredictable and as such might lock up the UI thread. To prevent the UI from reacting slowly, any long running tasks should be performed on another thread.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402038419", "createdAt": "2020-04-02T03:57:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+                State state = null;\n+\n+                ComfoAirCommandType comfoAirCommandType = ComfoAirCommandType.getCommandTypeByKey(channelId);\n+                if (comfoAirCommandType != null) {\n+                    ComfoAirDataType dataType = comfoAirCommandType.getDataType();\n+\n+                    if (dataType != null) {\n+                        if (dataType instanceof DataTypeBoolean) {\n+                            state = (OnOffType) command;\n+                        } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                            state = (DecimalType) command;\n+                        } else if (dataType instanceof DataTypeTemperature) {\n+                            if (command instanceof QuantityType<?>) {\n+                                QuantityType<?> celsius = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                                if (celsius != null) {\n+                                    state = new DecimalType(celsius.doubleValue());\n+                                }\n+                            } else {\n+                                state = (DecimalType) command;\n+                            }\n+                        } else if (dataType instanceof DataTypeVolt) {\n+                            if (command instanceof QuantityType<?>) {\n+                                QuantityType<?> volts = ((QuantityType<?>) command).toUnit(SmartHomeUnits.VOLT);\n+                                if (volts != null) {\n+                                    state = new DecimalType(volts.doubleValue());\n+                                }\n+                            } else {\n+                                state = (DecimalType) command;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                if (state != null) {\n+                    ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n+\n+                    if (changeCommand != null) {\n+                        sendCommand(changeCommand, channelId);\n+\n+                        Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                                .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                        if (affectedReadCommands.size() > 0) {\n+                            Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                            scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                        }\n+                    }\n+                } else {\n+                    logger.warn(\"Unhandled command type: {}\", command.toString());\n+                }\n+            } catch (final RuntimeException e) {\n+                logger.warn(\"Updating ComfoAir failed: {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+        String serialPort = config.serialPort;\n+\n+        if (StringUtils.isNotEmpty(serialPort)) {\n+            comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort, BAUDRATE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        }\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.open();\n+            if (comfoAirConnector != null && comfoAirConnector.isConnected()) {\n+                updateStatus(ThingStatus.ONLINE);\n+\n+                List<Channel> channels = this.thing.getChannels();\n+\n+                poller = scheduler.scheduleWithFixedDelay(() -> {\n+                    for (Channel channel : channels) {\n+                        updateChannelState(channel);\n+                    }\n+                }, 0, (config.refreshInterval > 0) ? config.refreshInterval : DEFAULT_REFRESH_INTERVAL,\n+                        TimeUnit.SECONDS);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.close();\n+        }\n+\n+        final ScheduledFuture<?> localPoller = poller;\n+\n+        if (localPoller != null && !localPoller.isCancelled()) {\n+            localPoller.cancel(true);\n+            poller = null;\n+        }\n+    }\n+\n+    private void updateChannelState(Channel channel) {\n+        try {\n+            if (!isLinked(channel.getUID())) {\n+                return;\n+            }\n+            String commandKey = channel.getUID().getId();\n+            ComfoAirCommand readCommand = ComfoAirCommandType.getReadCommand(commandKey);\n+            if (readCommand != null) {\n+                State state = sendCommand(readCommand, commandKey);\n+\n+                updateState(channel.getUID(), state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0MDMwNQ==", "bodyText": "It is better to arrange your logic in a fail-fast fashion. Also, caching the field as a local variable will allow you to only have to do null checks once. Almost all the null check warnings regarding class fields can be solved by making a local variable to cache the field's value.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.isNotEmpty(serialPort)) {\n          \n          \n            \n                        comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort, BAUDRATE);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (StringUtils.isEmpty(serialPort)) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    ComfoAirSerialConnector comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort, BAUDRATE);\n          \n          \n            \n                    this.comfoAirConnector = comfoAirConnector;", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402040305", "createdAt": "2020-04-02T04:06:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+                State state = null;\n+\n+                ComfoAirCommandType comfoAirCommandType = ComfoAirCommandType.getCommandTypeByKey(channelId);\n+                if (comfoAirCommandType != null) {\n+                    ComfoAirDataType dataType = comfoAirCommandType.getDataType();\n+\n+                    if (dataType != null) {\n+                        if (dataType instanceof DataTypeBoolean) {\n+                            state = (OnOffType) command;\n+                        } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                            state = (DecimalType) command;\n+                        } else if (dataType instanceof DataTypeTemperature) {\n+                            if (command instanceof QuantityType<?>) {\n+                                QuantityType<?> celsius = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                                if (celsius != null) {\n+                                    state = new DecimalType(celsius.doubleValue());\n+                                }\n+                            } else {\n+                                state = (DecimalType) command;\n+                            }\n+                        } else if (dataType instanceof DataTypeVolt) {\n+                            if (command instanceof QuantityType<?>) {\n+                                QuantityType<?> volts = ((QuantityType<?>) command).toUnit(SmartHomeUnits.VOLT);\n+                                if (volts != null) {\n+                                    state = new DecimalType(volts.doubleValue());\n+                                }\n+                            } else {\n+                                state = (DecimalType) command;\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                if (state != null) {\n+                    ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n+\n+                    if (changeCommand != null) {\n+                        sendCommand(changeCommand, channelId);\n+\n+                        Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                                .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                        if (affectedReadCommands.size() > 0) {\n+                            Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                            scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                        }\n+                    }\n+                } else {\n+                    logger.warn(\"Unhandled command type: {}\", command.toString());\n+                }\n+            } catch (final RuntimeException e) {\n+                logger.warn(\"Updating ComfoAir failed: {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+        String serialPort = config.serialPort;\n+\n+        if (StringUtils.isNotEmpty(serialPort)) {\n+            comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort, BAUDRATE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0MDc1OA==", "bodyText": "Just like my new int[0] constant suggestion, you should create a new String[0] constant as well.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 6, new String[] {},\n          \n          \n            \n                ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 6, new String[0],", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402040758", "createdAt": "2020-04-02T04:08:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,862 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(\"bindingControl#activate\", DataTypeBoolean.class, new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            new String[] {}, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(\"menuP1#menu20Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x01),\n+    MENU21_MODE(\"menuP1#menu21Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x02),\n+    MENU22_MODE(\"menuP1#menu22Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x04),\n+    MENU23_MODE(\"menuP1#menu23Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x08),\n+    MENU24_MODE(\"menuP1#menu24Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x10),\n+    MENU25_MODE(\"menuP1#menu25Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x20),\n+    MENU26_MODE(\"menuP1#menu26Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x40),\n+    MENU27_MODE(\"menuP1#menu27Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x80),\n+    MENU28_MODE(\"menuP1#menu28Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x01),\n+    MENU29_MODE(\"menuP1#menu29Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x02),\n+    BATHROOM_START_DELAY(\"menuP2#bathroomStartDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 0,\n+            new String[] { \"menuP1#menu21Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 0 }),\n+    BATHROOM_END_DELAY(\"menuP2#bathroomEndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 1,\n+            new String[] { \"menuP1#menu22Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 1 }),\n+    L1_END_DELAY(\"menuP2#L1EndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 2,\n+            new String[] { \"menuP1#menu27Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 2 }),\n+    PULSE_VENTILATION(\"menuP2#pulseVentilation\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 3,\n+            new String[] { \"menuP1#menu23Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 3 }),\n+    FILTER_WEEKS(\"menuP2#filterWeeks\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 4,\n+            new String[] { \"menuP1#menu24Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 4 }),\n+    RF_SHORT_DELAY(\"menuP2#RFShortDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 5,\n+            new String[] { \"menuP1#menu25Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 5 }),\n+    RF_LONG_DELAY(\"menuP2#RFLongDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 6,\n+            new String[] { \"menuP1#menu26Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 6 }),\n+    COOKERHOOD_DELAY(\"menuP2#cookerhoodDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 7,\n+            new String[] { \"menuP1#menu20Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 7 }),\n+    CHIMNEY_STATE(\"menuP9#chimneyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x01),\n+    BYPASS_STATE(\"menuP9#bypassState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x02),\n+    EWT_STATE(\"menuP9#ewtState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x04),\n+    HEATER_STATE(\"menuP9#heaterState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x08),\n+    V_CONTROL_STATE(\"menuP9#vControlState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x10),\n+    FROST_STATE(\"menuP9#frostState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x20),\n+    COOKERHOOD_STATE(\"menuP9#cookerhoodState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x40),\n+    ENTHALPY_STATE(\"menuP9#enthalpyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x80),\n+    FAN_OUT_0(\"ventilation#fanOut0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(\"ventilation#fanOut1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(\"ventilation#fanOut2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(\"ventilation#fanOut3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(\"ventilation#fanIn0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(\"ventilation#fanIn1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(\"ventilation#fanIn2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(\"ventilation#fanIn3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_IN_PERCENT(\"ventilation#fanInPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 0 }),\n+    FAN_O\u00daT_PERCENT(\"ventilation#fanOutPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(\"ventilation#fanInRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 2, 3 }),\n+    FAN_OUT_RPM(\"ventilation#fanOutRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 4, 5 }),\n+    FAN_LEVEL(\"ccease#fanLevel\", DataTypeNumber.class, new int[] { 0x01, 0x02, 0x03, 0x04 },\n+            Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanInRPM\",\n+                    \"ventilation#fanOutRPM\" },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    TARGET_TEMPERATUR(\"ccease#targetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(\"temperatures#outdoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\"temperatures#outdoorTemperatureOut\", DataTypeTemperature.class,\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(\"temperatures#indoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(\"temperatures#indoorTemperatureOut\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(\"temperatures#isT1Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x01),\n+    IS_T2_SENSOR(\"temperatures#isT2Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x02),\n+    IS_T3_SENSOR(\"temperatures#isT3Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x04),\n+    IS_T4_SENSOR(\"temperatures#isT4Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x08),\n+    IS_EWT_SENSOR(\"temperatures#isEWTSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x10),\n+    IS_HEATER_SENSOR(\"temperatures#isHeaterSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x20),\n+    IS_COOKERHOOD_SENSOR(\"temperatures#isCookerhoodSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x40),\n+    EWT_TEMPERATUR(\"temperatures#ewtTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATUR(\"temperatures#heaterTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATUR(\"temperatures#cookerhoodTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    IS_PREHEATER(\"options#isPreheater\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(\"options#isBypass\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(\"options#recuType\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"temperatures#indoorTemperatureIn\",\n+                    \"temperatures#outdoorTemperatureOut\", \"temperatures#indoorTemperatureOut\",\n+                    \"temperatures#outdoorTemperatureIn\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(\"options#recuSize\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanOut0\",\n+                    \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\", \"ventilation#fanIn0\",\n+                    \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(\"options#isChimney\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] {}, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(\"options#isCookerhood\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\", \"cookerhood#cookerhoodSpeed\",\n+                    \"temperatures#cookerhoodTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(\"options#isHeater\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\", \"menuP9#heaterState\",\n+                    \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(\"options#isEnthalpy\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\", \"enthalpy#enthalpyLevel\",\n+                    \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(\"options#isEWT\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\", \"ewt#ewtTemperatureHigh\",\n+                    \"temperatures#ewtTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    EWT_SPEED(\"ewt#ewtSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(\"ewt#ewtTemperatureLow\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(\"ewt#ewtTemperatureHigh\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(\"cookerhood#cookerhoodSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(\"heater#heaterPower\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 4 }),\n+    HEATER_POWER_I(\"heater#heaterPowerI\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATUR(\"heater#heaterTargetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5,\n+            4, new String[] { \"menuP9#heaterState\", \"heater#heaterPower\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    SOFTWARE_MAIN_VERSION(\"software#softwareMainVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(\"software#softwareMinorVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    SOFTWARE_BETA_VERSION(\"software#softwareBetaVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 2 }),\n+    ERROR_MESSAGE(\"ccease#errorMessage\", DataTypeMessage.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(\"error#errorACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(\"error#errorALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 2 }),\n+    ERRORA_PRELAST(\"error#errorAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(\"error#errorAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(\"error#errorAHighCurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(\"error#errorAHighLast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(\"error#errorAHighPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\"error#errorAHighPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(\"error#errorECurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(\"error#errorELast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 3 }),\n+    ERRORE_PRELAST(\"error#errorEPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(\"error#errorEPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(\"error#errorEACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(\"error#errorEALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 10 }),\n+    ERROREA_PRELAST(\"error#errorEAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(\"error#errorEAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(\"ccease#errorReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] { \"ccease#errorMessage\" }),\n+    FILTER_HOURS(\"times#filterHours\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 15, 16 }),\n+    FILTER_RESET(\"ccease#filterReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { \"times#filterHours\", \"ccease#filterError\" }),\n+    FILTER_ERROR(\"ccease#filterError\", DataTypeBoolean.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 8 }, 0x01),\n+    BYPASS_FACTOR(\"bypass#bypassFactor\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 2 }),\n+    BYPASS_LEVEL(\"bypass#bypassLevel\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 3 }),\n+    BYPASS_CORRECTION(\"bypass#bypassCorrection\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(\"bypass#bypassSummer\", DataTypeBoolean.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATUR(\"enthalpy#enthalpyTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(\"enthalpy#enthalpyHumidity\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(\"enthalpy#enthalpyLevel\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(\"enthalpy#enthalpyTime\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(\"preheater#preheaterValve\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\"preheater#preheaterFrostProtect\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 1 }),\n+    PREHEATER_HEATING(\"preheater#preheaterHeating\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\"preheater#preheaterFrostTime\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 3, 4 }),\n+    PREHEATER_OPTION(\"preheater#preheaterSafety\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 5 }),\n+    LEVEL0_TIME(\"times#level0Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(\"times#level1Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(\"times#level2Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(\"times#level3Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(\"times#freezeTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 9, 10 }),\n+    PREHEATER_TIME(\"times#preheaterTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 11, 12 }),\n+    BYPASS_TIME(\"times#bypassTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 13, 14 }),\n+    IS_ANALOG1(\"analog#isAnalog1\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(\"analog#isAnalog2\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(\"analog#isAnalog3\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(\"analog#isAnalog4\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(\"analog#isRF\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10),\n+    ANALOG1_MODE(\"analog#analog1Mode\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\", \"analog#analog1Value\",\n+                    \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(\"analog#analog2Mode\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\", \"analog#analog2Value\",\n+                    \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(\"analog#analog3Mode\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\", \"analog#analog3Value\",\n+                    \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(\"analog#analog4Mode\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\", \"analog#analog4Value\",\n+                    \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(\"analog#RFMode\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    ANALOG1_NEGATIVE(\"analog#analog1Negative\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x01),\n+    ANALOG2_NEGATIVE(\"analog#analog2Negative\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x02),\n+    ANALOG3_NEGATIVE(\"analog#analog3Negative\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x04),\n+    ANALOG4_NEGATIVE(\"analog#analog4Negative\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x08),\n+    RF_NEGATIVE(\"analog#RFNegative\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x10),\n+    ANALOG1_MIN(\"analog#analog1Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 3, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(\"analog#analog1Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 4, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(\"analog#analog1Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 5, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 6, new String[] {},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 401}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0MjIzNQ==", "bodyText": "Instead of having to resort to reflection in order to create instances, you could instead create static singlton instances of all your datatype classes so you can just return those singleton instances here. There is no reason you can't reuse your datatype instances since they are stateless.\nAlthough it might be the case that the compiler won't let you use singleton instances in the enum constructor, in that case you can pass a lambda for the constructor instead like DataTypeBoolean::new, the enum constructor would then use Supplier<? extends ComfoAirDataType> as a parameter.\nAlso, I'm pretty sure this method should never return null normally, so remove the @Nullable. Instead of returning null you should throw some kind of runtime exception, not that you would need to if you use singletons.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @Nullable ComfoAirDataType getDataType() {\n          \n          \n            \n                public ComfoAirDataType getDataType() {", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402042235", "createdAt": "2020-04-02T04:15:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,862 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(\"bindingControl#activate\", DataTypeBoolean.class, new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            new String[] {}, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(\"menuP1#menu20Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x01),\n+    MENU21_MODE(\"menuP1#menu21Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x02),\n+    MENU22_MODE(\"menuP1#menu22Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x04),\n+    MENU23_MODE(\"menuP1#menu23Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x08),\n+    MENU24_MODE(\"menuP1#menu24Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x10),\n+    MENU25_MODE(\"menuP1#menu25Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x20),\n+    MENU26_MODE(\"menuP1#menu26Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x40),\n+    MENU27_MODE(\"menuP1#menu27Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x80),\n+    MENU28_MODE(\"menuP1#menu28Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x01),\n+    MENU29_MODE(\"menuP1#menu29Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x02),\n+    BATHROOM_START_DELAY(\"menuP2#bathroomStartDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 0,\n+            new String[] { \"menuP1#menu21Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 0 }),\n+    BATHROOM_END_DELAY(\"menuP2#bathroomEndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 1,\n+            new String[] { \"menuP1#menu22Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 1 }),\n+    L1_END_DELAY(\"menuP2#L1EndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 2,\n+            new String[] { \"menuP1#menu27Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 2 }),\n+    PULSE_VENTILATION(\"menuP2#pulseVentilation\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 3,\n+            new String[] { \"menuP1#menu23Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 3 }),\n+    FILTER_WEEKS(\"menuP2#filterWeeks\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 4,\n+            new String[] { \"menuP1#menu24Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 4 }),\n+    RF_SHORT_DELAY(\"menuP2#RFShortDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 5,\n+            new String[] { \"menuP1#menu25Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 5 }),\n+    RF_LONG_DELAY(\"menuP2#RFLongDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 6,\n+            new String[] { \"menuP1#menu26Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 6 }),\n+    COOKERHOOD_DELAY(\"menuP2#cookerhoodDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 7,\n+            new String[] { \"menuP1#menu20Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 7 }),\n+    CHIMNEY_STATE(\"menuP9#chimneyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x01),\n+    BYPASS_STATE(\"menuP9#bypassState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x02),\n+    EWT_STATE(\"menuP9#ewtState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x04),\n+    HEATER_STATE(\"menuP9#heaterState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x08),\n+    V_CONTROL_STATE(\"menuP9#vControlState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x10),\n+    FROST_STATE(\"menuP9#frostState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x20),\n+    COOKERHOOD_STATE(\"menuP9#cookerhoodState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x40),\n+    ENTHALPY_STATE(\"menuP9#enthalpyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x80),\n+    FAN_OUT_0(\"ventilation#fanOut0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(\"ventilation#fanOut1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(\"ventilation#fanOut2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(\"ventilation#fanOut3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(\"ventilation#fanIn0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(\"ventilation#fanIn1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(\"ventilation#fanIn2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(\"ventilation#fanIn3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_IN_PERCENT(\"ventilation#fanInPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 0 }),\n+    FAN_O\u00daT_PERCENT(\"ventilation#fanOutPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(\"ventilation#fanInRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 2, 3 }),\n+    FAN_OUT_RPM(\"ventilation#fanOutRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 4, 5 }),\n+    FAN_LEVEL(\"ccease#fanLevel\", DataTypeNumber.class, new int[] { 0x01, 0x02, 0x03, 0x04 },\n+            Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanInRPM\",\n+                    \"ventilation#fanOutRPM\" },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    TARGET_TEMPERATUR(\"ccease#targetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(\"temperatures#outdoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\"temperatures#outdoorTemperatureOut\", DataTypeTemperature.class,\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(\"temperatures#indoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(\"temperatures#indoorTemperatureOut\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(\"temperatures#isT1Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x01),\n+    IS_T2_SENSOR(\"temperatures#isT2Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x02),\n+    IS_T3_SENSOR(\"temperatures#isT3Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x04),\n+    IS_T4_SENSOR(\"temperatures#isT4Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x08),\n+    IS_EWT_SENSOR(\"temperatures#isEWTSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x10),\n+    IS_HEATER_SENSOR(\"temperatures#isHeaterSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x20),\n+    IS_COOKERHOOD_SENSOR(\"temperatures#isCookerhoodSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x40),\n+    EWT_TEMPERATUR(\"temperatures#ewtTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATUR(\"temperatures#heaterTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATUR(\"temperatures#cookerhoodTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    IS_PREHEATER(\"options#isPreheater\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(\"options#isBypass\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(\"options#recuType\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"temperatures#indoorTemperatureIn\",\n+                    \"temperatures#outdoorTemperatureOut\", \"temperatures#indoorTemperatureOut\",\n+                    \"temperatures#outdoorTemperatureIn\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(\"options#recuSize\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanOut0\",\n+                    \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\", \"ventilation#fanIn0\",\n+                    \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(\"options#isChimney\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] {}, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(\"options#isCookerhood\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\", \"cookerhood#cookerhoodSpeed\",\n+                    \"temperatures#cookerhoodTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(\"options#isHeater\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\", \"menuP9#heaterState\",\n+                    \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(\"options#isEnthalpy\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\", \"enthalpy#enthalpyLevel\",\n+                    \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(\"options#isEWT\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\", \"ewt#ewtTemperatureHigh\",\n+                    \"temperatures#ewtTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    EWT_SPEED(\"ewt#ewtSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(\"ewt#ewtTemperatureLow\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(\"ewt#ewtTemperatureHigh\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(\"cookerhood#cookerhoodSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(\"heater#heaterPower\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 4 }),\n+    HEATER_POWER_I(\"heater#heaterPowerI\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATUR(\"heater#heaterTargetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5,\n+            4, new String[] { \"menuP9#heaterState\", \"heater#heaterPower\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    SOFTWARE_MAIN_VERSION(\"software#softwareMainVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(\"software#softwareMinorVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    SOFTWARE_BETA_VERSION(\"software#softwareBetaVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 2 }),\n+    ERROR_MESSAGE(\"ccease#errorMessage\", DataTypeMessage.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(\"error#errorACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(\"error#errorALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 2 }),\n+    ERRORA_PRELAST(\"error#errorAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(\"error#errorAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(\"error#errorAHighCurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(\"error#errorAHighLast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(\"error#errorAHighPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\"error#errorAHighPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(\"error#errorECurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(\"error#errorELast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 3 }),\n+    ERRORE_PRELAST(\"error#errorEPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(\"error#errorEPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(\"error#errorEACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(\"error#errorEALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 10 }),\n+    ERROREA_PRELAST(\"error#errorEAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(\"error#errorEAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(\"ccease#errorReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] { \"ccease#errorMessage\" }),\n+    FILTER_HOURS(\"times#filterHours\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 15, 16 }),\n+    FILTER_RESET(\"ccease#filterReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { \"times#filterHours\", \"ccease#filterError\" }),\n+    FILTER_ERROR(\"ccease#filterError\", DataTypeBoolean.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 8 }, 0x01),\n+    BYPASS_FACTOR(\"bypass#bypassFactor\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 2 }),\n+    BYPASS_LEVEL(\"bypass#bypassLevel\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 3 }),\n+    BYPASS_CORRECTION(\"bypass#bypassCorrection\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(\"bypass#bypassSummer\", DataTypeBoolean.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATUR(\"enthalpy#enthalpyTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(\"enthalpy#enthalpyHumidity\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(\"enthalpy#enthalpyLevel\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(\"enthalpy#enthalpyTime\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(\"preheater#preheaterValve\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\"preheater#preheaterFrostProtect\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 1 }),\n+    PREHEATER_HEATING(\"preheater#preheaterHeating\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\"preheater#preheaterFrostTime\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 3, 4 }),\n+    PREHEATER_OPTION(\"preheater#preheaterSafety\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 5 }),\n+    LEVEL0_TIME(\"times#level0Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(\"times#level1Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(\"times#level2Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(\"times#level3Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(\"times#freezeTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 9, 10 }),\n+    PREHEATER_TIME(\"times#preheaterTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 11, 12 }),\n+    BYPASS_TIME(\"times#bypassTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 13, 14 }),\n+    IS_ANALOG1(\"analog#isAnalog1\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(\"analog#isAnalog2\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(\"analog#isAnalog3\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(\"analog#isAnalog4\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(\"analog#isRF\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10),\n+    ANALOG1_MODE(\"analog#analog1Mode\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\", \"analog#analog1Value\",\n+                    \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(\"analog#analog2Mode\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\", \"analog#analog2Value\",\n+                    \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(\"analog#analog3Mode\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\", \"analog#analog3Value\",\n+                    \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(\"analog#analog4Mode\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\", \"analog#analog4Value\",\n+                    \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(\"analog#RFMode\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    ANALOG1_NEGATIVE(\"analog#analog1Negative\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x01),\n+    ANALOG2_NEGATIVE(\"analog#analog2Negative\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x02),\n+    ANALOG3_NEGATIVE(\"analog#analog3Negative\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x04),\n+    ANALOG4_NEGATIVE(\"analog#analog4Negative\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x08),\n+    RF_NEGATIVE(\"analog#RFNegative\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x10),\n+    ANALOG1_MIN(\"analog#analog1Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 3, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(\"analog#analog1Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 4, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(\"analog#analog1Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 5, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 6, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(\"analog#analog2Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 7, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(\"analog#analog2Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 8, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(\"analog#analog3Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 9, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(\"analog#analog3Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 10, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(\"analog#analog3Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 11, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(\"analog#analog4Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 12, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(\"analog#analog4Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 13, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(\"analog#analog4Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 14, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(\"analog#RFMin\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 15, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(\"analog#RFMax\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 16, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(\"analog#RFValue\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 17, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(\"analog#analogMode\", DataTypeNumber.class, new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            18, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(\"analog#analog1Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 0 }),\n+    ANALOG2_VOLT(\"analog#analog2Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 1 }),\n+    ANALOG3_VOLT(\"analog#analog3Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 2 }),\n+    ANALOG4_VOLT(\"analog#analog4Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 3 }),\n+    IS_L1_SWITCH(\"inputs#isL1Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x01),\n+    IS_L2_SWITCH(\"inputs#isL2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x02),\n+    IS_BATHROOM_SWITCH(\"inputs#isBathroomSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x01),\n+    IS_COOKERHOOD_SWITCH(\"inputs#isCookerhoodSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x02),\n+    IS_EXTERNAL_FILTER(\"inputs#isExternalFilter\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x04),\n+    IS_WTW(\"inputs#isWTW\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 1 }, 0x08),\n+    IS_BATHROOM2_SWITCH(\"inputs#isBathroom2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirCommandType.class);\n+    private String key;\n+    private Class<? extends ComfoAirDataType> data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private int change_command;\n+    /*\n+     * The size of the data block.\n+     */\n+    private int change_data_size;\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private int change_data_pos;\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public @Nullable ComfoAirDataType getDataType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 645}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0NTE1OA==", "bodyText": "Java automatically box/unboxes primitive types to their object equivalents so you don't need to do it manually.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Integer getCmd = entry.read_command == 0 ? null : Integer.valueOf(entry.read_command);\n          \n          \n            \n                        Integer replyCmd = Integer.valueOf(entry.read_reply_command);\n          \n          \n            \n                        int getCmd = entry.read_command == 0 ? null : entry.read_command;\n          \n          \n            \n                        int replyCmd = entry.read_reply_command;", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402045158", "createdAt": "2020-04-02T04:29:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,862 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(\"bindingControl#activate\", DataTypeBoolean.class, new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            new String[] {}, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(\"menuP1#menu20Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x01),\n+    MENU21_MODE(\"menuP1#menu21Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x02),\n+    MENU22_MODE(\"menuP1#menu22Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x04),\n+    MENU23_MODE(\"menuP1#menu23Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x08),\n+    MENU24_MODE(\"menuP1#menu24Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x10),\n+    MENU25_MODE(\"menuP1#menu25Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x20),\n+    MENU26_MODE(\"menuP1#menu26Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x40),\n+    MENU27_MODE(\"menuP1#menu27Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x80),\n+    MENU28_MODE(\"menuP1#menu28Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x01),\n+    MENU29_MODE(\"menuP1#menu29Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x02),\n+    BATHROOM_START_DELAY(\"menuP2#bathroomStartDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 0,\n+            new String[] { \"menuP1#menu21Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 0 }),\n+    BATHROOM_END_DELAY(\"menuP2#bathroomEndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 1,\n+            new String[] { \"menuP1#menu22Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 1 }),\n+    L1_END_DELAY(\"menuP2#L1EndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 2,\n+            new String[] { \"menuP1#menu27Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 2 }),\n+    PULSE_VENTILATION(\"menuP2#pulseVentilation\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 3,\n+            new String[] { \"menuP1#menu23Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 3 }),\n+    FILTER_WEEKS(\"menuP2#filterWeeks\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 4,\n+            new String[] { \"menuP1#menu24Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 4 }),\n+    RF_SHORT_DELAY(\"menuP2#RFShortDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 5,\n+            new String[] { \"menuP1#menu25Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 5 }),\n+    RF_LONG_DELAY(\"menuP2#RFLongDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 6,\n+            new String[] { \"menuP1#menu26Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 6 }),\n+    COOKERHOOD_DELAY(\"menuP2#cookerhoodDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 7,\n+            new String[] { \"menuP1#menu20Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 7 }),\n+    CHIMNEY_STATE(\"menuP9#chimneyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x01),\n+    BYPASS_STATE(\"menuP9#bypassState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x02),\n+    EWT_STATE(\"menuP9#ewtState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x04),\n+    HEATER_STATE(\"menuP9#heaterState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x08),\n+    V_CONTROL_STATE(\"menuP9#vControlState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x10),\n+    FROST_STATE(\"menuP9#frostState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x20),\n+    COOKERHOOD_STATE(\"menuP9#cookerhoodState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x40),\n+    ENTHALPY_STATE(\"menuP9#enthalpyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x80),\n+    FAN_OUT_0(\"ventilation#fanOut0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(\"ventilation#fanOut1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(\"ventilation#fanOut2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(\"ventilation#fanOut3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(\"ventilation#fanIn0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(\"ventilation#fanIn1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(\"ventilation#fanIn2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(\"ventilation#fanIn3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_IN_PERCENT(\"ventilation#fanInPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 0 }),\n+    FAN_O\u00daT_PERCENT(\"ventilation#fanOutPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(\"ventilation#fanInRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 2, 3 }),\n+    FAN_OUT_RPM(\"ventilation#fanOutRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 4, 5 }),\n+    FAN_LEVEL(\"ccease#fanLevel\", DataTypeNumber.class, new int[] { 0x01, 0x02, 0x03, 0x04 },\n+            Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanInRPM\",\n+                    \"ventilation#fanOutRPM\" },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    TARGET_TEMPERATUR(\"ccease#targetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(\"temperatures#outdoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\"temperatures#outdoorTemperatureOut\", DataTypeTemperature.class,\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(\"temperatures#indoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(\"temperatures#indoorTemperatureOut\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(\"temperatures#isT1Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x01),\n+    IS_T2_SENSOR(\"temperatures#isT2Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x02),\n+    IS_T3_SENSOR(\"temperatures#isT3Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x04),\n+    IS_T4_SENSOR(\"temperatures#isT4Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x08),\n+    IS_EWT_SENSOR(\"temperatures#isEWTSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x10),\n+    IS_HEATER_SENSOR(\"temperatures#isHeaterSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x20),\n+    IS_COOKERHOOD_SENSOR(\"temperatures#isCookerhoodSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x40),\n+    EWT_TEMPERATUR(\"temperatures#ewtTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATUR(\"temperatures#heaterTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATUR(\"temperatures#cookerhoodTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    IS_PREHEATER(\"options#isPreheater\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(\"options#isBypass\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(\"options#recuType\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"temperatures#indoorTemperatureIn\",\n+                    \"temperatures#outdoorTemperatureOut\", \"temperatures#indoorTemperatureOut\",\n+                    \"temperatures#outdoorTemperatureIn\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(\"options#recuSize\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanOut0\",\n+                    \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\", \"ventilation#fanIn0\",\n+                    \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(\"options#isChimney\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] {}, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(\"options#isCookerhood\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\", \"cookerhood#cookerhoodSpeed\",\n+                    \"temperatures#cookerhoodTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(\"options#isHeater\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\", \"menuP9#heaterState\",\n+                    \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(\"options#isEnthalpy\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\", \"enthalpy#enthalpyLevel\",\n+                    \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(\"options#isEWT\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\", \"ewt#ewtTemperatureHigh\",\n+                    \"temperatures#ewtTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    EWT_SPEED(\"ewt#ewtSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(\"ewt#ewtTemperatureLow\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(\"ewt#ewtTemperatureHigh\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(\"cookerhood#cookerhoodSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(\"heater#heaterPower\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 4 }),\n+    HEATER_POWER_I(\"heater#heaterPowerI\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATUR(\"heater#heaterTargetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5,\n+            4, new String[] { \"menuP9#heaterState\", \"heater#heaterPower\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    SOFTWARE_MAIN_VERSION(\"software#softwareMainVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(\"software#softwareMinorVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    SOFTWARE_BETA_VERSION(\"software#softwareBetaVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 2 }),\n+    ERROR_MESSAGE(\"ccease#errorMessage\", DataTypeMessage.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(\"error#errorACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(\"error#errorALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 2 }),\n+    ERRORA_PRELAST(\"error#errorAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(\"error#errorAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(\"error#errorAHighCurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(\"error#errorAHighLast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(\"error#errorAHighPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\"error#errorAHighPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(\"error#errorECurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(\"error#errorELast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 3 }),\n+    ERRORE_PRELAST(\"error#errorEPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(\"error#errorEPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(\"error#errorEACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(\"error#errorEALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 10 }),\n+    ERROREA_PRELAST(\"error#errorEAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(\"error#errorEAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(\"ccease#errorReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] { \"ccease#errorMessage\" }),\n+    FILTER_HOURS(\"times#filterHours\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 15, 16 }),\n+    FILTER_RESET(\"ccease#filterReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { \"times#filterHours\", \"ccease#filterError\" }),\n+    FILTER_ERROR(\"ccease#filterError\", DataTypeBoolean.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 8 }, 0x01),\n+    BYPASS_FACTOR(\"bypass#bypassFactor\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 2 }),\n+    BYPASS_LEVEL(\"bypass#bypassLevel\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 3 }),\n+    BYPASS_CORRECTION(\"bypass#bypassCorrection\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(\"bypass#bypassSummer\", DataTypeBoolean.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATUR(\"enthalpy#enthalpyTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(\"enthalpy#enthalpyHumidity\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(\"enthalpy#enthalpyLevel\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(\"enthalpy#enthalpyTime\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(\"preheater#preheaterValve\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\"preheater#preheaterFrostProtect\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 1 }),\n+    PREHEATER_HEATING(\"preheater#preheaterHeating\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\"preheater#preheaterFrostTime\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 3, 4 }),\n+    PREHEATER_OPTION(\"preheater#preheaterSafety\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 5 }),\n+    LEVEL0_TIME(\"times#level0Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(\"times#level1Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(\"times#level2Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(\"times#level3Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(\"times#freezeTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 9, 10 }),\n+    PREHEATER_TIME(\"times#preheaterTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 11, 12 }),\n+    BYPASS_TIME(\"times#bypassTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 13, 14 }),\n+    IS_ANALOG1(\"analog#isAnalog1\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(\"analog#isAnalog2\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(\"analog#isAnalog3\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(\"analog#isAnalog4\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(\"analog#isRF\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10),\n+    ANALOG1_MODE(\"analog#analog1Mode\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\", \"analog#analog1Value\",\n+                    \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(\"analog#analog2Mode\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\", \"analog#analog2Value\",\n+                    \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(\"analog#analog3Mode\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\", \"analog#analog3Value\",\n+                    \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(\"analog#analog4Mode\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\", \"analog#analog4Value\",\n+                    \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(\"analog#RFMode\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    ANALOG1_NEGATIVE(\"analog#analog1Negative\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x01),\n+    ANALOG2_NEGATIVE(\"analog#analog2Negative\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x02),\n+    ANALOG3_NEGATIVE(\"analog#analog3Negative\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x04),\n+    ANALOG4_NEGATIVE(\"analog#analog4Negative\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x08),\n+    RF_NEGATIVE(\"analog#RFNegative\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x10),\n+    ANALOG1_MIN(\"analog#analog1Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 3, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(\"analog#analog1Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 4, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(\"analog#analog1Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 5, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 6, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(\"analog#analog2Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 7, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(\"analog#analog2Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 8, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(\"analog#analog3Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 9, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(\"analog#analog3Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 10, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(\"analog#analog3Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 11, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(\"analog#analog4Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 12, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(\"analog#analog4Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 13, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(\"analog#analog4Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 14, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(\"analog#RFMin\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 15, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(\"analog#RFMax\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 16, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(\"analog#RFValue\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 17, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(\"analog#analogMode\", DataTypeNumber.class, new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            18, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(\"analog#analog1Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 0 }),\n+    ANALOG2_VOLT(\"analog#analog2Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 1 }),\n+    ANALOG3_VOLT(\"analog#analog3Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 2 }),\n+    ANALOG4_VOLT(\"analog#analog4Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 3 }),\n+    IS_L1_SWITCH(\"inputs#isL1Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x01),\n+    IS_L2_SWITCH(\"inputs#isL2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x02),\n+    IS_BATHROOM_SWITCH(\"inputs#isBathroomSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x01),\n+    IS_COOKERHOOD_SWITCH(\"inputs#isCookerhoodSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x02),\n+    IS_EXTERNAL_FILTER(\"inputs#isExternalFilter\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x04),\n+    IS_WTW(\"inputs#isWTW\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 1 }, 0x08),\n+    IS_BATHROOM2_SWITCH(\"inputs#isBathroom2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirCommandType.class);\n+    private String key;\n+    private Class<? extends ComfoAirDataType> data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private int change_command;\n+    /*\n+     * The size of the data block.\n+     */\n+    private int change_data_size;\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private int change_data_pos;\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public @Nullable ComfoAirDataType getDataType() {\n+        try {\n+            return data_type.newInstance();\n+        } catch (Exception e) {\n+            logger.debug(\"Creating new DataType went wrong \", e);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            Integer getCmd = commandType.read_command == 0 ? null : Integer.valueOf(commandType.read_command);\n+            Integer replyCmd = Integer.valueOf(commandType.read_reply_command);\n+\n+            return new ComfoAirCommand(key, getCmd, replyCmd, new int[0], null, null);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, State value) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        DecimalType decimalValue = value.as(DecimalType.class);\n+\n+        if (commandType != null && decimalValue != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType != null) {\n+                int[] data = dataType.convertFromState(value, commandType);\n+\n+                if (data != null) {\n+                    int dataPossition = commandType.getChangeDataPos();\n+                    int intValue = decimalValue.intValue();\n+\n+                    return new ComfoAirCommand(key, commandType.change_command, null, data, dataPossition, intValue);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    @SuppressWarnings(\"null\")\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                Integer getCmd = commandType.read_command == 0 ? null : Integer.valueOf(commandType.read_command);\n+                Integer replyCmd = Integer.valueOf(commandType.read_reply_command);\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key, getCmd, replyCmd, new int[0], null, null);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        Integer getCmd = affectedCommandType.read_command == 0 ? null\n+                                : Integer.valueOf(affectedCommandType.read_command);\n+                        Integer replyCmd = Integer.valueOf(affectedCommandType.read_reply_command);\n+\n+                        ComfoAirCommand command = commands.get(replyCmd);\n+\n+                        if (command == null) {\n+                            command = new ComfoAirCommand(affectedKey, getCmd, replyCmd, new int[0], null, null);\n+                            commands.put(replyCmd, command);\n+                        } else {\n+                            command.addKey(affectedKey);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get all commands which receive informations to update items.\n+     *\n+     * @return all ComfoAirCommand's identified by keys\n+     */\n+    @SuppressWarnings(\"null\")\n+    public static Collection<ComfoAirCommand> getReadCommandsByEventTypes(List<String> keys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();\n+        for (ComfoAirCommandType entry : values()) {\n+            if (!keys.contains(entry.key)) {\n+                continue;\n+            }\n+            if (entry.read_reply_command == 0) {\n+                continue;\n+            }\n+\n+            Integer getCmd = entry.read_command == 0 ? null : Integer.valueOf(entry.read_command);\n+            Integer replyCmd = Integer.valueOf(entry.read_reply_command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 813}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0NTUzNQ==", "bodyText": "This logic is used in two places, so it would be better to refactor it into its own method.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402045535", "createdAt": "2020-04-02T04:30:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,862 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(\"bindingControl#activate\", DataTypeBoolean.class, new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            new String[] {}, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(\"menuP1#menu20Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x01),\n+    MENU21_MODE(\"menuP1#menu21Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x02),\n+    MENU22_MODE(\"menuP1#menu22Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x04),\n+    MENU23_MODE(\"menuP1#menu23Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x08),\n+    MENU24_MODE(\"menuP1#menu24Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x10),\n+    MENU25_MODE(\"menuP1#menu25Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x20),\n+    MENU26_MODE(\"menuP1#menu26Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x40),\n+    MENU27_MODE(\"menuP1#menu27Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x80),\n+    MENU28_MODE(\"menuP1#menu28Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x01),\n+    MENU29_MODE(\"menuP1#menu29Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x02),\n+    BATHROOM_START_DELAY(\"menuP2#bathroomStartDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 0,\n+            new String[] { \"menuP1#menu21Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 0 }),\n+    BATHROOM_END_DELAY(\"menuP2#bathroomEndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 1,\n+            new String[] { \"menuP1#menu22Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 1 }),\n+    L1_END_DELAY(\"menuP2#L1EndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 2,\n+            new String[] { \"menuP1#menu27Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 2 }),\n+    PULSE_VENTILATION(\"menuP2#pulseVentilation\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 3,\n+            new String[] { \"menuP1#menu23Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 3 }),\n+    FILTER_WEEKS(\"menuP2#filterWeeks\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 4,\n+            new String[] { \"menuP1#menu24Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 4 }),\n+    RF_SHORT_DELAY(\"menuP2#RFShortDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 5,\n+            new String[] { \"menuP1#menu25Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 5 }),\n+    RF_LONG_DELAY(\"menuP2#RFLongDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 6,\n+            new String[] { \"menuP1#menu26Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 6 }),\n+    COOKERHOOD_DELAY(\"menuP2#cookerhoodDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 7,\n+            new String[] { \"menuP1#menu20Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 7 }),\n+    CHIMNEY_STATE(\"menuP9#chimneyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x01),\n+    BYPASS_STATE(\"menuP9#bypassState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x02),\n+    EWT_STATE(\"menuP9#ewtState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x04),\n+    HEATER_STATE(\"menuP9#heaterState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x08),\n+    V_CONTROL_STATE(\"menuP9#vControlState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x10),\n+    FROST_STATE(\"menuP9#frostState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x20),\n+    COOKERHOOD_STATE(\"menuP9#cookerhoodState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x40),\n+    ENTHALPY_STATE(\"menuP9#enthalpyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x80),\n+    FAN_OUT_0(\"ventilation#fanOut0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(\"ventilation#fanOut1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(\"ventilation#fanOut2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(\"ventilation#fanOut3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(\"ventilation#fanIn0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(\"ventilation#fanIn1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(\"ventilation#fanIn2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(\"ventilation#fanIn3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_IN_PERCENT(\"ventilation#fanInPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 0 }),\n+    FAN_O\u00daT_PERCENT(\"ventilation#fanOutPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(\"ventilation#fanInRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 2, 3 }),\n+    FAN_OUT_RPM(\"ventilation#fanOutRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 4, 5 }),\n+    FAN_LEVEL(\"ccease#fanLevel\", DataTypeNumber.class, new int[] { 0x01, 0x02, 0x03, 0x04 },\n+            Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanInRPM\",\n+                    \"ventilation#fanOutRPM\" },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    TARGET_TEMPERATUR(\"ccease#targetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(\"temperatures#outdoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\"temperatures#outdoorTemperatureOut\", DataTypeTemperature.class,\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(\"temperatures#indoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(\"temperatures#indoorTemperatureOut\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(\"temperatures#isT1Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x01),\n+    IS_T2_SENSOR(\"temperatures#isT2Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x02),\n+    IS_T3_SENSOR(\"temperatures#isT3Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x04),\n+    IS_T4_SENSOR(\"temperatures#isT4Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x08),\n+    IS_EWT_SENSOR(\"temperatures#isEWTSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x10),\n+    IS_HEATER_SENSOR(\"temperatures#isHeaterSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x20),\n+    IS_COOKERHOOD_SENSOR(\"temperatures#isCookerhoodSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x40),\n+    EWT_TEMPERATUR(\"temperatures#ewtTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATUR(\"temperatures#heaterTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATUR(\"temperatures#cookerhoodTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    IS_PREHEATER(\"options#isPreheater\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(\"options#isBypass\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(\"options#recuType\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"temperatures#indoorTemperatureIn\",\n+                    \"temperatures#outdoorTemperatureOut\", \"temperatures#indoorTemperatureOut\",\n+                    \"temperatures#outdoorTemperatureIn\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(\"options#recuSize\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanOut0\",\n+                    \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\", \"ventilation#fanIn0\",\n+                    \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(\"options#isChimney\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] {}, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(\"options#isCookerhood\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\", \"cookerhood#cookerhoodSpeed\",\n+                    \"temperatures#cookerhoodTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(\"options#isHeater\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\", \"menuP9#heaterState\",\n+                    \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(\"options#isEnthalpy\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\", \"enthalpy#enthalpyLevel\",\n+                    \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(\"options#isEWT\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\", \"ewt#ewtTemperatureHigh\",\n+                    \"temperatures#ewtTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    EWT_SPEED(\"ewt#ewtSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(\"ewt#ewtTemperatureLow\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(\"ewt#ewtTemperatureHigh\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(\"cookerhood#cookerhoodSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(\"heater#heaterPower\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 4 }),\n+    HEATER_POWER_I(\"heater#heaterPowerI\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATUR(\"heater#heaterTargetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5,\n+            4, new String[] { \"menuP9#heaterState\", \"heater#heaterPower\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    SOFTWARE_MAIN_VERSION(\"software#softwareMainVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(\"software#softwareMinorVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    SOFTWARE_BETA_VERSION(\"software#softwareBetaVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 2 }),\n+    ERROR_MESSAGE(\"ccease#errorMessage\", DataTypeMessage.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(\"error#errorACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(\"error#errorALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 2 }),\n+    ERRORA_PRELAST(\"error#errorAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(\"error#errorAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(\"error#errorAHighCurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(\"error#errorAHighLast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(\"error#errorAHighPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\"error#errorAHighPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(\"error#errorECurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(\"error#errorELast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 3 }),\n+    ERRORE_PRELAST(\"error#errorEPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(\"error#errorEPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(\"error#errorEACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(\"error#errorEALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 10 }),\n+    ERROREA_PRELAST(\"error#errorEAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(\"error#errorEAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(\"ccease#errorReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] { \"ccease#errorMessage\" }),\n+    FILTER_HOURS(\"times#filterHours\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 15, 16 }),\n+    FILTER_RESET(\"ccease#filterReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { \"times#filterHours\", \"ccease#filterError\" }),\n+    FILTER_ERROR(\"ccease#filterError\", DataTypeBoolean.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 8 }, 0x01),\n+    BYPASS_FACTOR(\"bypass#bypassFactor\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 2 }),\n+    BYPASS_LEVEL(\"bypass#bypassLevel\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 3 }),\n+    BYPASS_CORRECTION(\"bypass#bypassCorrection\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(\"bypass#bypassSummer\", DataTypeBoolean.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATUR(\"enthalpy#enthalpyTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(\"enthalpy#enthalpyHumidity\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(\"enthalpy#enthalpyLevel\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(\"enthalpy#enthalpyTime\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(\"preheater#preheaterValve\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\"preheater#preheaterFrostProtect\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 1 }),\n+    PREHEATER_HEATING(\"preheater#preheaterHeating\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\"preheater#preheaterFrostTime\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 3, 4 }),\n+    PREHEATER_OPTION(\"preheater#preheaterSafety\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 5 }),\n+    LEVEL0_TIME(\"times#level0Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(\"times#level1Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(\"times#level2Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(\"times#level3Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(\"times#freezeTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 9, 10 }),\n+    PREHEATER_TIME(\"times#preheaterTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 11, 12 }),\n+    BYPASS_TIME(\"times#bypassTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 13, 14 }),\n+    IS_ANALOG1(\"analog#isAnalog1\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(\"analog#isAnalog2\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(\"analog#isAnalog3\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(\"analog#isAnalog4\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(\"analog#isRF\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10),\n+    ANALOG1_MODE(\"analog#analog1Mode\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\", \"analog#analog1Value\",\n+                    \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(\"analog#analog2Mode\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\", \"analog#analog2Value\",\n+                    \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(\"analog#analog3Mode\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\", \"analog#analog3Value\",\n+                    \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(\"analog#analog4Mode\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\", \"analog#analog4Value\",\n+                    \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(\"analog#RFMode\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    ANALOG1_NEGATIVE(\"analog#analog1Negative\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x01),\n+    ANALOG2_NEGATIVE(\"analog#analog2Negative\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x02),\n+    ANALOG3_NEGATIVE(\"analog#analog3Negative\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x04),\n+    ANALOG4_NEGATIVE(\"analog#analog4Negative\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x08),\n+    RF_NEGATIVE(\"analog#RFNegative\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x10),\n+    ANALOG1_MIN(\"analog#analog1Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 3, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(\"analog#analog1Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 4, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(\"analog#analog1Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 5, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 6, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(\"analog#analog2Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 7, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(\"analog#analog2Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 8, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(\"analog#analog3Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 9, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(\"analog#analog3Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 10, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(\"analog#analog3Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 11, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(\"analog#analog4Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 12, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(\"analog#analog4Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 13, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(\"analog#analog4Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 14, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(\"analog#RFMin\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 15, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(\"analog#RFMax\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 16, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(\"analog#RFValue\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 17, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(\"analog#analogMode\", DataTypeNumber.class, new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            18, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(\"analog#analog1Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 0 }),\n+    ANALOG2_VOLT(\"analog#analog2Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 1 }),\n+    ANALOG3_VOLT(\"analog#analog3Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 2 }),\n+    ANALOG4_VOLT(\"analog#analog4Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 3 }),\n+    IS_L1_SWITCH(\"inputs#isL1Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x01),\n+    IS_L2_SWITCH(\"inputs#isL2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x02),\n+    IS_BATHROOM_SWITCH(\"inputs#isBathroomSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x01),\n+    IS_COOKERHOOD_SWITCH(\"inputs#isCookerhoodSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x02),\n+    IS_EXTERNAL_FILTER(\"inputs#isExternalFilter\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x04),\n+    IS_WTW(\"inputs#isWTW\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 1 }, 0x08),\n+    IS_BATHROOM2_SWITCH(\"inputs#isBathroom2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirCommandType.class);\n+    private String key;\n+    private Class<? extends ComfoAirDataType> data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private int change_command;\n+    /*\n+     * The size of the data block.\n+     */\n+    private int change_data_size;\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private int change_data_pos;\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public @Nullable ComfoAirDataType getDataType() {\n+        try {\n+            return data_type.newInstance();\n+        } catch (Exception e) {\n+            logger.debug(\"Creating new DataType went wrong \", e);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            Integer getCmd = commandType.read_command == 0 ? null : Integer.valueOf(commandType.read_command);\n+            Integer replyCmd = Integer.valueOf(commandType.read_reply_command);\n+\n+            return new ComfoAirCommand(key, getCmd, replyCmd, new int[0], null, null);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, State value) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        DecimalType decimalValue = value.as(DecimalType.class);\n+\n+        if (commandType != null && decimalValue != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType != null) {\n+                int[] data = dataType.convertFromState(value, commandType);\n+\n+                if (data != null) {\n+                    int dataPossition = commandType.getChangeDataPos();\n+                    int intValue = decimalValue.intValue();\n+\n+                    return new ComfoAirCommand(key, commandType.change_command, null, data, dataPossition, intValue);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    @SuppressWarnings(\"null\")\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                Integer getCmd = commandType.read_command == 0 ? null : Integer.valueOf(commandType.read_command);\n+                Integer replyCmd = Integer.valueOf(commandType.read_reply_command);\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key, getCmd, replyCmd, new int[0], null, null);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        Integer getCmd = affectedCommandType.read_command == 0 ? null\n+                                : Integer.valueOf(affectedCommandType.read_command);\n+                        Integer replyCmd = Integer.valueOf(affectedCommandType.read_reply_command);\n+\n+                        ComfoAirCommand command = commands.get(replyCmd);\n+\n+                        if (command == null) {\n+                            command = new ComfoAirCommand(affectedKey, getCmd, replyCmd, new int[0], null, null);\n+                            commands.put(replyCmd, command);\n+                        } else {\n+                            command.addKey(affectedKey);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 787}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0NjA0Nw==", "bodyText": "Your other method makes sure that read_reply_command != 0. Just making sure that it doesn't need to be the case here.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402046047", "createdAt": "2020-04-02T04:33:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,862 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(\"bindingControl#activate\", DataTypeBoolean.class, new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            new String[] {}, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(\"menuP1#menu20Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x01),\n+    MENU21_MODE(\"menuP1#menu21Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x02),\n+    MENU22_MODE(\"menuP1#menu22Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x04),\n+    MENU23_MODE(\"menuP1#menu23Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x08),\n+    MENU24_MODE(\"menuP1#menu24Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x10),\n+    MENU25_MODE(\"menuP1#menu25Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x20),\n+    MENU26_MODE(\"menuP1#menu26Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x40),\n+    MENU27_MODE(\"menuP1#menu27Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x80),\n+    MENU28_MODE(\"menuP1#menu28Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x01),\n+    MENU29_MODE(\"menuP1#menu29Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x02),\n+    BATHROOM_START_DELAY(\"menuP2#bathroomStartDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 0,\n+            new String[] { \"menuP1#menu21Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 0 }),\n+    BATHROOM_END_DELAY(\"menuP2#bathroomEndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 1,\n+            new String[] { \"menuP1#menu22Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 1 }),\n+    L1_END_DELAY(\"menuP2#L1EndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 2,\n+            new String[] { \"menuP1#menu27Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 2 }),\n+    PULSE_VENTILATION(\"menuP2#pulseVentilation\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 3,\n+            new String[] { \"menuP1#menu23Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 3 }),\n+    FILTER_WEEKS(\"menuP2#filterWeeks\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 4,\n+            new String[] { \"menuP1#menu24Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 4 }),\n+    RF_SHORT_DELAY(\"menuP2#RFShortDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 5,\n+            new String[] { \"menuP1#menu25Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 5 }),\n+    RF_LONG_DELAY(\"menuP2#RFLongDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 6,\n+            new String[] { \"menuP1#menu26Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 6 }),\n+    COOKERHOOD_DELAY(\"menuP2#cookerhoodDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 7,\n+            new String[] { \"menuP1#menu20Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 7 }),\n+    CHIMNEY_STATE(\"menuP9#chimneyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x01),\n+    BYPASS_STATE(\"menuP9#bypassState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x02),\n+    EWT_STATE(\"menuP9#ewtState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x04),\n+    HEATER_STATE(\"menuP9#heaterState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x08),\n+    V_CONTROL_STATE(\"menuP9#vControlState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x10),\n+    FROST_STATE(\"menuP9#frostState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x20),\n+    COOKERHOOD_STATE(\"menuP9#cookerhoodState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x40),\n+    ENTHALPY_STATE(\"menuP9#enthalpyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x80),\n+    FAN_OUT_0(\"ventilation#fanOut0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(\"ventilation#fanOut1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(\"ventilation#fanOut2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(\"ventilation#fanOut3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(\"ventilation#fanIn0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(\"ventilation#fanIn1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(\"ventilation#fanIn2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(\"ventilation#fanIn3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_IN_PERCENT(\"ventilation#fanInPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 0 }),\n+    FAN_O\u00daT_PERCENT(\"ventilation#fanOutPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(\"ventilation#fanInRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 2, 3 }),\n+    FAN_OUT_RPM(\"ventilation#fanOutRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 4, 5 }),\n+    FAN_LEVEL(\"ccease#fanLevel\", DataTypeNumber.class, new int[] { 0x01, 0x02, 0x03, 0x04 },\n+            Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanInRPM\",\n+                    \"ventilation#fanOutRPM\" },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    TARGET_TEMPERATUR(\"ccease#targetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(\"temperatures#outdoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\"temperatures#outdoorTemperatureOut\", DataTypeTemperature.class,\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(\"temperatures#indoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(\"temperatures#indoorTemperatureOut\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(\"temperatures#isT1Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x01),\n+    IS_T2_SENSOR(\"temperatures#isT2Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x02),\n+    IS_T3_SENSOR(\"temperatures#isT3Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x04),\n+    IS_T4_SENSOR(\"temperatures#isT4Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x08),\n+    IS_EWT_SENSOR(\"temperatures#isEWTSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x10),\n+    IS_HEATER_SENSOR(\"temperatures#isHeaterSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x20),\n+    IS_COOKERHOOD_SENSOR(\"temperatures#isCookerhoodSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x40),\n+    EWT_TEMPERATUR(\"temperatures#ewtTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATUR(\"temperatures#heaterTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATUR(\"temperatures#cookerhoodTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    IS_PREHEATER(\"options#isPreheater\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(\"options#isBypass\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(\"options#recuType\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"temperatures#indoorTemperatureIn\",\n+                    \"temperatures#outdoorTemperatureOut\", \"temperatures#indoorTemperatureOut\",\n+                    \"temperatures#outdoorTemperatureIn\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(\"options#recuSize\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanOut0\",\n+                    \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\", \"ventilation#fanIn0\",\n+                    \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(\"options#isChimney\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] {}, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(\"options#isCookerhood\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\", \"cookerhood#cookerhoodSpeed\",\n+                    \"temperatures#cookerhoodTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(\"options#isHeater\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\", \"menuP9#heaterState\",\n+                    \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(\"options#isEnthalpy\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\", \"enthalpy#enthalpyLevel\",\n+                    \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(\"options#isEWT\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\", \"ewt#ewtTemperatureHigh\",\n+                    \"temperatures#ewtTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    EWT_SPEED(\"ewt#ewtSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(\"ewt#ewtTemperatureLow\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(\"ewt#ewtTemperatureHigh\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(\"cookerhood#cookerhoodSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(\"heater#heaterPower\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 4 }),\n+    HEATER_POWER_I(\"heater#heaterPowerI\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATUR(\"heater#heaterTargetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5,\n+            4, new String[] { \"menuP9#heaterState\", \"heater#heaterPower\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    SOFTWARE_MAIN_VERSION(\"software#softwareMainVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(\"software#softwareMinorVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    SOFTWARE_BETA_VERSION(\"software#softwareBetaVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 2 }),\n+    ERROR_MESSAGE(\"ccease#errorMessage\", DataTypeMessage.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(\"error#errorACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(\"error#errorALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 2 }),\n+    ERRORA_PRELAST(\"error#errorAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(\"error#errorAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(\"error#errorAHighCurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(\"error#errorAHighLast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(\"error#errorAHighPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\"error#errorAHighPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(\"error#errorECurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(\"error#errorELast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 3 }),\n+    ERRORE_PRELAST(\"error#errorEPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(\"error#errorEPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(\"error#errorEACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(\"error#errorEALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 10 }),\n+    ERROREA_PRELAST(\"error#errorEAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(\"error#errorEAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(\"ccease#errorReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] { \"ccease#errorMessage\" }),\n+    FILTER_HOURS(\"times#filterHours\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 15, 16 }),\n+    FILTER_RESET(\"ccease#filterReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { \"times#filterHours\", \"ccease#filterError\" }),\n+    FILTER_ERROR(\"ccease#filterError\", DataTypeBoolean.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 8 }, 0x01),\n+    BYPASS_FACTOR(\"bypass#bypassFactor\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 2 }),\n+    BYPASS_LEVEL(\"bypass#bypassLevel\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 3 }),\n+    BYPASS_CORRECTION(\"bypass#bypassCorrection\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(\"bypass#bypassSummer\", DataTypeBoolean.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATUR(\"enthalpy#enthalpyTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(\"enthalpy#enthalpyHumidity\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(\"enthalpy#enthalpyLevel\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(\"enthalpy#enthalpyTime\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(\"preheater#preheaterValve\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\"preheater#preheaterFrostProtect\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 1 }),\n+    PREHEATER_HEATING(\"preheater#preheaterHeating\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\"preheater#preheaterFrostTime\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 3, 4 }),\n+    PREHEATER_OPTION(\"preheater#preheaterSafety\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 5 }),\n+    LEVEL0_TIME(\"times#level0Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(\"times#level1Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(\"times#level2Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(\"times#level3Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(\"times#freezeTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 9, 10 }),\n+    PREHEATER_TIME(\"times#preheaterTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 11, 12 }),\n+    BYPASS_TIME(\"times#bypassTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 13, 14 }),\n+    IS_ANALOG1(\"analog#isAnalog1\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(\"analog#isAnalog2\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(\"analog#isAnalog3\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(\"analog#isAnalog4\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(\"analog#isRF\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10),\n+    ANALOG1_MODE(\"analog#analog1Mode\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\", \"analog#analog1Value\",\n+                    \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(\"analog#analog2Mode\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\", \"analog#analog2Value\",\n+                    \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(\"analog#analog3Mode\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\", \"analog#analog3Value\",\n+                    \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(\"analog#analog4Mode\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\", \"analog#analog4Value\",\n+                    \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(\"analog#RFMode\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    ANALOG1_NEGATIVE(\"analog#analog1Negative\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x01),\n+    ANALOG2_NEGATIVE(\"analog#analog2Negative\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x02),\n+    ANALOG3_NEGATIVE(\"analog#analog3Negative\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x04),\n+    ANALOG4_NEGATIVE(\"analog#analog4Negative\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x08),\n+    RF_NEGATIVE(\"analog#RFNegative\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x10),\n+    ANALOG1_MIN(\"analog#analog1Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 3, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(\"analog#analog1Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 4, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(\"analog#analog1Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 5, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 6, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(\"analog#analog2Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 7, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(\"analog#analog2Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 8, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(\"analog#analog3Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 9, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(\"analog#analog3Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 10, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(\"analog#analog3Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 11, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(\"analog#analog4Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 12, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(\"analog#analog4Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 13, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(\"analog#analog4Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 14, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(\"analog#RFMin\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 15, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(\"analog#RFMax\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 16, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(\"analog#RFValue\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 17, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(\"analog#analogMode\", DataTypeNumber.class, new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            18, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(\"analog#analog1Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 0 }),\n+    ANALOG2_VOLT(\"analog#analog2Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 1 }),\n+    ANALOG3_VOLT(\"analog#analog3Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 2 }),\n+    ANALOG4_VOLT(\"analog#analog4Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 3 }),\n+    IS_L1_SWITCH(\"inputs#isL1Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x01),\n+    IS_L2_SWITCH(\"inputs#isL2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x02),\n+    IS_BATHROOM_SWITCH(\"inputs#isBathroomSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x01),\n+    IS_COOKERHOOD_SWITCH(\"inputs#isCookerhoodSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x02),\n+    IS_EXTERNAL_FILTER(\"inputs#isExternalFilter\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x04),\n+    IS_WTW(\"inputs#isWTW\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 1 }, 0x08),\n+    IS_BATHROOM2_SWITCH(\"inputs#isBathroom2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirCommandType.class);\n+    private String key;\n+    private Class<? extends ComfoAirDataType> data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private int change_command;\n+    /*\n+     * The size of the data block.\n+     */\n+    private int change_data_size;\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private int change_data_pos;\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public @Nullable ComfoAirDataType getDataType() {\n+        try {\n+            return data_type.newInstance();\n+        } catch (Exception e) {\n+            logger.debug(\"Creating new DataType went wrong \", e);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            Integer getCmd = commandType.read_command == 0 ? null : Integer.valueOf(commandType.read_command);\n+            Integer replyCmd = Integer.valueOf(commandType.read_reply_command);\n+\n+            return new ComfoAirCommand(key, getCmd, replyCmd, new int[0], null, null);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, State value) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        DecimalType decimalValue = value.as(DecimalType.class);\n+\n+        if (commandType != null && decimalValue != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType != null) {\n+                int[] data = dataType.convertFromState(value, commandType);\n+\n+                if (data != null) {\n+                    int dataPossition = commandType.getChangeDataPos();\n+                    int intValue = decimalValue.intValue();\n+\n+                    return new ComfoAirCommand(key, commandType.change_command, null, data, dataPossition, intValue);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    @SuppressWarnings(\"null\")\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                Integer getCmd = commandType.read_command == 0 ? null : Integer.valueOf(commandType.read_command);\n+                Integer replyCmd = Integer.valueOf(commandType.read_reply_command);\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key, getCmd, replyCmd, new int[0], null, null);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        Integer getCmd = affectedCommandType.read_command == 0 ? null\n+                                : Integer.valueOf(affectedCommandType.read_command);\n+                        Integer replyCmd = Integer.valueOf(affectedCommandType.read_reply_command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 778}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0NjU4OA==", "bodyText": "This logic is used a lot. Should it not be wrapped into the ComfoAirCommand constructor?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r402046588", "createdAt": "2020-04-02T04:35:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,862 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(\"bindingControl#activate\", DataTypeBoolean.class, new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            new String[] {}, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(\"menuP1#menu20Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x01),\n+    MENU21_MODE(\"menuP1#menu21Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x02),\n+    MENU22_MODE(\"menuP1#menu22Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x04),\n+    MENU23_MODE(\"menuP1#menu23Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x08),\n+    MENU24_MODE(\"menuP1#menu24Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x10),\n+    MENU25_MODE(\"menuP1#menu25Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x20),\n+    MENU26_MODE(\"menuP1#menu26Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x40),\n+    MENU27_MODE(\"menuP1#menu27Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 6 }, 0x80),\n+    MENU28_MODE(\"menuP1#menu28Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x01),\n+    MENU29_MODE(\"menuP1#menu29Mode\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 7 }, 0x02),\n+    BATHROOM_START_DELAY(\"menuP2#bathroomStartDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 0,\n+            new String[] { \"menuP1#menu21Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 0 }),\n+    BATHROOM_END_DELAY(\"menuP2#bathroomEndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 1,\n+            new String[] { \"menuP1#menu22Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 1 }),\n+    L1_END_DELAY(\"menuP2#L1EndDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 2,\n+            new String[] { \"menuP1#menu27Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 2 }),\n+    PULSE_VENTILATION(\"menuP2#pulseVentilation\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 3,\n+            new String[] { \"menuP1#menu23Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 3 }),\n+    FILTER_WEEKS(\"menuP2#filterWeeks\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 4,\n+            new String[] { \"menuP1#menu24Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 4 }),\n+    RF_SHORT_DELAY(\"menuP2#RFShortDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 5,\n+            new String[] { \"menuP1#menu25Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 5 }),\n+    RF_LONG_DELAY(\"menuP2#RFLongDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 6,\n+            new String[] { \"menuP1#menu26Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 6 }),\n+    COOKERHOOD_DELAY(\"menuP2#cookerhoodDelay\", DataTypeNumber.class, Constants.REQUEST_SET_DELAYS, 8, 7,\n+            new String[] { \"menuP1#menu20Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 7 }),\n+    CHIMNEY_STATE(\"menuP9#chimneyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x01),\n+    BYPASS_STATE(\"menuP9#bypassState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x02),\n+    EWT_STATE(\"menuP9#ewtState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x04),\n+    HEATER_STATE(\"menuP9#heaterState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x08),\n+    V_CONTROL_STATE(\"menuP9#vControlState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x10),\n+    FROST_STATE(\"menuP9#frostState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES,\n+            new int[] { 8 }, 0x20),\n+    COOKERHOOD_STATE(\"menuP9#cookerhoodState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x40),\n+    ENTHALPY_STATE(\"menuP9#enthalpyState\", DataTypeBoolean.class, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x80),\n+    FAN_OUT_0(\"ventilation#fanOut0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(\"ventilation#fanOut1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(\"ventilation#fanOut2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(\"ventilation#fanOut3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(\"ventilation#fanIn0\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(\"ventilation#fanIn1\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(\"ventilation#fanIn2\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(\"ventilation#fanIn3\", DataTypeNumber.class, Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_IN_PERCENT(\"ventilation#fanInPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 0 }),\n+    FAN_O\u00daT_PERCENT(\"ventilation#fanOutPercent\", DataTypeNumber.class, Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(\"ventilation#fanInRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 2, 3 }),\n+    FAN_OUT_RPM(\"ventilation#fanOutRPM\", DataTypeRPM.class, Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 4, 5 }),\n+    FAN_LEVEL(\"ccease#fanLevel\", DataTypeNumber.class, new int[] { 0x01, 0x02, 0x03, 0x04 },\n+            Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanInRPM\",\n+                    \"ventilation#fanOutRPM\" },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    TARGET_TEMPERATUR(\"ccease#targetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(\"temperatures#outdoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\"temperatures#outdoorTemperatureOut\", DataTypeTemperature.class,\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(\"temperatures#indoorTemperatureIn\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(\"temperatures#indoorTemperatureOut\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(\"temperatures#isT1Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x01),\n+    IS_T2_SENSOR(\"temperatures#isT2Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x02),\n+    IS_T3_SENSOR(\"temperatures#isT3Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x04),\n+    IS_T4_SENSOR(\"temperatures#isT4Sensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x08),\n+    IS_EWT_SENSOR(\"temperatures#isEWTSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x10),\n+    IS_HEATER_SENSOR(\"temperatures#isHeaterSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x20),\n+    IS_COOKERHOOD_SENSOR(\"temperatures#isCookerhoodSensor\", DataTypeBoolean.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x40),\n+    EWT_TEMPERATUR(\"temperatures#ewtTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATUR(\"temperatures#heaterTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATUR(\"temperatures#cookerhoodTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    IS_PREHEATER(\"options#isPreheater\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(\"options#isBypass\", DataTypeBoolean.class, Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(\"options#recuType\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"temperatures#indoorTemperatureIn\",\n+                    \"temperatures#outdoorTemperatureOut\", \"temperatures#indoorTemperatureOut\",\n+                    \"temperatures#outdoorTemperatureIn\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(\"options#recuSize\", DataTypeNumber.class, new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanOut0\",\n+                    \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\", \"ventilation#fanIn0\",\n+                    \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(\"options#isChimney\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] {}, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(\"options#isCookerhood\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\", \"cookerhood#cookerhoodSpeed\",\n+                    \"temperatures#cookerhoodTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(\"options#isHeater\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\", \"menuP9#heaterState\",\n+                    \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(\"options#isEnthalpy\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\", \"enthalpy#enthalpyLevel\",\n+                    \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(\"options#isEWT\", DataTypeNumber.class, new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\", \"ewt#ewtTemperatureHigh\",\n+                    \"temperatures#ewtTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    EWT_SPEED(\"ewt#ewtSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(\"ewt#ewtTemperatureLow\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(\"ewt#ewtTemperatureHigh\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(\"cookerhood#cookerhoodSpeed\", DataTypeNumber.class, Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(\"heater#heaterPower\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 4 }),\n+    HEATER_POWER_I(\"heater#heaterPowerI\", DataTypeNumber.class, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATUR(\"heater#heaterTargetTemperature\", DataTypeTemperature.class, Constants.REQUEST_SET_EWT, 5,\n+            4, new String[] { \"menuP9#heaterState\", \"heater#heaterPower\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    SOFTWARE_MAIN_VERSION(\"software#softwareMainVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(\"software#softwareMinorVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    SOFTWARE_BETA_VERSION(\"software#softwareBetaVersion\", DataTypeNumber.class, Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 2 }),\n+    ERROR_MESSAGE(\"ccease#errorMessage\", DataTypeMessage.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(\"error#errorACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(\"error#errorALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 2 }),\n+    ERRORA_PRELAST(\"error#errorAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(\"error#errorAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(\"error#errorAHighCurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(\"error#errorAHighLast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(\"error#errorAHighPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\"error#errorAHighPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(\"error#errorECurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(\"error#errorELast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 3 }),\n+    ERRORE_PRELAST(\"error#errorEPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(\"error#errorEPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(\"error#errorEACurrent\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(\"error#errorEALast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 10 }),\n+    ERROREA_PRELAST(\"error#errorEAPrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(\"error#errorEAPrePrelast\", DataTypeNumber.class, Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(\"ccease#errorReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] { \"ccease#errorMessage\" }),\n+    FILTER_HOURS(\"times#filterHours\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 15, 16 }),\n+    FILTER_RESET(\"ccease#filterReset\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { \"times#filterHours\", \"ccease#filterError\" }),\n+    FILTER_ERROR(\"ccease#filterError\", DataTypeBoolean.class, Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 8 }, 0x01),\n+    BYPASS_FACTOR(\"bypass#bypassFactor\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 2 }),\n+    BYPASS_LEVEL(\"bypass#bypassLevel\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS,\n+            new int[] { 3 }),\n+    BYPASS_CORRECTION(\"bypass#bypassCorrection\", DataTypeNumber.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(\"bypass#bypassSummer\", DataTypeBoolean.class, Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATUR(\"enthalpy#enthalpyTemperature\", DataTypeTemperature.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(\"enthalpy#enthalpyHumidity\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(\"enthalpy#enthalpyLevel\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(\"enthalpy#enthalpyTime\", DataTypeNumber.class, Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(\"preheater#preheaterValve\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\"preheater#preheaterFrostProtect\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 1 }),\n+    PREHEATER_HEATING(\"preheater#preheaterHeating\", DataTypeBoolean.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\"preheater#preheaterFrostTime\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 3, 4 }),\n+    PREHEATER_OPTION(\"preheater#preheaterSafety\", DataTypeNumber.class, Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 5 }),\n+    LEVEL0_TIME(\"times#level0Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(\"times#level1Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(\"times#level2Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(\"times#level3Time\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(\"times#freezeTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 9, 10 }),\n+    PREHEATER_TIME(\"times#preheaterTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 11, 12 }),\n+    BYPASS_TIME(\"times#bypassTime\", DataTypeNumber.class, Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 13, 14 }),\n+    IS_ANALOG1(\"analog#isAnalog1\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(\"analog#isAnalog2\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(\"analog#isAnalog3\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(\"analog#isAnalog4\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(\"analog#isRF\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10),\n+    ANALOG1_MODE(\"analog#analog1Mode\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\", \"analog#analog1Value\",\n+                    \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(\"analog#analog2Mode\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\", \"analog#analog2Value\",\n+                    \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(\"analog#analog3Mode\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\", \"analog#analog3Value\",\n+                    \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(\"analog#analog4Mode\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\", \"analog#analog4Value\",\n+                    \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(\"analog#RFMode\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    ANALOG1_NEGATIVE(\"analog#analog1Negative\", DataTypeBoolean.class, new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x01),\n+    ANALOG2_NEGATIVE(\"analog#analog2Negative\", DataTypeBoolean.class, new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x02),\n+    ANALOG3_NEGATIVE(\"analog#analog3Negative\", DataTypeBoolean.class, new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x04),\n+    ANALOG4_NEGATIVE(\"analog#analog4Negative\", DataTypeBoolean.class, new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x08),\n+    RF_NEGATIVE(\"analog#RFNegative\", DataTypeBoolean.class, new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x10),\n+    ANALOG1_MIN(\"analog#analog1Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 3, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(\"analog#analog1Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 4, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(\"analog#analog1Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 5, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 6, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(\"analog#analog2Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 7, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(\"analog#analog2Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 8, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(\"analog#analog3Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 9, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(\"analog#analog3Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 10, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(\"analog#analog3Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 11, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(\"analog#analog4Min\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 12, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(\"analog#analog4Max\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 13, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(\"analog#analog4Value\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 14, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(\"analog#RFMin\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 15, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(\"analog#RFMax\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 16, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(\"analog#RFValue\", DataTypeNumber.class, Constants.REQUEST_SET_ANALOGS, 19, 17, new String[] {},\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(\"analog#analogMode\", DataTypeNumber.class, new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            18, new String[] {}, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(\"analog#analog1Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 0 }),\n+    ANALOG2_VOLT(\"analog#analog2Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 1 }),\n+    ANALOG3_VOLT(\"analog#analog3Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 2 }),\n+    ANALOG4_VOLT(\"analog#analog4Volt\", DataTypeVolt.class, Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 3 }),\n+    IS_L1_SWITCH(\"inputs#isL1Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x01),\n+    IS_L2_SWITCH(\"inputs#isL2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 0 }, 0x02),\n+    IS_BATHROOM_SWITCH(\"inputs#isBathroomSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x01),\n+    IS_COOKERHOOD_SWITCH(\"inputs#isCookerhoodSwitch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x02),\n+    IS_EXTERNAL_FILTER(\"inputs#isExternalFilter\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x04),\n+    IS_WTW(\"inputs#isWTW\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 1 }, 0x08),\n+    IS_BATHROOM2_SWITCH(\"inputs#isBathroom2Switch\", DataTypeBoolean.class, Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirCommandType.class);\n+    private String key;\n+    private Class<? extends ComfoAirDataType> data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private int change_command;\n+    /*\n+     * The size of the data block.\n+     */\n+    private int change_data_size;\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private int change_data_pos;\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int[] possible_values,\n+            int change_command, int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, Class<? extends ComfoAirDataType> data_type, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public @Nullable ComfoAirDataType getDataType() {\n+        try {\n+            return data_type.newInstance();\n+        } catch (Exception e) {\n+            logger.debug(\"Creating new DataType went wrong \", e);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            Integer getCmd = commandType.read_command == 0 ? null : Integer.valueOf(commandType.read_command);\n+            Integer replyCmd = Integer.valueOf(commandType.read_reply_command);\n+\n+            return new ComfoAirCommand(key, getCmd, replyCmd, new int[0], null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cfeeedecfa220facce39c9185080742eabf78c6"}, "originalPosition": 707}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9cb55432e943a2e713bd42a8a3b4ff8950bfbf0", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/e9cb55432e943a2e713bd42a8a3b4ff8950bfbf0", "committedDate": "2020-05-22T08:08:31Z", "message": "address review comments 1\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}, "afterCommit": {"oid": "b24240b1f7ab11dea1c305315dbb9f1b566d9fce", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/b24240b1f7ab11dea1c305315dbb9f1b566d9fce", "committedDate": "2020-05-25T17:03:29Z", "message": "address review comments 2\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzQ5Mzg0", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-418749384", "createdAt": "2020-05-26T23:39:16Z", "commit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzozOToxN1rOGaz0Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMDoxMjozMFrOGa0aMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2NTEwMg==", "bodyText": "You should keep track of the returned Future so you can cancel it when the handler is disposed.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r430765102", "createdAt": "2020-05-26T23:39:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+\n+                State state = commandToState(command, channelId);\n+\n+                if (state instanceof UnDefType) {\n+                    logger.warn(\"Unhandled command type: {}\", command.toString());\n+                } else {\n+                    ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n+\n+                    if (changeCommand != null) {\n+                        sendCommand(changeCommand, channelId);\n+\n+                        Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                                .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                        if (affectedReadCommands.size() > 0) {\n+                            Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                            scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2NTMxMw==", "bodyText": "What RuntimeException are you expecting here?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r430765313", "createdAt": "2020-05-26T23:40:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+\n+                State state = commandToState(command, channelId);\n+\n+                if (state instanceof UnDefType) {\n+                    logger.warn(\"Unhandled command type: {}\", command.toString());\n+                } else {\n+                    ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n+\n+                    if (changeCommand != null) {\n+                        sendCommand(changeCommand, channelId);\n+\n+                        Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                                .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                        if (affectedReadCommands.size() > 0) {\n+                            Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                            scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                        }\n+                    }\n+                }\n+            } catch (final RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2NzMyNg==", "bodyText": "No reason to get the set of channels when you might not even use them.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n          \n          \n            \n                                    .filter(this::isLinked).collect(Collectors.toSet());\n          \n          \n            \n                            Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n          \n          \n            \n            \n          \n          \n            \n                            State state = commandToState(command, channelId);\n          \n          \n            \n            \n          \n          \n            \n                            if (state instanceof UnDefType) {\n          \n          \n            \n                                logger.warn(\"Unhandled command type: {}\", command.toString());\n          \n          \n            \n                            } else {\n          \n          \n            \n                                ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n          \n          \n            \n            \n          \n          \n            \n                                if (changeCommand != null) {\n          \n          \n            \n                            State state = commandToState(command, channelId);\n          \n          \n            \n            \n          \n          \n            \n                            if (state instanceof UnDefType) {\n          \n          \n            \n                                logger.warn(\"Unhandled command type: {}\", command);\n          \n          \n            \n                            } else {\n          \n          \n            \n                                ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n          \n          \n            \n            \n          \n          \n            \n                                if (changeCommand != null) {\n          \n          \n            \n                                    Set<String> keysToUpdate = getThing().getChannels().stream().map(Channel::getUID)\n          \n          \n            \n                                    .filter(this::isLinked).map(ChannelUID::getId).collect(Collectors.toSet());", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r430767326", "createdAt": "2020-05-26T23:46:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            try {\n+                Set<ChannelUID> channelsLinked = getThing().getChannels().stream().map(Channel::getUID)\n+                        .filter(this::isLinked).collect(Collectors.toSet());\n+                Set<String> keysToUpdate = channelsLinked.stream().map(ChannelUID::getId).collect(Collectors.toSet());\n+\n+                State state = commandToState(command, channelId);\n+\n+                if (state instanceof UnDefType) {\n+                    logger.warn(\"Unhandled command type: {}\", command.toString());\n+                } else {\n+                    ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, state);\n+\n+                    if (changeCommand != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2OTg1NQ==", "bodyText": "minor optimization\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i <= get_reply_data_pos.length - 1; i++) {\n          \n          \n            \n                            if (get_reply_data_pos[i] < data.length) {\n          \n          \n            \n                                value.append((char) data[get_reply_data_pos[i]]);\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        for (int pos : get_reply_data_pos) {\n          \n          \n            \n                            if (pos < data.length) {\n          \n          \n            \n                                value.append((char) data[pos]);\n          \n          \n            \n                            }\n          \n          \n            \n                        }", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r430769855", "createdAt": "2020-05-26T23:55:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/ComfoAirDataType.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+\n+/**\n+ * Abstract class to convert binary hex values into openHAB states and vice\n+ * versa\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ */\n+@NonNullByDefault\n+public interface ComfoAirDataType {\n+    /**\n+     * Generate a openHAB State object based on response data.\n+     *\n+     * @param response\n+     * @param commandType\n+     * @return converted State object\n+     */\n+    State convertToState(int[] response, ComfoAirCommandType commandType);\n+\n+    /**\n+     * Generate byte array based on a openHAB State.\n+     *\n+     * @param value\n+     * @param commandType\n+     * @return converted byte array\n+     */\n+    int @Nullable [] convertFromState(State value, ComfoAirCommandType commandType);\n+\n+    default int calculateNumberValue(int[] data, ComfoAirCommandType commandType) {\n+        int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+        int value = 0;\n+        if (get_reply_data_pos != null) {\n+            int base = 0;\n+\n+            for (int i = get_reply_data_pos.length - 1; i >= 0; i--) {\n+                if (get_reply_data_pos[i] < data.length) {\n+                    value += data[get_reply_data_pos[i]] << base;\n+                    base += 8;\n+                } else {\n+                    return -1;\n+                }\n+            }\n+        } else {\n+            value = -1;\n+        }\n+        return value;\n+    }\n+\n+    default String calculateStringValue(int[] data, ComfoAirCommandType commandType) {\n+        int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+        StringBuilder value = new StringBuilder();\n+        if (get_reply_data_pos != null) {\n+            for (int i = 0; i <= get_reply_data_pos.length - 1; i++) {\n+                if (get_reply_data_pos[i] < data.length) {\n+                    value.append((char) data[get_reply_data_pos[i]]);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc3MjA4Mg==", "bodyText": "How come convertToState returns a QuantityType but this method expects a DecimalType?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r430772082", "createdAt": "2020-05-27T00:03:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeTemperature.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle temperature values\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - QuantityTypes\n+ */\n+@NonNullByDefault\n+public class DataTypeTemperature implements ComfoAirDataType {\n+    private static DataTypeTemperature SINGLETON_INSTANCE = new DataTypeTemperature();\n+\n+    private DataTypeTemperature() {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(DataTypeTemperature.class);\n+\n+    public static DataTypeTemperature getInstance() {\n+        return SINGLETON_INSTANCE;\n+    }\n+\n+    @Override\n+    public State convertToState(int @Nullable [] data, ComfoAirCommandType commandType) {\n+        if (data == null) {\n+            logger.trace(\"\\\"DataTypeTemperature\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return UnDefType.NULL;\n+        } else {\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+            if (get_reply_data_pos != null && get_reply_data_pos[0] < data.length) {\n+                return new QuantityType<>((((double) data[get_reply_data_pos[0]]) / 2) - 20, SIUnits.CELSIUS);\n+            } else {\n+                return UnDefType.NULL;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public int @Nullable [] convertFromState(State value, ComfoAirCommandType commandType) {\n+        if (((DecimalType) value) instanceof DecimalType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc3MzczMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<ComfoAirCommandType> commands = new ArrayList<ComfoAirCommandType>();\n          \n          \n            \n                    List<ComfoAirCommandType> commands = new ArrayList<>();", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r430773733", "createdAt": "2020-05-27T00:08:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,875 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(\"bindingControl#activate\", DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232,\n+            1, 0, Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 },\n+            0x03),\n+    MENU20_MODE(\"menuP1#menu20Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x01),\n+    MENU21_MODE(\"menuP1#menu21Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x02),\n+    MENU22_MODE(\"menuP1#menu22Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x04),\n+    MENU23_MODE(\"menuP1#menu23Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x08),\n+    MENU24_MODE(\"menuP1#menu24Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x10),\n+    MENU25_MODE(\"menuP1#menu25Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x20),\n+    MENU26_MODE(\"menuP1#menu26Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x40),\n+    MENU27_MODE(\"menuP1#menu27Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x80),\n+    MENU28_MODE(\"menuP1#menu28Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 7 }, 0x01),\n+    MENU29_MODE(\"menuP1#menu29Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 7 }, 0x02),\n+    BATHROOM_START_DELAY(\"menuP2#bathroomStartDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0,\n+            new String[] { \"menuP1#menu21Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 0 }),\n+    BATHROOM_END_DELAY(\"menuP2#bathroomEndDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1,\n+            new String[] { \"menuP1#menu22Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 1 }),\n+    L1_END_DELAY(\"menuP2#L1EndDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2,\n+            new String[] { \"menuP1#menu27Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 2 }),\n+    PULSE_VENTILATION(\"menuP2#pulseVentilation\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3,\n+            new String[] { \"menuP1#menu23Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 3 }),\n+    FILTER_WEEKS(\"menuP2#filterWeeks\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4,\n+            new String[] { \"menuP1#menu24Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 4 }),\n+    RF_SHORT_DELAY(\"menuP2#RFShortDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5,\n+            new String[] { \"menuP1#menu25Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 5 }),\n+    RF_LONG_DELAY(\"menuP2#RFLongDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6,\n+            new String[] { \"menuP1#menu26Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 6 }),\n+    COOKERHOOD_DELAY(\"menuP2#cookerhoodDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7,\n+            new String[] { \"menuP1#menu20Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 7 }),\n+    CHIMNEY_STATE(\"menuP9#chimneyState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x01),\n+    BYPASS_STATE(\"menuP9#bypassState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x02),\n+    EWT_STATE(\"menuP9#ewtState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x04),\n+    HEATER_STATE(\"menuP9#heaterState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x08),\n+    V_CONTROL_STATE(\"menuP9#vControlState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x10),\n+    FROST_STATE(\"menuP9#frostState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x20),\n+    COOKERHOOD_STATE(\"menuP9#cookerhoodState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x40),\n+    ENTHALPY_STATE(\"menuP9#enthalpyState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x80),\n+    FAN_OUT_0(\"ventilation#fanOut0\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(\"ventilation#fanOut1\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(\"ventilation#fanOut2\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(\"ventilation#fanOut3\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(\"ventilation#fanIn0\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(\"ventilation#fanIn1\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(\"ventilation#fanIn2\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(\"ventilation#fanIn3\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_IN_PERCENT(\"ventilation#fanInPercent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_O\u00daT_PERCENT(\"ventilation#fanOutPercent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(\"ventilation#fanInRPM\", DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 2, 3 }),\n+    FAN_OUT_RPM(\"ventilation#fanOutRPM\", DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 4, 5 }),\n+    FAN_LEVEL(\"ccease#fanLevel\", DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 },\n+            Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanInRPM\",\n+                    \"ventilation#fanOutRPM\" },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    TARGET_TEMPERATUR(\"ccease#targetTemperature\", DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(\"temperatures#outdoorTemperatureIn\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\"temperatures#outdoorTemperatureOut\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(\"temperatures#indoorTemperatureIn\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(\"temperatures#indoorTemperatureOut\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(\"temperatures#isT1Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x01),\n+    IS_T2_SENSOR(\"temperatures#isT2Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x02),\n+    IS_T3_SENSOR(\"temperatures#isT3Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x04),\n+    IS_T4_SENSOR(\"temperatures#isT4Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x08),\n+    IS_EWT_SENSOR(\"temperatures#isEWTSensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x10),\n+    IS_HEATER_SENSOR(\"temperatures#isHeaterSensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x20),\n+    IS_COOKERHOOD_SENSOR(\"temperatures#isCookerhoodSensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x40),\n+    EWT_TEMPERATUR(\"temperatures#ewtTemperature\", DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATUR(\"temperatures#heaterTemperature\", DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATUR(\"temperatures#cookerhoodTemperature\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    IS_PREHEATER(\"options#isPreheater\", DataTypeBoolean.getInstance(), Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(\"options#isBypass\", DataTypeBoolean.getInstance(), Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(\"options#recuType\", DataTypeNumber.getInstance(), new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES,\n+            8, 2,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"temperatures#indoorTemperatureIn\",\n+                    \"temperatures#outdoorTemperatureOut\", \"temperatures#indoorTemperatureOut\",\n+                    \"temperatures#outdoorTemperatureIn\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(\"options#recuSize\", DataTypeNumber.getInstance(), new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES,\n+            8, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanOut0\",\n+                    \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\", \"ventilation#fanIn0\",\n+                    \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(\"options#isChimney\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_STATES, 8,\n+            4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 },\n+            0x01),\n+    IS_COOKERHOOD(\"options#isCookerhood\", DataTypeBoolean.getInstance(), new int[] { 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\", \"cookerhood#cookerhoodSpeed\",\n+                    \"temperatures#cookerhoodTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(\"options#isHeater\", DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\", \"menuP9#heaterState\",\n+                    \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(\"options#isEnthalpy\", DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\", \"enthalpy#enthalpyLevel\",\n+                    \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(\"options#isEWT\", DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES,\n+            8, 7,\n+            new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\", \"ewt#ewtTemperatureHigh\",\n+                    \"temperatures#ewtTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    EWT_SPEED(\"ewt#ewtSpeed\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(\"ewt#ewtTemperatureLow\", DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(\"ewt#ewtTemperatureHigh\", DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(\"cookerhood#cookerhoodSpeed\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(\"heater#heaterPower\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 4 }),\n+    HEATER_POWER_I(\"heater#heaterPowerI\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATUR(\"heater#heaterTargetTemperature\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { \"menuP9#heaterState\", \"heater#heaterPower\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    SOFTWARE_MAIN_VERSION(\"softwareMainVersion\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(\"softwareMinorVersion\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(\"deviceName\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(\"ccease#errorMessage\", DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(\"error#errorACurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(\"error#errorALast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(\"error#errorAPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(\"error#errorAPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(\"error#errorAHighCurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(\"error#errorAHighLast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(\"error#errorAHighPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\"error#errorAHighPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(\"error#errorECurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(\"error#errorELast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(\"error#errorEPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(\"error#errorEPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(\"error#errorEACurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(\"error#errorEALast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(\"error#errorEAPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(\"error#errorEAPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(\"ccease#errorReset\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4,\n+            0, new String[] { \"ccease#errorMessage\" }),\n+    FILTER_HOURS(\"times#filterHours\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(\"ccease#filterReset\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS,\n+            4, 3, new String[] { \"times#filterHours\", \"ccease#filterError\" }),\n+    FILTER_ERROR(\"ccease#filterError\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 8 }, 0x01),\n+    BYPASS_FACTOR(\"bypass#bypassFactor\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(\"bypass#bypassLevel\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(\"bypass#bypassCorrection\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(\"bypass#bypassSummer\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATUR(\"enthalpy#enthalpyTemperature\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(\"enthalpy#enthalpyHumidity\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(\"enthalpy#enthalpyLevel\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(\"enthalpy#enthalpyTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(\"preheater#preheaterValve\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\"preheater#preheaterFrostProtect\", DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER, new int[] { 1 }),\n+    PREHEATER_HEATING(\"preheater#preheaterHeating\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\"preheater#preheaterFrostTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 3, 4 }),\n+    PREHEATER_OPTION(\"preheater#preheaterSafety\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 5 }),\n+    LEVEL0_TIME(\"times#level0Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(\"times#level1Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(\"times#level2Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(\"times#level3Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(\"times#freezeTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(\"times#preheaterTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(\"times#bypassTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    IS_ANALOG1(\"analog#isAnalog1\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(\"analog#isAnalog2\", DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(\"analog#isAnalog3\", DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(\"analog#isAnalog4\", DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(\"analog#isRF\", DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10),\n+    ANALOG1_MODE(\"analog#analog1Mode\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\", \"analog#analog1Value\",\n+                    \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(\"analog#analog2Mode\", DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\", \"analog#analog2Value\",\n+                    \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(\"analog#analog3Mode\", DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\", \"analog#analog3Value\",\n+                    \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(\"analog#analog4Mode\", DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\", \"analog#analog4Value\",\n+                    \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(\"analog#RFMode\", DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    ANALOG1_NEGATIVE(\"analog#analog1Negative\", DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x01),\n+    ANALOG2_NEGATIVE(\"analog#analog2Negative\", DataTypeBoolean.getInstance(), new int[] { 0x02 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x02),\n+    ANALOG3_NEGATIVE(\"analog#analog3Negative\", DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x04),\n+    ANALOG4_NEGATIVE(\"analog#analog4Negative\", DataTypeBoolean.getInstance(), new int[] { 0x08 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x08),\n+    RF_NEGATIVE(\"analog#RFNegative\", DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS,\n+            new int[] { 2 }, 0x10),\n+    ANALOG1_MIN(\"analog#analog1Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(\"analog#analog1Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(\"analog#analog1Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(\"analog#analog2Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(\"analog#analog2Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(\"analog#analog3Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(\"analog#analog3Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(\"analog#analog3Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(\"analog#analog4Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(\"analog#analog4Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(\"analog#analog4Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(\"analog#RFMin\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(\"analog#RFMax\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(\"analog#RFValue\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(\"analog#analogMode\", DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 18, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(\"analog#analog1Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 0 }),\n+    ANALOG2_VOLT(\"analog#analog2Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 1 }),\n+    ANALOG3_VOLT(\"analog#analog3Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 2 }),\n+    ANALOG4_VOLT(\"analog#analog4Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 3 }),\n+    IS_L1_SWITCH(\"inputs#isL1Switch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 0 }, 0x01),\n+    IS_L2_SWITCH(\"inputs#isL2Switch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 0 }, 0x02),\n+    IS_BATHROOM_SWITCH(\"inputs#isBathroomSwitch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x01),\n+    IS_COOKERHOOD_SWITCH(\"inputs#isCookerhoodSwitch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x02),\n+    IS_EXTERNAL_FILTER(\"inputs#isExternalFilter\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x04),\n+    IS_WTW(\"inputs#isWTW\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 1 }, 0x08),\n+    IS_BATHROOM2_SWITCH(\"inputs#isBathroom2Switch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private int change_command;\n+    /*\n+     * The size of the data block.\n+     */\n+    private int change_data_size;\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private int change_data_pos;\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.read_command = 0;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            if (commandType.read_command == 0) {\n+                return null;\n+            }\n+            int getCmd = commandType.read_command;\n+            int replyCmd = commandType.read_reply_command;\n+\n+            return new ComfoAirCommand(key, getCmd, replyCmd, Constants.EMPTY_INT_ARRAY, null, null);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, State value) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        DecimalType decimalValue = value.as(DecimalType.class);\n+\n+        if (commandType != null && decimalValue != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            int[] data = dataType.convertFromState(value, commandType);\n+\n+            if (data != null) {\n+                int dataPossition = commandType.getChangeDataPos();\n+                int intValue = decimalValue.intValue();\n+\n+                return new ComfoAirCommand(key, commandType.change_command, null, data, dataPossition, intValue);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                int getCmd = commandType.read_command == 0 ? null : commandType.read_command;\n+                int replyCmd = commandType.read_reply_command;\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key, getCmd, replyCmd, Constants.EMPTY_INT_ARRAY, null,\n+                        null);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        if (affectedCommandType.read_reply_command == 0) {\n+                            continue;\n+                        }\n+                        commands = modifiedCommandCollection(commands, affectedCommandType);\n+                    }\n+                }\n+            }\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get all commands which receive informations to update items.\n+     *\n+     * @return all ComfoAirCommand's identified by keys\n+     */\n+    public static Collection<ComfoAirCommand> getReadCommandsByEventTypes(List<String> keys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();\n+        for (ComfoAirCommandType entry : values()) {\n+            if (!keys.contains(entry.key)) {\n+                continue;\n+            }\n+            if (entry.read_reply_command == 0) {\n+                continue;\n+            }\n+            commands = modifiedCommandCollection(commands, entry);\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get commandtypes which matches the replyCmd.\n+     *\n+     * @param replyCmd\n+     *            reply command byte value\n+     * @return ComfoAirCommandType identified by replyCmd\n+     */\n+    public static List<ComfoAirCommandType> getCommandTypesByReplyCmd(int replyCmd) {\n+        List<ComfoAirCommandType> commands = new ArrayList<ComfoAirCommandType>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "originalPosition": 833}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc3Mzc4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();\n          \n          \n            \n                    Map<Integer, ComfoAirCommand> commands = new HashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r430773782", "createdAt": "2020-05-27T00:09:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,875 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(\"bindingControl#activate\", DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232,\n+            1, 0, Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 },\n+            0x03),\n+    MENU20_MODE(\"menuP1#menu20Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x01),\n+    MENU21_MODE(\"menuP1#menu21Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x02),\n+    MENU22_MODE(\"menuP1#menu22Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x04),\n+    MENU23_MODE(\"menuP1#menu23Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x08),\n+    MENU24_MODE(\"menuP1#menu24Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x10),\n+    MENU25_MODE(\"menuP1#menu25Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x20),\n+    MENU26_MODE(\"menuP1#menu26Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x40),\n+    MENU27_MODE(\"menuP1#menu27Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x80),\n+    MENU28_MODE(\"menuP1#menu28Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 7 }, 0x01),\n+    MENU29_MODE(\"menuP1#menu29Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 7 }, 0x02),\n+    BATHROOM_START_DELAY(\"menuP2#bathroomStartDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0,\n+            new String[] { \"menuP1#menu21Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 0 }),\n+    BATHROOM_END_DELAY(\"menuP2#bathroomEndDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1,\n+            new String[] { \"menuP1#menu22Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 1 }),\n+    L1_END_DELAY(\"menuP2#L1EndDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2,\n+            new String[] { \"menuP1#menu27Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 2 }),\n+    PULSE_VENTILATION(\"menuP2#pulseVentilation\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3,\n+            new String[] { \"menuP1#menu23Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 3 }),\n+    FILTER_WEEKS(\"menuP2#filterWeeks\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4,\n+            new String[] { \"menuP1#menu24Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 4 }),\n+    RF_SHORT_DELAY(\"menuP2#RFShortDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5,\n+            new String[] { \"menuP1#menu25Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 5 }),\n+    RF_LONG_DELAY(\"menuP2#RFLongDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6,\n+            new String[] { \"menuP1#menu26Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 6 }),\n+    COOKERHOOD_DELAY(\"menuP2#cookerhoodDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7,\n+            new String[] { \"menuP1#menu20Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 7 }),\n+    CHIMNEY_STATE(\"menuP9#chimneyState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x01),\n+    BYPASS_STATE(\"menuP9#bypassState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x02),\n+    EWT_STATE(\"menuP9#ewtState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x04),\n+    HEATER_STATE(\"menuP9#heaterState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x08),\n+    V_CONTROL_STATE(\"menuP9#vControlState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x10),\n+    FROST_STATE(\"menuP9#frostState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x20),\n+    COOKERHOOD_STATE(\"menuP9#cookerhoodState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x40),\n+    ENTHALPY_STATE(\"menuP9#enthalpyState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x80),\n+    FAN_OUT_0(\"ventilation#fanOut0\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(\"ventilation#fanOut1\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(\"ventilation#fanOut2\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(\"ventilation#fanOut3\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(\"ventilation#fanIn0\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(\"ventilation#fanIn1\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(\"ventilation#fanIn2\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(\"ventilation#fanIn3\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_IN_PERCENT(\"ventilation#fanInPercent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_O\u00daT_PERCENT(\"ventilation#fanOutPercent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(\"ventilation#fanInRPM\", DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 2, 3 }),\n+    FAN_OUT_RPM(\"ventilation#fanOutRPM\", DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 4, 5 }),\n+    FAN_LEVEL(\"ccease#fanLevel\", DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 },\n+            Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanInRPM\",\n+                    \"ventilation#fanOutRPM\" },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    TARGET_TEMPERATUR(\"ccease#targetTemperature\", DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(\"temperatures#outdoorTemperatureIn\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\"temperatures#outdoorTemperatureOut\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(\"temperatures#indoorTemperatureIn\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(\"temperatures#indoorTemperatureOut\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(\"temperatures#isT1Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x01),\n+    IS_T2_SENSOR(\"temperatures#isT2Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x02),\n+    IS_T3_SENSOR(\"temperatures#isT3Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x04),\n+    IS_T4_SENSOR(\"temperatures#isT4Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x08),\n+    IS_EWT_SENSOR(\"temperatures#isEWTSensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x10),\n+    IS_HEATER_SENSOR(\"temperatures#isHeaterSensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x20),\n+    IS_COOKERHOOD_SENSOR(\"temperatures#isCookerhoodSensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x40),\n+    EWT_TEMPERATUR(\"temperatures#ewtTemperature\", DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATUR(\"temperatures#heaterTemperature\", DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATUR(\"temperatures#cookerhoodTemperature\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    IS_PREHEATER(\"options#isPreheater\", DataTypeBoolean.getInstance(), Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(\"options#isBypass\", DataTypeBoolean.getInstance(), Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(\"options#recuType\", DataTypeNumber.getInstance(), new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES,\n+            8, 2,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"temperatures#indoorTemperatureIn\",\n+                    \"temperatures#outdoorTemperatureOut\", \"temperatures#indoorTemperatureOut\",\n+                    \"temperatures#outdoorTemperatureIn\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(\"options#recuSize\", DataTypeNumber.getInstance(), new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES,\n+            8, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanOut0\",\n+                    \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\", \"ventilation#fanIn0\",\n+                    \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(\"options#isChimney\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_STATES, 8,\n+            4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 },\n+            0x01),\n+    IS_COOKERHOOD(\"options#isCookerhood\", DataTypeBoolean.getInstance(), new int[] { 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\", \"cookerhood#cookerhoodSpeed\",\n+                    \"temperatures#cookerhoodTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(\"options#isHeater\", DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\", \"menuP9#heaterState\",\n+                    \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(\"options#isEnthalpy\", DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\", \"enthalpy#enthalpyLevel\",\n+                    \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(\"options#isEWT\", DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES,\n+            8, 7,\n+            new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\", \"ewt#ewtTemperatureHigh\",\n+                    \"temperatures#ewtTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    EWT_SPEED(\"ewt#ewtSpeed\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(\"ewt#ewtTemperatureLow\", DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(\"ewt#ewtTemperatureHigh\", DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(\"cookerhood#cookerhoodSpeed\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(\"heater#heaterPower\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 4 }),\n+    HEATER_POWER_I(\"heater#heaterPowerI\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATUR(\"heater#heaterTargetTemperature\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { \"menuP9#heaterState\", \"heater#heaterPower\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    SOFTWARE_MAIN_VERSION(\"softwareMainVersion\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(\"softwareMinorVersion\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(\"deviceName\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(\"ccease#errorMessage\", DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(\"error#errorACurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(\"error#errorALast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(\"error#errorAPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(\"error#errorAPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(\"error#errorAHighCurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(\"error#errorAHighLast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(\"error#errorAHighPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\"error#errorAHighPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(\"error#errorECurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(\"error#errorELast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(\"error#errorEPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(\"error#errorEPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(\"error#errorEACurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(\"error#errorEALast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(\"error#errorEAPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(\"error#errorEAPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(\"ccease#errorReset\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4,\n+            0, new String[] { \"ccease#errorMessage\" }),\n+    FILTER_HOURS(\"times#filterHours\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(\"ccease#filterReset\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS,\n+            4, 3, new String[] { \"times#filterHours\", \"ccease#filterError\" }),\n+    FILTER_ERROR(\"ccease#filterError\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 8 }, 0x01),\n+    BYPASS_FACTOR(\"bypass#bypassFactor\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(\"bypass#bypassLevel\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(\"bypass#bypassCorrection\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(\"bypass#bypassSummer\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATUR(\"enthalpy#enthalpyTemperature\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(\"enthalpy#enthalpyHumidity\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(\"enthalpy#enthalpyLevel\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(\"enthalpy#enthalpyTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(\"preheater#preheaterValve\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\"preheater#preheaterFrostProtect\", DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER, new int[] { 1 }),\n+    PREHEATER_HEATING(\"preheater#preheaterHeating\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\"preheater#preheaterFrostTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 3, 4 }),\n+    PREHEATER_OPTION(\"preheater#preheaterSafety\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 5 }),\n+    LEVEL0_TIME(\"times#level0Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(\"times#level1Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(\"times#level2Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(\"times#level3Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(\"times#freezeTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(\"times#preheaterTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(\"times#bypassTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    IS_ANALOG1(\"analog#isAnalog1\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(\"analog#isAnalog2\", DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(\"analog#isAnalog3\", DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(\"analog#isAnalog4\", DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(\"analog#isRF\", DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10),\n+    ANALOG1_MODE(\"analog#analog1Mode\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\", \"analog#analog1Value\",\n+                    \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(\"analog#analog2Mode\", DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\", \"analog#analog2Value\",\n+                    \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(\"analog#analog3Mode\", DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\", \"analog#analog3Value\",\n+                    \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(\"analog#analog4Mode\", DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\", \"analog#analog4Value\",\n+                    \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(\"analog#RFMode\", DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    ANALOG1_NEGATIVE(\"analog#analog1Negative\", DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x01),\n+    ANALOG2_NEGATIVE(\"analog#analog2Negative\", DataTypeBoolean.getInstance(), new int[] { 0x02 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x02),\n+    ANALOG3_NEGATIVE(\"analog#analog3Negative\", DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x04),\n+    ANALOG4_NEGATIVE(\"analog#analog4Negative\", DataTypeBoolean.getInstance(), new int[] { 0x08 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x08),\n+    RF_NEGATIVE(\"analog#RFNegative\", DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS,\n+            new int[] { 2 }, 0x10),\n+    ANALOG1_MIN(\"analog#analog1Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(\"analog#analog1Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(\"analog#analog1Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(\"analog#analog2Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(\"analog#analog2Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(\"analog#analog3Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(\"analog#analog3Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(\"analog#analog3Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(\"analog#analog4Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(\"analog#analog4Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(\"analog#analog4Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(\"analog#RFMin\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(\"analog#RFMax\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(\"analog#RFValue\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(\"analog#analogMode\", DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 18, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(\"analog#analog1Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 0 }),\n+    ANALOG2_VOLT(\"analog#analog2Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 1 }),\n+    ANALOG3_VOLT(\"analog#analog3Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 2 }),\n+    ANALOG4_VOLT(\"analog#analog4Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 3 }),\n+    IS_L1_SWITCH(\"inputs#isL1Switch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 0 }, 0x01),\n+    IS_L2_SWITCH(\"inputs#isL2Switch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 0 }, 0x02),\n+    IS_BATHROOM_SWITCH(\"inputs#isBathroomSwitch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x01),\n+    IS_COOKERHOOD_SWITCH(\"inputs#isCookerhoodSwitch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x02),\n+    IS_EXTERNAL_FILTER(\"inputs#isExternalFilter\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x04),\n+    IS_WTW(\"inputs#isWTW\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 1 }, 0x08),\n+    IS_BATHROOM2_SWITCH(\"inputs#isBathroom2Switch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private int change_command;\n+    /*\n+     * The size of the data block.\n+     */\n+    private int change_data_size;\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private int change_data_pos;\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.read_command = 0;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            if (commandType.read_command == 0) {\n+                return null;\n+            }\n+            int getCmd = commandType.read_command;\n+            int replyCmd = commandType.read_reply_command;\n+\n+            return new ComfoAirCommand(key, getCmd, replyCmd, Constants.EMPTY_INT_ARRAY, null, null);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, State value) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        DecimalType decimalValue = value.as(DecimalType.class);\n+\n+        if (commandType != null && decimalValue != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            int[] data = dataType.convertFromState(value, commandType);\n+\n+            if (data != null) {\n+                int dataPossition = commandType.getChangeDataPos();\n+                int intValue = decimalValue.intValue();\n+\n+                return new ComfoAirCommand(key, commandType.change_command, null, data, dataPossition, intValue);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                int getCmd = commandType.read_command == 0 ? null : commandType.read_command;\n+                int replyCmd = commandType.read_reply_command;\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key, getCmd, replyCmd, Constants.EMPTY_INT_ARRAY, null,\n+                        null);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        if (affectedCommandType.read_reply_command == 0) {\n+                            continue;\n+                        }\n+                        commands = modifiedCommandCollection(commands, affectedCommandType);\n+                    }\n+                }\n+            }\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get all commands which receive informations to update items.\n+     *\n+     * @return all ComfoAirCommand's identified by keys\n+     */\n+    public static Collection<ComfoAirCommand> getReadCommandsByEventTypes(List<String> keys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "originalPosition": 812}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc3MzgzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();\n          \n          \n            \n                    Map<Integer, ComfoAirCommand> commands = new HashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r430773839", "createdAt": "2020-05-27T00:09:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,875 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.class, DataTypeMessage.class,\n+     *            DataTypeNumber.class, DataTypeRPM.class,\n+     *            DataTypeTemperature.class, DataTypeVolt.class)\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(\"bindingControl#activate\", DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232,\n+            1, 0, Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 },\n+            0x03),\n+    MENU20_MODE(\"menuP1#menu20Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x01),\n+    MENU21_MODE(\"menuP1#menu21Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x02),\n+    MENU22_MODE(\"menuP1#menu22Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x04),\n+    MENU23_MODE(\"menuP1#menu23Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x08),\n+    MENU24_MODE(\"menuP1#menu24Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x10),\n+    MENU25_MODE(\"menuP1#menu25Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x20),\n+    MENU26_MODE(\"menuP1#menu26Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x40),\n+    MENU27_MODE(\"menuP1#menu27Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 6 }, 0x80),\n+    MENU28_MODE(\"menuP1#menu28Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 7 }, 0x01),\n+    MENU29_MODE(\"menuP1#menu29Mode\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 7 }, 0x02),\n+    BATHROOM_START_DELAY(\"menuP2#bathroomStartDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0,\n+            new String[] { \"menuP1#menu21Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 0 }),\n+    BATHROOM_END_DELAY(\"menuP2#bathroomEndDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1,\n+            new String[] { \"menuP1#menu22Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 1 }),\n+    L1_END_DELAY(\"menuP2#L1EndDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2,\n+            new String[] { \"menuP1#menu27Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 2 }),\n+    PULSE_VENTILATION(\"menuP2#pulseVentilation\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3,\n+            new String[] { \"menuP1#menu23Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 3 }),\n+    FILTER_WEEKS(\"menuP2#filterWeeks\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4,\n+            new String[] { \"menuP1#menu24Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 4 }),\n+    RF_SHORT_DELAY(\"menuP2#RFShortDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5,\n+            new String[] { \"menuP1#menu25Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 5 }),\n+    RF_LONG_DELAY(\"menuP2#RFLongDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6,\n+            new String[] { \"menuP1#menu26Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 6 }),\n+    COOKERHOOD_DELAY(\"menuP2#cookerhoodDelay\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7,\n+            new String[] { \"menuP1#menu20Mode\" }, Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS,\n+            new int[] { 7 }),\n+    CHIMNEY_STATE(\"menuP9#chimneyState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x01),\n+    BYPASS_STATE(\"menuP9#bypassState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x02),\n+    EWT_STATE(\"menuP9#ewtState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x04),\n+    HEATER_STATE(\"menuP9#heaterState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x08),\n+    V_CONTROL_STATE(\"menuP9#vControlState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x10),\n+    FROST_STATE(\"menuP9#frostState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x20),\n+    COOKERHOOD_STATE(\"menuP9#cookerhoodState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x40),\n+    ENTHALPY_STATE(\"menuP9#enthalpyState\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 8 }, 0x80),\n+    FAN_OUT_0(\"ventilation#fanOut0\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(\"ventilation#fanOut1\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(\"ventilation#fanOut2\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(\"ventilation#fanOut3\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { \"ventilation#fanOutPercent\", \"ventilation#fanOutRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(\"ventilation#fanIn0\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(\"ventilation#fanIn1\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(\"ventilation#fanIn2\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(\"ventilation#fanIn3\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanInRPM\" }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_IN_PERCENT(\"ventilation#fanInPercent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_O\u00daT_PERCENT(\"ventilation#fanOutPercent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN,\n+            Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(\"ventilation#fanInRPM\", DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 2, 3 }),\n+    FAN_OUT_RPM(\"ventilation#fanOutRPM\", DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN,\n+            new int[] { 4, 5 }),\n+    FAN_LEVEL(\"ccease#fanLevel\", DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 },\n+            Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanInRPM\",\n+                    \"ventilation#fanOutRPM\" },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    TARGET_TEMPERATUR(\"ccease#targetTemperature\", DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { \"bypass#bypassFactor\", \"bypass#bypassLevel\", \"bypass#bypassSummer\" },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(\"temperatures#outdoorTemperatureIn\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\"temperatures#outdoorTemperatureOut\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(\"temperatures#indoorTemperatureIn\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(\"temperatures#indoorTemperatureOut\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(\"temperatures#isT1Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x01),\n+    IS_T2_SENSOR(\"temperatures#isT2Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x02),\n+    IS_T3_SENSOR(\"temperatures#isT3Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x04),\n+    IS_T4_SENSOR(\"temperatures#isT4Sensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x08),\n+    IS_EWT_SENSOR(\"temperatures#isEWTSensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x10),\n+    IS_HEATER_SENSOR(\"temperatures#isHeaterSensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x20),\n+    IS_COOKERHOOD_SENSOR(\"temperatures#isCookerhoodSensor\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 5 }, 0x40),\n+    EWT_TEMPERATUR(\"temperatures#ewtTemperature\", DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATUR(\"temperatures#heaterTemperature\", DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATUR(\"temperatures#cookerhoodTemperature\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    IS_PREHEATER(\"options#isPreheater\", DataTypeBoolean.getInstance(), Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { \"temperatures#outdoorTemperatureIn\", \"temperatures#indoorTemperatureIn\",\n+                    \"preheater#preheaterFrostProtect\", \"preheater#preheaterFrostTime\", \"preheater#preheaterHeating\",\n+                    \"menuP9#frostState\", \"preheater#preheaterSafety\", \"times#preheaterTime\",\n+                    \"preheater#preheaterValve\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(\"options#isBypass\", DataTypeBoolean.getInstance(), Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { \"temperatures#indoorTemperatureIn\", \"temperatures#outdoorTemperatureOut\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(\"options#recuType\", DataTypeNumber.getInstance(), new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES,\n+            8, 2,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"temperatures#indoorTemperatureIn\",\n+                    \"temperatures#outdoorTemperatureOut\", \"temperatures#indoorTemperatureOut\",\n+                    \"temperatures#outdoorTemperatureIn\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(\"options#recuSize\", DataTypeNumber.getInstance(), new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES,\n+            8, 3,\n+            new String[] { \"ventilation#fanInPercent\", \"ventilation#fanOutPercent\", \"ventilation#fanOut0\",\n+                    \"ventilation#fanOut1\", \"ventilation#fanOut2\", \"ventilation#fanOut3\", \"ventilation#fanIn0\",\n+                    \"ventilation#fanIn1\", \"ventilation#fanIn2\", \"ventilation#fanIn3\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(\"options#isChimney\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_STATES, 8,\n+            4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 },\n+            0x01),\n+    IS_COOKERHOOD(\"options#isCookerhood\", DataTypeBoolean.getInstance(), new int[] { 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"menuP2#cookerhoodDelay\", \"menuP9#cookerhoodState\", \"cookerhood#cookerhoodSpeed\",\n+                    \"temperatures#cookerhoodTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(\"options#isHeater\", DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { \"heater#heaterTargetTemperature\", \"heater#heaterPower\", \"menuP9#heaterState\",\n+                    \"heater#heaterPowerI\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(\"options#isEnthalpy\", DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { \"enthalpy#enthalpyTemperature\", \"enthalpy#enthalpyHumidity\", \"enthalpy#enthalpyLevel\",\n+                    \"menuP9#enthalpyState\", \"enthalpy#enthalpyTime\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(\"options#isEWT\", DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES,\n+            8, 7,\n+            new String[] { \"ewt#ewtSpeed\", \"ewt#ewtTemperatureLow\", \"menuP9#ewtState\", \"ewt#ewtTemperatureHigh\",\n+                    \"temperatures#ewtTemperature\" },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    EWT_SPEED(\"ewt#ewtSpeed\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { \"menuP9#ewtState\", \"temperatures#ewtTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(\"ewt#ewtTemperatureLow\", DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(\"ewt#ewtTemperatureHigh\", DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { \"menuP9#ewtState\" }, Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(\"cookerhood#cookerhoodSpeed\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] { \"menuP9#cookerhoodState\", \"temperatures#cookerhoodTemperature\" }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(\"heater#heaterPower\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT,\n+            new int[] { 4 }),\n+    HEATER_POWER_I(\"heater#heaterPowerI\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATUR(\"heater#heaterTargetTemperature\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { \"menuP9#heaterState\", \"heater#heaterPower\", \"temperatures#heaterTemperature\" },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    SOFTWARE_MAIN_VERSION(\"softwareMainVersion\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(\"softwareMinorVersion\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(\"deviceName\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_FIRMWARE,\n+            Constants.REPLY_GET_FIRMWARE, new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(\"ccease#errorMessage\", DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(\"error#errorACurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(\"error#errorALast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(\"error#errorAPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(\"error#errorAPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(\"error#errorAHighCurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(\"error#errorAHighLast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(\"error#errorAHighPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\"error#errorAHighPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(\"error#errorECurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(\"error#errorELast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(\"error#errorEPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(\"error#errorEPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(\"error#errorEACurrent\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(\"error#errorEALast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(\"error#errorEAPrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(\"error#errorEAPrePrelast\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(\"ccease#errorReset\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4,\n+            0, new String[] { \"ccease#errorMessage\" }),\n+    FILTER_HOURS(\"times#filterHours\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(\"ccease#filterReset\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS,\n+            4, 3, new String[] { \"times#filterHours\", \"ccease#filterError\" }),\n+    FILTER_ERROR(\"ccease#filterError\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS,\n+            Constants.REPLY_GET_ERRORS, new int[] { 8 }, 0x01),\n+    BYPASS_FACTOR(\"bypass#bypassFactor\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(\"bypass#bypassLevel\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(\"bypass#bypassCorrection\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(\"bypass#bypassSummer\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS,\n+            Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATUR(\"enthalpy#enthalpyTemperature\", DataTypeTemperature.getInstance(),\n+            Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(\"enthalpy#enthalpyHumidity\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(\"enthalpy#enthalpyLevel\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(\"enthalpy#enthalpyTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS,\n+            Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(\"preheater#preheaterValve\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\"preheater#preheaterFrostProtect\", DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER, new int[] { 1 }),\n+    PREHEATER_HEATING(\"preheater#preheaterHeating\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\"preheater#preheaterFrostTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 3, 4 }),\n+    PREHEATER_OPTION(\"preheater#preheaterSafety\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER,\n+            Constants.REPLY_GET_PREHEATER, new int[] { 5 }),\n+    LEVEL0_TIME(\"times#level0Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(\"times#level1Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(\"times#level2Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(\"times#level3Time\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(\"times#freezeTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(\"times#preheaterTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(\"times#bypassTime\", DataTypeNumber.getInstance(), Constants.REQUEST_GET_HOURS,\n+            Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    IS_ANALOG1(\"analog#isAnalog1\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog1Mode\", \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\",\n+                    \"analog#analog1Value\", \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(\"analog#isAnalog2\", DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog2Mode\", \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\",\n+                    \"analog#analog2Value\", \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(\"analog#isAnalog3\", DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog3Mode\", \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\",\n+                    \"analog#analog3Value\", \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(\"analog#isAnalog4\", DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19,\n+            0,\n+            new String[] { \"analog#analog4Mode\", \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\",\n+                    \"analog#analog4Value\", \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(\"analog#isRF\", DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { \"analog#RFMode\", \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10),\n+    ANALOG1_MODE(\"analog#analog1Mode\", DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog1Negative\", \"analog#analog1Min\", \"analog#analog1Max\", \"analog#analog1Value\",\n+                    \"analog#analog1Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(\"analog#analog2Mode\", DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog2Negative\", \"analog#analog2Min\", \"analog#analog2Max\", \"analog#analog2Value\",\n+                    \"analog#analog2Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(\"analog#analog3Mode\", DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog3Negative\", \"analog#analog3Min\", \"analog#analog3Max\", \"analog#analog3Value\",\n+                    \"analog#analog3Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(\"analog#analog4Mode\", DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 1,\n+            new String[] { \"analog#analog4Negative\", \"analog#analog4Min\", \"analog#analog4Max\", \"analog#analog4Value\",\n+                    \"analog#analog4Volt\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(\"analog#RFMode\", DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { \"analog#RFNegative\", \"analog#RFMin\", \"analog#RFMax\", \"analog#RFValue\" },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    ANALOG1_NEGATIVE(\"analog#analog1Negative\", DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x01),\n+    ANALOG2_NEGATIVE(\"analog#analog2Negative\", DataTypeBoolean.getInstance(), new int[] { 0x02 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x02),\n+    ANALOG3_NEGATIVE(\"analog#analog3Negative\", DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x04),\n+    ANALOG4_NEGATIVE(\"analog#analog4Negative\", DataTypeBoolean.getInstance(), new int[] { 0x08 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 2 }, 0x08),\n+    RF_NEGATIVE(\"analog#RFNegative\", DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS,\n+            19, 2, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS,\n+            new int[] { 2 }, 0x10),\n+    ANALOG1_MIN(\"analog#analog1Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(\"analog#analog1Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(\"analog#analog1Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(\"analog#analog2Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(\"analog#analog2Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(\"analog#analog2Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(\"analog#analog3Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(\"analog#analog3Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(\"analog#analog3Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(\"analog#analog4Min\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(\"analog#analog4Max\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(\"analog#analog4Value\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(\"analog#RFMin\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(\"analog#RFMax\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(\"analog#RFValue\", DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(\"analog#analogMode\", DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 },\n+            Constants.REQUEST_SET_ANALOGS, 19, 18, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(\"analog#analog1Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 0 }),\n+    ANALOG2_VOLT(\"analog#analog2Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 1 }),\n+    ANALOG3_VOLT(\"analog#analog3Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 2 }),\n+    ANALOG4_VOLT(\"analog#analog4Volt\", DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS,\n+            Constants.REPLY_GET_ANALOG_VOLTS, new int[] { 3 }),\n+    IS_L1_SWITCH(\"inputs#isL1Switch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 0 }, 0x01),\n+    IS_L2_SWITCH(\"inputs#isL2Switch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 0 }, 0x02),\n+    IS_BATHROOM_SWITCH(\"inputs#isBathroomSwitch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x01),\n+    IS_COOKERHOOD_SWITCH(\"inputs#isCookerhoodSwitch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x02),\n+    IS_EXTERNAL_FILTER(\"inputs#isExternalFilter\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x04),\n+    IS_WTW(\"inputs#isWTW\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS,\n+            new int[] { 1 }, 0x08),\n+    IS_BATHROOM2_SWITCH(\"inputs#isBathroom2Switch\", DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS,\n+            Constants.REPLY_GET_INPUTS, new int[] { 1 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private int change_command;\n+    /*\n+     * The size of the data block.\n+     */\n+    private int change_data_size;\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private int change_data_pos;\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.read_command = 0;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            if (commandType.read_command == 0) {\n+                return null;\n+            }\n+            int getCmd = commandType.read_command;\n+            int replyCmd = commandType.read_reply_command;\n+\n+            return new ComfoAirCommand(key, getCmd, replyCmd, Constants.EMPTY_INT_ARRAY, null, null);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, State value) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        DecimalType decimalValue = value.as(DecimalType.class);\n+\n+        if (commandType != null && decimalValue != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            int[] data = dataType.convertFromState(value, commandType);\n+\n+            if (data != null) {\n+                int dataPossition = commandType.getChangeDataPos();\n+                int intValue = decimalValue.intValue();\n+\n+                return new ComfoAirCommand(key, commandType.change_command, null, data, dataPossition, intValue);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<Integer, ComfoAirCommand>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "originalPosition": 771}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc3NDgzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private SerialPortManager serialPortManager;\n          \n          \n            \n                private final SerialPortManager serialPortManager;\n          \n      \n    \n    \n  \n\nAlso move this field above the non-final fields.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r430774835", "createdAt": "2020-05-27T00:12:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private @Nullable ScheduledFuture<?> poller;\n+    private SerialPortManager serialPortManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6258afed40b607837d1c90abf1a032d8b3a7649d"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzE4NzEx", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-421318711", "createdAt": "2020-05-29T21:56:56Z", "commit": {"oid": "6d30ed7bada565033970f1c95e4146dc4ad5efaf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMTo1Njo1N1rOGctaXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjowNTozN1rOGctlXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc1NzM0MQ==", "bodyText": "Make sure to convert to the units you expect.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r432757341", "createdAt": "2020-05-29T21:56:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeTime.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle time values\n+ *\n+ * @author Hans B\u00f6hm - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class DataTypeTime implements ComfoAirDataType {\n+    private static DataTypeTime SINGLETON_INSTANCE = new DataTypeTime();\n+\n+    private DataTypeTime() {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(DataTypeTime.class);\n+\n+    public static DataTypeTime getInstance() {\n+        return SINGLETON_INSTANCE;\n+    }\n+\n+    @Override\n+    public State convertToState(int @Nullable [] data, ComfoAirCommandType commandType) {\n+        if (data == null) {\n+            logger.trace(\"\\\"DataTypeTime\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return UnDefType.NULL;\n+        } else {\n+            int value = calculateNumberValue(data, commandType);\n+\n+            if (value < 0) {\n+                return UnDefType.NULL;\n+            }\n+\n+            return new QuantityType<>(value, SmartHomeUnits.HOUR);\n+        }\n+    }\n+\n+    @Override\n+    public int @Nullable [] convertFromState(State value, ComfoAirCommandType commandType) {\n+        if (value instanceof QuantityType) {\n+            int[] template = commandType.getChangeDataTemplate();\n+            int[] possibleValues = commandType.getPossibleValues();\n+            int position = commandType.getChangeDataPos();\n+\n+            int intValue = ((QuantityType<?>) value).intValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d30ed7bada565033970f1c95e4146dc4ad5efaf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc1NzQwNg==", "bodyText": "same here", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r432757406", "createdAt": "2020-05-29T21:57:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeVolt.java", "diffHunk": "@@ -59,10 +58,10 @@ public State convertToState(int @Nullable [] data, ComfoAirCommandType commandTy\n \n     @Override\n     public int @Nullable [] convertFromState(State value, ComfoAirCommandType commandType) {\n-        if (((DecimalType) value) instanceof DecimalType) {\n+        if (value instanceof QuantityType) {\n             int[] template = commandType.getChangeDataTemplate();\n \n-            template[commandType.getChangeDataPos()] = (int) (((DecimalType) value).doubleValue() * 255 / 10);\n+            template[commandType.getChangeDataPos()] = (int) (((QuantityType<?>) value).doubleValue() * 255 / 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d30ed7bada565033970f1c95e4146dc4ad5efaf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2MDE1OQ==", "bodyText": "and here", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r432760159", "createdAt": "2020-05-29T22:05:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/DataTypeTemperature.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to handle temperature values\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - QuantityTypes\n+ */\n+@NonNullByDefault\n+public class DataTypeTemperature implements ComfoAirDataType {\n+    private static DataTypeTemperature SINGLETON_INSTANCE = new DataTypeTemperature();\n+\n+    private DataTypeTemperature() {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(DataTypeTemperature.class);\n+\n+    public static DataTypeTemperature getInstance() {\n+        return SINGLETON_INSTANCE;\n+    }\n+\n+    @Override\n+    public State convertToState(int @Nullable [] data, ComfoAirCommandType commandType) {\n+        if (data == null) {\n+            logger.trace(\"\\\"DataTypeTemperature\\\" class \\\"convertToState\\\" method parameter: null\");\n+            return UnDefType.NULL;\n+        } else {\n+            int[] get_reply_data_pos = commandType.getGetReplyDataPos();\n+            if (get_reply_data_pos != null && get_reply_data_pos[0] < data.length) {\n+                return new QuantityType<>((((double) data[get_reply_data_pos[0]]) / 2) - 20, SIUnits.CELSIUS);\n+            } else {\n+                return UnDefType.NULL;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public int @Nullable [] convertFromState(State value, ComfoAirCommandType commandType) {\n+        if (value instanceof QuantityType) {\n+            int[] template = commandType.getChangeDataTemplate();\n+\n+            template[commandType.getChangeDataPos()] = (int) (((QuantityType<?>) value).doubleValue() + 20) * 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d30ed7bada565033970f1c95e4146dc4ad5efaf"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6892b7c596747d0e6a8fc3227c74cf4a292f2d02", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/6892b7c596747d0e6a8fc3227c74cf4a292f2d02", "committedDate": "2020-06-20T15:06:47Z", "message": "cleanup"}, "afterCommit": {"oid": "59b095ba27ae535fe8ed35315c330229dfc72ac8", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/59b095ba27ae535fe8ed35315c330229dfc72ac8", "committedDate": "2020-06-20T15:10:25Z", "message": "cleanup\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59b095ba27ae535fe8ed35315c330229dfc72ac8", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/59b095ba27ae535fe8ed35315c330229dfc72ac8", "committedDate": "2020-06-20T15:10:25Z", "message": "cleanup\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}, "afterCommit": {"oid": "3e0f586468fae8613913b3ad88f00f308777d0ac", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/3e0f586468fae8613913b3ad88f00f308777d0ac", "committedDate": "2020-06-23T19:30:43Z", "message": "fix resets handling\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTA1MzUw", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-437905350", "createdAt": "2020-06-25T22:36:18Z", "commit": {"oid": "160637106e2993b669899c0980a77d57a60bdf62"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjozNjoxOVrOGpOG4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjo0NzozOFrOGpOVag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3NTkzOQ==", "bodyText": "You should consider changing this to Number:Dimensionless so that you can use Percent units.\nShe same applies to any other channel uses percentages.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r445875939", "createdAt": "2020-06-25T22:36:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1465 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"comfoair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"comfoair\">\n+\t\t<label>Generic ComfoAir Ventilation System</label>\n+\t\t<description>Provides a generic access to a ComfoAir compatible ventilation system</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"bindingControl\" typeId=\"bindingControl\" />\n+\t\t\t<channel-group id=\"ventilation\" typeId=\"ventilation\" />\n+\t\t\t<channel-group id=\"temperatures\" typeId=\"temperatures\" />\n+\t\t\t<channel-group id=\"times\" typeId=\"times\" />\n+\t\t\t<channel-group id=\"bypass\" typeId=\"bypass\" />\n+\t\t\t<channel-group id=\"preheater\" typeId=\"preheater\" />\n+\t\t\t<channel-group id=\"ewt\" typeId=\"ewt\" />\n+\t\t\t<channel-group id=\"heater\" typeId=\"heater\" />\n+\t\t\t<channel-group id=\"cookerhood\" typeId=\"cookerhood\" />\n+\t\t\t<channel-group id=\"enthalpy\" typeId=\"enthalpy\" />\n+\t\t\t<channel-group id=\"menuP1\" typeId=\"menuP1\" />\n+\t\t\t<channel-group id=\"menuP2\" typeId=\"menuP2\" />\n+\t\t\t<channel-group id=\"menuP9\" typeId=\"menuP9\" />\n+\t\t\t<channel-group id=\"inputs\" typeId=\"inputs\" />\n+\t\t\t<channel-group id=\"analog\" typeId=\"analog\" />\n+\t\t\t<channel-group id=\"errors\" typeId=\"errors\" />\n+\t\t\t<channel-group id=\"resets\" typeId=\"resets\" />\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial port that the ComfoAir is connected to</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-group-type id=\"bindingControl\">\n+\t\t<label>Binding Control</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activate\" typeId=\"activate\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ventilation\">\n+\t\t<label>Ventilation Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanLevel\" typeId=\"fan_evel\" />\n+\t\t\t<channel id=\"fanOut0\" typeId=\"fan_out_0\" />\n+\t\t\t<channel id=\"fanOut1\" typeId=\"fan_out_1\" />\n+\t\t\t<channel id=\"fanOut2\" typeId=\"fan_out_2\" />\n+\t\t\t<channel id=\"fanOut3\" typeId=\"fan_out_3\" />\n+\t\t\t<channel id=\"fanIn0\" typeId=\"fan_in_0\" />\n+\t\t\t<channel id=\"fanIn1\" typeId=\"fan_in_1\" />\n+\t\t\t<channel id=\"fanIn2\" typeId=\"fan_in_2\" />\n+\t\t\t<channel id=\"fanIn3\" typeId=\"fan_in_3\" />\n+\t\t\t<channel id=\"fanInPercent\" typeId=\"fan_in_percent\" />\n+\t\t\t<channel id=\"fanOutPercent\" typeId=\"fan_out_percent\" />\n+\t\t\t<channel id=\"fanInRPM\" typeId=\"fan_in_RPM\" />\n+\t\t\t<channel id=\"fanOutRPM\" typeId=\"fan_out_RPM\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"temperatures\">\n+\t\t<label>Temperature Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"targetTemperature\" typeId=\"target_temperature\" />\n+\t\t\t<channel id=\"outdoorTemperatureIn\" typeId=\"outdoor_temperature_in\" />\n+\t\t\t<channel id=\"outdoorTemperatureOut\" typeId=\"outdoor_temperature_out\" />\n+\t\t\t<channel id=\"indoorTemperatureIn\" typeId=\"indoor_temperature_in\" />\n+\t\t\t<channel id=\"indoorTemperatureOut\" typeId=\"indoor_temperature_out\" />\n+\t\t\t<channel id=\"isT1Sensor\" typeId=\"is_T1_sensor\" />\n+\t\t\t<channel id=\"isT2Sensor\" typeId=\"is_T2_sensor\" />\n+\t\t\t<channel id=\"isT3Sensor\" typeId=\"is_T3_sensor\" />\n+\t\t\t<channel id=\"isT4Sensor\" typeId=\"is_T4_sensor\" />\n+\t\t\t<channel id=\"isEWTSensor\" typeId=\"is_EWT_sensor\" />\n+\t\t\t<channel id=\"isHeaterSensor\" typeId=\"is_heater_sensor\" />\n+\t\t\t<channel id=\"isCookerhoodSensor\" typeId=\"is_cookerhood_sensor\" />\n+\t\t\t<channel id=\"ewtTemperature\" typeId=\"ewt_temperature\" />\n+\t\t\t<channel id=\"heaterTemperature\" typeId=\"heater_temperature\" />\n+\t\t\t<channel id=\"cookerhoodTemperature\" typeId=\"cookerhood_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"times\">\n+\t\t<label>Uptimes</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"level0Time\" typeId=\"level0_time\" />\n+\t\t\t<channel id=\"level1Time\" typeId=\"level1_time\" />\n+\t\t\t<channel id=\"level2Time\" typeId=\"level2_time\" />\n+\t\t\t<channel id=\"level3Time\" typeId=\"level3_time\" />\n+\t\t\t<channel id=\"freezeTime\" typeId=\"freeze_time\" />\n+\t\t\t<channel id=\"preheaterTime\" typeId=\"preheater_time\" />\n+\t\t\t<channel id=\"bypassTime\" typeId=\"bypass_time\" />\n+\t\t\t<channel id=\"filterHours\" typeId=\"filter_hours\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"bypass\">\n+\t\t<label>Bypass Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bypassFactor\" typeId=\"bypass_factor\" />\n+\t\t\t<channel id=\"bypassLevel\" typeId=\"bypass_level\" />\n+\t\t\t<channel id=\"bypassCorrection\" typeId=\"bypass_correction\" />\n+\t\t\t<channel id=\"bypassSummer\" typeId=\"bypass_summer\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"preheater\">\n+\t\t<label>Preheater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"preheaterValve\" typeId=\"preheater_valve\" />\n+\t\t\t<channel id=\"preheaterFrostProtect\" typeId=\"preheater_frost_protect\" />\n+\t\t\t<channel id=\"preheaterHeating\" typeId=\"preheater_heating\" />\n+\t\t\t<channel id=\"preheaterFrostTime\" typeId=\"preheater_frost_time\" />\n+\t\t\t<channel id=\"preheaterSafety\" typeId=\"preheater_safety\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ewt\">\n+\t\t<label>EWT Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"ewtTemperatureLow\" typeId=\"ewt_temperature_low\" />\n+\t\t\t<channel id=\"ewtTemperatureHigh\" typeId=\"ewt_temperature_high\" />\n+\t\t\t<channel id=\"ewtSpeed\" typeId=\"ewt_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"heater\">\n+\t\t<label>Heater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"heaterPower\" typeId=\"heater_power\" />\n+\t\t\t<channel id=\"heaterPowerI\" typeId=\"heater_power_I\" />\n+\t\t\t<channel id=\"heaterTargetTemperature\" typeId=\"heater_target_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"cookerhood\">\n+\t\t<label>Cookerhood Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"cookerhoodSpeed\" typeId=\"cookerhood_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"enthalpy\">\n+\t\t<label>Enthalpy Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"enthalpyTemperature\" typeId=\"enthalpy_temperature\" />\n+\t\t\t<channel id=\"enthalpyHumidity\" typeId=\"enthalpy_humidity\" />\n+\t\t\t<channel id=\"enthalpyLevel\" typeId=\"enthalpy_level\" />\n+\t\t\t<channel id=\"enthalpyTime\" typeId=\"enthalpy_time\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP1\">\n+\t\t<label>Menu P1: Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"menu20Mode\" typeId=\"menu20_mode\" />\n+\t\t\t<channel id=\"menu21Mode\" typeId=\"menu21_mode\" />\n+\t\t\t<channel id=\"menu22Mode\" typeId=\"menu22_mode\" />\n+\t\t\t<channel id=\"menu23Mode\" typeId=\"menu23_mode\" />\n+\t\t\t<channel id=\"menu24Mode\" typeId=\"menu24_mode\" />\n+\t\t\t<channel id=\"menu25Mode\" typeId=\"menu25_mode\" />\n+\t\t\t<channel id=\"menu26Mode\" typeId=\"menu26_mode\" />\n+\t\t\t<channel id=\"menu27Mode\" typeId=\"menu27_mode\" />\n+\t\t\t<channel id=\"menu28Mode\" typeId=\"menu28_mode\" />\n+\t\t\t<channel id=\"menu29Mode\" typeId=\"menu29_mode\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP2\">\n+\t\t<label>Menu P2: Delay Settings</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bathroomStartDelay\" typeId=\"bathroom_start_delay\" />\n+\t\t\t<channel id=\"bathroomEndDelay\" typeId=\"bathroom_end_delay\" />\n+\t\t\t<channel id=\"L1EndDelay\" typeId=\"L1_end_delay\" />\n+\t\t\t<channel id=\"pulseVentilation\" typeId=\"pulse_ventilation\" />\n+\t\t\t<channel id=\"filterWeeks\" typeId=\"filter_weeks\" />\n+\t\t\t<channel id=\"RFShortDelay\" typeId=\"RF_short_delay\" />\n+\t\t\t<channel id=\"RFLongDelay\" typeId=\"RF_long_delay\" />\n+\t\t\t<channel id=\"cookerhoodDelay\" typeId=\"cookerhood_delay\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP9\">\n+\t\t<label>Menu P9: Option Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"chimneyState\" typeId=\"chimney_state\" />\n+\t\t\t<channel id=\"bypassState\" typeId=\"bypass_state\" />\n+\t\t\t<channel id=\"ewtState\" typeId=\"ewt_state\" />\n+\t\t\t<channel id=\"heaterState\" typeId=\"heater_state\" />\n+\t\t\t<channel id=\"vControlState\" typeId=\"v_control_state\" />\n+\t\t\t<channel id=\"frostState\" typeId=\"frost_state\" />\n+\t\t\t<channel id=\"cookerhoodState\" typeId=\"cookerhood_state\" />\n+\t\t\t<channel id=\"enthalpyState\" typeId=\"enthalpy_state\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"inputs\">\n+\t\t<label>Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isL1Switch\" typeId=\"is_L1_switch\" />\n+\t\t\t<channel id=\"isL2Switch\" typeId=\"is_L2_switch\" />\n+\t\t\t<channel id=\"isBathroomSwitch\" typeId=\"is_bathroom_switch\" />\n+\t\t\t<channel id=\"isCookerhoodSwitch\" typeId=\"is_cookerhood_switch\" />\n+\t\t\t<channel id=\"isExternalFilter\" typeId=\"is_external_filter\" />\n+\t\t\t<channel id=\"isWTW\" typeId=\"is_wtw\" />\n+\t\t\t<channel id=\"isBathroom2Switch\" typeId=\"is_bathroom2_switch\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"analog\">\n+\t\t<label>Analog Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isAnalog1\" typeId=\"is_analog1\" />\n+\t\t\t<channel id=\"isAnalog2\" typeId=\"is_analog2\" />\n+\t\t\t<channel id=\"isAnalog3\" typeId=\"is_analog3\" />\n+\t\t\t<channel id=\"isAnalog4\" typeId=\"is_analog4\" />\n+\t\t\t<channel id=\"isRF\" typeId=\"is_RF\" />\n+\t\t\t<channel id=\"analog1Mode\" typeId=\"analog1_mode\" />\n+\t\t\t<channel id=\"analog2Mode\" typeId=\"analog2_mode\" />\n+\t\t\t<channel id=\"analog3Mode\" typeId=\"analog3_mode\" />\n+\t\t\t<channel id=\"analog4Mode\" typeId=\"analog4_mode\" />\n+\t\t\t<channel id=\"RFMode\" typeId=\"RF_mode\" />\n+\t\t\t<channel id=\"analog1Negative\" typeId=\"analog1_negative\" />\n+\t\t\t<channel id=\"analog2Negative\" typeId=\"analog2_negative\" />\n+\t\t\t<channel id=\"analog3Negative\" typeId=\"analog3_negative\" />\n+\t\t\t<channel id=\"analog4Negative\" typeId=\"analog4_negative\" />\n+\t\t\t<channel id=\"RFNegative\" typeId=\"RF_negative\" />\n+\t\t\t<channel id=\"analog1Volt\" typeId=\"analog1_volt\" />\n+\t\t\t<channel id=\"analog1Min\" typeId=\"analog1_min\" />\n+\t\t\t<channel id=\"analog1Max\" typeId=\"analog1_max\" />\n+\t\t\t<channel id=\"analog1Value\" typeId=\"analog1_value\" />\n+\t\t\t<channel id=\"analog2Volt\" typeId=\"analog2_volt\" />\n+\t\t\t<channel id=\"analog2Min\" typeId=\"analog2_min\" />\n+\t\t\t<channel id=\"analog2Max\" typeId=\"analog2_max\" />\n+\t\t\t<channel id=\"analog2Value\" typeId=\"analog2_value\" />\n+\t\t\t<channel id=\"analog3Volt\" typeId=\"analog3_volt\" />\n+\t\t\t<channel id=\"analog3Min\" typeId=\"analog3_min\" />\n+\t\t\t<channel id=\"analog3Max\" typeId=\"analog3_max\" />\n+\t\t\t<channel id=\"analog3Value\" typeId=\"analog3_value\" />\n+\t\t\t<channel id=\"analog4Volt\" typeId=\"analog4_volt\" />\n+\t\t\t<channel id=\"analog4Min\" typeId=\"analog4_min\" />\n+\t\t\t<channel id=\"analog4Max\" typeId=\"analog4_max\" />\n+\t\t\t<channel id=\"analog4Value\" typeId=\"analog4_value\" />\n+\t\t\t<channel id=\"RFMin\" typeId=\"RF_min\" />\n+\t\t\t<channel id=\"RFMax\" typeId=\"RF_max\" />\n+\t\t\t<channel id=\"RFValue\" typeId=\"RF_value\" />\n+\t\t\t<channel id=\"analogMode\" typeId=\"analog_mode\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"errors\">\n+\t\t<label>Error States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"filterError\" typeId=\"filter_error\" />\n+\t\t\t<channel id=\"errorMessage\" typeId=\"error_message\" />\n+\t\t\t<channel id=\"errorACurrent\" typeId=\"errorA_current\" />\n+\t\t\t<channel id=\"errorECurrent\" typeId=\"errorE_current\" />\n+\t\t\t<channel id=\"errorALast\" typeId=\"errorA_last\" />\n+\t\t\t<channel id=\"errorELast\" typeId=\"errorE_last\" />\n+\t\t\t<channel id=\"errorAPrelast\" typeId=\"errorA_prelast\" />\n+\t\t\t<channel id=\"errorEPrelast\" typeId=\"errorE_prelast\" />\n+\t\t\t<channel id=\"errorAPrePrelast\" typeId=\"errorA_pre_prelast\" />\n+\t\t\t<channel id=\"errorEPrePrelast\" typeId=\"errorE_pre_prelast\" />\n+\t\t\t<channel id=\"errorEACurrent\" typeId=\"errorEA_current\" />\n+\t\t\t<channel id=\"errorEALast\" typeId=\"errorEA_last\" />\n+\t\t\t<channel id=\"errorEAPrelast\" typeId=\"errorEA_prelast\" />\n+\t\t\t<channel id=\"errorEAPrePrelast\" typeId=\"errorEA_pre_prelast\" />\n+\t\t\t<channel id=\"errorAHighCurrent\" typeId=\"errorA_high_current\" />\n+\t\t\t<channel id=\"errorAHighLast\" typeId=\"errorA_high_last\" />\n+\t\t\t<channel id=\"errorAHighPrelast\" typeId=\"errorA_high_prelast\" />\n+\t\t\t<channel id=\"errorAHighPrePrelast\" typeId=\"errorA_high_pre_prelast\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"resets\">\n+\t\t<label>Reset</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"filterReset\" typeId=\"filter_reset\" />\n+\t\t\t<channel id=\"errorReset\" typeId=\"error_reset\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-type id=\"activate\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Activate Binding Control</label>\n+\t\t<description>Activate (control through openHAB) or deactivate (return control to CCEase) binding control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_evel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Level</label>\n+\t\t<description>Fan level</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Away</option>\n+\t\t\t\t<option value=\"2\">Level 1</option>\n+\t\t\t\t<option value=\"3\">Level 2</option>\n+\t\t\t\t<option value=\"4\">Level 3</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"target_temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Target Temperature</label>\n+\t\t<description>Target (comfort) temperature</description>\n+\t\t<category>Temperature</category>\n+\t\t<state min=\"12\" max=\"28\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_error\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Filter Error</label>\n+\t\t<description>Filter full</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"error_message\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Message</label>\n+\t\t<description>Current errors</description>\n+\t\t<category>Text</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_reset\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Filter Reset</label>\n+\t\t<description>Reset filter uptime</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"error_reset\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Error Reset</label>\n+\t\t<description>Reset errors</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_0\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 0 (away)</label>\n+\t\t<description>Fan level 0 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"97\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_1\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 1</label>\n+\t\t<description>Fan level 1 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"16\" max=\"98\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_2\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 2</label>\n+\t\t<description>Fan level 2 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"17\" max=\"99\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_3\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 3</label>\n+\t\t<description>Fan level 3 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"18\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_0\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 0 (away)</label>\n+\t\t<description>Fan level 0 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"97\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_1\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 1</label>\n+\t\t<description>Fan level 1 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"16\" max=\"98\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_2\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 2</label>\n+\t\t<description>Fan level 2 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"17\" max=\"99\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_3\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 3</label>\n+\t\t<description>Fan level 3 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"18\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_percent\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In (%)</label>\n+\t\t<description>Current relative speed (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_percent\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out (%)</label>\n+\t\t<description>Current relative speed (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_RPM\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In (rpm)</label>\n+\t\t<description>Current absolute speed (rpm) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_RPM\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out (rpm)</label>\n+\t\t<description>Current absolute speed (rpm) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"outdoor_temperature_in\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Outdoor Temperature Incoming</label>\n+\t\t<description>Intake air temperature (outside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"outdoor_temperature_out\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Outdoor Temperature Outgoing</label>\n+\t\t<description>Outlet air temperature (outside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"indoor_temperature_in\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Indoor Temperature Incoming</label>\n+\t\t<description>Inlet air temperature (inside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"indoor_temperature_out\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Indoor Temperature Outgoing</label>\n+\t\t<description>Uptake air temperature (inside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T1_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T1 Available</label>\n+\t\t<description>Availability of temperature sensor T1 (outdoor in)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T2_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T2 Available</label>\n+\t\t<description>Availability of temperature sensor T2 (indoor in)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T3_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T3 Available</label>\n+\t\t<description>Availability of temperature sensor T3 (indoor out)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T4_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T4 Available</label>\n+\t\t<description>Availability of temperature sensor T4 (outdoor out)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_EWT_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>EWT Sensor Available</label>\n+\t\t<description>Availability of EWT temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_heater_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heater Sensor Available</label>\n+\t\t<description>Availability of heater temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_cookerhood_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood Sensor Available</label>\n+\t\t<description>Availability of cookerhood temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"chimney_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Chimney Control State</label>\n+\t\t<description>State of the chimney control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bypass State</label>\n+\t\t<description>State of the bypass (ON = open / OFF = closed)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>EWT State</label>\n+\t\t<description>State of the EWT valve (ON = open / OFF = closed)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heater State</label>\n+\t\t<description>State of the heater</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"v_control_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>0-10V Control State</label>\n+\t\t<description>State of the 0-10V control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"frost_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Antifrost State</label>\n+\t\t<description>State of the antifrost control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood State</label>\n+\t\t<description>State of the cookerhood control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Enthalpy State</label>\n+\t\t<description>State of the enthalpy module</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>EWT Temperature</label>\n+\t\t<description>Temperature of geothermal heat exchanger sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Heater Temperature</label>\n+\t\t<description>Temperature of heater sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Cookerhood Temperature</label>\n+\t\t<description>Temperature of cookerhood sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"level0_time\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Level 0 Duration</label>\n+\t\t<description>Uptime at level 0 (away)</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"level1_time\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Level 1 Duration</label>\n+\t\t<description>Uptime at level 1</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"level2_time\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Level 2 Duration</label>\n+\t\t<description>Uptime at level 2</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"level3_time\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Level 3 Duration</label>\n+\t\t<description>Uptime at level 3</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"freeze_time\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Antifrost Duration</label>\n+\t\t<description>Uptime of antifrost</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_time\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Preheater Duration</label>\n+\t\t<description>Uptime of preheater</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_time\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Bypass Duration</label>\n+\t\t<description>Hours of bypass open</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_hours\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Filter Duration</label>\n+\t\t<description>Uptime of the filter</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_factor\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bypass Factor</label>\n+\t\t<description>Bypass factor value</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_level\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bypass Level</label>\n+\t\t<description>Bypass level state</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_correction\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bypass Correction</label>\n+\t\t<description>Bypass correction state</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_summer\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bypass Summer Mode</label>\n+\t\t<description>Bypass summer mode</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_valve\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Preheater Valve</label>\n+\t\t<description>State of the preheater valve</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_frost_protect\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Frost Protection</label>\n+\t\t<description>State of the frost protection</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_heating\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Preheater</label>\n+\t\t<description>State of the preheater</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_frost_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Preheater Frost Time</label>\n+\t\t<description>Frost minutes</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"preheater_safety\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Preheater Frost Safety</label>\n+\t\t<description>Frost safety setting</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_temperature_low\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>EWT Temperature (low)</label>\n+\t\t<description>Lower temperature of the geothermal heat exchanger</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_temperature_high\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>EWT Temperature (high)</label>\n+\t\t<description>Upper temperature of the geothermal heat exchanger</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"ewt_speed\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>EWT Speed Up (%)</label>\n+\t\t<description>Speed up of the geothermal heat exchanger</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_power\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Heater Power</label>\n+\t\t<description>Heater power value</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_power_I\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Heater Power I-Parameter</label>\n+\t\t<description>Heater power I-parameter value</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"heater_target_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Heater Target Temperature</label>\n+\t\t<description>Target temperature of the heater</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_speed\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cookerhood Speed Up (%)</label>\n+\t\t<description>Speed up of the cookerhood</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Enthalpy Sensor Temperature</label>\n+\t\t<description>Temperature of the enthalpy sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_humidity\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Enthalpy Sensor Humidity</label>\n+\t\t<description>Humidity of the enthalpy sensor</description>\n+\t\t<category>Humidity</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_level\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Enthalpy Sensor Level</label>\n+\t\t<description>Level of the enthalpy sensor</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"enthalpy_time\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Enthalpy Sensor Timer</label>\n+\t\t<description>Timer state of the enthalpy sensor</description>\n+\t\t<category>Time</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_L1_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>L1 Switch</label>\n+\t\t<description>Availability of L1 step switch</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_L2_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>L2 Switch</label>\n+\t\t<description>Availability of L2 step switch</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_bathroom_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bathroom Switch</label>\n+\t\t<description>Availability of bathroom switch</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_cookerhood_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood Switch</label>\n+\t\t<description>Availability of cookerhood switch</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_external_filter\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>External Filter</label>\n+\t\t<description>Availability of external filter</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_wtw\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heat Recovery</label>\n+\t\t<description>Availability of heat recovery (WTW)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_bathroom2_switch\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bathroom Switch 2</label>\n+\t\t<description>Availability of bathroom switch 2 (luxe)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu20_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 20 Mode (P10)</label>\n+\t\t<description>State of menu 20 mode (P10)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu21_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 21 Mode (P11)</label>\n+\t\t<description>State of menu 21 mode (P11)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu22_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 22 Mode (P12)</label>\n+\t\t<description>State of menu 22 mode (P12)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu23_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 23 Mode (P13)</label>\n+\t\t<description>State of menu 23 mode (P13)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu24_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 24 Mode (P14)</label>\n+\t\t<description>State of menu 24 mode (P14)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu25_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 25 Mode (P15)</label>\n+\t\t<description>State of menu 25 mode (P15)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu26_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 26 Mode (P16)</label>\n+\t\t<description>State of menu 26 mode (P16)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu27_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 27 Mode (P17)</label>\n+\t\t<description>State of menu 27 mode (P17)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu28_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 28 Mode (P18)</label>\n+\t\t<description>State of menu 28 mode (P18)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"menu29_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Menu 29 Mode (P19)</label>\n+\t\t<description>State of menu 29 mode (P19)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"cookerhood_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cookerhood Delay (P20)</label>\n+\t\t<description>End delay for cooker hood control (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"180\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bathroom_start_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bathroom Switch Start Delay (P21)</label>\n+\t\t<description>Start delay for bathroom switch (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"bathroom_end_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Bathroom Switch End Delay (P22)</label>\n+\t\t<description>End delay for bathroom switch (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"L1_end_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>L1 Switch End Delay (P23)</label>\n+\t\t<description>End delay for L1 switch (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_weeks\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Filter Period (P24)</label>\n+\t\t<description>Usage period until filter pollution message (weeks)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"10\" max=\"26\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_short_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>RF Short Delay (P25)</label>\n+\t\t<description>End delay (RF short actuation) for ventilation level 3 (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"1\" max=\"20\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_long_delay\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>RF Long Delay (P26)</label>\n+\t\t<description>End delay (RF long actuation) for ventilation level 3 (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"1\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"pulse_ventilation\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Pulse Ventilation Period (P27)</label>\n+\t\t<description>Period for pulse ventilation (min)</description>\n+\t\t<category>Time</category>\n+\t\t<state min=\"0\" max=\"120\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_analog1\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 1 Availability</label>\n+\t\t<description>Availability of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_analog2\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 2 Availability</label>\n+\t\t<description>Availability of analog input 2</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_analog3\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 3 Availability</label>\n+\t\t<description>Availability of analog input 3</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_analog4\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 4 Availability</label>\n+\t\t<description>Availability of analog input 4</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_RF\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>RF Input Availability</label>\n+\t\t<description>Availability of RF input</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 1 State</label>\n+\t\t<description>State of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog2_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 2 State</label>\n+\t\t<description>State of analog input 2</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog3_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 3 State</label>\n+\t\t<description>State of analog input 3</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog4_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 4 State</label>\n+\t\t<description>State of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_mode\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>RF Input State</label>\n+\t\t<description>State of RF input</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 1 Postive/Negative</label>\n+\t\t<description>Postive/Negative state of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog2_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 2 Postive/Negative</label>\n+\t\t<description>Postive/Negative state of analog input 2</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog3_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 3 Postive/Negative</label>\n+\t\t<description>Postive/Negative state of analog input 3</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog4_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Analog Input 4 Postive/Negative</label>\n+\t\t<description>Postive/Negative state of analog input 1</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_negative\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>RF Input Postive/Negative</label>\n+\t\t<description>Postive/Negative state of RF input</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_volt\" advanced=\"true\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Analog Input 1 Voltage Level</label>\n+\t\t<description>Voltage level of analog input 1</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_min\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 1 Min</label>\n+\t\t<description>Minimum setting for analog input 1</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_max\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 1 Max</label>\n+\t\t<description>Maximum setting for analog input 1</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog1_value\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 1 Target</label>\n+\t\t<description>Target setting for analog input 1</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog2_volt\" advanced=\"true\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Analog Input 2 Voltage Level</label>\n+\t\t<description>Voltage level of analog input 2</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog2_min\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 2 Min</label>\n+\t\t<description>Minimum setting for analog input 2</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog2_max\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 2 Max</label>\n+\t\t<description>Maximum setting for analog input 2</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog2_value\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 2 Target</label>\n+\t\t<description>Target setting for analog input 2</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog3_volt\" advanced=\"true\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Analog Input 3 Voltage Level</label>\n+\t\t<description>Voltage level of analog input 3</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog3_min\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 3 Min</label>\n+\t\t<description>Minimum setting for analog input 3</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog3_max\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 3 Max</label>\n+\t\t<description>Maximum setting for analog input 3</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog3_value\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 3 Target</label>\n+\t\t<description>Target setting for analog input 3</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog4_volt\" advanced=\"true\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Analog Input 4 Voltage Level</label>\n+\t\t<description>Voltage level of analog input 4</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog4_min\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 4 Min</label>\n+\t\t<description>Minimum setting for analog input 4</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog4_max\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 4 Max</label>\n+\t\t<description>Maximum setting for analog input 4</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"analog4_value\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Analog Input 4 Target</label>\n+\t\t<description>Target setting for analog input 4</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_min\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>RF Input Min</label>\n+\t\t<description>Minimum setting for RF input</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_max\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>RF Input Max</label>\n+\t\t<description>Maximum setting for RF input</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" readOnly=\"false\" />\n+\t</channel-type>\n+\n+\t<channel-type id=\"RF_value\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160637106e2993b669899c0980a77d57a60bdf62"}, "originalPosition": 1317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg3OTY1OA==", "bodyText": "Instead of grouping all your analog channels under a single group you could use multiple groups such that you would have numbered analog groups instead of numbered analog channels.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<channel-group-type id=\"analog\">\n          \n          \n            \n            \t\t<label>Analog Inputs</label>\n          \n          \n            \n            \t\t<channels>\n          \n          \n            \n            \t\t\t<channel id=\"isAnalog1\" typeId=\"is_analog1\" />\n          \n          \n            \n            \t\t\t<channel id=\"isAnalog2\" typeId=\"is_analog2\" />\n          \n          \n            \n            \t\t\t<channel id=\"isAnalog3\" typeId=\"is_analog3\" />\n          \n          \n            \n            \t\t\t<channel id=\"isAnalog4\" typeId=\"is_analog4\" />\n          \n          \n            \n            \t\t\t<channel id=\"isRF\" typeId=\"is_RF\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog1Mode\" typeId=\"analog1_mode\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog2Mode\" typeId=\"analog2_mode\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog3Mode\" typeId=\"analog3_mode\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog4Mode\" typeId=\"analog4_mode\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFMode\" typeId=\"RF_mode\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog1Negative\" typeId=\"analog1_negative\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog2Negative\" typeId=\"analog2_negative\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog3Negative\" typeId=\"analog3_negative\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog4Negative\" typeId=\"analog4_negative\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFNegative\" typeId=\"RF_negative\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog1Volt\" typeId=\"analog1_volt\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog1Min\" typeId=\"analog1_min\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog1Max\" typeId=\"analog1_max\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog1Value\" typeId=\"analog1_value\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog2Volt\" typeId=\"analog2_volt\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog2Min\" typeId=\"analog2_min\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog2Max\" typeId=\"analog2_max\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog2Value\" typeId=\"analog2_value\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog3Volt\" typeId=\"analog3_volt\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog3Min\" typeId=\"analog3_min\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog3Max\" typeId=\"analog3_max\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog3Value\" typeId=\"analog3_value\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog4Volt\" typeId=\"analog4_volt\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog4Min\" typeId=\"analog4_min\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog4Max\" typeId=\"analog4_max\" />\n          \n          \n            \n            \t\t\t<channel id=\"analog4Value\" typeId=\"analog4_value\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFMin\" typeId=\"RF_min\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFMax\" typeId=\"RF_max\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFValue\" typeId=\"RF_value\" />\n          \n          \n            \n            \t\t\t<channel id=\"analogMode\" typeId=\"analog_mode\" />\n          \n          \n            \n            \t\t</channels>\n          \n          \n            \n            \t</channel-group-type>\n          \n          \n            \n            \t<channel-group-type id=\"analogRf\">\n          \n          \n            \n            \t    <label>Analog RF Inputs</label>\n          \n          \n            \n            \t\t<channels>\n          \n          \n            \n            \t\t\t<channel id=\"isRF\" typeId=\"is_RF\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFMode\" typeId=\"RF_mode\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFNegative\" typeId=\"RF_negative\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFMin\" typeId=\"RF_min\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFMax\" typeId=\"RF_max\" />\n          \n          \n            \n            \t\t\t<channel id=\"RFValue\" typeId=\"RF_value\" />\n          \n          \n            \n            \t\t\t<channel id=\"analogMode\" typeId=\"analog_mode\" />\n          \n          \n            \n            \t\t</channels>\n          \n          \n            \n            \t</channel-group-type>\n          \n          \n            \n            \t<channel-group-type id=\"analog\">\n          \n          \n            \n            \t\t<label>Analog Inputs</label>\n          \n          \n            \n            \t\t<channels>\n          \n          \n            \n            \t\t\t<channel id=\"isAnalog\" typeId=\"is_analog\" />\n          \n          \n            \n            \t\t\t<channel id=\"analogMode\" typeId=\"analog_mode\" />\n          \n          \n            \n            \t\t\t<channel id=\"analogNegative\" typeId=\"analog_negative\" />\n          \n          \n            \n            \t\t\t<channel id=\"analogVolt\" typeId=\"analog_volt\" />\n          \n          \n            \n            \t\t\t<channel id=\"analogMin\" typeId=\"analog_min\" />\n          \n          \n            \n            \t\t\t<channel id=\"analogMax\" typeId=\"analog_max\" />\n          \n          \n            \n            \t\t\t<channel id=\"analogValue\" typeId=\"analog_value\" />\n          \n          \n            \n            \t\t</channels>\n          \n          \n            \n            \t</channel-group-type>\n          \n      \n    \n    \n  \n\nWhen in your thingtype definition:\n\t\t<channel-groups>\n...\n\t\t\t<channel-group id=\"analogRf\" typeId=\"analogRf\" />\n\t\t\t<channel-group id=\"analog1\" typeId=\"analog\" />\n\t\t\t<channel-group id=\"analog2\" typeId=\"analog\" />\n\t\t\t<channel-group id=\"analog3\" typeId=\"analog\" />\n\t\t\t<channel-group id=\"analog4\" typeId=\"analog\" />\n...\n\t\t</channel-groups>\n\nThis should allow you to cleanup a significant number of channel type definitions. WDYT?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r445879658", "createdAt": "2020-06-25T22:47:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1465 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"comfoair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"comfoair\">\n+\t\t<label>Generic ComfoAir Ventilation System</label>\n+\t\t<description>Provides a generic access to a ComfoAir compatible ventilation system</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"bindingControl\" typeId=\"bindingControl\" />\n+\t\t\t<channel-group id=\"ventilation\" typeId=\"ventilation\" />\n+\t\t\t<channel-group id=\"temperatures\" typeId=\"temperatures\" />\n+\t\t\t<channel-group id=\"times\" typeId=\"times\" />\n+\t\t\t<channel-group id=\"bypass\" typeId=\"bypass\" />\n+\t\t\t<channel-group id=\"preheater\" typeId=\"preheater\" />\n+\t\t\t<channel-group id=\"ewt\" typeId=\"ewt\" />\n+\t\t\t<channel-group id=\"heater\" typeId=\"heater\" />\n+\t\t\t<channel-group id=\"cookerhood\" typeId=\"cookerhood\" />\n+\t\t\t<channel-group id=\"enthalpy\" typeId=\"enthalpy\" />\n+\t\t\t<channel-group id=\"menuP1\" typeId=\"menuP1\" />\n+\t\t\t<channel-group id=\"menuP2\" typeId=\"menuP2\" />\n+\t\t\t<channel-group id=\"menuP9\" typeId=\"menuP9\" />\n+\t\t\t<channel-group id=\"inputs\" typeId=\"inputs\" />\n+\t\t\t<channel-group id=\"analog\" typeId=\"analog\" />\n+\t\t\t<channel-group id=\"errors\" typeId=\"errors\" />\n+\t\t\t<channel-group id=\"resets\" typeId=\"resets\" />\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial port that the ComfoAir is connected to</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-group-type id=\"bindingControl\">\n+\t\t<label>Binding Control</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activate\" typeId=\"activate\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ventilation\">\n+\t\t<label>Ventilation Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanLevel\" typeId=\"fan_evel\" />\n+\t\t\t<channel id=\"fanOut0\" typeId=\"fan_out_0\" />\n+\t\t\t<channel id=\"fanOut1\" typeId=\"fan_out_1\" />\n+\t\t\t<channel id=\"fanOut2\" typeId=\"fan_out_2\" />\n+\t\t\t<channel id=\"fanOut3\" typeId=\"fan_out_3\" />\n+\t\t\t<channel id=\"fanIn0\" typeId=\"fan_in_0\" />\n+\t\t\t<channel id=\"fanIn1\" typeId=\"fan_in_1\" />\n+\t\t\t<channel id=\"fanIn2\" typeId=\"fan_in_2\" />\n+\t\t\t<channel id=\"fanIn3\" typeId=\"fan_in_3\" />\n+\t\t\t<channel id=\"fanInPercent\" typeId=\"fan_in_percent\" />\n+\t\t\t<channel id=\"fanOutPercent\" typeId=\"fan_out_percent\" />\n+\t\t\t<channel id=\"fanInRPM\" typeId=\"fan_in_RPM\" />\n+\t\t\t<channel id=\"fanOutRPM\" typeId=\"fan_out_RPM\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"temperatures\">\n+\t\t<label>Temperature Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"targetTemperature\" typeId=\"target_temperature\" />\n+\t\t\t<channel id=\"outdoorTemperatureIn\" typeId=\"outdoor_temperature_in\" />\n+\t\t\t<channel id=\"outdoorTemperatureOut\" typeId=\"outdoor_temperature_out\" />\n+\t\t\t<channel id=\"indoorTemperatureIn\" typeId=\"indoor_temperature_in\" />\n+\t\t\t<channel id=\"indoorTemperatureOut\" typeId=\"indoor_temperature_out\" />\n+\t\t\t<channel id=\"isT1Sensor\" typeId=\"is_T1_sensor\" />\n+\t\t\t<channel id=\"isT2Sensor\" typeId=\"is_T2_sensor\" />\n+\t\t\t<channel id=\"isT3Sensor\" typeId=\"is_T3_sensor\" />\n+\t\t\t<channel id=\"isT4Sensor\" typeId=\"is_T4_sensor\" />\n+\t\t\t<channel id=\"isEWTSensor\" typeId=\"is_EWT_sensor\" />\n+\t\t\t<channel id=\"isHeaterSensor\" typeId=\"is_heater_sensor\" />\n+\t\t\t<channel id=\"isCookerhoodSensor\" typeId=\"is_cookerhood_sensor\" />\n+\t\t\t<channel id=\"ewtTemperature\" typeId=\"ewt_temperature\" />\n+\t\t\t<channel id=\"heaterTemperature\" typeId=\"heater_temperature\" />\n+\t\t\t<channel id=\"cookerhoodTemperature\" typeId=\"cookerhood_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"times\">\n+\t\t<label>Uptimes</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"level0Time\" typeId=\"level0_time\" />\n+\t\t\t<channel id=\"level1Time\" typeId=\"level1_time\" />\n+\t\t\t<channel id=\"level2Time\" typeId=\"level2_time\" />\n+\t\t\t<channel id=\"level3Time\" typeId=\"level3_time\" />\n+\t\t\t<channel id=\"freezeTime\" typeId=\"freeze_time\" />\n+\t\t\t<channel id=\"preheaterTime\" typeId=\"preheater_time\" />\n+\t\t\t<channel id=\"bypassTime\" typeId=\"bypass_time\" />\n+\t\t\t<channel id=\"filterHours\" typeId=\"filter_hours\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"bypass\">\n+\t\t<label>Bypass Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bypassFactor\" typeId=\"bypass_factor\" />\n+\t\t\t<channel id=\"bypassLevel\" typeId=\"bypass_level\" />\n+\t\t\t<channel id=\"bypassCorrection\" typeId=\"bypass_correction\" />\n+\t\t\t<channel id=\"bypassSummer\" typeId=\"bypass_summer\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"preheater\">\n+\t\t<label>Preheater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"preheaterValve\" typeId=\"preheater_valve\" />\n+\t\t\t<channel id=\"preheaterFrostProtect\" typeId=\"preheater_frost_protect\" />\n+\t\t\t<channel id=\"preheaterHeating\" typeId=\"preheater_heating\" />\n+\t\t\t<channel id=\"preheaterFrostTime\" typeId=\"preheater_frost_time\" />\n+\t\t\t<channel id=\"preheaterSafety\" typeId=\"preheater_safety\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ewt\">\n+\t\t<label>EWT Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"ewtTemperatureLow\" typeId=\"ewt_temperature_low\" />\n+\t\t\t<channel id=\"ewtTemperatureHigh\" typeId=\"ewt_temperature_high\" />\n+\t\t\t<channel id=\"ewtSpeed\" typeId=\"ewt_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"heater\">\n+\t\t<label>Heater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"heaterPower\" typeId=\"heater_power\" />\n+\t\t\t<channel id=\"heaterPowerI\" typeId=\"heater_power_I\" />\n+\t\t\t<channel id=\"heaterTargetTemperature\" typeId=\"heater_target_temperature\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"cookerhood\">\n+\t\t<label>Cookerhood Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"cookerhoodSpeed\" typeId=\"cookerhood_speed\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"enthalpy\">\n+\t\t<label>Enthalpy Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"enthalpyTemperature\" typeId=\"enthalpy_temperature\" />\n+\t\t\t<channel id=\"enthalpyHumidity\" typeId=\"enthalpy_humidity\" />\n+\t\t\t<channel id=\"enthalpyLevel\" typeId=\"enthalpy_level\" />\n+\t\t\t<channel id=\"enthalpyTime\" typeId=\"enthalpy_time\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP1\">\n+\t\t<label>Menu P1: Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"menu20Mode\" typeId=\"menu20_mode\" />\n+\t\t\t<channel id=\"menu21Mode\" typeId=\"menu21_mode\" />\n+\t\t\t<channel id=\"menu22Mode\" typeId=\"menu22_mode\" />\n+\t\t\t<channel id=\"menu23Mode\" typeId=\"menu23_mode\" />\n+\t\t\t<channel id=\"menu24Mode\" typeId=\"menu24_mode\" />\n+\t\t\t<channel id=\"menu25Mode\" typeId=\"menu25_mode\" />\n+\t\t\t<channel id=\"menu26Mode\" typeId=\"menu26_mode\" />\n+\t\t\t<channel id=\"menu27Mode\" typeId=\"menu27_mode\" />\n+\t\t\t<channel id=\"menu28Mode\" typeId=\"menu28_mode\" />\n+\t\t\t<channel id=\"menu29Mode\" typeId=\"menu29_mode\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP2\">\n+\t\t<label>Menu P2: Delay Settings</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bathroomStartDelay\" typeId=\"bathroom_start_delay\" />\n+\t\t\t<channel id=\"bathroomEndDelay\" typeId=\"bathroom_end_delay\" />\n+\t\t\t<channel id=\"L1EndDelay\" typeId=\"L1_end_delay\" />\n+\t\t\t<channel id=\"pulseVentilation\" typeId=\"pulse_ventilation\" />\n+\t\t\t<channel id=\"filterWeeks\" typeId=\"filter_weeks\" />\n+\t\t\t<channel id=\"RFShortDelay\" typeId=\"RF_short_delay\" />\n+\t\t\t<channel id=\"RFLongDelay\" typeId=\"RF_long_delay\" />\n+\t\t\t<channel id=\"cookerhoodDelay\" typeId=\"cookerhood_delay\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP9\">\n+\t\t<label>Menu P9: Option Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"chimneyState\" typeId=\"chimney_state\" />\n+\t\t\t<channel id=\"bypassState\" typeId=\"bypass_state\" />\n+\t\t\t<channel id=\"ewtState\" typeId=\"ewt_state\" />\n+\t\t\t<channel id=\"heaterState\" typeId=\"heater_state\" />\n+\t\t\t<channel id=\"vControlState\" typeId=\"v_control_state\" />\n+\t\t\t<channel id=\"frostState\" typeId=\"frost_state\" />\n+\t\t\t<channel id=\"cookerhoodState\" typeId=\"cookerhood_state\" />\n+\t\t\t<channel id=\"enthalpyState\" typeId=\"enthalpy_state\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"inputs\">\n+\t\t<label>Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isL1Switch\" typeId=\"is_L1_switch\" />\n+\t\t\t<channel id=\"isL2Switch\" typeId=\"is_L2_switch\" />\n+\t\t\t<channel id=\"isBathroomSwitch\" typeId=\"is_bathroom_switch\" />\n+\t\t\t<channel id=\"isCookerhoodSwitch\" typeId=\"is_cookerhood_switch\" />\n+\t\t\t<channel id=\"isExternalFilter\" typeId=\"is_external_filter\" />\n+\t\t\t<channel id=\"isWTW\" typeId=\"is_wtw\" />\n+\t\t\t<channel id=\"isBathroom2Switch\" typeId=\"is_bathroom2_switch\" />\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"analog\">\n+\t\t<label>Analog Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isAnalog1\" typeId=\"is_analog1\" />\n+\t\t\t<channel id=\"isAnalog2\" typeId=\"is_analog2\" />\n+\t\t\t<channel id=\"isAnalog3\" typeId=\"is_analog3\" />\n+\t\t\t<channel id=\"isAnalog4\" typeId=\"is_analog4\" />\n+\t\t\t<channel id=\"isRF\" typeId=\"is_RF\" />\n+\t\t\t<channel id=\"analog1Mode\" typeId=\"analog1_mode\" />\n+\t\t\t<channel id=\"analog2Mode\" typeId=\"analog2_mode\" />\n+\t\t\t<channel id=\"analog3Mode\" typeId=\"analog3_mode\" />\n+\t\t\t<channel id=\"analog4Mode\" typeId=\"analog4_mode\" />\n+\t\t\t<channel id=\"RFMode\" typeId=\"RF_mode\" />\n+\t\t\t<channel id=\"analog1Negative\" typeId=\"analog1_negative\" />\n+\t\t\t<channel id=\"analog2Negative\" typeId=\"analog2_negative\" />\n+\t\t\t<channel id=\"analog3Negative\" typeId=\"analog3_negative\" />\n+\t\t\t<channel id=\"analog4Negative\" typeId=\"analog4_negative\" />\n+\t\t\t<channel id=\"RFNegative\" typeId=\"RF_negative\" />\n+\t\t\t<channel id=\"analog1Volt\" typeId=\"analog1_volt\" />\n+\t\t\t<channel id=\"analog1Min\" typeId=\"analog1_min\" />\n+\t\t\t<channel id=\"analog1Max\" typeId=\"analog1_max\" />\n+\t\t\t<channel id=\"analog1Value\" typeId=\"analog1_value\" />\n+\t\t\t<channel id=\"analog2Volt\" typeId=\"analog2_volt\" />\n+\t\t\t<channel id=\"analog2Min\" typeId=\"analog2_min\" />\n+\t\t\t<channel id=\"analog2Max\" typeId=\"analog2_max\" />\n+\t\t\t<channel id=\"analog2Value\" typeId=\"analog2_value\" />\n+\t\t\t<channel id=\"analog3Volt\" typeId=\"analog3_volt\" />\n+\t\t\t<channel id=\"analog3Min\" typeId=\"analog3_min\" />\n+\t\t\t<channel id=\"analog3Max\" typeId=\"analog3_max\" />\n+\t\t\t<channel id=\"analog3Value\" typeId=\"analog3_value\" />\n+\t\t\t<channel id=\"analog4Volt\" typeId=\"analog4_volt\" />\n+\t\t\t<channel id=\"analog4Min\" typeId=\"analog4_min\" />\n+\t\t\t<channel id=\"analog4Max\" typeId=\"analog4_max\" />\n+\t\t\t<channel id=\"analog4Value\" typeId=\"analog4_value\" />\n+\t\t\t<channel id=\"RFMin\" typeId=\"RF_min\" />\n+\t\t\t<channel id=\"RFMax\" typeId=\"RF_max\" />\n+\t\t\t<channel id=\"RFValue\" typeId=\"RF_value\" />\n+\t\t\t<channel id=\"analogMode\" typeId=\"analog_mode\" />\n+\t\t</channels>\n+\t</channel-group-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160637106e2993b669899c0980a77d57a60bdf62"}, "originalPosition": 259}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NDc5NjA3", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-439479607", "createdAt": "2020-06-29T20:34:14Z", "commit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozNDoxNVrOGqhLzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzowMjozNVrOGqlfAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNzA2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.key = key;\n          \n          \n            \n                    this.data_type = data_type;\n          \n          \n            \n                    this.possible_values = possible_values;\n          \n          \n            \n                    this.change_command = change_command;\n          \n          \n            \n                    this.change_data_size = change_data_size;\n          \n          \n            \n                    this.change_data_pos = change_data_pos;\n          \n          \n            \n                    this.change_affected = change_affected;\n          \n          \n            \n                    this.read_command = read_command;\n          \n          \n            \n                    this.read_reply_command = read_reply_command;\n          \n          \n            \n                    this.read_reply_data_pos = read_reply_data_pos;\n          \n          \n            \n                    this.read_reply_data_bits = 0;\n          \n          \n            \n                    this(key, data_type, possible_values, change_command, change_data_size, change_data_pos, change_affected, read_command, read_reply_command, read_reply_data_pos, 0);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447237069", "createdAt": "2020-06-29T20:34:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 662}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNzg4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.key = key;\n          \n          \n            \n                    this.data_type = data_type;\n          \n          \n            \n                    this.possible_values = null;\n          \n          \n            \n                    this.change_command = change_command;\n          \n          \n            \n                    this.change_data_size = change_data_size;\n          \n          \n            \n                    this.change_data_pos = change_data_pos;\n          \n          \n            \n                    this.change_affected = change_affected;\n          \n          \n            \n                    this.read_command = read_command;\n          \n          \n            \n                    this.read_reply_command = read_reply_command;\n          \n          \n            \n                    this.read_reply_data_pos = read_reply_data_pos;\n          \n          \n            \n                    this.read_reply_data_bits = 0;\n          \n          \n            \n                    this(key, data_type, null, change_command, change_data_size, change_data_pos, change_affected, read_command, read_reply_command, read_reply_data_pos, 0);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447237885", "createdAt": "2020-06-29T20:35:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 681}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzOTkzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.key = key;\n          \n          \n            \n                    this.data_type = data_type;\n          \n          \n            \n                    this.possible_values = possible_values;\n          \n          \n            \n                    this.change_command = change_command;\n          \n          \n            \n                    this.change_data_size = change_data_size;\n          \n          \n            \n                    this.change_data_pos = change_data_pos;\n          \n          \n            \n                    this.change_affected = change_affected;\n          \n          \n            \n                    this.read_command = 0;\n          \n          \n            \n                    this.read_reply_command = 0;\n          \n          \n            \n                    this.read_reply_data_pos = null;\n          \n          \n            \n                    this.read_reply_data_bits = 0;\n          \n          \n            \n                    this(key, data_type, possible_values, change_command, change_data_size, change_data_pos, change_affected, 0, 0, null, 0);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447239937", "createdAt": "2020-06-29T20:39:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 699}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MDQ2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.key = key;\n          \n          \n            \n                    this.data_type = data_type;\n          \n          \n            \n                    this.possible_values = null;\n          \n          \n            \n                    this.change_command = 0;\n          \n          \n            \n                    this.change_data_size = 0;\n          \n          \n            \n                    this.change_data_pos = 0;\n          \n          \n            \n                    this.change_affected = null;\n          \n          \n            \n                    this.read_command = read_command;\n          \n          \n            \n                    this.read_reply_command = read_reply_command;\n          \n          \n            \n                    this.read_reply_data_pos = read_reply_data_pos;\n          \n          \n            \n                    this.read_reply_data_bits = read_reply_data_bits;\n          \n          \n            \n                    this(key, data_type, null, 0, 0, 0, null, read_command, read_reply_command, read_reply_data_pos, read_reply_data_bits);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447240461", "createdAt": "2020-06-29T20:40:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 717}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MTExMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.key = key;\n          \n          \n            \n                    this.data_type = data_type;\n          \n          \n            \n                    this.possible_values = null;\n          \n          \n            \n                    this.change_command = 0;\n          \n          \n            \n                    this.change_data_size = 0;\n          \n          \n            \n                    this.change_data_pos = 0;\n          \n          \n            \n                    this.change_affected = null;\n          \n          \n            \n                    this.read_command = read_command;\n          \n          \n            \n                    this.read_reply_command = read_reply_command;\n          \n          \n            \n                    this.read_reply_data_pos = read_reply_data_pos;\n          \n          \n            \n                    this.read_reply_data_bits = 0;\n          \n          \n            \n                    this(key, data_type, null, 0, 0, 0, null, read_command, read_reply_command, read_reply_data_pos, 0);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447241113", "createdAt": "2020-06-29T20:41:39Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 735}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MjM2Nw==", "bodyText": "In order to simplify enum construction, I suggest changing the change_affected parameter from String @Nullable [] to ComfoAirCommandType @Nullable []\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n          \n          \n            \n                        int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n          \n          \n            \n                        int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n          \n          \n            \n                private ComfoAirCommandType(String key, ComfoAirDataType data_type, int @Nullable [] possible_values, int change_command,\n          \n          \n            \n                        int change_data_size, int change_data_pos, ComfoAirCommandType @Nullable [] change_affected, int read_command,\n          \n          \n            \n                        int read_reply_command, int @Nullable [] read_reply_data_pos, int read_reply_data_bits) {\n          \n      \n    \n    \n  \n\nThen you handle converting the ComfoAirCommandType array to a string array in this constructor.\nIf it is possible to just change the change_affected field into an array of ComfoAirCommandType then that would be even better.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447242367", "createdAt": "2020-06-29T20:44:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 632}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI1MjYwNQ==", "bodyText": "Maybe you can make another variant constructor that accepts read_reply_data_pos as a single integer instead of an array. Then inside the constructor you can handle the conversion to an array.\nYou could probably do the same for other array parameters as well.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447252605", "createdAt": "2020-06-29T21:03:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 551}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2Mjk4Ng==", "bodyText": "Cast the command serves no purpose here. In addition you don't need to check the dataType using instanceof when all the datatypes are singletons. Comparing against the singleton reference would suffice.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (dataType instanceof DataTypeBoolean) {\n          \n          \n            \n                            value = (OnOffType) command;\n          \n          \n            \n                        } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n          \n          \n            \n                            value = (DecimalType) command;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            if (command instanceof QuantityType<?>) {\n          \n          \n            \n                                value = (QuantityType<?>) command;\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                       if (dataType == DataTypeBoolean.getSingleton() \n          \n          \n            \n                           || dataType == DataTypeNumber.getSingleton()\n          \n          \n            \n                           || dataType == DataTypeRPM.getSingleton()\n          \n          \n            \n                           || command instanceof QuantityType<?>) {\n          \n          \n            \n                           value = command;\n          \n          \n            \n                       }", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447262986", "createdAt": "2020-06-29T21:24:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadCommand() {\n+        return read_command;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadReplyCommand() {\n+        return read_reply_command;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            return new ComfoAirCommand(key);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, Command command) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        State value = UnDefType.NULL;\n+\n+        if (commandType != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType instanceof DataTypeBoolean) {\n+                value = (OnOffType) command;\n+            } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                value = (DecimalType) command;\n+            } else {\n+                if (command instanceof QuantityType<?>) {\n+                    value = (QuantityType<?>) command;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 892}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NDk1Ng==", "bodyText": "minor optimization\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (entry.read_reply_command != replyCmd) {\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        commands.add(entry);\n          \n          \n            \n                        if (entry.read_reply_command == replyCmd) {\n          \n          \n            \n                            commands.add(entry);\n          \n          \n            \n                        }", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447264956", "createdAt": "2020-06-29T21:28:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadCommand() {\n+        return read_command;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadReplyCommand() {\n+        return read_reply_command;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            return new ComfoAirCommand(key);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, Command command) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        State value = UnDefType.NULL;\n+\n+        if (commandType != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType instanceof DataTypeBoolean) {\n+                value = (OnOffType) command;\n+            } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                value = (DecimalType) command;\n+            } else {\n+                if (command instanceof QuantityType<?>) {\n+                    value = (QuantityType<?>) command;\n+                }\n+            }\n+            if (value instanceof UnDefType) {\n+                return null;\n+            } else {\n+                int[] data = dataType.convertFromState(value, commandType);\n+                DecimalType decimalValue = value.as(DecimalType.class);\n+                if (decimalValue != null) {\n+                    int intValue = decimalValue.intValue();\n+\n+                    if (data != null) {\n+                        int dataPosition = commandType.getChangeDataPos();\n+                        return new ComfoAirCommand(key, commandType.change_command, null, data, dataPosition, intValue);\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                int replyCmd = commandType.read_reply_command;\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        if (affectedCommandType.read_reply_command == 0) {\n+                            continue;\n+                        }\n+                        commands = modifiedCommandCollection(commands, affectedCommandType);\n+                    }\n+                }\n+            }\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get all commands which receive informations to update items.\n+     *\n+     * @return all ComfoAirCommand's identified by keys\n+     */\n+    public static Collection<ComfoAirCommand> getReadCommandsByEventTypes(List<String> keys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+        for (ComfoAirCommandType entry : values()) {\n+            if (!keys.contains(entry.key)) {\n+                continue;\n+            }\n+            if (entry.read_reply_command == 0) {\n+                continue;\n+            }\n+            commands = modifiedCommandCollection(commands, entry);\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get commandtypes which matches the replyCmd.\n+     *\n+     * @param replyCmd\n+     *            reply command byte value\n+     * @return ComfoAirCommandType identified by replyCmd\n+     */\n+    public static List<ComfoAirCommandType> getCommandTypesByReplyCmd(int replyCmd) {\n+        List<ComfoAirCommandType> commands = new ArrayList<>();\n+        for (ComfoAirCommandType entry : values()) {\n+            if (entry.read_reply_command != replyCmd) {\n+                continue;\n+            }\n+            commands.add(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 988}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NTYyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!keys.contains(entry.key)) {\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        if (entry.read_reply_command == 0) {\n          \n          \n            \n                            continue;\n          \n          \n            \n                        }\n          \n          \n            \n                        commands = modifiedCommandCollection(commands, entry);\n          \n          \n            \n                        if (keys.contains(entry.key) && entry.read_reply_command != 0) {\n          \n          \n            \n                            commands = modifiedCommandCollection(commands, entry);\n          \n          \n            \n                        }", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447265626", "createdAt": "2020-06-29T21:30:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadCommand() {\n+        return read_command;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadReplyCommand() {\n+        return read_reply_command;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            return new ComfoAirCommand(key);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, Command command) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        State value = UnDefType.NULL;\n+\n+        if (commandType != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType instanceof DataTypeBoolean) {\n+                value = (OnOffType) command;\n+            } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                value = (DecimalType) command;\n+            } else {\n+                if (command instanceof QuantityType<?>) {\n+                    value = (QuantityType<?>) command;\n+                }\n+            }\n+            if (value instanceof UnDefType) {\n+                return null;\n+            } else {\n+                int[] data = dataType.convertFromState(value, commandType);\n+                DecimalType decimalValue = value.as(DecimalType.class);\n+                if (decimalValue != null) {\n+                    int intValue = decimalValue.intValue();\n+\n+                    if (data != null) {\n+                        int dataPosition = commandType.getChangeDataPos();\n+                        return new ComfoAirCommand(key, commandType.change_command, null, data, dataPosition, intValue);\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                int replyCmd = commandType.read_reply_command;\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        if (affectedCommandType.read_reply_command == 0) {\n+                            continue;\n+                        }\n+                        commands = modifiedCommandCollection(commands, affectedCommandType);\n+                    }\n+                }\n+            }\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get all commands which receive informations to update items.\n+     *\n+     * @return all ComfoAirCommand's identified by keys\n+     */\n+    public static Collection<ComfoAirCommand> getReadCommandsByEventTypes(List<String> keys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+        for (ComfoAirCommandType entry : values()) {\n+            if (!keys.contains(entry.key)) {\n+                continue;\n+            }\n+            if (entry.read_reply_command == 0) {\n+                continue;\n+            }\n+            commands = modifiedCommandCollection(commands, entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 970}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2Nzg1Mg==", "bodyText": "If all you are doing is returning the parameter then you should just change the return type to void instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Map<Integer, ComfoAirCommand> modifiedCommandCollection(Map<Integer, ComfoAirCommand> commands,\n          \n          \n            \n                private static void modifiedCommandCollection(Map<Integer, ComfoAirCommand> commands,\n          \n      \n    \n    \n  \n\nAlso, perhaps you could give this method a better name.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447267852", "createdAt": "2020-06-29T21:35:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadCommand() {\n+        return read_command;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadReplyCommand() {\n+        return read_reply_command;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            return new ComfoAirCommand(key);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, Command command) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        State value = UnDefType.NULL;\n+\n+        if (commandType != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType instanceof DataTypeBoolean) {\n+                value = (OnOffType) command;\n+            } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                value = (DecimalType) command;\n+            } else {\n+                if (command instanceof QuantityType<?>) {\n+                    value = (QuantityType<?>) command;\n+                }\n+            }\n+            if (value instanceof UnDefType) {\n+                return null;\n+            } else {\n+                int[] data = dataType.convertFromState(value, commandType);\n+                DecimalType decimalValue = value.as(DecimalType.class);\n+                if (decimalValue != null) {\n+                    int intValue = decimalValue.intValue();\n+\n+                    if (data != null) {\n+                        int dataPosition = commandType.getChangeDataPos();\n+                        return new ComfoAirCommand(key, commandType.change_command, null, data, dataPosition, intValue);\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                int replyCmd = commandType.read_reply_command;\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        if (affectedCommandType.read_reply_command == 0) {\n+                            continue;\n+                        }\n+                        commands = modifiedCommandCollection(commands, affectedCommandType);\n+                    }\n+                }\n+            }\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get all commands which receive informations to update items.\n+     *\n+     * @return all ComfoAirCommand's identified by keys\n+     */\n+    public static Collection<ComfoAirCommand> getReadCommandsByEventTypes(List<String> keys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+        for (ComfoAirCommandType entry : values()) {\n+            if (!keys.contains(entry.key)) {\n+                continue;\n+            }\n+            if (entry.read_reply_command == 0) {\n+                continue;\n+            }\n+            commands = modifiedCommandCollection(commands, entry);\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get commandtypes which matches the replyCmd.\n+     *\n+     * @param replyCmd\n+     *            reply command byte value\n+     * @return ComfoAirCommandType identified by replyCmd\n+     */\n+    public static List<ComfoAirCommandType> getCommandTypesByReplyCmd(int replyCmd) {\n+        List<ComfoAirCommandType> commands = new ArrayList<>();\n+        for (ComfoAirCommandType entry : values()) {\n+            if (entry.read_reply_command != replyCmd) {\n+                continue;\n+            }\n+            commands.add(entry);\n+        }\n+        return commands;\n+    }\n+\n+    /**\n+     * Get a specific command.\n+     *\n+     * @param key\n+     *            command key\n+     * @return ComfoAirCommandType identified by key\n+     */\n+    public static @Nullable ComfoAirCommandType getCommandTypeByKey(String key) {\n+        for (ComfoAirCommandType entry : values()) {\n+            if (entry.key.equals(key)) {\n+                return entry;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private static Map<Integer, ComfoAirCommand> modifiedCommandCollection(Map<Integer, ComfoAirCommand> commands,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 1010}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2ODEwNw==", "bodyText": "Can this be suppression be removed?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447268107", "createdAt": "2020-06-29T21:35:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadCommand() {\n+        return read_command;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadReplyCommand() {\n+        return read_reply_command;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            return new ComfoAirCommand(key);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, Command command) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        State value = UnDefType.NULL;\n+\n+        if (commandType != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType instanceof DataTypeBoolean) {\n+                value = (OnOffType) command;\n+            } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                value = (DecimalType) command;\n+            } else {\n+                if (command instanceof QuantityType<?>) {\n+                    value = (QuantityType<?>) command;\n+                }\n+            }\n+            if (value instanceof UnDefType) {\n+                return null;\n+            } else {\n+                int[] data = dataType.convertFromState(value, commandType);\n+                DecimalType decimalValue = value.as(DecimalType.class);\n+                if (decimalValue != null) {\n+                    int intValue = decimalValue.intValue();\n+\n+                    if (data != null) {\n+                        int dataPosition = commandType.getChangeDataPos();\n+                        return new ComfoAirCommand(key, commandType.change_command, null, data, dataPosition, intValue);\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                int replyCmd = commandType.read_reply_command;\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        if (affectedCommandType.read_reply_command == 0) {\n+                            continue;\n+                        }\n+                        commands = modifiedCommandCollection(commands, affectedCommandType);\n+                    }\n+                }\n+            }\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get all commands which receive informations to update items.\n+     *\n+     * @return all ComfoAirCommand's identified by keys\n+     */\n+    public static Collection<ComfoAirCommand> getReadCommandsByEventTypes(List<String> keys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+        for (ComfoAirCommandType entry : values()) {\n+            if (!keys.contains(entry.key)) {\n+                continue;\n+            }\n+            if (entry.read_reply_command == 0) {\n+                continue;\n+            }\n+            commands = modifiedCommandCollection(commands, entry);\n+        }\n+        return commands.values();\n+    }\n+\n+    /**\n+     * Get commandtypes which matches the replyCmd.\n+     *\n+     * @param replyCmd\n+     *            reply command byte value\n+     * @return ComfoAirCommandType identified by replyCmd\n+     */\n+    public static List<ComfoAirCommandType> getCommandTypesByReplyCmd(int replyCmd) {\n+        List<ComfoAirCommandType> commands = new ArrayList<>();\n+        for (ComfoAirCommandType entry : values()) {\n+            if (entry.read_reply_command != replyCmd) {\n+                continue;\n+            }\n+            commands.add(entry);\n+        }\n+        return commands;\n+    }\n+\n+    /**\n+     * Get a specific command.\n+     *\n+     * @param key\n+     *            command key\n+     * @return ComfoAirCommandType identified by key\n+     */\n+    public static @Nullable ComfoAirCommandType getCommandTypeByKey(String key) {\n+        for (ComfoAirCommandType entry : values()) {\n+            if (entry.key.equals(key)) {\n+                return entry;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 1009}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2ODcwMg==", "bodyText": "Since the method is local you should be able to omit specifying the class.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n          \n          \n            \n                    ComfoAirCommandType commandType = getCommandTypeByKey(key);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447268702", "createdAt": "2020-06-29T21:37:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadCommand() {\n+        return read_command;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadReplyCommand() {\n+        return read_reply_command;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            return new ComfoAirCommand(key);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, Command command) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        State value = UnDefType.NULL;\n+\n+        if (commandType != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType instanceof DataTypeBoolean) {\n+                value = (OnOffType) command;\n+            } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                value = (DecimalType) command;\n+            } else {\n+                if (command instanceof QuantityType<?>) {\n+                    value = (QuantityType<?>) command;\n+                }\n+            }\n+            if (value instanceof UnDefType) {\n+                return null;\n+            } else {\n+                int[] data = dataType.convertFromState(value, commandType);\n+                DecimalType decimalValue = value.as(DecimalType.class);\n+                if (decimalValue != null) {\n+                    int intValue = decimalValue.intValue();\n+\n+                    if (data != null) {\n+                        int dataPosition = commandType.getChangeDataPos();\n+                        return new ComfoAirCommand(key, commandType.change_command, null, data, dataPosition, intValue);\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 925}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2OTIxNQ==", "bodyText": "same here", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447269215", "createdAt": "2020-06-29T21:38:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadCommand() {\n+        return read_command;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadReplyCommand() {\n+        return read_reply_command;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            return new ComfoAirCommand(key);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, Command command) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        State value = UnDefType.NULL;\n+\n+        if (commandType != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType instanceof DataTypeBoolean) {\n+                value = (OnOffType) command;\n+            } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                value = (DecimalType) command;\n+            } else {\n+                if (command instanceof QuantityType<?>) {\n+                    value = (QuantityType<?>) command;\n+                }\n+            }\n+            if (value instanceof UnDefType) {\n+                return null;\n+            } else {\n+                int[] data = dataType.convertFromState(value, commandType);\n+                DecimalType decimalValue = value.as(DecimalType.class);\n+                if (decimalValue != null) {\n+                    int intValue = decimalValue.intValue();\n+\n+                    if (data != null) {\n+                        int dataPosition = commandType.getChangeDataPos();\n+                        return new ComfoAirCommand(key, commandType.change_command, null, data, dataPosition, intValue);\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                int replyCmd = commandType.read_reply_command;\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 941}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MDQzNw==", "bodyText": "Maybe you could perform the read_reply_command != 0 check inside the modifiedCommandCollection instead since both callers currently perform this check instead.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447270437", "createdAt": "2020-06-29T21:41:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadCommand() {\n+        return read_command;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadReplyCommand() {\n+        return read_reply_command;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            return new ComfoAirCommand(key);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, Command command) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        State value = UnDefType.NULL;\n+\n+        if (commandType != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType instanceof DataTypeBoolean) {\n+                value = (OnOffType) command;\n+            } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                value = (DecimalType) command;\n+            } else {\n+                if (command instanceof QuantityType<?>) {\n+                    value = (QuantityType<?>) command;\n+                }\n+            }\n+            if (value instanceof UnDefType) {\n+                return null;\n+            } else {\n+                int[] data = dataType.convertFromState(value, commandType);\n+                DecimalType decimalValue = value.as(DecimalType.class);\n+                if (decimalValue != null) {\n+                    int intValue = decimalValue.intValue();\n+\n+                    if (data != null) {\n+                        int dataPosition = commandType.getChangeDataPos();\n+                        return new ComfoAirCommand(key, commandType.change_command, null, data, dataPosition, intValue);\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                int replyCmd = commandType.read_reply_command;\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key);\n+                commands.put(replyCmd, command);\n+            }\n+\n+            if (commandType.change_affected != null) {\n+                for (String affectedKey : commandType.change_affected) {\n+                    // refresh affected event keys only when they are used\n+                    if (!usedKeys.contains(affectedKey)) {\n+                        continue;\n+                    }\n+\n+                    ComfoAirCommandType affectedCommandType = ComfoAirCommandType.getCommandTypeByKey(affectedKey);\n+\n+                    if (affectedCommandType != null) {\n+                        if (affectedCommandType.read_reply_command == 0) {\n+                            continue;\n+                        }\n+                        commands = modifiedCommandCollection(commands, affectedCommandType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 947}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MTU1Mg==", "bodyText": "Couldn't you call modifiedCommandCollection to perform this logic?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447271552", "createdAt": "2020-06-29T21:43:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,1024 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new String[] { MENU21_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new String[] { MENU22_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new String[] { MENU27_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new String[] { MENU23_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new String[] { MENU24_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new String[] { MENU25_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new String[] { MENU26_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new String[] { MENU20_MODE.getKey() },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new String[] { FAN_OUT_PERCENT.getKey(), FAN_OUT_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey() }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_IN_RPM.getKey(), FAN_OUT_PERCENT.getKey(),\n+                    FAN_OUT_RPM.getKey() },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new String[] { BYPASS_FACTOR.getKey(), BYPASS_LEVEL.getKey(), BYPASS_SUMMER.getKey() },\n+            Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new String[] { ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+                    ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+                    ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new String[] { OUTDOOR_TEMPERATURE_IN.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    PREHEATER_FROST_PROTECT.getKey(), PREHEATER_FROST_TIME.getKey(), PREHEATER_HEATING.getKey(),\n+                    FROST_STATE.getKey(), PREHEATER_OPTION.getKey(), PREHEATER_TIME.getKey(),\n+                    PREHEATER_VALVE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new String[] { INDOOR_TEMPERATURE_IN.getKey(), OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), INDOOR_TEMPERATURE_IN.getKey(),\n+                    INDOOR_TEMPERATURE_OUT.getKey(), OUTDOOR_TEMPERATURE_IN.getKey(),\n+                    OUTDOOR_TEMPERATURE_OUT.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new String[] { FAN_IN_PERCENT.getKey(), FAN_OUT_PERCENT.getKey(), FAN_IN_0.getKey(), FAN_IN_1.getKey(),\n+                    FAN_IN_2.getKey(), FAN_IN_3.getKey(), FAN_OUT_0.getKey(), FAN_OUT_1.getKey(), FAN_OUT_2.getKey(),\n+                    FAN_OUT_3.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { COOKERHOOD_DELAY.getKey(), COOKERHOOD_STATE.getKey(), COOKERHOOD_SPEED.getKey(),\n+                    COOKERHOOD_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new String[] { HEATER_TARGET_TEMPERATURE.getKey(), HEATER_POWER.getKey(), HEATER_STATE.getKey(),\n+                    HEATER_POWER_I.getKey(), HEATER_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new String[] { ENTHALPY_TEMPERATURE.getKey(), ENTHALPY_HUMIDITY.getKey(), ENTHALPY_LEVEL.getKey(),\n+                    ENTHALPY_STATE.getKey(), ENTHALPY_TIME.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new String[] { EWT_SPEED.getKey(), EWT_TEMPERATURE_LOW.getKey(), EWT_TEMPERATURE_HIGH.getKey(),\n+                    EWT_STATE.getKey(), EWT_TEMPERATURE.getKey() },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERROR_MESSAGE(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 0 }),\n+    ERRORA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 2 }),\n+    ERRORA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 4 }),\n+    ERRORA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_A_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 6 }),\n+    ERRORAHIGH_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 13 }),\n+    ERRORAHIGH_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 14 }),\n+    ERRORAHIGH_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 15 }),\n+    ERRORAHIGH_PREPRELAST(\n+            ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_HIGH_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 16 }),\n+    ERRORE_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 1 }),\n+    ERRORE_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 3 }),\n+    ERRORE_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 5 }),\n+    ERRORE_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_E_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 7 }),\n+    ERROREA_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_CURRENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 9 }),\n+    ERROREA_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_LAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 10 }),\n+    ERROREA_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 11 }),\n+    ERROREA_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_EA_PREPRELAST,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 12 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new String[] {\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_MESSAGE }),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new String[] { ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+                    ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_STRING_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_STRING_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new String[] { RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(), RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG1_MODE.getKey(), ANALOG1_NEGATIVE.getKey(), ANALOG1_MIN.getKey(), ANALOG1_MAX.getKey(),\n+                    ANALOG1_VALUE.getKey(), ANALOG1_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG2_MODE.getKey(), ANALOG2_NEGATIVE.getKey(), ANALOG2_MIN.getKey(), ANALOG2_MAX.getKey(),\n+                    ANALOG2_VALUE.getKey(), ANALOG2_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG3_MODE.getKey(), ANALOG3_NEGATIVE.getKey(), ANALOG3_MIN.getKey(), ANALOG3_MAX.getKey(),\n+                    ANALOG3_VALUE.getKey(), ANALOG3_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { ANALOG4_MODE.getKey(), ANALOG4_NEGATIVE.getKey(), ANALOG4_MIN.getKey(), ANALOG4_MAX.getKey(),\n+                    ANALOG4_VALUE.getKey(), ANALOG4_VOLT.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new String[] { RF_MODE.getKey(), RF_NEGATIVE.getKey(), RF_MIN.getKey(), RF_MAX.getKey(),\n+                    RF_VALUE.getKey() },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;\n+\n+    /*\n+     * Possible values\n+     */\n+    private final int @Nullable [] possible_values;\n+\n+    /*\n+     * Cmd code to change properties on the comfoair.\n+     */\n+    private final int change_command;\n+\n+    /*\n+     * The size of the data block.\n+     */\n+    private final int change_data_size;\n+\n+    /*\n+     * The byte inside the data block which holds the crucial value.\n+     */\n+    private final int change_data_pos;\n+\n+    /*\n+     * Affected commands which should be refreshed after a successful change\n+     * command call.\n+     */\n+    private final String @Nullable [] change_affected;\n+\n+    /*\n+     * Command for reading properties.\n+     */\n+    private final int read_command;\n+\n+    /*\n+     * ACK Command which identifies the matching response.\n+     */\n+    private final int read_reply_command;\n+\n+    /*\n+     * The byte position inside the response data.\n+     */\n+    private final int @Nullable [] read_reply_data_pos;\n+\n+    /*\n+     * Bit mask for boolean response properties to identify a true value.\n+     */\n+    private final int read_reply_data_bits;\n+\n+    /*\n+     * Constructor for full read/write command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected, int read_command,\n+            int read_reply_command, int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read/write command w/o predefined read_reply_data_bits & possible_values\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int change_command, int change_data_size,\n+            int change_data_pos, String[] change_affected, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for write-only command (reset)\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int[] possible_values, int change_command,\n+            int change_data_size, int change_data_pos, String[] change_affected) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = possible_values;\n+        this.change_command = change_command;\n+        this.change_data_size = change_data_size;\n+        this.change_data_pos = change_data_pos;\n+        this.change_affected = change_affected;\n+        this.read_command = 0;\n+        this.read_reply_command = 0;\n+        this.read_reply_data_pos = null;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    /*\n+     * Constructor for read-only command\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos, int read_reply_data_bits) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = read_reply_data_bits;\n+    }\n+\n+    /*\n+     * Constructor for read-only command w/o read_reply_data_bits\n+     */\n+    private ComfoAirCommandType(String key, ComfoAirDataType data_type, int read_command, int read_reply_command,\n+            int[] read_reply_data_pos) {\n+        this.key = key;\n+        this.data_type = data_type;\n+        this.possible_values = null;\n+        this.change_command = 0;\n+        this.change_data_size = 0;\n+        this.change_data_pos = 0;\n+        this.change_affected = null;\n+        this.read_command = read_command;\n+        this.read_reply_command = read_reply_command;\n+        this.read_reply_data_pos = read_reply_data_pos;\n+        this.read_reply_data_bits = 0;\n+    }\n+\n+    public static class Constants {\n+        public static final int REQUEST_GET_INPUTS = 0x03;\n+        public static final int REPLY_GET_INPUTS = 0x04;\n+        public static final int REQUEST_GET_FAN = 0x0b;\n+        public static final int REPLY_GET_FAN = 0x0c;\n+        public static final int REQUEST_GET_ANALOG_VOLTS = 0x13;\n+        public static final int REPLY_GET_ANALOG_VOLTS = 0x14;\n+        public static final int REQUEST_GET_FIRMWARE = 0x69;\n+        public static final int REPLY_GET_FIRMWARE = 0x6a;\n+        public static final int REQUEST_GET_SENSORS = 0x97;\n+        public static final int REPLY_GET_SENSORS = 0x98;\n+        public static final int REQUEST_SET_LEVEL = 0x99;\n+        public static final int REQUEST_SET_RS232 = 0x9b;\n+        public static final int REPLY_SET_RS232 = 0x9c;\n+        public static final int REQUEST_GET_ANALOGS = 0x9d;\n+        public static final int REPLY_GET_ANALOGS = 0x9e;\n+        public static final int REQUEST_SET_ANALOGS = 0x9f;\n+        public static final int REQUEST_GET_DELAYS = 0xc9;\n+        public static final int REPLY_GET_DELAYS = 0xca;\n+        public static final int REQUEST_SET_DELAYS = 0xcb;\n+        public static final int REQUEST_GET_FAN_LEVEL = 0xcd;\n+        public static final int REPLY_GET_FAN_LEVEL = 0xce;\n+        public static final int REQUEST_SET_FAN_LEVEL = 0xcf;\n+        public static final int REQUEST_GET_TEMPS = 0xd1;\n+        public static final int REPLY_GET_TEMPS = 0xd2;\n+        public static final int REQUEST_SET_TEMPS = 0xd3;\n+        public static final int REQUEST_GET_STATES = 0xd5;\n+        public static final int REPLY_GET_STATES = 0xd6;\n+        public static final int REQUEST_SET_STATES = 0xd7;\n+        public static final int REQUEST_GET_ERRORS = 0xd9;\n+        public static final int REPLY_GET_ERRORS = 0xda;\n+        public static final int REQUEST_SET_RESETS = 0xdb;\n+        public static final int REQUEST_GET_HOURS = 0xdd;\n+        public static final int REPLY_GET_HOURS = 0xde;\n+        public static final int REQUEST_GET_BYPASS = 0xdf;\n+        public static final int REPLY_GET_BYPASS = 0xe0;\n+        public static final int REQUEST_GET_PREHEATER = 0xe1;\n+        public static final int REPLY_GET_PREHEATER = 0xe2;\n+        public static final int REQUEST_GET_RF = 0xe5;\n+        public static final int REPLY_GET_RF = 0xe6;\n+        public static final int REQUEST_GET_EWT = 0xeb;\n+        public static final int REPLY_GET_EWT = 0xec;\n+        public static final int REQUEST_SET_EWT = 0xed;\n+\n+        public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+        public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    }\n+\n+    /**\n+     * @return command key\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * @return data type for this command key\n+     */\n+    public ComfoAirDataType getDataType() {\n+        return data_type;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadCommand() {\n+        return read_command;\n+    }\n+\n+    /**\n+     * @return read_command for this command key\n+     */\n+    public int getReadReplyCommand() {\n+        return read_reply_command;\n+    }\n+\n+    /**\n+     * @return possible byte values\n+     */\n+    public int @Nullable [] getPossibleValues() {\n+        return possible_values;\n+    }\n+\n+    /**\n+     * @return relevant byte position inside the response byte value array\n+     */\n+    public int getChangeDataPos() {\n+        return change_data_pos;\n+    }\n+\n+    /**\n+     * @return generate a byte value sequence for the response stream\n+     */\n+    public int[] getChangeDataTemplate() {\n+        int[] template = new int[change_data_size];\n+        for (int i = 0; i < template.length; i++) {\n+            template[i] = 0x00;\n+        }\n+        return template;\n+    }\n+\n+    /**\n+     * @return byte position inside the request byte value array\n+     */\n+    public int @Nullable [] getGetReplyDataPos() {\n+        return read_reply_data_pos;\n+    }\n+\n+    /**\n+     * @return bit mask for the response byte value\n+     */\n+    public int getGetReplyDataBits() {\n+        return read_reply_data_bits;\n+    }\n+\n+    /**\n+     * Get single read command to update item.\n+     *\n+     * @param key\n+     *\n+     * @return ComfoAirCommand identified by key\n+     */\n+    public static @Nullable ComfoAirCommand getReadCommand(String key) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+\n+        if (commandType != null) {\n+            return new ComfoAirCommand(key);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get a command to change properties on the comfoair.\n+     *\n+     * @param key\n+     *            command key\n+     * @param value\n+     *            new state\n+     * @return initialized ComfoAirCommand\n+     */\n+    public static @Nullable ComfoAirCommand getChangeCommand(String key, Command command) {\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        State value = UnDefType.NULL;\n+\n+        if (commandType != null) {\n+            ComfoAirDataType dataType = commandType.getDataType();\n+            if (dataType instanceof DataTypeBoolean) {\n+                value = (OnOffType) command;\n+            } else if (dataType instanceof DataTypeNumber || dataType instanceof DataTypeRPM) {\n+                value = (DecimalType) command;\n+            } else {\n+                if (command instanceof QuantityType<?>) {\n+                    value = (QuantityType<?>) command;\n+                }\n+            }\n+            if (value instanceof UnDefType) {\n+                return null;\n+            } else {\n+                int[] data = dataType.convertFromState(value, commandType);\n+                DecimalType decimalValue = value.as(DecimalType.class);\n+                if (decimalValue != null) {\n+                    int intValue = decimalValue.intValue();\n+\n+                    if (data != null) {\n+                        int dataPosition = commandType.getChangeDataPos();\n+                        return new ComfoAirCommand(key, commandType.change_command, null, data, dataPosition, intValue);\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Get all commands which should be refreshed after a successful change\n+     * command.\n+     *\n+     * @param key\n+     *            command key\n+     * @param usedKeys\n+     * @return ComfoAirCommand's which should be updated after a modifying\n+     *         ComfoAirCommand named by key\n+     */\n+    public static Collection<ComfoAirCommand> getAffectedReadCommands(String key, Set<String> usedKeys) {\n+\n+        Map<Integer, ComfoAirCommand> commands = new HashMap<>();\n+\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            if (commandType.read_reply_command != 0) {\n+                int replyCmd = commandType.read_reply_command;\n+\n+                ComfoAirCommand command = new ComfoAirCommand(key);\n+                commands.put(replyCmd, command);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 932}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3NDAyNQ==", "bodyText": "You should make new int[0] into a constant so you can reuse it.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447274025", "createdAt": "2020-06-29T21:49:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3NDI2Ng==", "bodyText": "These should probably be separated into two separate constants.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447274266", "createdAt": "2020-06-29T21:49:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3NDk1OQ==", "bodyText": "Any reason this couldn't be a constant?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447274959", "createdAt": "2020-06-29T21:51:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3Nzg0OA==", "bodyText": "I think merging these loops makes the code a bit cleaner.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                do {\n          \n          \n            \n                                    while (inputStream != null && inputStream.available() > 0) {\n          \n          \n            \n            \n          \n          \n            \n                                        int bytes = inputStream.read(readBuffer);\n          \n          \n            \n            \n          \n          \n            \n                                        // merge bytes\n          \n          \n            \n                                        byte[] mergedBytes = new byte[responseBlock.length + bytes];\n          \n          \n            \n                                        System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n          \n          \n            \n                                        System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n          \n          \n            \n            \n          \n          \n            \n                                        responseBlock = mergedBytes;\n          \n          \n            \n                                    }\n          \n          \n            \n                                    try {\n          \n          \n            \n                                        // add wait states around reading the stream, so that\n          \n          \n            \n                                        // interrupted transmissions are merged\n          \n          \n            \n                                        Thread.sleep(100);\n          \n          \n            \n                                    } catch (InterruptedException e) {\n          \n          \n            \n                                        logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n          \n          \n            \n                                    }\n          \n          \n            \n            \n          \n          \n            \n                                } while (inputStream != null && inputStream.available() > 0);\n          \n          \n            \n                                while (inputStream != null && inputStream.available() > 0) {\n          \n          \n            \n                                    int bytes = inputStream.read(readBuffer);\n          \n          \n            \n            \n          \n          \n            \n                                    // merge bytes\n          \n          \n            \n                                    byte[] mergedBytes = new byte[responseBlock.length + bytes];\n          \n          \n            \n                                    System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n          \n          \n            \n                                    System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n          \n          \n            \n            \n          \n          \n            \n                                    responseBlock = mergedBytes;\n          \n          \n            \n                                    if (inputStream.available() == 0) {\n          \n          \n            \n                                        try {\n          \n          \n            \n                                            // add wait states around reading the stream, so that\n          \n          \n            \n                                            // interrupted transmissions are merged\n          \n          \n            \n                                            Thread.sleep(100);\n          \n          \n            \n                                        } catch (InterruptedException e) {\n          \n          \n            \n                                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n          \n          \n            \n                                        }\n          \n          \n            \n                                    }\n          \n          \n            \n                                }", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447277848", "createdAt": "2020-06-29T21:58:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3ODQ0OQ==", "bodyText": "The if statement is redundant here. You can also use System.arraycopy as well.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (requestData.length > 0) {\n          \n          \n            \n                        for (int i = 0; i < requestData.length; i++) {\n          \n          \n            \n                            block[i + 3] = (byte) requestData[i];\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    System.arraycopy(requestData, 0, block, 3, requestData.length);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447278449", "createdAt": "2020-06-29T21:59:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3ODkyNQ==", "bodyText": "(byte) 0x07 is used in a lot of places, you should make it a constant.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447278925", "createdAt": "2020-06-29T22:00:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3OTI1MA==", "bodyText": "Any reason you chose 50? wouldn't it be safe to base it on the process buffer size?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447279250", "createdAt": "2020-06-29T22:01:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 378}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MDEwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    byte[] _block = new byte[pos];\n          \n          \n            \n                    System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n          \n          \n            \n            \n          \n          \n            \n                    return _block;\n          \n          \n            \n                    return Arrays.copyOf(processBuffer, pos);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447280108", "createdAt": "2020-06-29T22:03:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 420}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MDI5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    byte[] _block = new byte[pos];\n          \n          \n            \n                    System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n          \n          \n            \n            \n          \n          \n            \n                    return _block;\n          \n          \n            \n                    return Arrays.copyOf(cleanedBuffer, pos);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447280294", "createdAt": "2020-06-29T22:03:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjIzMw==", "bodyText": "You should reference the constants in ComfoAirCommandType.Constants where possible.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447282233", "createdAt": "2020-06-29T22:08:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            if (requestCmd == 0xcb) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 485}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjQ5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StringBuffer sb = new StringBuffer();\n          \n          \n            \n                    StringBuilder sb = new StringBuilder();", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447282492", "createdAt": "2020-06-29T22:08:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+\n+        StringBuffer sb = new StringBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 454}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjUzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StringBuffer sb = new StringBuffer();\n          \n          \n            \n                    StringBuilder sb = new StringBuilder();", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447282539", "createdAt": "2020-06-29T22:08:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+\n+        StringBuffer sb = new StringBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 463}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4NTk1Nw==", "bodyText": "you should use a switch statement for these commands", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447285957", "createdAt": "2020-06-29T22:14:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            if (requestCmd == 0xcb) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[i];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xcf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 499}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5NDA1Nw==", "bodyText": "I think you are doing too much in the loop, some of the logic could be done outside of it. Also the code could be changed to make the logic more readable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for (int i = 0; i < newRequestData.length; i++) {\n          \n          \n            \n                                    int j = i > 3 ? i + 2 : i;\n          \n          \n            \n            \n          \n          \n            \n                                    if (dataPosition == i) {\n          \n          \n            \n                                        newRequestData[i] = requestValue;\n          \n          \n            \n                                    } else {\n          \n          \n            \n                                        newRequestData[i] = preRequestData[j];\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                                System.arraycopy(preRequestData, 0, newRequestData, 0, 4);\n          \n          \n            \n                                System.arraycopy(preRequestData, 6, newRequestData, 4, newRequestData.length - 4);\n          \n          \n            \n                                newRequestData[dataPosition] = requestValue;", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447294057", "createdAt": "2020-06-29T22:27:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            if (requestCmd == 0xcb) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[i];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xcf) {\n+                newRequestData = new int[9];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 5 ? i + 4 : i;\n+\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xd7) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 5 ? i + 3 : i;\n+\n+                        if (dataPosition == i) {\n+                            if (dataPosition == 4) {\n+                                requestValue = checkByteAndCalculateValue(command, requestValue, preRequestData[j]);\n+                                newRequestData[i] = preRequestData[j] + requestValue;\n+                            } else {\n+                                newRequestData[i] = requestValue;\n+                            }\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xed) {\n+                newRequestData = new int[5];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 3 ? i + 2 : i;\n+\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 549}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5NjQ4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            newRequestData = new int[19];\n          \n          \n            \n            \n          \n          \n            \n                            if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n          \n          \n            \n                                for (int i = 0; i < newRequestData.length; i++) {\n          \n          \n            \n                                    if (dataPosition == i) {\n          \n          \n            \n                                        if (dataPosition == 0 || dataPosition == 1 || dataPosition == 2) {\n          \n          \n            \n                                            requestValue = checkByteAndCalculateValue(command, requestValue, preRequestData[i]);\n          \n          \n            \n                                            newRequestData[i] = preRequestData[i] + requestValue;\n          \n          \n            \n                                        } else {\n          \n          \n            \n                                            newRequestData[i] = requestValue;\n          \n          \n            \n                                        }\n          \n          \n            \n                                    } else {\n          \n          \n            \n                                        newRequestData[i] = preRequestData[i];\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                            if (preRequestData.length > 0 && 19 <= preRequestData.length) {\n          \n          \n            \n                                newRequestData = Arrays.copyOf(preRequestData, 19);\n          \n          \n            \n                                switch(dataPosition){\n          \n          \n            \n                                    case 0:\n          \n          \n            \n                                    case 1:\n          \n          \n            \n                                    case 2:\n          \n          \n            \n                                        requestValue = preRequestData[dataPosition] + checkByteAndCalculateValue(command, requestValue, preRequestData[dataPosition]);\n          \n          \n            \n                                }\n          \n          \n            \n                                newRequestData[dataPosition] = requestValue;", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447296488", "createdAt": "2020-06-29T22:34:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            if (requestCmd == 0xcb) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[i];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xcf) {\n+                newRequestData = new int[9];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 5 ? i + 4 : i;\n+\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xd7) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 5 ? i + 3 : i;\n+\n+                        if (dataPosition == i) {\n+                            if (dataPosition == 4) {\n+                                requestValue = checkByteAndCalculateValue(command, requestValue, preRequestData[j]);\n+                                newRequestData[i] = preRequestData[j] + requestValue;\n+                            } else {\n+                                newRequestData[i] = requestValue;\n+                            }\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xed) {\n+                newRequestData = new int[5];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 3 ? i + 2 : i;\n+\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0x9f) {\n+                newRequestData = new int[19];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        if (dataPosition == i) {\n+                            if (dataPosition == 0 || dataPosition == 1 || dataPosition == 2) {\n+                                requestValue = checkByteAndCalculateValue(command, requestValue, preRequestData[i]);\n+                                newRequestData[i] = preRequestData[i] + requestValue;\n+                            } else {\n+                                newRequestData[i] = requestValue;\n+                            }\n+                        } else {\n+                            newRequestData[i] = preRequestData[i];\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 568}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwMjcxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            newRequestData = new int[8];\n          \n          \n            \n            \n          \n          \n            \n                            if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n          \n          \n            \n                                for (int i = 0; i < newRequestData.length; i++) {\n          \n          \n            \n                                    int j = i > 5 ? i + 3 : i;\n          \n          \n            \n            \n          \n          \n            \n                                    if (dataPosition == i) {\n          \n          \n            \n                                        if (dataPosition == 4) {\n          \n          \n            \n                                            requestValue = checkByteAndCalculateValue(command, requestValue, preRequestData[j]);\n          \n          \n            \n                                            newRequestData[i] = preRequestData[j] + requestValue;\n          \n          \n            \n                                        } else {\n          \n          \n            \n                                            newRequestData[i] = requestValue;\n          \n          \n            \n                                        }\n          \n          \n            \n                                    } else {\n          \n          \n            \n                                        newRequestData[i] = preRequestData[j];\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                            if (preRequestData.length > 0 && 8 <= preRequestData.length) {\n          \n          \n            \n                                newRequestData = new int[8];\n          \n          \n            \n                                \n          \n          \n            \n                                System.arraycopy(preRequestData, 0, newRequestData, 0, 6);\n          \n          \n            \n                                System.arraycopy(preRequestData, 9, newRequestData, 6, newRequestData.length - 6);\n          \n          \n            \n                                \n          \n          \n            \n                                if (dataPosition == 4) {\n          \n          \n            \n                                    requestValue = preRequestData[4] + checkByteAndCalculateValue(command, requestValue, preRequestData[4]);\n          \n          \n            \n                                }\n          \n          \n            \n                                newRequestData[dataPosition] = requestValue;", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447302717", "createdAt": "2020-06-29T22:48:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            if (requestCmd == 0xcb) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[i];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xcf) {\n+                newRequestData = new int[9];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 5 ? i + 4 : i;\n+\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xd7) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        int j = i > 5 ? i + 3 : i;\n+\n+                        if (dataPosition == i) {\n+                            if (dataPosition == 4) {\n+                                requestValue = checkByteAndCalculateValue(command, requestValue, preRequestData[j]);\n+                                newRequestData[i] = preRequestData[j] + requestValue;\n+                            } else {\n+                                newRequestData[i] = requestValue;\n+                            }\n+                        } else {\n+                            newRequestData[i] = preRequestData[j];\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 533}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwMzgzNQ==", "bodyText": "please make similar improvements to the remaining commands.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447303835", "createdAt": "2020-06-29T22:51:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[50];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if ((byte) 0x07 == processBuffer[i] && (byte) 0x07 == processBuffer[i + 1]) {\n+                i++;\n+            }\n+\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(cleanedBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+\n+        int pos = 0;\n+\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if ((byte) 0x07 == cleanedBuffer[i]) {\n+                processBuffer[pos] = (byte) 0x07;\n+                pos++;\n+            }\n+\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+\n+        byte[] _block = new byte[pos];\n+        System.arraycopy(processBuffer, 0, _block, 0, _block.length);\n+\n+        return _block;\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+\n+        StringBuffer sb = new StringBuffer();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            if (requestCmd == 0xcb) {\n+                newRequestData = new int[8];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                    for (int i = 0; i < newRequestData.length; i++) {\n+                        if (dataPosition == i) {\n+                            newRequestData[i] = requestValue;\n+                        } else {\n+                            newRequestData[i] = preRequestData[i];\n+                        }\n+                    }\n+                } else {\n+                    return new int[0];\n+                }\n+            } else if (requestCmd == 0xcf) {\n+                newRequestData = new int[9];\n+\n+                if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 502}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNDEzMQ==", "bodyText": "Since you aren't using this properties file it should be removed.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447304131", "createdAt": "2020-06-29T22:52:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/i18n/comfoair_xx_XX.properties", "diffHunk": "@@ -0,0 +1,17 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content\n+# binding\n+binding.comfoair.name = <Your localized Binding name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNDg1MA==", "bodyText": "why are you converting it to a string and back?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447304850", "createdAt": "2020-06-29T22:54:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return new int[0];\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        String hexString = Integer.toHexString(datasum);\n+        if (hexString.length() > 2) {\n+            hexString = hexString.substring(hexString.length() - 2);\n+        }\n+\n+        return (byte) Integer.parseInt(hexString, 16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNjIwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            byte[] _block = new byte[3 + replyData.length];\n          \n          \n            \n                                            System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n          \n          \n            \n                                            byte[] _block = Arrays.copyOf(cleanedBlock, 3 + dataSize);", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447306208", "createdAt": "2020-06-29T22:58:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNzAzMg==", "bodyText": "You might catch an InterruptedIOException here, so you want to make sure that the interrupt is handled properly.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447307032", "createdAt": "2020-06-29T23:01:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNzQwMA==", "bodyText": "If a thread receives an interrupt it generally means that it should terminate immediately. You shouldn't continue communication requests with it.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447307400", "createdAt": "2020-06-29T23:02:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                        }\n+\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == (byte) 0x07\n+                            && responseBlock[1] == (byte) 0xf3) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return new int[0];\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == (byte) 0x07\n+                                && responseBlock[3] == (byte) 0xf0\n+                                && responseBlock[responseBlock.length - 2] == (byte) 0x07\n+                                && responseBlock[responseBlock.length - 1] == (byte) 0x0f\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = new byte[3 + replyData.length];\n+                                System.arraycopy(cleanedBlock, 0, _block, 0, _block.length);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    logger.debug(\"IO error: {}\", e.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNzUyMA==", "bodyText": "Same thing here.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r447307520", "createdAt": "2020-06-29T23:02:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,635 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte[] START = { (byte) 0x07, (byte) 0xf0 };\n+    private static byte[] END = { (byte) 0x07, (byte) 0x0f };\n+    private static byte[] ACK = { (byte) 0x07, (byte) 0xf3 };\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, new int[0]);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, new int[0]);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == 0x9b) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == 0x9c) {\n+                return new int[] { isSuspended ? 0x00 : 0x03 };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return new int[0];\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return new int[0];\n+                    }\n+                }\n+\n+                // Fake read request for ccease properties\n+                if (requestData.length <= 0 && requestCmd == 0x37) {\n+                    requestData = new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return new int[0];\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da93fc16233d4945a29bd5926117d83f7b8f783"}, "originalPosition": 215}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c79c8de0aa19868b23ba819949cc98ea9c7b4f6", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/3c79c8de0aa19868b23ba819949cc98ea9c7b4f6", "committedDate": "2020-07-09T17:41:37Z", "message": "fix channel names\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}, "afterCommit": {"oid": "1b269eb08f2e959c0bc4a794fe4eb8f6be3b369c", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/1b269eb08f2e959c0bc4a794fe4eb8f6be3b369c", "committedDate": "2020-07-14T15:58:28Z", "message": "fix formatting\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b269eb08f2e959c0bc4a794fe4eb8f6be3b369c", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/1b269eb08f2e959c0bc4a794fe4eb8f6be3b369c", "committedDate": "2020-07-14T15:58:28Z", "message": "fix formatting\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}, "afterCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e", "committedDate": "2020-07-25T06:03:17Z", "message": "update pom.xml\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTk3OTQz", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-460597943", "createdAt": "2020-08-04T08:21:07Z", "commit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODoyMTowOFrOG7WKiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjowMDoxNVrOG7nC8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg4MjMxNQ==", "bodyText": "Can you mention the Thing Type ID?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r464882315", "createdAt": "2020-08-04T08:21:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/README.md", "diffHunk": "@@ -0,0 +1,284 @@\n+# ComfoAir Binding\n+\n+This binding allows to monitor and control Zehnder ComfoAir serial controlled ventilation systems.\n+\n+## Supported Things\n+\n+The binding supports ComfoAir ventilation systems supporting control via RS232 serial connection.\n+Though the binding is developed based on the protocol description for Zehnder ComfoAir devices it should also work for mostly identical systems from different manufacturers, like StorkAir WHR930, Wernig G90-380 and Paul Santos 370 DC.\n+It was also successfully tested on a Wernig G90-160.\n+\n+### Prerequisites\n+\n+Computer communication between ComfoAir device and openHAB via RS232 connection has to be set up.\n+The connection should be made with a 3-wire cable connecting pins: GND, TX, RX of RS232 sockets, but RX and TX pins should be crossed (TX of ComfoAir to RX of PC, RX of ComfoAir to TX of PC).\n+\n+### Serial Port Access Rights\n+\n+* Take care that the user that runs openHAB has rights to access the serial port\n+* On Ubuntu/Debian based systems (incl. openHABian) that usually means adding the user (e.g. openhab) to the group \"dialout\", i.e.\n+\n+```\n+sudo usermod -a -G dialout openhab\n+```\n+\n+### Limitations\n+\n+* Either the ComfoAir binding or the CCEase Comfocontrol can be active, but not together.\n+* You must implement auto mode by yourself with rules, but it is more powerful.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+\n+## Thing Configuration\n+\n+For the thing creation, the appropriate serial port has to be set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1MTQ3MA==", "bodyText": "Is there a reason why you don't use camel case here?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r464951470", "createdAt": "2020-08-04T10:22:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirCommandType.java", "diffHunk": "@@ -0,0 +1,912 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeBoolean;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeMessage;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeNumber;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeRPM;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTemperature;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeTime;\n+import org.openhab.binding.comfoair.internal.datatypes.DataTypeVolt;\n+\n+/**\n+ * Represents all valid commands which could be processed by this binding\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public enum ComfoAirCommandType {\n+    /**\n+     * Below all valid commands to change or read parameters from ComfoAir\n+     *\n+     * @param key\n+     *            command name\n+     * @param data_type\n+     *            data type (can be: DataTypeBoolean.getInstance(), DataTypeMessage.getInstance(),\n+     *            DataTypeNumber.getInstance(), DataTypeRPM.getInstance(), DataTypeTemperature.getInstance(),\n+     *            DataTypeTime.getInstance(), DataTypeVolt.getInstance())\n+     * @param possible_values\n+     *            possible values for write command, if it can only take certain values\n+     * @param change_command\n+     *            byte number for ComfoAir write command\n+     * @param change_data_size\n+     *            size of bytes list for ComfoAir write command\n+     * @param change_data_pos\n+     *            position in bytes list to change\n+     * @param change_affected\n+     *            list of affected commands (can be empty)\n+     *            is mandatory for read-write command\n+     * @param read_command\n+     *            request byte number for ComfoAir read command\n+     * @param read_reply_command\n+     *            reply byte list size for ComfoAir read command (list of values only)\n+     * @param read_reply_data_pos\n+     *            list of byte positions in reply bytes list from ComfoAir\n+     * @param read_reply_data_bits\n+     *            byte value on read_reply_data_pos position to be considered by command (used with\n+     *            DataTypeBoolean.class data_type)\n+     */\n+    ACTIVATE(ComfoAirBindingConstants.CG_CONTROL_PREFIX + ComfoAirBindingConstants.CHANNEL_ACTIVATE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x03 }, Constants.REQUEST_SET_RS232, 1, 0,\n+            Constants.EMPTY_TYPE_ARRAY, Constants.REPLY_SET_RS232, Constants.REPLY_SET_RS232, new int[] { 0 }, 0x03),\n+    MENU20_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU20_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x01),\n+    MENU21_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU21_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x02),\n+    MENU22_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU22_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x04),\n+    MENU23_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU23_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x08),\n+    MENU24_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU24_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x10),\n+    MENU25_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU25_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x20),\n+    MENU26_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU26_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x40),\n+    MENU27_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU27_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 6 },\n+            0x80),\n+    MENU28_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU28_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x01),\n+    MENU29_MODE(ComfoAirBindingConstants.CG_MENUP1_PREFIX + ComfoAirBindingConstants.CHANNEL_MENU29_MODE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 7 },\n+            0x02),\n+    BATHROOM_START_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_START_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 0, new ComfoAirCommandType[] { MENU21_MODE },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 0 }),\n+    BATHROOM_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_BR_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 1, new ComfoAirCommandType[] { MENU22_MODE },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 1 }),\n+    L1_END_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_L1_END_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 2, new ComfoAirCommandType[] { MENU27_MODE },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 2 }),\n+    PULSE_VENTILATION(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_PULSE_VENTILATION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 3, new ComfoAirCommandType[] { MENU23_MODE },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 3 }),\n+    FILTER_WEEKS(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_WEEKS,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 4, new ComfoAirCommandType[] { MENU24_MODE },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 4 }),\n+    RF_SHORT_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_SHORT_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 5, new ComfoAirCommandType[] { MENU25_MODE },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 5 }),\n+    RF_LONG_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_LONG_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 6, new ComfoAirCommandType[] { MENU26_MODE },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 6 }),\n+    COOKERHOOD_DELAY(ComfoAirBindingConstants.CG_MENUP2_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_DELAY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_DELAYS, 8, 7, new ComfoAirCommandType[] { MENU20_MODE },\n+            Constants.REQUEST_GET_DELAYS, Constants.REPLY_GET_DELAYS, new int[] { 7 }),\n+    CHIMNEY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x01),\n+    BYPASS_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x02),\n+    EWT_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x04),\n+    HEATER_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x08),\n+    V_CONTROL_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_VCONTROL_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x10),\n+    FROST_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x20),\n+    COOKERHOOD_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x40),\n+    ENTHALPY_STATE(ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 8 },\n+            0x80),\n+    FAN_IN_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 0 }),\n+    FAN_OUT_PERCENT(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_PERCENT,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 1 }),\n+    FAN_IN_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 2, 3 }),\n+    FAN_OUT_RPM(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_RPM,\n+            DataTypeRPM.getInstance(), Constants.REQUEST_GET_FAN, Constants.REPLY_GET_FAN, new int[] { 4, 5 }),\n+    FAN_OUT_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 0,\n+            new ComfoAirCommandType[] { FAN_OUT_PERCENT, FAN_OUT_RPM }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 0 }),\n+    FAN_OUT_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 1,\n+            new ComfoAirCommandType[] { FAN_OUT_PERCENT, FAN_OUT_RPM }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 1 }),\n+    FAN_OUT_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 2,\n+            new ComfoAirCommandType[] { FAN_OUT_PERCENT, FAN_OUT_RPM }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 2 }),\n+    FAN_OUT_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_OUT_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 6,\n+            new ComfoAirCommandType[] { FAN_OUT_PERCENT, FAN_OUT_RPM }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 10 }),\n+    FAN_IN_0(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_0,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 3,\n+            new ComfoAirCommandType[] { FAN_IN_PERCENT, FAN_IN_RPM }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 3 }),\n+    FAN_IN_1(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_1,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 4,\n+            new ComfoAirCommandType[] { FAN_IN_PERCENT, FAN_IN_RPM }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 4 }),\n+    FAN_IN_2(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_2,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 5,\n+            new ComfoAirCommandType[] { FAN_IN_PERCENT, FAN_IN_RPM }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 5 }),\n+    FAN_IN_3(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_IN_3,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_FAN_LEVEL, 9, 7,\n+            new ComfoAirCommandType[] { FAN_IN_PERCENT, FAN_IN_RPM }, Constants.REQUEST_GET_FAN_LEVEL,\n+            Constants.REPLY_GET_FAN_LEVEL, new int[] { 11 }),\n+    FAN_LEVEL(ComfoAirBindingConstants.CG_VENTILATION_PREFIX + ComfoAirBindingConstants.CHANNEL_FAN_LEVEL,\n+            DataTypeNumber.getInstance(), new int[] { 0x01, 0x02, 0x03, 0x04 }, Constants.REQUEST_SET_LEVEL, 1, 0,\n+            new ComfoAirCommandType[] { FAN_IN_PERCENT, FAN_IN_RPM, FAN_OUT_PERCENT, FAN_OUT_RPM },\n+            Constants.REQUEST_GET_FAN_LEVEL, Constants.REPLY_GET_FAN_LEVEL, new int[] { 8 }),\n+    LEVEL0_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL0,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 0, 1, 2 }),\n+    LEVEL1_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL1,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 3, 4, 5 }),\n+    LEVEL2_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL2,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 6, 7, 8 }),\n+    LEVEL3_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_LEVEL3,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS,\n+            new int[] { 17, 18, 19 }),\n+    FREEZE_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FREEZE,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 9, 10 }),\n+    PREHEATER_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_PREHEATER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 11, 12 }),\n+    BYPASS_TIME(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_BYPASS,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 13, 14 }),\n+    BYPASS_FACTOR(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_FACTOR,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 2 }),\n+    BYPASS_LEVEL(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 3 }),\n+    BYPASS_CORRECTION(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_CORRECTION,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 4 }),\n+    BYPASS_SUMMER(ComfoAirBindingConstants.CG_BYPASS_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_SUMMER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_BYPASS, Constants.REPLY_GET_BYPASS, new int[] { 6 }),\n+    ENTHALPY_TEMPERATURE(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TEMP,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS,\n+            new int[] { 0 }),\n+    ENTHALPY_HUMIDITY(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_HUMIDITY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 1 }),\n+    ENTHALPY_LEVEL(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_LEVEL,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 4 }),\n+    ENTHALPY_TIME(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX + ComfoAirBindingConstants.CHANNEL_ENTHALPY_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_SENSORS, Constants.REPLY_GET_SENSORS, new int[] { 5 }),\n+    PREHEATER_VALVE(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_VALVE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 0 }),\n+    PREHEATER_FROST_PROTECT(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_PROTECT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 1 }),\n+    PREHEATER_HEATING(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_HEATING,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 2 }),\n+    PREHEATER_FROST_TIME(\n+            ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_FROST_TIME,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 3, 4 }),\n+    PREHEATER_OPTION(ComfoAirBindingConstants.CG_PREHEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_PREHEATER_SAFETY,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_PREHEATER, Constants.REPLY_GET_PREHEATER,\n+            new int[] { 5 }),\n+    TARGET_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_TEMPS, 1, 0,\n+            new ComfoAirCommandType[] { BYPASS_FACTOR, BYPASS_LEVEL, BYPASS_SUMMER }, Constants.REQUEST_GET_TEMPS,\n+            Constants.REPLY_GET_TEMPS, new int[] { 0 }),\n+    OUTDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 1 }),\n+    OUTDOOR_TEMPERATURE_OUT(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_OUTDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 4 }),\n+    INDOOR_TEMPERATURE_IN(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_IN,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 2 }),\n+    INDOOR_TEMPERATURE_OUT(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_INDOOR_OUT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 3 }),\n+    IS_T1_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T1,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x01),\n+    IS_T2_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T2,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x02),\n+    IS_T3_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T3,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x04),\n+    IS_T4_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_T4,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x08),\n+    IS_EWT_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_EWT,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x10),\n+    IS_HEATER_SENSOR(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_HEATER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x20),\n+    IS_COOKERHOOD_SENSOR(\n+            ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_SENSOR_COOKERHOOD,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 5 },\n+            0x40),\n+    EWT_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_EWT,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 6 }),\n+    HEATER_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_HEATER,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 7 }),\n+    COOKERHOOD_TEMPERATURE(ComfoAirBindingConstants.CG_TEMPS_PREFIX + ComfoAirBindingConstants.CHANNEL_TEMP_COOKERHOOD,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_GET_TEMPS, Constants.REPLY_GET_TEMPS, new int[] { 8 }),\n+    EWT_SPEED(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 2,\n+            new ComfoAirCommandType[] { EWT_STATE, EWT_TEMPERATURE }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 2 }),\n+    EWT_TEMPERATURE_LOW(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_LOW,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 0, new ComfoAirCommandType[] { EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 0 }),\n+    EWT_TEMPERATURE_HIGH(ComfoAirBindingConstants.CG_EWT_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_TEMP_HIGH,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 1, new ComfoAirCommandType[] { EWT_STATE },\n+            Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 1 }),\n+    COOKERHOOD_SPEED(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_SPEED,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_EWT, 5, 3,\n+            new ComfoAirCommandType[] { COOKERHOOD_STATE, COOKERHOOD_TEMPERATURE }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 3 }),\n+    HEATER_POWER(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 4 }),\n+    HEATER_POWER_I(ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_POWER_I,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_GET_EWT, Constants.REPLY_GET_EWT, new int[] { 5 }),\n+    HEATER_TARGET_TEMPERATURE(\n+            ComfoAirBindingConstants.CG_HEATER_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_TEMP_TARGET,\n+            DataTypeTemperature.getInstance(), Constants.REQUEST_SET_EWT, 5, 4,\n+            new ComfoAirCommandType[] { HEATER_STATE, HEATER_POWER, HEATER_TEMPERATURE }, Constants.REQUEST_GET_EWT,\n+            Constants.REPLY_GET_EWT, new int[] { 6 }),\n+    IS_PREHEATER(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 0,\n+            new ComfoAirCommandType[] { OUTDOOR_TEMPERATURE_IN, INDOOR_TEMPERATURE_IN, PREHEATER_FROST_PROTECT,\n+                    PREHEATER_FROST_TIME, PREHEATER_HEATING, FROST_STATE, PREHEATER_OPTION, PREHEATER_TIME,\n+                    PREHEATER_VALVE },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 0 }),\n+    IS_BYPASS(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS, DataTypeBoolean.getInstance(),\n+            Constants.REQUEST_SET_STATES, 8, 1,\n+            new ComfoAirCommandType[] { INDOOR_TEMPERATURE_IN, OUTDOOR_TEMPERATURE_OUT }, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 1 }),\n+    RECU_TYPE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_TYPE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 2,\n+            new ComfoAirCommandType[] { FAN_IN_PERCENT, FAN_OUT_PERCENT, INDOOR_TEMPERATURE_IN, INDOOR_TEMPERATURE_OUT,\n+                    OUTDOOR_TEMPERATURE_IN, OUTDOOR_TEMPERATURE_OUT },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 2 }),\n+    RECU_SIZE(ComfoAirBindingConstants.PROPERTY_OPTION_RECU_SIZE, DataTypeNumber.getInstance(),\n+            new int[] { 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 3,\n+            new ComfoAirCommandType[] { FAN_IN_PERCENT, FAN_OUT_PERCENT, FAN_IN_0, FAN_IN_1, FAN_IN_2, FAN_IN_3,\n+                    FAN_OUT_0, FAN_OUT_1, FAN_OUT_2, FAN_OUT_3 },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 3 }),\n+    IS_CHIMNEY(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY, DataTypeBoolean.getInstance(), new int[] { 0x01 },\n+            Constants.REQUEST_SET_STATES, 8, 4, Constants.EMPTY_TYPE_ARRAY, Constants.REQUEST_GET_STATES,\n+            Constants.REPLY_GET_STATES, new int[] { 4 }, 0x01),\n+    IS_COOKERHOOD(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD, DataTypeBoolean.getInstance(),\n+            new int[] { 0x02 }, Constants.REQUEST_SET_STATES, 8, 4,\n+            new ComfoAirCommandType[] { COOKERHOOD_DELAY, COOKERHOOD_STATE, COOKERHOOD_SPEED, COOKERHOOD_TEMPERATURE },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x02),\n+    IS_HEATER(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER, DataTypeBoolean.getInstance(), new int[] { 0x04 },\n+            Constants.REQUEST_SET_STATES, 8, 4,\n+            new ComfoAirCommandType[] { HEATER_TARGET_TEMPERATURE, HEATER_POWER, HEATER_STATE, HEATER_POWER_I,\n+                    HEATER_TEMPERATURE },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 4 }, 0x04),\n+    IS_ENTHALPY(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY, DataTypeNumber.getInstance(),\n+            new int[] { 0x00, 0x01, 0x02 }, Constants.REQUEST_SET_STATES, 8, 6,\n+            new ComfoAirCommandType[] { ENTHALPY_TEMPERATURE, ENTHALPY_HUMIDITY, ENTHALPY_LEVEL, ENTHALPY_STATE,\n+                    ENTHALPY_TIME },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 9 }),\n+    IS_EWT(ComfoAirBindingConstants.PROPERTY_OPTION_EWT, DataTypeNumber.getInstance(), new int[] { 0x00, 0x01, 0x02 },\n+            Constants.REQUEST_SET_STATES, 8, 7,\n+            new ComfoAirCommandType[] { EWT_SPEED, EWT_TEMPERATURE_LOW, EWT_TEMPERATURE_HIGH, EWT_STATE,\n+                    EWT_TEMPERATURE },\n+            Constants.REQUEST_GET_STATES, Constants.REPLY_GET_STATES, new int[] { 10 }),\n+    SOFTWARE_MAIN_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MAIN_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 0 }),\n+    SOFTWARE_MINOR_VERSION(ComfoAirBindingConstants.PROPERTY_SOFTWARE_MINOR_VERSION, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE, new int[] { 1 }),\n+    DEVICE_NAME(ComfoAirBindingConstants.PROPERTY_DEVICE_NAME, DataTypeNumber.getInstance(),\n+            Constants.REQUEST_GET_FIRMWARE, Constants.REPLY_GET_FIRMWARE,\n+            new int[] { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }),\n+    ERRORS_CURRENT(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERRORS_CURRENT,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 0, 1, 9, 13 }),\n+    ERRORS_LAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERRORS_LAST,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 2, 3, 10, 14 }),\n+    ERRORS_PRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERRORS_PRELAST,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 4, 5, 11, 15 }),\n+    ERRORS_PREPRELAST(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERRORS_PREPRELAST,\n+            DataTypeMessage.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS,\n+            new int[] { 6, 7, 12, 16 }),\n+    ERROR_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_ERROR_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 0,\n+            new ComfoAirCommandType[] { ERRORS_CURRENT, ERRORS_LAST, ERRORS_PRELAST, ERRORS_PREPRELAST }),\n+    FILTER_ERROR(ComfoAirBindingConstants.CG_ERRORS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_ERROR,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_ERRORS, Constants.REPLY_GET_ERRORS, new int[] { 8 },\n+            0x01),\n+    FILTER_HOURS(ComfoAirBindingConstants.CG_TIMES_PREFIX + ComfoAirBindingConstants.CHANNEL_TIME_FILTER,\n+            DataTypeTime.getInstance(), Constants.REQUEST_GET_HOURS, Constants.REPLY_GET_HOURS, new int[] { 15, 16 }),\n+    FILTER_RESET(ComfoAirBindingConstants.CG_RESETS_PREFIX + ComfoAirBindingConstants.CHANNEL_FILTER_RESET,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_RESETS, 4, 3,\n+            new ComfoAirCommandType[] { FILTER_HOURS, FILTER_ERROR }),\n+    ANALOG1_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_TYPE_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x01),\n+    ANALOG2_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_TYPE_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x02),\n+    ANALOG3_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_TYPE_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x04),\n+    ANALOG4_NEGATIVE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_TYPE_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x08),\n+    RF_NEGATIVE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_NEGATIVE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 2,\n+            Constants.EMPTY_TYPE_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 2 },\n+            0x10),\n+    ANALOG1_MIN(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 3, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 3 }),\n+    ANALOG1_MAX(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 4, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 4 }),\n+    ANALOG1_VALUE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 5, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 5 }),\n+    ANALOG2_MIN(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 6, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 6 }),\n+    ANALOG2_MAX(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 7, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 7 }),\n+    ANALOG2_VALUE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 8, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 8 }),\n+    ANALOG3_MIN(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 9, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 9 }),\n+    ANALOG3_MAX(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 10, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 10 }),\n+    ANALOG3_VALUE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 11, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 11 }),\n+    ANALOG4_MIN(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 12, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 12 }),\n+    ANALOG4_MAX(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 13, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 13 }),\n+    ANALOG4_VALUE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 14, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 14 }),\n+    RF_MIN(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MIN,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 15, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 15 }),\n+    RF_MAX(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MAX,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 16, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 16 }),\n+    RF_VALUE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_VALUE,\n+            DataTypeNumber.getInstance(), Constants.REQUEST_SET_ANALOGS, 19, 17, Constants.EMPTY_TYPE_ARRAY,\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 17 }),\n+    ANALOG_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_PRIORITY,\n+            DataTypeNumber.getInstance(), new int[] { 0x00, 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 18,\n+            Constants.EMPTY_TYPE_ARRAY, Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 18 }),\n+    ANALOG1_VOLT(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 0 }),\n+    ANALOG2_VOLT(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 1 }),\n+    ANALOG3_VOLT(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 2 }),\n+    ANALOG4_VOLT(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_VOLT,\n+            DataTypeVolt.getInstance(), Constants.REQUEST_GET_ANALOG_VOLTS, Constants.REPLY_GET_ANALOG_VOLTS,\n+            new int[] { 3 }),\n+    ANALOG1_MODE(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new ComfoAirCommandType[] { ANALOG1_NEGATIVE, ANALOG1_MIN, ANALOG1_MAX, ANALOG1_VALUE, ANALOG1_VOLT },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x01),\n+    ANALOG2_MODE(ComfoAirBindingConstants.CG_ANALOG2_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new ComfoAirCommandType[] { ANALOG2_NEGATIVE, ANALOG2_MIN, ANALOG2_MAX, ANALOG2_VALUE, ANALOG2_VOLT },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x02),\n+    ANALOG3_MODE(ComfoAirBindingConstants.CG_ANALOG3_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new ComfoAirCommandType[] { ANALOG3_NEGATIVE, ANALOG3_MIN, ANALOG3_MAX, ANALOG3_VALUE, ANALOG3_VOLT },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x04),\n+    ANALOG4_MODE(ComfoAirBindingConstants.CG_ANALOG4_PREFIX + ComfoAirBindingConstants.CHANNEL_ANALOG_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new ComfoAirCommandType[] { ANALOG4_NEGATIVE, ANALOG4_MIN, ANALOG4_MAX, ANALOG4_VALUE, ANALOG4_VOLT },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x08),\n+    RF_MODE(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_RF_MODE,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 1,\n+            new ComfoAirCommandType[] { RF_NEGATIVE, RF_MIN, RF_MAX, RF_VALUE }, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 1 }, 0x10),\n+    IS_L1_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L1_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x01),\n+    IS_L2_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_L2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 0 },\n+            0x02),\n+    IS_BATHROOM_SWITCH(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x01),\n+    IS_COOKERHOOD_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_COOKERHOOD_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x02),\n+    IS_EXTERNAL_FILTER(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_EXTERNAL_FILTER,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x04),\n+    IS_WTW(ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_WTW,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x08),\n+    IS_BATHROOM2_SWITCH(\n+            ComfoAirBindingConstants.CG_INPUTS_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_BATHROOM2_SWITCH,\n+            DataTypeBoolean.getInstance(), Constants.REQUEST_GET_INPUTS, Constants.REPLY_GET_INPUTS, new int[] { 1 },\n+            0x10),\n+    IS_ANALOG1(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x01 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new ComfoAirCommandType[] { ANALOG1_MODE, ANALOG1_NEGATIVE, ANALOG1_MIN, ANALOG1_MAX, ANALOG1_VALUE,\n+                    ANALOG1_VOLT },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x01),\n+    IS_ANALOG2(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x02 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new ComfoAirCommandType[] { ANALOG2_MODE, ANALOG2_NEGATIVE, ANALOG2_MIN, ANALOG2_MAX, ANALOG2_VALUE,\n+                    ANALOG2_VOLT },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x02),\n+    IS_ANALOG3(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x04 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new ComfoAirCommandType[] { ANALOG3_MODE, ANALOG3_NEGATIVE, ANALOG3_MIN, ANALOG3_MAX, ANALOG3_VALUE,\n+                    ANALOG3_VOLT },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x04),\n+    IS_ANALOG4(ComfoAirBindingConstants.CG_ANALOG1_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_ANALOG,\n+            DataTypeBoolean.getInstance(), new int[] { 0x08 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new ComfoAirCommandType[] { ANALOG4_MODE, ANALOG4_NEGATIVE, ANALOG4_MIN, ANALOG4_MAX, ANALOG4_VALUE,\n+                    ANALOG4_VOLT },\n+            Constants.REQUEST_GET_ANALOGS, Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x08),\n+    IS_RF(ComfoAirBindingConstants.CG_ANALOGRF_PREFIX + ComfoAirBindingConstants.CHANNEL_IS_RF,\n+            DataTypeBoolean.getInstance(), new int[] { 0x10 }, Constants.REQUEST_SET_ANALOGS, 19, 0,\n+            new ComfoAirCommandType[] { RF_MODE, RF_NEGATIVE, RF_MIN, RF_MAX, RF_VALUE }, Constants.REQUEST_GET_ANALOGS,\n+            Constants.REPLY_GET_ANALOGS, new int[] { 0 }, 0x10);\n+\n+    private final String key;\n+    private final ComfoAirDataType data_type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 535}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1MjE5Mw==", "bodyText": "It's good practice to append the unit to the field name e.g. DEFAULT_REFRESH_INTERVAL_SEC.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r464952193", "createdAt": "2020-08-04T10:24:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,434 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1MjY0MA==", "bodyText": "Since we want to get rid of Apache Commons, can you replace this with native Java code? See #7722.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r464952640", "createdAt": "2020-08-04T10:25:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,434 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable ScheduledFuture<?> poller;\n+    private @Nullable ScheduledFuture<?> affectedItemsPoller;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, command);\n+\n+            if (changeCommand != null) {\n+                Set<String> keysToUpdate = getThing().getChannels().stream().map(Channel::getUID).filter(this::isLinked)\n+                        .map(ChannelUID::getId).collect(Collectors.toSet());\n+                sendCommand(changeCommand, channelId);\n+\n+                Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                        .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                if (affectedReadCommands.size() > 0) {\n+                    Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                    affectedItemsPoller = scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                }\n+            } else {\n+                logger.warn(\"Unhandled command type: {}, channelId: {}\", command.toString(), channelId);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+        String serialPort = config.serialPort;\n+\n+        if (StringUtils.isEmpty(serialPort)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1MzM5MA==", "bodyText": "No harm in canceling a task that is already cancelled. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r464953390", "createdAt": "2020-08-04T10:26:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,434 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable ScheduledFuture<?> poller;\n+    private @Nullable ScheduledFuture<?> affectedItemsPoller;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, command);\n+\n+            if (changeCommand != null) {\n+                Set<String> keysToUpdate = getThing().getChannels().stream().map(Channel::getUID).filter(this::isLinked)\n+                        .map(ChannelUID::getId).collect(Collectors.toSet());\n+                sendCommand(changeCommand, channelId);\n+\n+                Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                        .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                if (affectedReadCommands.size() > 0) {\n+                    Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                    affectedItemsPoller = scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                }\n+            } else {\n+                logger.warn(\"Unhandled command type: {}, channelId: {}\", command.toString(), channelId);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+        String serialPort = config.serialPort;\n+\n+        if (StringUtils.isEmpty(serialPort)) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        } else {\n+            ComfoAirSerialConnector comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort,\n+                    BAUDRATE);\n+            this.comfoAirConnector = comfoAirConnector;\n+        }\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.open();\n+            if (comfoAirConnector != null && comfoAirConnector.isConnected()) {\n+                updateStatus(ThingStatus.ONLINE);\n+                pullDeviceProperties();\n+                Map<String, String> properties = thing.getProperties();\n+\n+                List<Channel> toBeRemovedChannels = new ArrayList<>();\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_PREHEATER_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_BYPASS_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(ComfoAirBindingConstants.CG_MENUP9_PREFIX\n+                            + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_HEATER_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(ComfoAirBindingConstants.CG_MENUP9_PREFIX\n+                            + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_EWT)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(\n+                            getThing().getChannelsOfGroup(ComfoAirBindingConstants.CG_EWT_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                ThingBuilder builder = editThing().withoutChannels(toBeRemovedChannels);\n+                updateThing(builder.build());\n+\n+                List<Channel> channels = this.thing.getChannels();\n+\n+                poller = scheduler.scheduleWithFixedDelay(() -> {\n+                    for (Channel channel : channels) {\n+                        updateChannelState(channel);\n+                    }\n+                }, 0, (config.refreshInterval > 0) ? config.refreshInterval : DEFAULT_REFRESH_INTERVAL,\n+                        TimeUnit.SECONDS);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.close();\n+        }\n+\n+        final ScheduledFuture<?> localPoller = poller;\n+\n+        if (localPoller != null && !localPoller.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1NTQzMA==", "bodyText": "What do you expect to throw an IllegalArgumentException?", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r464955430", "createdAt": "2020-08-04T10:31:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,434 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable ScheduledFuture<?> poller;\n+    private @Nullable ScheduledFuture<?> affectedItemsPoller;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, command);\n+\n+            if (changeCommand != null) {\n+                Set<String> keysToUpdate = getThing().getChannels().stream().map(Channel::getUID).filter(this::isLinked)\n+                        .map(ChannelUID::getId).collect(Collectors.toSet());\n+                sendCommand(changeCommand, channelId);\n+\n+                Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                        .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                if (affectedReadCommands.size() > 0) {\n+                    Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                    affectedItemsPoller = scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                }\n+            } else {\n+                logger.warn(\"Unhandled command type: {}, channelId: {}\", command.toString(), channelId);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+        String serialPort = config.serialPort;\n+\n+        if (StringUtils.isEmpty(serialPort)) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        } else {\n+            ComfoAirSerialConnector comfoAirConnector = new ComfoAirSerialConnector(serialPortManager, serialPort,\n+                    BAUDRATE);\n+            this.comfoAirConnector = comfoAirConnector;\n+        }\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.open();\n+            if (comfoAirConnector != null && comfoAirConnector.isConnected()) {\n+                updateStatus(ThingStatus.ONLINE);\n+                pullDeviceProperties();\n+                Map<String, String> properties = thing.getProperties();\n+\n+                List<Channel> toBeRemovedChannels = new ArrayList<>();\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_PREHEATER)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_PREHEATER_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_FROST_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_BYPASS)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_BYPASS_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_BYPASS_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_CHIMNEY)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_CHIMNEY_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_COOKERHOOD)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_COOKERHOOD_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(ComfoAirBindingConstants.CG_MENUP9_PREFIX\n+                            + ComfoAirBindingConstants.CHANNEL_COOKERHOOD_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_HEATER)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_HEATER_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_HEATER_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_ENTHALPY)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(getThing()\n+                            .getChannelsOfGroup(ComfoAirBindingConstants.CG_ENTHALPY_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(ComfoAirBindingConstants.CG_MENUP9_PREFIX\n+                            + ComfoAirBindingConstants.CHANNEL_ENTHALPY_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                if (properties.get(ComfoAirBindingConstants.PROPERTY_OPTION_EWT)\n+                        .equals(ComfoAirBindingConstants.COMMON_OPTION_STATES[0])) {\n+                    toBeRemovedChannels.addAll(\n+                            getThing().getChannelsOfGroup(ComfoAirBindingConstants.CG_EWT_PREFIX.replaceAll(\"#$\", \"\")));\n+                    Channel stateChannel = getThing().getChannel(\n+                            ComfoAirBindingConstants.CG_MENUP9_PREFIX + ComfoAirBindingConstants.CHANNEL_EWT_STATE);\n+                    if (stateChannel != null) {\n+                        toBeRemovedChannels.add(stateChannel);\n+                    }\n+                }\n+                ThingBuilder builder = editThing().withoutChannels(toBeRemovedChannels);\n+                updateThing(builder.build());\n+\n+                List<Channel> channels = this.thing.getChannels();\n+\n+                poller = scheduler.scheduleWithFixedDelay(() -> {\n+                    for (Channel channel : channels) {\n+                        updateChannelState(channel);\n+                    }\n+                }, 0, (config.refreshInterval > 0) ? config.refreshInterval : DEFAULT_REFRESH_INTERVAL,\n+                        TimeUnit.SECONDS);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (comfoAirConnector != null) {\n+            comfoAirConnector.close();\n+        }\n+\n+        final ScheduledFuture<?> localPoller = poller;\n+\n+        if (localPoller != null && !localPoller.isCancelled()) {\n+            localPoller.cancel(true);\n+            poller = null;\n+        }\n+\n+        final ScheduledFuture<?> localAffectedItemsPoller = affectedItemsPoller;\n+\n+        if (localAffectedItemsPoller != null && !localAffectedItemsPoller.isCancelled()) {\n+            localAffectedItemsPoller.cancel(true);\n+            affectedItemsPoller = null;\n+        }\n+    }\n+\n+    private void updateChannelState(Channel channel) {\n+        try {\n+            if (!isLinked(channel.getUID())) {\n+                return;\n+            }\n+            String commandKey = channel.getUID().getId();\n+\n+            ComfoAirCommand readCommand = ComfoAirCommandType.getReadCommand(commandKey);\n+            if (readCommand != null) {\n+                scheduler.submit(() -> {\n+                    State state = sendCommand(readCommand, commandKey);\n+                    updateState(channel.getUID(), state);\n+                });\n+            }\n+        } catch (IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0NDA2Mg==", "bodyText": "Apache Commons", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r465144062", "createdAt": "2020-08-04T15:38:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,592 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InterruptedIOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte CTRL = (byte) 0x07;\n+    private static byte[] START = { CTRL, (byte) 0xf0 };\n+    private static byte[] END = { CTRL, (byte) 0x0f };\n+    private static byte[] ACK = { CTRL, (byte) 0xf3 };\n+\n+    private static int RS232_ENABLED_VALUE = 0x03;\n+    private static int RS232_DISABLED_VALUE = 0x00;\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0OTgyMg==", "bodyText": "If I see correctly, this can be called from within ThingHandler.initialize(). The initialize method should return fast. Better call open() by using scheduler.submit().", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r465149822", "createdAt": "2020-08-04T15:46:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,592 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InterruptedIOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte CTRL = (byte) 0x07;\n+    private static byte[] START = { CTRL, (byte) 0xf0 };\n+    private static byte[] END = { CTRL, (byte) 0x0f };\n+    private static byte[] ACK = { CTRL, (byte) 0xf3 };\n+\n+    private static int RS232_ENABLED_VALUE = 0x03;\n+    private static int RS232_DISABLED_VALUE = 0x00;\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == ComfoAirCommandType.Constants.REQUEST_SET_RS232) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == ComfoAirCommandType.Constants.REPLY_SET_RS232) {\n+                return new int[] { isSuspended ? RS232_DISABLED_VALUE : RS232_ENABLED_VALUE };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                            throw new RuntimeException(e);\n+                        }\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == ACK[0] && responseBlock[1] == ACK[1]) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == START[0] && responseBlock[3] == START[1]\n+                                && responseBlock[responseBlock.length - 2] == END[0]\n+                                && responseBlock[responseBlock.length - 1] == END[1]\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = Arrays.copyOf(cleanedBlock, 3 + dataSize);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException ioe) {\n+                    if (ioe instanceof InterruptedIOException) {\n+                        Thread.currentThread().interrupt();\n+                        logger.warn(\"Transmission was interrupted: {}\", ioe.getMessage());\n+                        throw new RuntimeException(ioe);\n+                    }\n+                    logger.debug(\"IO error: {}\", ioe.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NDQ4Nw==", "bodyText": "There's a helper function in the OH core. Next time... https://www.openhab.org/javadoc/v2.5/org/eclipse/smarthome/core/util/hexutils", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r465154487", "createdAt": "2020-08-04T15:53:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,592 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InterruptedIOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte CTRL = (byte) 0x07;\n+    private static byte[] START = { CTRL, (byte) 0xf0 };\n+    private static byte[] END = { CTRL, (byte) 0x0f };\n+    private static byte[] ACK = { CTRL, (byte) 0xf3 };\n+\n+    private static int RS232_ENABLED_VALUE = 0x03;\n+    private static int RS232_DISABLED_VALUE = 0x00;\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == ComfoAirCommandType.Constants.REQUEST_SET_RS232) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == ComfoAirCommandType.Constants.REPLY_SET_RS232) {\n+                return new int[] { isSuspended ? RS232_DISABLED_VALUE : RS232_ENABLED_VALUE };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                            throw new RuntimeException(e);\n+                        }\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == ACK[0] && responseBlock[1] == ACK[1]) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == START[0] && responseBlock[3] == START[1]\n+                                && responseBlock[responseBlock.length - 2] == END[0]\n+                                && responseBlock[responseBlock.length - 1] == END[1]\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = Arrays.copyOf(cleanedBlock, 3 + dataSize);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException ioe) {\n+                    if (ioe instanceof InterruptedIOException) {\n+                        Thread.currentThread().interrupt();\n+                        logger.warn(\"Transmission was interrupted: {}\", ioe.getMessage());\n+                        throw new RuntimeException(ioe);\n+                    }\n+                    logger.debug(\"IO error: {}\", ioe.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    Thread.currentThread().interrupt();\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                    throw new RuntimeException(e);\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        return (byte) (datasum & 0xFF);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[processBuffer.length];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if (CTRL == processBuffer[i] && CTRL == processBuffer[i + 1]) {\n+                i++;\n+            }\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+        return Arrays.copyOf(cleanedBuffer, pos);\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+        int pos = 0;\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if (CTRL == cleanedBuffer[i]) {\n+                processBuffer[pos] = CTRL;\n+                pos++;\n+            }\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+        return Arrays.copyOf(processBuffer, pos);\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+        StringBuilder sb = new StringBuilder();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 449}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NTA1OA==", "bodyText": "Camel case", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r465155058", "createdAt": "2020-08-04T15:54:49Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,592 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InterruptedIOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte CTRL = (byte) 0x07;\n+    private static byte[] START = { CTRL, (byte) 0xf0 };\n+    private static byte[] END = { CTRL, (byte) 0x0f };\n+    private static byte[] ACK = { CTRL, (byte) 0xf3 };\n+\n+    private static int RS232_ENABLED_VALUE = 0x03;\n+    private static int RS232_DISABLED_VALUE = 0x00;\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == ComfoAirCommandType.Constants.REQUEST_SET_RS232) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == ComfoAirCommandType.Constants.REPLY_SET_RS232) {\n+                return new int[] { isSuspended ? RS232_DISABLED_VALUE : RS232_ENABLED_VALUE };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                            throw new RuntimeException(e);\n+                        }\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == ACK[0] && responseBlock[1] == ACK[1]) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == START[0] && responseBlock[3] == START[1]\n+                                && responseBlock[responseBlock.length - 2] == END[0]\n+                                && responseBlock[responseBlock.length - 1] == END[1]\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = Arrays.copyOf(cleanedBlock, 3 + dataSize);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException ioe) {\n+                    if (ioe instanceof InterruptedIOException) {\n+                        Thread.currentThread().interrupt();\n+                        logger.warn(\"Transmission was interrupted: {}\", ioe.getMessage());\n+                        throw new RuntimeException(ioe);\n+                    }\n+                    logger.debug(\"IO error: {}\", ioe.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    Thread.currentThread().interrupt();\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                    throw new RuntimeException(e);\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        return (byte) (datasum & 0xFF);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[processBuffer.length];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if (CTRL == processBuffer[i] && CTRL == processBuffer[i + 1]) {\n+                i++;\n+            }\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+        return Arrays.copyOf(cleanedBuffer, pos);\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+        int pos = 0;\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if (CTRL == cleanedBuffer[i]) {\n+                processBuffer[pos] = CTRL;\n+                pos++;\n+            }\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+        return Arrays.copyOf(processBuffer, pos);\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+        StringBuilder sb = new StringBuilder();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            switch (requestCmd) {\n+                case ComfoAirCommandType.Constants.REQUEST_SET_DELAYS:\n+                    newRequestData = new int[8];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, newRequestData.length);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_FAN_LEVEL:\n+                    newRequestData = new int[9];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, 6);\n+                        System.arraycopy(preRequestData, 10, newRequestData, 6, newRequestData.length - 6);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_STATES:\n+                    newRequestData = new int[8];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        if (dataPosition == 4) {\n+                            requestValue = preRequestData[dataPosition]\n+                                    + checkByteAndCalculateValue(command, requestValue, preRequestData[dataPosition]);\n+                        }\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, 6);\n+                        System.arraycopy(preRequestData, 9, newRequestData, 6, newRequestData.length - 6);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_EWT:\n+                    newRequestData = new int[5];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, 4);\n+                        System.arraycopy(preRequestData, 6, newRequestData, 4, newRequestData.length - 4);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_ANALOGS:\n+                    newRequestData = new int[19];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        switch (dataPosition) {\n+                            case 0:\n+                            case 1:\n+                            case 2:\n+                                requestValue = preRequestData[dataPosition] + checkByteAndCalculateValue(command,\n+                                        requestValue, preRequestData[dataPosition]);\n+                        }\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, newRequestData.length);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                default:\n+                    return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+            }\n+            return newRequestData;\n+        } else {\n+            return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+        }\n+    }\n+\n+    /**\n+     * Check if preValue contains possible byte and calculate new value\n+     *\n+     * @param command\n+     * @param requestValue\n+     * @param preValue\n+     * @return new int value\n+     */\n+    private int checkByteAndCalculateValue(ComfoAirCommand command, int requestValue, int preValue) {\n+        String key = command.getKeys().get(0);\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            int[] get_possible_values = commandType.getPossibleValues();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 551}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NTY0Ng==", "bodyText": "This bug has been fixed. So this can be removed.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r465155646", "createdAt": "2020-08-04T15:55:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,592 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InterruptedIOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte CTRL = (byte) 0x07;\n+    private static byte[] START = { CTRL, (byte) 0xf0 };\n+    private static byte[] END = { CTRL, (byte) 0x0f };\n+    private static byte[] ACK = { CTRL, (byte) 0xf3 };\n+\n+    private static int RS232_ENABLED_VALUE = 0x03;\n+    private static int RS232_DISABLED_VALUE = 0x00;\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == ComfoAirCommandType.Constants.REQUEST_SET_RS232) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == ComfoAirCommandType.Constants.REPLY_SET_RS232) {\n+                return new int[] { isSuspended ? RS232_DISABLED_VALUE : RS232_ENABLED_VALUE };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                            throw new RuntimeException(e);\n+                        }\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == ACK[0] && responseBlock[1] == ACK[1]) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == START[0] && responseBlock[3] == START[1]\n+                                && responseBlock[responseBlock.length - 2] == END[0]\n+                                && responseBlock[responseBlock.length - 1] == END[1]\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = Arrays.copyOf(cleanedBlock, 3 + dataSize);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException ioe) {\n+                    if (ioe instanceof InterruptedIOException) {\n+                        Thread.currentThread().interrupt();\n+                        logger.warn(\"Transmission was interrupted: {}\", ioe.getMessage());\n+                        throw new RuntimeException(ioe);\n+                    }\n+                    logger.debug(\"IO error: {}\", ioe.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    Thread.currentThread().interrupt();\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                    throw new RuntimeException(e);\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        return (byte) (datasum & 0xFF);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[processBuffer.length];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if (CTRL == processBuffer[i] && CTRL == processBuffer[i + 1]) {\n+                i++;\n+            }\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+        return Arrays.copyOf(cleanedBuffer, pos);\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+        int pos = 0;\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if (CTRL == cleanedBuffer[i]) {\n+                processBuffer[pos] = CTRL;\n+                pos++;\n+            }\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+        return Arrays.copyOf(processBuffer, pos);\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+        StringBuilder sb = new StringBuilder();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            switch (requestCmd) {\n+                case ComfoAirCommandType.Constants.REQUEST_SET_DELAYS:\n+                    newRequestData = new int[8];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, newRequestData.length);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_FAN_LEVEL:\n+                    newRequestData = new int[9];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, 6);\n+                        System.arraycopy(preRequestData, 10, newRequestData, 6, newRequestData.length - 6);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_STATES:\n+                    newRequestData = new int[8];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        if (dataPosition == 4) {\n+                            requestValue = preRequestData[dataPosition]\n+                                    + checkByteAndCalculateValue(command, requestValue, preRequestData[dataPosition]);\n+                        }\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, 6);\n+                        System.arraycopy(preRequestData, 9, newRequestData, 6, newRequestData.length - 6);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_EWT:\n+                    newRequestData = new int[5];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, 4);\n+                        System.arraycopy(preRequestData, 6, newRequestData, 4, newRequestData.length - 4);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_ANALOGS:\n+                    newRequestData = new int[19];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        switch (dataPosition) {\n+                            case 0:\n+                            case 1:\n+                            case 2:\n+                                requestValue = preRequestData[dataPosition] + checkByteAndCalculateValue(command,\n+                                        requestValue, preRequestData[dataPosition]);\n+                        }\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, newRequestData.length);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                default:\n+                    return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+            }\n+            return newRequestData;\n+        } else {\n+            return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+        }\n+    }\n+\n+    /**\n+     * Check if preValue contains possible byte and calculate new value\n+     *\n+     * @param command\n+     * @param requestValue\n+     * @param preValue\n+     * @return new int value\n+     */\n+    private int checkByteAndCalculateValue(ComfoAirCommand command, int requestValue, int preValue) {\n+        String key = command.getKeys().get(0);\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            int[] get_possible_values = commandType.getPossibleValues();\n+            if (get_possible_values != null) {\n+                int possibleValue = get_possible_values[0];\n+                boolean isActive = (preValue & possibleValue) == possibleValue;\n+                int newValue;\n+\n+                if (isActive) {\n+                    newValue = requestValue == 1 ? 0 : -possibleValue;\n+                } else {\n+                    newValue = requestValue == 1 ? possibleValue : 0;\n+                }\n+                return newValue;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @return true if connected or false if not\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set the connection state\n+     *\n+     * @param connected true if connected or false if not\n+     */\n+    public void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    @Override\n+    public void serialEvent(SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (InterruptedException e) {\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 591}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NTg0Ng==", "bodyText": "This bug has been fixed. So this can be removed.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r465155846", "createdAt": "2020-08-04T15:55:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,592 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InterruptedIOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector implements SerialPortEventListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte CTRL = (byte) 0x07;\n+    private static byte[] START = { CTRL, (byte) 0xf0 };\n+    private static byte[] END = { CTRL, (byte) 0x0f };\n+    private static byte[] ACK = { CTRL, (byte) 0xf3 };\n+\n+    private static int RS232_ENABLED_VALUE = 0x03;\n+    private static int RS232_DISABLED_VALUE = 0x00;\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.addEventListener(this);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (TooManyListenersException e) {\n+            logger.debug(\"open(): Too Many Listeners Exception: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Close serial port.\n+     */\n+    public void close() {\n+        logger.debug(\"close(): Close ComfoAir connection\");\n+        SerialPort serialPort = this.serialPort;\n+\n+        if (serialPort != null) {\n+            ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                    OnOffType.OFF);\n+\n+            if (command != null) {\n+                sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+            } else {\n+                logger.debug(\"Failure while creating COMMAND: {}\", command);\n+            }\n+\n+            IOUtils.closeQuietly(inputStream);\n+            IOUtils.closeQuietly(outputStream);\n+            serialPort.close();\n+        }\n+    }\n+\n+    /**\n+     * Prepare a command for sending using the serial port.\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return reply byte values\n+     */\n+    public synchronized int[] sendCommand(ComfoAirCommand command, int[] preRequestData) {\n+        Integer requestCmd = command.getRequestCmd();\n+        int retry = 0;\n+\n+        if (requestCmd != null) {\n+            // Switch support for app or ccease control\n+            if (requestCmd == ComfoAirCommandType.Constants.REQUEST_SET_RS232) {\n+                isSuspended = !isSuspended;\n+            } else if (requestCmd == ComfoAirCommandType.Constants.REPLY_SET_RS232) {\n+                return new int[] { isSuspended ? RS232_DISABLED_VALUE : RS232_ENABLED_VALUE };\n+            } else if (isSuspended) {\n+                logger.trace(\"Ignore cmd. Service is currently suspended\");\n+                return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+            }\n+\n+            do {\n+                // If preRequestData param was send (preRequestData is sending for write command)\n+                int[] requestData;\n+\n+                if (preRequestData.length <= 0) {\n+                    requestData = command.getRequestData();\n+                } else {\n+                    requestData = buildRequestData(command, preRequestData);\n+\n+                    if (requestData.length <= 0) {\n+                        logger.debug(\"Unable to build data for write command: {}\",\n+                                String.format(\"%02x\", command.getReplyCmd()));\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                }\n+\n+                byte[] requestBlock = calculateRequest(requestCmd, requestData);\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(\"send DATA: {}\", dumpData(requestBlock));\n+                }\n+\n+                if (!send(requestBlock)) {\n+                    return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                }\n+\n+                byte[] responseBlock = new byte[0];\n+\n+                try {\n+                    InputStream inputStream = this.inputStream;\n+                    // 31 is max. response length\n+                    byte[] readBuffer = new byte[31];\n+                    do {\n+                        while (inputStream != null && inputStream.available() > 0) {\n+                            int bytes = inputStream.read(readBuffer);\n+\n+                            // merge bytes\n+                            byte[] mergedBytes = new byte[responseBlock.length + bytes];\n+                            System.arraycopy(responseBlock, 0, mergedBytes, 0, responseBlock.length);\n+                            System.arraycopy(readBuffer, 0, mergedBytes, responseBlock.length, bytes);\n+\n+                            responseBlock = mergedBytes;\n+                        }\n+                        try {\n+                            // add wait states around reading the stream, so that\n+                            // interrupted transmissions are merged\n+                            Thread.sleep(100);\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                            logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                            throw new RuntimeException(e);\n+                        }\n+                    } while (inputStream != null && inputStream.available() > 0);\n+\n+                    // check for ACK\n+                    if (responseBlock.length >= 2 && responseBlock[0] == ACK[0] && responseBlock[1] == ACK[1]) {\n+                        if (command.getReplyCmd() == null) {\n+                            // confirm additional data with an ACK\n+                            if (responseBlock.length > 2) {\n+                                send(ACK);\n+                            }\n+                            return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                        }\n+\n+                        // check for start and end sequence and if the response cmd\n+                        // matches\n+                        // 11 is the minimum response length with one data byte\n+                        if (responseBlock.length >= 11 && responseBlock[2] == START[0] && responseBlock[3] == START[1]\n+                                && responseBlock[responseBlock.length - 2] == END[0]\n+                                && responseBlock[responseBlock.length - 1] == END[1]\n+                                && (responseBlock[5] & 0xff) == command.getReplyCmd()) {\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"receive RAW DATA: {}\", dumpData(responseBlock));\n+                            }\n+\n+                            byte[] cleanedBlock = cleanupBlock(responseBlock);\n+\n+                            int dataSize = cleanedBlock[2];\n+\n+                            // the cleanedBlock size should equal dataSize + 2 cmd\n+                            // bytes and + 1 checksum byte\n+                            if (dataSize + 3 == cleanedBlock.length - 1) {\n+\n+                                byte checksum = cleanedBlock[dataSize + 3];\n+                                int[] replyData = new int[dataSize];\n+                                for (int i = 0; i < dataSize; i++) {\n+                                    replyData[i] = cleanedBlock[i + 3] & 0xff;\n+                                }\n+\n+                                byte[] _block = Arrays.copyOf(cleanedBlock, 3 + dataSize);\n+\n+                                // validate calculated checksum against submitted\n+                                // checksum\n+                                if (calculateChecksum(_block) == checksum) {\n+                                    if (logger.isTraceEnabled()) {\n+                                        logger.trace(\"receive CMD: {} DATA: {}\",\n+                                                String.format(\"%02x\", command.getReplyCmd()), dumpData(replyData));\n+                                    }\n+                                    send(ACK);\n+\n+                                    return replyData;\n+                                }\n+\n+                                logger.debug(\"Unable to handle data. Checksum verification failed\");\n+                            } else {\n+                                logger.debug(\"Unable to handle data. Data size not valid\");\n+                            }\n+\n+                            if (logger.isTraceEnabled()) {\n+                                logger.trace(\"skip CMD: {} DATA: {}\", String.format(\"%02x\", command.getReplyCmd()),\n+                                        dumpData(cleanedBlock));\n+                            }\n+                        }\n+                    }\n+                } catch (IOException ioe) {\n+                    if (ioe instanceof InterruptedIOException) {\n+                        Thread.currentThread().interrupt();\n+                        logger.warn(\"Transmission was interrupted: {}\", ioe.getMessage());\n+                        throw new RuntimeException(ioe);\n+                    }\n+                    logger.debug(\"IO error: {}\", ioe.getMessage());\n+                }\n+\n+                try {\n+                    Thread.sleep(1000);\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"Retry cmd. Last call was not successful. Request: {} Response: {}\",\n+                                dumpData(requestBlock), (responseBlock.length > 0 ? dumpData(responseBlock) : \"null\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    Thread.currentThread().interrupt();\n+                    logger.warn(\"Transmission was interrupted: {}\", e.getMessage());\n+                    throw new RuntimeException(e);\n+                }\n+            } while (retry++ < 5);\n+\n+            if (retry == 5) {\n+                logger.debug(\"Unable to send command. {} retries failed.\", retry);\n+            }\n+        }\n+        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+    }\n+\n+    /**\n+     * Generate the byte sequence for sending to ComfoAir (incl. START & END\n+     * sequence and checksum).\n+     *\n+     * @param command\n+     * @param requestData\n+     * @return response byte value block with cmd, data and checksum\n+     */\n+    private byte[] calculateRequest(int command, int[] requestData) {\n+        // generate the command block (cmd and request data)\n+        int length = requestData.length;\n+        byte[] block = new byte[4 + length];\n+\n+        block[0] = 0x00;\n+        block[1] = (byte) command;\n+        block[2] = (byte) length;\n+\n+        if (requestData.length > 0) {\n+            for (int i = 0; i < requestData.length; i++) {\n+                block[i + 3] = (byte) requestData[i];\n+            }\n+        }\n+\n+        // calculate checksum for command block\n+        byte checksum = calculateChecksum(block);\n+        block[block.length - 1] = checksum;\n+\n+        // escape the command block with checksum included\n+        block = escapeBlock(block);\n+        byte[] request = new byte[4 + block.length];\n+\n+        request[0] = START[0];\n+        request[1] = START[1];\n+        System.arraycopy(block, 0, request, 2, block.length);\n+        request[request.length - 2] = END[0];\n+        request[request.length - 1] = END[1];\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Calculates a checksum for a command block (cmd, data and checksum).\n+     *\n+     * @param block\n+     * @return checksum byte value\n+     */\n+    private byte calculateChecksum(byte[] block) {\n+        int datasum = 0;\n+        for (int i = 0; i < block.length; i++) {\n+            datasum += block[i];\n+        }\n+        datasum += 173;\n+\n+        return (byte) (datasum & 0xFF);\n+    }\n+\n+    /**\n+     * Cleanup a commandblock from quoted 0x07 characters.\n+     *\n+     * @param processBuffer\n+     * @return the 0x07 cleaned byte values\n+     */\n+    private byte[] cleanupBlock(byte[] processBuffer) {\n+        int pos = 0;\n+        byte[] cleanedBuffer = new byte[processBuffer.length];\n+\n+        for (int i = 4; i < processBuffer.length - 2; i++) {\n+            if (CTRL == processBuffer[i] && CTRL == processBuffer[i + 1]) {\n+                i++;\n+            }\n+            cleanedBuffer[pos] = processBuffer[i];\n+            pos++;\n+        }\n+        return Arrays.copyOf(cleanedBuffer, pos);\n+    }\n+\n+    /**\n+     * Escape special 0x07 character.\n+     *\n+     * @param cleanedBuffer\n+     * @return escaped byte value array\n+     */\n+    private byte[] escapeBlock(byte[] cleanedBuffer) {\n+        int pos = 0;\n+        byte[] processBuffer = new byte[50];\n+\n+        for (int i = 0; i < cleanedBuffer.length; i++) {\n+            if (CTRL == cleanedBuffer[i]) {\n+                processBuffer[pos] = CTRL;\n+                pos++;\n+            }\n+            processBuffer[pos] = cleanedBuffer[i];\n+            pos++;\n+        }\n+        return Arrays.copyOf(processBuffer, pos);\n+    }\n+\n+    /**\n+     * Send the byte values.\n+     *\n+     * @param request\n+     * @return successful flag\n+     */\n+    private boolean send(byte[] request) {\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"send DATA: {}\", dumpData(request));\n+        }\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.write(request);\n+            }\n+            return true;\n+        } catch (IOException e) {\n+            logger.debug(\"Error writing to serial port {}: {}\", serialPortName, e.getLocalizedMessage());\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Is used to debug byte values.\n+     *\n+     * @param replyData\n+     * @return\n+     */\n+    public static String dumpData(int[] replyData) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int ch : replyData) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private String dumpData(byte[] data) {\n+        StringBuilder sb = new StringBuilder();\n+        for (byte ch : data) {\n+            sb.append(String.format(\" %02x\", ch));\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Build request data based on reply data\n+     *\n+     * @param command\n+     * @param preRequestData\n+     * @return new build int values array\n+     */\n+    private int[] buildRequestData(ComfoAirCommand command, int[] preRequestData) {\n+        int[] newRequestData;\n+        Integer requestCmd = command.getRequestCmd();\n+        Integer dataPosition = command.getDataPosition();\n+        Integer requestValue = command.getRequestValue();\n+\n+        if (requestCmd != null && dataPosition != null && requestValue != null) {\n+            switch (requestCmd) {\n+                case ComfoAirCommandType.Constants.REQUEST_SET_DELAYS:\n+                    newRequestData = new int[8];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, newRequestData.length);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_FAN_LEVEL:\n+                    newRequestData = new int[9];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, 6);\n+                        System.arraycopy(preRequestData, 10, newRequestData, 6, newRequestData.length - 6);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_STATES:\n+                    newRequestData = new int[8];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        if (dataPosition == 4) {\n+                            requestValue = preRequestData[dataPosition]\n+                                    + checkByteAndCalculateValue(command, requestValue, preRequestData[dataPosition]);\n+                        }\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, 6);\n+                        System.arraycopy(preRequestData, 9, newRequestData, 6, newRequestData.length - 6);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_EWT:\n+                    newRequestData = new int[5];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, 4);\n+                        System.arraycopy(preRequestData, 6, newRequestData, 4, newRequestData.length - 4);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                case ComfoAirCommandType.Constants.REQUEST_SET_ANALOGS:\n+                    newRequestData = new int[19];\n+\n+                    if (preRequestData.length > 0 && newRequestData.length <= preRequestData.length) {\n+                        switch (dataPosition) {\n+                            case 0:\n+                            case 1:\n+                            case 2:\n+                                requestValue = preRequestData[dataPosition] + checkByteAndCalculateValue(command,\n+                                        requestValue, preRequestData[dataPosition]);\n+                        }\n+                        System.arraycopy(preRequestData, 0, newRequestData, 0, newRequestData.length);\n+                        newRequestData[dataPosition] = requestValue;\n+                    } else {\n+                        return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+                    }\n+                    break;\n+                default:\n+                    return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+            }\n+            return newRequestData;\n+        } else {\n+            return ComfoAirCommandType.Constants.EMPTY_INT_ARRAY;\n+        }\n+    }\n+\n+    /**\n+     * Check if preValue contains possible byte and calculate new value\n+     *\n+     * @param command\n+     * @param requestValue\n+     * @param preValue\n+     * @return new int value\n+     */\n+    private int checkByteAndCalculateValue(ComfoAirCommand command, int requestValue, int preValue) {\n+        String key = command.getKeys().get(0);\n+        ComfoAirCommandType commandType = ComfoAirCommandType.getCommandTypeByKey(key);\n+        if (commandType != null) {\n+            int[] get_possible_values = commandType.getPossibleValues();\n+            if (get_possible_values != null) {\n+                int possibleValue = get_possible_values[0];\n+                boolean isActive = (preValue & possibleValue) == possibleValue;\n+                int newValue;\n+\n+                if (isActive) {\n+                    newValue = requestValue == 1 ? 0 : -possibleValue;\n+                } else {\n+                    newValue = requestValue == 1 ? possibleValue : 0;\n+                }\n+                return newValue;\n+            }\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @return true if connected or false if not\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set the connection state\n+     *\n+     * @param connected true if connected or false if not\n+     */\n+    public void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    @Override\n+    public void serialEvent(SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (InterruptedException e) {\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 591}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NjMyMw==", "bodyText": "Camel case. Same for the others.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r465156323", "createdAt": "2020-08-04T15:56:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/datatypes/ComfoAirDataType.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal.datatypes;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.comfoair.internal.ComfoAirCommandType;\n+\n+/**\n+ * Abstract class to convert binary hex values into openHAB states and vice\n+ * versa\n+ *\n+ * @author Holger Hees - Initial Contribution\n+ * @author Hans B\u00f6hm - Refactoring\n+ */\n+@NonNullByDefault\n+public interface ComfoAirDataType {\n+    /**\n+     * Generate a openHAB State object based on response data.\n+     *\n+     * @param response\n+     * @param commandType\n+     * @return converted State object\n+     */\n+    State convertToState(int[] response, ComfoAirCommandType commandType);\n+\n+    /**\n+     * Generate byte array based on a openHAB State.\n+     *\n+     * @param value\n+     * @param commandType\n+     * @return converted byte array\n+     */\n+    int @Nullable [] convertFromState(State value, ComfoAirCommandType commandType);\n+\n+    default int calculateNumberValue(int[] data, ComfoAirCommandType commandType) {\n+        int[] get_reply_data_pos = commandType.getGetReplyDataPos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1ODg5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" required=\"false\">\n          \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" unit=\"s\" required=\"false\">", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r465158899", "createdAt": "2020-08-04T16:00:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1177 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"comfoair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"comfoair\">\n+\t\t<label>Generic ComfoAir Ventilation System</label>\n+\t\t<description>Provides a generic access to a ComfoAir compatible ventilation system</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"bindingControl\" typeId=\"bindingControl\"/>\n+\t\t\t<channel-group id=\"ventilation\" typeId=\"ventilation\"/>\n+\t\t\t<channel-group id=\"temperatures\" typeId=\"temperatures\"/>\n+\t\t\t<channel-group id=\"times\" typeId=\"times\"/>\n+\t\t\t<channel-group id=\"bypass\" typeId=\"bypass\"/>\n+\t\t\t<channel-group id=\"preheater\" typeId=\"preheater\"/>\n+\t\t\t<channel-group id=\"ewt\" typeId=\"ewt\"/>\n+\t\t\t<channel-group id=\"heater\" typeId=\"heater\"/>\n+\t\t\t<channel-group id=\"cookerhood\" typeId=\"cookerhood\"/>\n+\t\t\t<channel-group id=\"enthalpy\" typeId=\"enthalpy\"/>\n+\t\t\t<channel-group id=\"menuP1\" typeId=\"menuP1\"/>\n+\t\t\t<channel-group id=\"menuP2\" typeId=\"menuP2\"/>\n+\t\t\t<channel-group id=\"menuP9\" typeId=\"menuP9\"/>\n+\t\t\t<channel-group id=\"inputs\" typeId=\"inputs\"/>\n+\t\t\t<channel-group id=\"analog1\" typeId=\"analog\">\n+\t\t\t\t<label>Analog Inputs 1</label>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"analog2\" typeId=\"analog\">\n+\t\t\t\t<label>Analog Inputs 2</label>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"analog3\" typeId=\"analog\">\n+\t\t\t\t<label>Analog Inputs 3</label>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"analog4\" typeId=\"analog\">\n+\t\t\t\t<label>Analog Inputs 4</label>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"analogRF\" typeId=\"analogRF\"/>\n+\t\t\t<channel-group id=\"errors\" typeId=\"errors\"/>\n+\t\t\t<channel-group id=\"resets\" typeId=\"resets\"/>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial port that the ComfoAir is connected to</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/2f2ee96cc76c9d14ff7fe9c90bc7b044810c564e", "committedDate": "2020-07-25T06:03:17Z", "message": "update pom.xml\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}, "afterCommit": {"oid": "b282264cd3b2f2a7759d387b59e870fd861892bc", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/b282264cd3b2f2a7759d387b59e870fd861892bc", "committedDate": "2020-08-07T10:53:03Z", "message": "review changes\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTk5NDIy", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-466199422", "createdAt": "2020-08-12T19:12:49Z", "commit": {"oid": "31482d345d6f779c39ee5aad5ec0e4e631d00a19"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOToxMjo0OVrOG_u6kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOTozNDo1M1rOG_vmRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ4MjEzMQ==", "bodyText": "You might want to give the user a hint what went wrong by passing a message as a third argument.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r469482131", "createdAt": "2020-08-12T19:12:49Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirHandler.java", "diffHunk": "@@ -0,0 +1,434 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.comfoair.internal.datatypes.ComfoAirDataType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ComfoAirHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ComfoAirHandler extends BaseThingHandler {\n+    private static final int DEFAULT_REFRESH_INTERVAL_SEC = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirHandler.class);\n+    private final ComfoAirConfiguration config = getConfigAs(ComfoAirConfiguration.class);\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable ScheduledFuture<?> poller;\n+    private @Nullable ScheduledFuture<?> affectedItemsPoller;\n+    private @Nullable ComfoAirSerialConnector comfoAirConnector;\n+\n+    public static final int BAUDRATE = 9600;\n+\n+    public ComfoAirHandler(Thing thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        if (command instanceof RefreshType) {\n+            Channel channel = this.thing.getChannel(channelUID);\n+            if (channel != null) {\n+                updateChannelState(channel);\n+            }\n+        } else {\n+            ComfoAirCommand changeCommand = ComfoAirCommandType.getChangeCommand(channelId, command);\n+\n+            if (changeCommand != null) {\n+                Set<String> keysToUpdate = getThing().getChannels().stream().map(Channel::getUID).filter(this::isLinked)\n+                        .map(ChannelUID::getId).collect(Collectors.toSet());\n+                sendCommand(changeCommand, channelId);\n+\n+                Collection<ComfoAirCommand> affectedReadCommands = ComfoAirCommandType\n+                        .getAffectedReadCommands(channelId, keysToUpdate);\n+\n+                if (affectedReadCommands.size() > 0) {\n+                    Runnable updateThread = new AffectedItemsUpdateThread(affectedReadCommands);\n+                    affectedItemsPoller = scheduler.schedule(updateThread, 3, TimeUnit.SECONDS);\n+                }\n+            } else {\n+                logger.warn(\"Unhandled command type: {}, channelId: {}\", command.toString(), channelId);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        String serialPort = this.config.serialPort;\n+\n+        if (serialPort.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31482d345d6f779c39ee5aad5ec0e4e631d00a19"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ4NTE3MA==", "bodyText": "It seems a bit unreasonable to log the stack trace e.g. when the serial port is in use.\nSuggestion: Throw these exceptions and handle them in ComfoAirHandler. You can set the thing offline with the exception's message, which will be displayed in the UI, then.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r469485170", "createdAt": "2020-08-12T19:18:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,590 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InterruptedIOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte CTRL = (byte) 0x07;\n+    private static byte[] START = { CTRL, (byte) 0xf0 };\n+    private static byte[] END = { CTRL, (byte) 0x0f };\n+    private static byte[] ACK = { CTRL, (byte) 0xf3 };\n+\n+    private static int RS232_ENABLED_VALUE = 0x03;\n+    private static int RS232_DISABLED_VALUE = 0x00;\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     */\n+    public void open() {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);\n+                setConnected(false);\n+            }\n+        } catch (PortInUseException e) {\n+            logger.debug(\"open(): Port in Use Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (UnsupportedCommOperationException e) {\n+            logger.debug(\"open(): Unsupported Comm Operation Exception: {}\", e.getMessage(), e);\n+            setConnected(false);\n+        } catch (IOException e) {\n+            logger.debug(\"open(): IO Exception: {}\", e.getMessage(), e);\n+            setConnected(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31482d345d6f779c39ee5aad5ec0e4e631d00a19"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ5MzMxNw==", "bodyText": "Did you take a look at the item-type Contact? It has the two states OPEN and CLOSED.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r469493317", "createdAt": "2020-08-12T19:34:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1177 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"comfoair\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"comfoair\">\n+\t\t<label>Generic ComfoAir Ventilation System</label>\n+\t\t<description>Provides a generic access to a ComfoAir compatible ventilation system</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"bindingControl\" typeId=\"bindingControl\"/>\n+\t\t\t<channel-group id=\"ventilation\" typeId=\"ventilation\"/>\n+\t\t\t<channel-group id=\"temperatures\" typeId=\"temperatures\"/>\n+\t\t\t<channel-group id=\"times\" typeId=\"times\"/>\n+\t\t\t<channel-group id=\"bypass\" typeId=\"bypass\"/>\n+\t\t\t<channel-group id=\"preheater\" typeId=\"preheater\"/>\n+\t\t\t<channel-group id=\"ewt\" typeId=\"ewt\"/>\n+\t\t\t<channel-group id=\"heater\" typeId=\"heater\"/>\n+\t\t\t<channel-group id=\"cookerhood\" typeId=\"cookerhood\"/>\n+\t\t\t<channel-group id=\"enthalpy\" typeId=\"enthalpy\"/>\n+\t\t\t<channel-group id=\"menuP1\" typeId=\"menuP1\"/>\n+\t\t\t<channel-group id=\"menuP2\" typeId=\"menuP2\"/>\n+\t\t\t<channel-group id=\"menuP9\" typeId=\"menuP9\"/>\n+\t\t\t<channel-group id=\"inputs\" typeId=\"inputs\"/>\n+\t\t\t<channel-group id=\"analog1\" typeId=\"analog\">\n+\t\t\t\t<label>Analog Inputs 1</label>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"analog2\" typeId=\"analog\">\n+\t\t\t\t<label>Analog Inputs 2</label>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"analog3\" typeId=\"analog\">\n+\t\t\t\t<label>Analog Inputs 3</label>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"analog4\" typeId=\"analog\">\n+\t\t\t\t<label>Analog Inputs 4</label>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"analogRF\" typeId=\"analogRF\"/>\n+\t\t\t<channel-group id=\"errors\" typeId=\"errors\"/>\n+\t\t\t<channel-group id=\"resets\" typeId=\"resets\"/>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<description>Serial port that the ComfoAir is connected to</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" max=\"65535\" min=\"10\" unit=\"s\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval in seconds</description>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-group-type id=\"bindingControl\">\n+\t\t<label>Binding Control</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activate\" typeId=\"activate\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ventilation\">\n+\t\t<label>Ventilation Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fanLevel\" typeId=\"fan_evel\"/>\n+\t\t\t<channel id=\"fanOut0\" typeId=\"fan_out_0\"/>\n+\t\t\t<channel id=\"fanOut1\" typeId=\"fan_out_1\"/>\n+\t\t\t<channel id=\"fanOut2\" typeId=\"fan_out_2\"/>\n+\t\t\t<channel id=\"fanOut3\" typeId=\"fan_out_3\"/>\n+\t\t\t<channel id=\"fanIn0\" typeId=\"fan_in_0\"/>\n+\t\t\t<channel id=\"fanIn1\" typeId=\"fan_in_1\"/>\n+\t\t\t<channel id=\"fanIn2\" typeId=\"fan_in_2\"/>\n+\t\t\t<channel id=\"fanIn3\" typeId=\"fan_in_3\"/>\n+\t\t\t<channel id=\"fanInPercent\" typeId=\"fan_in_percent\"/>\n+\t\t\t<channel id=\"fanOutPercent\" typeId=\"fan_out_percent\"/>\n+\t\t\t<channel id=\"fanInRPM\" typeId=\"fan_in_RPM\"/>\n+\t\t\t<channel id=\"fanOutRPM\" typeId=\"fan_out_RPM\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"temperatures\">\n+\t\t<label>Temperature Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"targetTemperature\" typeId=\"target_temperature\"/>\n+\t\t\t<channel id=\"outdoorTemperatureIn\" typeId=\"outdoor_temperature_in\"/>\n+\t\t\t<channel id=\"outdoorTemperatureOut\" typeId=\"outdoor_temperature_out\"/>\n+\t\t\t<channel id=\"indoorTemperatureIn\" typeId=\"indoor_temperature_in\"/>\n+\t\t\t<channel id=\"indoorTemperatureOut\" typeId=\"indoor_temperature_out\"/>\n+\t\t\t<channel id=\"isT1Sensor\" typeId=\"is_T1_sensor\"/>\n+\t\t\t<channel id=\"isT2Sensor\" typeId=\"is_T2_sensor\"/>\n+\t\t\t<channel id=\"isT3Sensor\" typeId=\"is_T3_sensor\"/>\n+\t\t\t<channel id=\"isT4Sensor\" typeId=\"is_T4_sensor\"/>\n+\t\t\t<channel id=\"isEWTSensor\" typeId=\"is_EWT_sensor\"/>\n+\t\t\t<channel id=\"isHeaterSensor\" typeId=\"is_heater_sensor\"/>\n+\t\t\t<channel id=\"isCookerhoodSensor\" typeId=\"is_cookerhood_sensor\"/>\n+\t\t\t<channel id=\"ewtTemperature\" typeId=\"ewt_temperature\"/>\n+\t\t\t<channel id=\"heaterTemperature\" typeId=\"heater_temperature\"/>\n+\t\t\t<channel id=\"cookerhoodTemperature\" typeId=\"cookerhood_temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"times\">\n+\t\t<label>Uptimes</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"level0Time\" typeId=\"level0_time\"/>\n+\t\t\t<channel id=\"level1Time\" typeId=\"level1_time\"/>\n+\t\t\t<channel id=\"level2Time\" typeId=\"level2_time\"/>\n+\t\t\t<channel id=\"level3Time\" typeId=\"level3_time\"/>\n+\t\t\t<channel id=\"freezeTime\" typeId=\"freeze_time\"/>\n+\t\t\t<channel id=\"preheaterTime\" typeId=\"preheater_time\"/>\n+\t\t\t<channel id=\"bypassTime\" typeId=\"bypass_time\"/>\n+\t\t\t<channel id=\"filterHours\" typeId=\"filter_hours\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"bypass\">\n+\t\t<label>Bypass Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bypassFactor\" typeId=\"bypass_factor\"/>\n+\t\t\t<channel id=\"bypassLevel\" typeId=\"bypass_level\"/>\n+\t\t\t<channel id=\"bypassCorrection\" typeId=\"bypass_correction\"/>\n+\t\t\t<channel id=\"bypassSummer\" typeId=\"bypass_summer\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"preheater\">\n+\t\t<label>Preheater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"preheaterValve\" typeId=\"preheater_valve\"/>\n+\t\t\t<channel id=\"preheaterFrostProtect\" typeId=\"preheater_frost_protect\"/>\n+\t\t\t<channel id=\"preheaterHeating\" typeId=\"preheater_heating\"/>\n+\t\t\t<channel id=\"preheaterFrostTime\" typeId=\"preheater_frost_time\"/>\n+\t\t\t<channel id=\"preheaterSafety\" typeId=\"preheater_safety\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"ewt\">\n+\t\t<label>EWT Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"ewtTemperatureLow\" typeId=\"ewt_temperature_low\"/>\n+\t\t\t<channel id=\"ewtTemperatureHigh\" typeId=\"ewt_temperature_high\"/>\n+\t\t\t<channel id=\"ewtSpeed\" typeId=\"ewt_speed\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"heater\">\n+\t\t<label>Heater Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"heaterPower\" typeId=\"heater_power\"/>\n+\t\t\t<channel id=\"heaterPowerI\" typeId=\"heater_power_I\"/>\n+\t\t\t<channel id=\"heaterTargetTemperature\" typeId=\"heater_target_temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"cookerhood\">\n+\t\t<label>Cookerhood Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"cookerhoodSpeed\" typeId=\"cookerhood_speed\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"enthalpy\">\n+\t\t<label>Enthalpy Values</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"enthalpyTemperature\" typeId=\"enthalpy_temperature\"/>\n+\t\t\t<channel id=\"enthalpyHumidity\" typeId=\"enthalpy_humidity\"/>\n+\t\t\t<channel id=\"enthalpyLevel\" typeId=\"enthalpy_level\"/>\n+\t\t\t<channel id=\"enthalpyTime\" typeId=\"enthalpy_time\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP1\">\n+\t\t<label>Menu P1: Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"menu20Mode\" typeId=\"menu20_mode\"/>\n+\t\t\t<channel id=\"menu21Mode\" typeId=\"menu21_mode\"/>\n+\t\t\t<channel id=\"menu22Mode\" typeId=\"menu22_mode\"/>\n+\t\t\t<channel id=\"menu23Mode\" typeId=\"menu23_mode\"/>\n+\t\t\t<channel id=\"menu24Mode\" typeId=\"menu24_mode\"/>\n+\t\t\t<channel id=\"menu25Mode\" typeId=\"menu25_mode\"/>\n+\t\t\t<channel id=\"menu26Mode\" typeId=\"menu26_mode\"/>\n+\t\t\t<channel id=\"menu27Mode\" typeId=\"menu27_mode\"/>\n+\t\t\t<channel id=\"menu28Mode\" typeId=\"menu28_mode\"/>\n+\t\t\t<channel id=\"menu29Mode\" typeId=\"menu29_mode\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP2\">\n+\t\t<label>Menu P2: Delay Settings</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"bathroomStartDelay\" typeId=\"bathroom_start_delay\"/>\n+\t\t\t<channel id=\"bathroomEndDelay\" typeId=\"bathroom_end_delay\"/>\n+\t\t\t<channel id=\"L1EndDelay\" typeId=\"L1_end_delay\"/>\n+\t\t\t<channel id=\"pulseVentilation\" typeId=\"pulse_ventilation\"/>\n+\t\t\t<channel id=\"filterWeeks\" typeId=\"filter_weeks\"/>\n+\t\t\t<channel id=\"RFShortDelay\" typeId=\"RF_short_delay\"/>\n+\t\t\t<channel id=\"RFLongDelay\" typeId=\"RF_long_delay\"/>\n+\t\t\t<channel id=\"cookerhoodDelay\" typeId=\"cookerhood_delay\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"menuP9\">\n+\t\t<label>Menu P9: Option Control States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"chimneyState\" typeId=\"chimney_state\"/>\n+\t\t\t<channel id=\"bypassState\" typeId=\"bypass_state\"/>\n+\t\t\t<channel id=\"ewtState\" typeId=\"ewt_state\"/>\n+\t\t\t<channel id=\"heaterState\" typeId=\"heater_state\"/>\n+\t\t\t<channel id=\"vControlState\" typeId=\"v_control_state\"/>\n+\t\t\t<channel id=\"frostState\" typeId=\"frost_state\"/>\n+\t\t\t<channel id=\"cookerhoodState\" typeId=\"cookerhood_state\"/>\n+\t\t\t<channel id=\"enthalpyState\" typeId=\"enthalpy_state\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"inputs\">\n+\t\t<label>Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isL1Switch\" typeId=\"is_L1_switch\"/>\n+\t\t\t<channel id=\"isL2Switch\" typeId=\"is_L2_switch\"/>\n+\t\t\t<channel id=\"isBathroomSwitch\" typeId=\"is_bathroom_switch\"/>\n+\t\t\t<channel id=\"isCookerhoodSwitch\" typeId=\"is_cookerhood_switch\"/>\n+\t\t\t<channel id=\"isExternalFilter\" typeId=\"is_external_filter\"/>\n+\t\t\t<channel id=\"isWTW\" typeId=\"is_wtw\"/>\n+\t\t\t<channel id=\"isBathroom2Switch\" typeId=\"is_bathroom2_switch\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"analog\">\n+\t\t<label>Analog Inputs</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isAnalog\" typeId=\"is_analog\"/>\n+\t\t\t<channel id=\"analogMode\" typeId=\"analog_mode\"/>\n+\t\t\t<channel id=\"analogNegative\" typeId=\"analog_negative\"/>\n+\t\t\t<channel id=\"analogVolt\" typeId=\"analog_volt\"/>\n+\t\t\t<channel id=\"analogMin\" typeId=\"analog_min\"/>\n+\t\t\t<channel id=\"analogMax\" typeId=\"analog_max\"/>\n+\t\t\t<channel id=\"analogValue\" typeId=\"analog_value\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"analogRF\">\n+\t\t<label>RF Input</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"isRF\" typeId=\"is_RF\"/>\n+\t\t\t<channel id=\"RFMode\" typeId=\"RF_mode\"/>\n+\t\t\t<channel id=\"RFNegative\" typeId=\"RF_negative\"/>\n+\t\t\t<channel id=\"RFMin\" typeId=\"RF_min\"/>\n+\t\t\t<channel id=\"RFMax\" typeId=\"RF_max\"/>\n+\t\t\t<channel id=\"RFValue\" typeId=\"RF_value\"/>\n+\t\t\t<channel id=\"analogPriority\" typeId=\"analog_priority\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"errors\">\n+\t\t<label>Error States</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"filterError\" typeId=\"filter_error\"/>\n+\t\t\t<channel id=\"errorsCurrent\" typeId=\"errors_current\"/>\n+\t\t\t<channel id=\"errorsLast\" typeId=\"errors_last\"/>\n+\t\t\t<channel id=\"errorsPrelast\" typeId=\"errors_prelast\"/>\n+\t\t\t<channel id=\"errorsPrePrelast\" typeId=\"errors_pre_prelast\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"resets\">\n+\t\t<label>Reset</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"filterReset\" typeId=\"filter_reset\"/>\n+\t\t\t<channel id=\"errorReset\" typeId=\"error_reset\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-type id=\"activate\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Activate Binding Control</label>\n+\t\t<description>Activate (control through openHAB) or deactivate (return control to CCEase) binding control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_evel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Level</label>\n+\t\t<description>Fan level</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"false\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Away</option>\n+\t\t\t\t<option value=\"2\">Level 1</option>\n+\t\t\t\t<option value=\"3\">Level 2</option>\n+\t\t\t\t<option value=\"4\">Level 3</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"target_temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Target Temperature</label>\n+\t\t<description>Target (comfort) temperature</description>\n+\t\t<category>Temperature</category>\n+\t\t<state min=\"12\" max=\"28\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_error\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Filter Error</label>\n+\t\t<description>Filter full</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"filter_reset\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Filter Reset</label>\n+\t\t<description>Reset filter uptime</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"error_reset\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Error Reset</label>\n+\t\t<description>Reset errors</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_0\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 0 (away)</label>\n+\t\t<description>Fan level 0 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"97\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_1\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 1</label>\n+\t\t<description>Fan level 1 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"16\" max=\"98\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_2\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 2</label>\n+\t\t<description>Fan level 2 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"17\" max=\"99\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_3\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out Level 3</label>\n+\t\t<description>Fan level 3 performance (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"18\" max=\"100\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_0\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 0 (away)</label>\n+\t\t<description>Fan level 0 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"0\" max=\"97\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_1\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 1</label>\n+\t\t<description>Fan level 1 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"16\" max=\"98\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_2\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 2</label>\n+\t\t<description>Fan level 2 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"17\" max=\"99\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_3\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In Level 3</label>\n+\t\t<description>Fan level 3 performance (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state min=\"18\" max=\"100\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_percent\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In (%)</label>\n+\t\t<description>Current relative speed (%) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_percent\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out (%)</label>\n+\t\t<description>Current relative speed (%) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_in_RPM\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan In (rpm)</label>\n+\t\t<description>Current absolute speed (rpm) of incoming fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fan_out_RPM\" advanced=\"true\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Fan Out (rpm)</label>\n+\t\t<description>Current absolute speed (rpm) of outgoing fan</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"outdoor_temperature_in\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Outdoor Temperature Incoming</label>\n+\t\t<description>Intake air temperature (outside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"outdoor_temperature_out\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Outdoor Temperature Outgoing</label>\n+\t\t<description>Outlet air temperature (outside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"indoor_temperature_in\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Indoor Temperature Incoming</label>\n+\t\t<description>Inlet air temperature (inside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"indoor_temperature_out\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Indoor Temperature Outgoing</label>\n+\t\t<description>Uptake air temperature (inside)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T1_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T1 Available</label>\n+\t\t<description>Availability of temperature sensor T1 (outdoor in)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T2_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T2 Available</label>\n+\t\t<description>Availability of temperature sensor T2 (indoor in)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T3_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T3 Available</label>\n+\t\t<description>Availability of temperature sensor T3 (indoor out)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_T4_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Sensor T4 Available</label>\n+\t\t<description>Availability of temperature sensor T4 (outdoor out)</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_EWT_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>EWT Sensor Available</label>\n+\t\t<description>Availability of EWT temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_heater_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heater Sensor Available</label>\n+\t\t<description>Availability of heater temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"is_cookerhood_sensor\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Cookerhood Sensor Available</label>\n+\t\t<description>Availability of cookerhood temperature sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"chimney_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Chimney Control State</label>\n+\t\t<description>State of the chimney control</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"bypass_state\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Bypass State</label>\n+\t\t<description>State of the bypass (ON = open / OFF = closed)</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31482d345d6f779c39ee5aad5ec0e4e631d00a19"}, "originalPosition": 529}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzMwNTUz", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-467730553", "createdAt": "2020-08-14T17:00:10Z", "commit": {"oid": "89d5d12d9774c7a3f885e395b663f9f2fcb6595f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzowMDoxMFrOHA79ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzowMDoxMFrOHA79ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0NDQyMA==", "bodyText": "Would be good to throw an exception here, too, to let the user know what's wrong via the UI.\nConsider whether the connected flag is still needed when using exceptions for error handling. If I see correctly, the flag is always false if you throw an exception, which would be redundant.", "url": "https://github.com/openhab/openhab-addons/pull/7052#discussion_r470744420", "createdAt": "2020-08-14T17:00:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.comfoair/src/main/java/org/openhab/binding/comfoair/internal/ComfoAirSerialConnector.java", "diffHunk": "@@ -0,0 +1,586 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.comfoair.internal;\n+\n+import java.io.BufferedInputStream;\n+import java.io.DataInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InterruptedIOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Connector class for serial communication with ComfoAir device\n+ *\n+ * @author Hans B\u00f6hm - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class ComfoAirSerialConnector {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ComfoAirSerialConnector.class);\n+\n+    private static byte CTRL = (byte) 0x07;\n+    private static byte[] START = { CTRL, (byte) 0xf0 };\n+    private static byte[] END = { CTRL, (byte) 0x0f };\n+    private static byte[] ACK = { CTRL, (byte) 0xf3 };\n+\n+    private static int RS232_ENABLED_VALUE = 0x03;\n+    private static int RS232_DISABLED_VALUE = 0x00;\n+\n+    private boolean isSuspended = true;\n+\n+    private boolean connected = false;\n+    private final String serialPortName;\n+    private final int baudRate;\n+    private final SerialPortManager serialPortManager;\n+    private @Nullable SerialPort serialPort;\n+    private @Nullable InputStream inputStream;\n+    private @Nullable OutputStream outputStream;\n+\n+    public ComfoAirSerialConnector(final SerialPortManager serialPortManager, final String serialPortName,\n+            final int baudRate) {\n+        this.serialPortManager = serialPortManager;\n+        this.serialPortName = serialPortName;\n+        this.baudRate = baudRate;\n+    }\n+\n+    /**\n+     * Open serial port.\n+     *\n+     * @throws PortInUseException, UnsupportedCommOperationException, IOException\n+     */\n+    public void open() throws PortInUseException, UnsupportedCommOperationException, IOException {\n+        logger.debug(\"open(): Opening ComfoAir connection\");\n+\n+        try {\n+            SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(serialPortName);\n+            if (portIdentifier != null) {\n+                SerialPort serialPort = portIdentifier.open(this.getClass().getName(), 3000);\n+                serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                        SerialPort.PARITY_NONE);\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(1000);\n+                serialPort.notifyOnDataAvailable(true);\n+                this.serialPort = serialPort;\n+\n+                inputStream = new DataInputStream(new BufferedInputStream(serialPort.getInputStream()));\n+                outputStream = serialPort.getOutputStream();\n+\n+                ComfoAirCommand command = ComfoAirCommandType.getChangeCommand(ComfoAirCommandType.ACTIVATE.getKey(),\n+                        OnOffType.ON);\n+\n+                if (command != null) {\n+                    sendCommand(command, ComfoAirCommandType.Constants.EMPTY_INT_ARRAY);\n+                } else {\n+                    logger.debug(\"Failure while creating COMMAND: {}\", command);\n+                }\n+                setConnected(true);\n+            } else {\n+                logger.debug(\"open(): No such Port: {}\", serialPortName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d5d12d9774c7a3f885e395b663f9f2fcb6595f"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MDEzMjU4", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-468013258", "createdAt": "2020-08-15T19:28:24Z", "commit": {"oid": "e6bc6760a2bfbaaeadf654ae1919bfa773838957"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzY2Mzg2", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-471766386", "createdAt": "2020-08-20T16:04:18Z", "commit": {"oid": "482b038e5e22039dcffb59e993610233c9803ebc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e2b2c8a70dbc5aa2c8ce835e4bb2be70ef1190f", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/7e2b2c8a70dbc5aa2c8ce835e4bb2be70ef1190f", "committedDate": "2020-08-28T15:40:57Z", "message": "comfoair - first version\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51b4aa6853714ccc3cd557bd07dc0300e00fe62e", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/51b4aa6853714ccc3cd557bd07dc0300e00fe62e", "committedDate": "2020-08-28T15:40:57Z", "message": "fix pom\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8815201abc300df25c62bcb90dd1df8ee0f3abee", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/8815201abc300df25c62bcb90dd1df8ee0f3abee", "committedDate": "2020-08-28T15:40:57Z", "message": "address some mvn warnings\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49ab59be61e326312f2fa00615d2307421850b36", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/49ab59be61e326312f2fa00615d2307421850b36", "committedDate": "2020-08-28T15:40:58Z", "message": "small improvements on channel declaration\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82861fb9785393e4902ef8d7c60b1fe3a466ea3", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/c82861fb9785393e4902ef8d7c60b1fe3a466ea3", "committedDate": "2020-08-28T15:40:58Z", "message": "address review comments\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5bce90bf559d3f1c6d1722d05ff796180b6246a", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/c5bce90bf559d3f1c6d1722d05ff796180b6246a", "committedDate": "2020-08-28T15:40:58Z", "message": "address review comments 2\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "568a626a4ea9ade27e0df7067decf864ee4c27d9", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/568a626a4ea9ade27e0df7067decf864ee4c27d9", "committedDate": "2020-08-28T15:40:58Z", "message": "fix build\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "299a87c0fb254fc1bd676001ff007d78e4240af2", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/299a87c0fb254fc1bd676001ff007d78e4240af2", "committedDate": "2020-08-28T15:40:58Z", "message": "add constructors to enum\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d478ea6126f430e3db015a9d7d3982d2dc630d0", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/3d478ea6126f430e3db015a9d7d3982d2dc630d0", "committedDate": "2020-08-28T15:40:58Z", "message": "fix ewtState channel\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "318a1d2dc640862b7bcd1701f864514d0df45585", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/318a1d2dc640862b7bcd1701f864514d0df45585", "committedDate": "2020-08-28T15:40:58Z", "message": "add constants for commands\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8db4663feeee5c2fd07fd8a8577e874fbc46457c", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/8db4663feeee5c2fd07fd8a8577e874fbc46457c", "committedDate": "2020-08-28T15:40:58Z", "message": "address review comments 3\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fc1b1bb806f286c9daa30afd006baf20392692a", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/0fc1b1bb806f286c9daa30afd006baf20392692a", "committedDate": "2020-08-28T15:40:58Z", "message": "minor fixes\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6fe10e37b7e57c2ef5c4877858d41ff3a1fd9ee", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/e6fe10e37b7e57c2ef5c4877858d41ff3a1fd9ee", "committedDate": "2020-08-28T15:40:58Z", "message": "remove rules from README\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72d37eff04814264ead3ece71987c36e5cdcdca8", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/72d37eff04814264ead3ece71987c36e5cdcdca8", "committedDate": "2020-08-28T15:40:58Z", "message": "spelling fixes\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc08e61ab8d48b48e95d1b41af20e00d610d91d2", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/cc08e61ab8d48b48e95d1b41af20e00d610d91d2", "committedDate": "2020-08-28T15:40:58Z", "message": "fix thing-types.xml\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9304a276bb6964133bd7e3bd2670d6880c83076", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/a9304a276bb6964133bd7e3bd2670d6880c83076", "committedDate": "2020-08-28T15:40:58Z", "message": "add null annotations\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8764caa0226dbbfc4e29ec56de89b514de29ad5c", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/8764caa0226dbbfc4e29ec56de89b514de29ad5c", "committedDate": "2020-08-28T15:40:58Z", "message": "add more null annotations\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "763c2d8c8a0c40b97fda77cf73020d372f1a3c67", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/763c2d8c8a0c40b97fda77cf73020d372f1a3c67", "committedDate": "2020-08-28T15:40:58Z", "message": "fix mvn warnings\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb402bd1c524373df5eb7bf19868c828555984c", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/deb402bd1c524373df5eb7bf19868c828555984c", "committedDate": "2020-08-28T15:40:58Z", "message": "address review comments 1\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6db5ffbbeb808d96326783f0b7446562636f71e", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/e6db5ffbbeb808d96326783f0b7446562636f71e", "committedDate": "2020-08-28T15:40:58Z", "message": "address review comments 2\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cda34869e91fa194ed0e7997411b153ca7d4886", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/3cda34869e91fa194ed0e7997411b153ca7d4886", "committedDate": "2020-08-28T15:40:58Z", "message": "move software versions to properties\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e9b8d0bec6b51a0fbc222aed87f4b18ed83aad2", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/8e9b8d0bec6b51a0fbc222aed87f4b18ed83aad2", "committedDate": "2020-08-28T15:40:58Z", "message": "fix build\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "269620318cf222b1581dfc6b59b3c70cac54f77a", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/269620318cf222b1581dfc6b59b3c70cac54f77a", "committedDate": "2020-08-28T15:40:58Z", "message": "add deviceName property\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dadbc2b901708db02d56333df4c3004b073b9b85", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/dadbc2b901708db02d56333df4c3004b073b9b85", "committedDate": "2020-08-28T15:40:58Z", "message": "change DataTypes to Singletons\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "281117ecd0d43b5f23a982d8357a3b11aba47981", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/281117ecd0d43b5f23a982d8357a3b11aba47981", "committedDate": "2020-08-28T15:40:58Z", "message": "make state update asynchronuous\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daad59993f491a1e184aa52f536d16e314338909", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/daad59993f491a1e184aa52f536d16e314338909", "committedDate": "2020-08-28T15:40:58Z", "message": "address review comments\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ffbcadd085a94b1af441b8392e4427a0a13acc", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/a1ffbcadd085a94b1af441b8392e4427a0a13acc", "committedDate": "2020-08-28T15:40:58Z", "message": "Refactor state conversion & add DataTypeTime\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d2e821e6141bdb7fd69bdec1beec4d2ef1628cc", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/3d2e821e6141bdb7fd69bdec1beec4d2ef1628cc", "committedDate": "2020-08-28T15:40:58Z", "message": "Reorganize channels with constants\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3e50ffcd220578e27c0bebd6ba8c6909eba0659", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/f3e50ffcd220578e27c0bebd6ba8c6909eba0659", "committedDate": "2020-08-28T15:40:58Z", "message": "Fix thing-types.xml\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa7d96ae642a57dcca1abf4a26ecfe8ae589428d", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/aa7d96ae642a57dcca1abf4a26ecfe8ae589428d", "committedDate": "2020-08-28T15:40:58Z", "message": "Move option channels to properties & add dynamic channels\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18c55d0a9f7876d423efa891a915d52b3ba92a29", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/18c55d0a9f7876d423efa891a915d52b3ba92a29", "committedDate": "2020-08-28T15:40:58Z", "message": "Revert \"Move option channels to properties & add dynamic channels\"\n\nThis reverts commit 26496d1e58243ad18b897f7fe970a411a8f3f4ce.\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "199b573bc169f695f3d2c2149553ff40f0bc64c7", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/199b573bc169f695f3d2c2149553ff40f0bc64c7", "committedDate": "2020-08-28T15:40:58Z", "message": "minor fixes & CommandType refactor\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1420262cbda72f1b75da227929c7698b116ea19f", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/1420262cbda72f1b75da227929c7698b116ea19f", "committedDate": "2020-08-28T15:40:58Z", "message": "minor fixes & CommandType refactor 2\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f62c1707a5ebc61f5604e78a2fe4928b5dffd738", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/f62c1707a5ebc61f5604e78a2fe4928b5dffd738", "committedDate": "2020-08-28T15:40:59Z", "message": "minor fixes on type handling\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d76efb78704603f977a22bff7f1f02d0bd1cc6e", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/1d76efb78704603f977a22bff7f1f02d0bd1cc6e", "committedDate": "2020-08-28T15:40:59Z", "message": "add generic read command constructor for ComfoAirCommand\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238c3082cbc8b82544c163ce8d6766a14d266a7b", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/238c3082cbc8b82544c163ce8d6766a14d266a7b", "committedDate": "2020-08-28T15:40:59Z", "message": "make fields in enum final\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06afe5dcfa09340416e29579b2cbd645344d63ca", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/06afe5dcfa09340416e29579b2cbd645344d63ca", "committedDate": "2020-08-28T15:40:59Z", "message": "Move option channels to properties & add dynamic channels\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "916a4efc40f88b585aeb801a52a2dfe867523583", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/916a4efc40f88b585aeb801a52a2dfe867523583", "committedDate": "2020-08-28T15:40:59Z", "message": "Fix state handling for commandTypes without reply_data_bits\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b450a1ef13b8d60fe337684c36ad045d54473dcb", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/b450a1ef13b8d60fe337684c36ad045d54473dcb", "committedDate": "2020-08-28T15:40:59Z", "message": "make extended error channels advanced\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f1b81ae870ed8fd06f566ec0c0994d682b541c9", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/2f1b81ae870ed8fd06f566ec0c0994d682b541c9", "committedDate": "2020-08-28T15:40:59Z", "message": "rename properties\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c258ef16d466ad59b50f3c261930a3d6a48e6fa", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/5c258ef16d466ad59b50f3c261930a3d6a48e6fa", "committedDate": "2020-08-28T15:40:59Z", "message": "cleanup\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adb99d4d849db32798ce0e8cdd8d01f07fa02604", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/adb99d4d849db32798ce0e8cdd8d01f07fa02604", "committedDate": "2020-08-28T15:40:59Z", "message": "fix resets handling\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bb2ec111b92151fe79b482f78a10f45f11b0d75", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/7bb2ec111b92151fe79b482f78a10f45f11b0d75", "committedDate": "2020-08-28T15:40:59Z", "message": "fix resets handling 2\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba5e2fea26477e5e8d0c766414f0155ff8b49d3", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/aba5e2fea26477e5e8d0c766414f0155ff8b49d3", "committedDate": "2020-08-28T15:40:59Z", "message": "re-group analog channels\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2fbf9d521cde6c5852901cfee049b1207abfdbd", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/c2fbf9d521cde6c5852901cfee049b1207abfdbd", "committedDate": "2020-08-28T15:40:59Z", "message": "address various review comments\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e17a3750cee47505a74d7fda6f61330630abca90", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/e17a3750cee47505a74d7fda6f61330630abca90", "committedDate": "2020-08-28T15:40:59Z", "message": "refactor connector\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>\n\nfix connector\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09087d91b7b7b9dbe65301348a952a567e61722f", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/09087d91b7b7b9dbe65301348a952a567e61722f", "committedDate": "2020-08-28T15:40:59Z", "message": "minor fixes\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a364f8f017f6f6823a28546ca7f51c27f62257", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/64a364f8f017f6f6823a28546ca7f51c27f62257", "committedDate": "2020-08-28T15:40:59Z", "message": "refactor error channels\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b25dd0022e122cd614c3c6ae7b56b0f4ad3eae7", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/2b25dd0022e122cd614c3c6ae7b56b0f4ad3eae7", "committedDate": "2020-08-28T15:40:59Z", "message": "fix channel names\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>\n\nfix channel names 2\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a3398913da0a4388eb3693b8e5a3eee9bac7e68", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/5a3398913da0a4388eb3693b8e5a3eee9bac7e68", "committedDate": "2020-08-28T15:40:59Z", "message": "handle interrupts\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "191b5327eb300ea60e174bf895f1a0c2b63c4061", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/191b5327eb300ea60e174bf895f1a0c2b63c4061", "committedDate": "2020-08-28T15:40:59Z", "message": "fix formatting\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6830ecac016204e8246223d85892c9ef9c780906", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/6830ecac016204e8246223d85892c9ef9c780906", "committedDate": "2020-08-28T15:40:59Z", "message": "update pom.xml\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ab4c72ecaea3839622e8b7c04fd80e56dda92d5", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/4ab4c72ecaea3839622e8b7c04fd80e56dda92d5", "committedDate": "2020-08-28T15:40:59Z", "message": "review changes\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0c78b2c91f2941d68e9106d74be3cc940b523c9", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/f0c78b2c91f2941d68e9106d74be3cc940b523c9", "committedDate": "2020-08-28T15:40:59Z", "message": "more review changes\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27955d5e3267615dadf0fffa610558c987452015", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/27955d5e3267615dadf0fffa610558c987452015", "committedDate": "2020-08-28T15:40:59Z", "message": "add unit to refresh interval\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cece00f3118eabf00a95ff8e3366648686ebd8b", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/2cece00f3118eabf00a95ff8e3366648686ebd8b", "committedDate": "2020-08-28T15:40:59Z", "message": "improve ThingStatus messages\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c67a59f34153da2b2746cf3f9c54ca6d921dfb5", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/2c67a59f34153da2b2746cf3f9c54ca6d921dfb5", "committedDate": "2020-08-28T15:40:59Z", "message": "change item-types of reset and add command descriptions\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b12f4505dff23ede23aa612d6ff010b861819e68", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/b12f4505dff23ede23aa612d6ff010b861819e68", "committedDate": "2020-08-28T15:41:00Z", "message": "adjust exception handling on connection\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d47bf237a3e18de16bb65c4d7624fb372399401", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/3d47bf237a3e18de16bb65c4d7624fb372399401", "committedDate": "2020-08-28T15:41:00Z", "message": "fix checkstyle warnings\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae48644d4f346925a1b9333cedb878f45b819167", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/ae48644d4f346925a1b9333cedb878f45b819167", "committedDate": "2020-08-28T15:41:00Z", "message": "update pom.xml\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "482b038e5e22039dcffb59e993610233c9803ebc", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/482b038e5e22039dcffb59e993610233c9803ebc", "committedDate": "2020-08-15T20:37:43Z", "message": "fix checkstyle warnings\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}, "afterCommit": {"oid": "ae48644d4f346925a1b9333cedb878f45b819167", "author": {"user": {"login": "boehan", "name": "Hans B\u00f6hm"}}, "url": "https://github.com/openhab/openhab-addons/commit/ae48644d4f346925a1b9333cedb878f45b819167", "committedDate": "2020-08-28T15:41:00Z", "message": "update pom.xml\n\nSigned-off-by: Hans B\u00f6hm <h.boehm@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTkwMjQz", "url": "https://github.com/openhab/openhab-addons/pull/7052#pullrequestreview-478990243", "createdAt": "2020-08-31T22:12:36Z", "commit": {"oid": "ae48644d4f346925a1b9333cedb878f45b819167"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1507, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}