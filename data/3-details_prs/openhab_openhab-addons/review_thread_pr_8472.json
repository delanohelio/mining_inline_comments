{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2OTU1NTE4", "number": 8472, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo0NDoxM1rOEjcfZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1Mjo1N1rOEjcpzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjAyNDA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.gree/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo0NDoxM1rOHRzABA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxNDoyM1rOHSBNuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMzQyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | currentTemperature | Number:Temperature | Displays the current room temperature (if supported by unit, otherwise NaN).                                                   |\n          \n          \n            \n            | currentTemperature | Number:Temperature | Displays the current room temperature (if supported by unit, otherwise NaN).               |", "url": "https://github.com/openhab/openhab-addons/pull/8472#discussion_r488423428", "createdAt": "2020-09-15T06:44:13Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.gree/README.md", "diffHunk": "@@ -41,7 +41,7 @@ The following channels are supported for fans:\n |                    |           | Mode can be one of auto/cool/eco/dry/fan/heat or on/off                                           |\n |                    |           | Check the Air Conditioner's operating manual for supported modes.                                 |\n | temperature        | Number:Temperature | Sets the desired room temperature.                                                       |\n-| currentTemperature | Number:Temperature | Displays the current room temperature.                                                   |\n+| currentTemperature | Number:Temperature | Displays the current room temperature (if supported by unit, otherwise NaN).                                                   |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d30d347101582ef883fb4c4689425e7af6ccf199"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1NjMxMg==", "bodyText": "chaged", "url": "https://github.com/openhab/openhab-addons/pull/8472#discussion_r488656312", "createdAt": "2020-09-15T13:14:23Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.gree/README.md", "diffHunk": "@@ -41,7 +41,7 @@ The following channels are supported for fans:\n |                    |           | Mode can be one of auto/cool/eco/dry/fan/heat or on/off                                           |\n |                    |           | Check the Air Conditioner's operating manual for supported modes.                                 |\n | temperature        | Number:Temperature | Sets the desired room temperature.                                                       |\n-| currentTemperature | Number:Temperature | Displays the current room temperature.                                                   |\n+| currentTemperature | Number:Temperature | Displays the current room temperature (if supported by unit, otherwise NaN).                                                   |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMzQyOA=="}, "originalCommit": {"oid": "d30d347101582ef883fb4c4689425e7af6ccf199"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjA0NjIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.gree/src/main/java/org/openhab/binding/gree/internal/handler/GreeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1MTozMVrOHRzNtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyNzozM1rOHSB0WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNjkzMw==", "bodyText": "Just hope it will never gets 40 degrees C \ud83d\ude09", "url": "https://github.com/openhab/openhab-addons/pull/8472#discussion_r488426933", "createdAt": "2020-09-15T06:51:31Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.gree/src/main/java/org/openhab/binding/gree/internal/handler/GreeHandler.java", "diffHunk": "@@ -519,8 +545,11 @@ private void publishChannel(ChannelUID channelUID) {\n \n     private @Nullable State updateCurrentTemp() throws GreeException {\n         if (device.hasStatusValChanged(GREE_PROP_CURRENT_TEMP_SENSOR)) {\n-            return new DecimalType(device.getIntStatusVal(GREE_PROP_CURRENT_TEMP_SENSOR) + INTERNAL_TEMP_SENSOR_OFFSET\n-                    + config.currentTemperatureOffset.doubleValue());\n+            double temp = device.getIntStatusVal(GREE_PROP_CURRENT_TEMP_SENSOR);\n+            return temp != 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d30d347101582ef883fb4c4689425e7af6ccf199"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1NzA2Mw==", "bodyText": "The reported temp can never be 0. This would be -40\u00b0C, I think there is some room for the implementation :-)", "url": "https://github.com/openhab/openhab-addons/pull/8472#discussion_r488657063", "createdAt": "2020-09-15T13:15:18Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.gree/src/main/java/org/openhab/binding/gree/internal/handler/GreeHandler.java", "diffHunk": "@@ -519,8 +545,11 @@ private void publishChannel(ChannelUID channelUID) {\n \n     private @Nullable State updateCurrentTemp() throws GreeException {\n         if (device.hasStatusValChanged(GREE_PROP_CURRENT_TEMP_SENSOR)) {\n-            return new DecimalType(device.getIntStatusVal(GREE_PROP_CURRENT_TEMP_SENSOR) + INTERNAL_TEMP_SENSOR_OFFSET\n-                    + config.currentTemperatureOffset.doubleValue());\n+            double temp = device.getIntStatusVal(GREE_PROP_CURRENT_TEMP_SENSOR);\n+            return temp != 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNjkzMw=="}, "originalCommit": {"oid": "d30d347101582ef883fb4c4689425e7af6ccf199"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NjIwMA==", "bodyText": "Ah you're right I read that the wrong way..", "url": "https://github.com/openhab/openhab-addons/pull/8472#discussion_r488666200", "createdAt": "2020-09-15T13:27:33Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.gree/src/main/java/org/openhab/binding/gree/internal/handler/GreeHandler.java", "diffHunk": "@@ -519,8 +545,11 @@ private void publishChannel(ChannelUID channelUID) {\n \n     private @Nullable State updateCurrentTemp() throws GreeException {\n         if (device.hasStatusValChanged(GREE_PROP_CURRENT_TEMP_SENSOR)) {\n-            return new DecimalType(device.getIntStatusVal(GREE_PROP_CURRENT_TEMP_SENSOR) + INTERNAL_TEMP_SENSOR_OFFSET\n-                    + config.currentTemperatureOffset.doubleValue());\n+            double temp = device.getIntStatusVal(GREE_PROP_CURRENT_TEMP_SENSOR);\n+            return temp != 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNjkzMw=="}, "originalCommit": {"oid": "d30d347101582ef883fb4c4689425e7af6ccf199"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjA1MDY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.gree/src/main/java/org/openhab/binding/gree/internal/handler/GreeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo1Mjo1N1rOHRzQig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDowMDo1M1rOHSDZVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNzY1OA==", "bodyText": "Does it make sense to retry 3 times in a row without some wait time? (Not that add sleep would be a solution though...)", "url": "https://github.com/openhab/openhab-addons/pull/8472#discussion_r488427658", "createdAt": "2020-09-15T06:52:57Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.gree/src/main/java/org/openhab/binding/gree/internal/handler/GreeHandler.java", "diffHunk": "@@ -138,62 +140,78 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             String channelId = channelUID.getIdWithoutGroup();\n             logger.debug(\"{}: Handle command {} for channel {}, command class {}\", thingId, command, channelId,\n                     command.getClass());\n-            try {\n-                DatagramSocket socket = clientSocket.get();\n-                switch (channelId) {\n-                    case MODE_CHANNEL:\n-                        handleModeCommand(socket, command);\n-                        break;\n-                    case POWER_CHANNEL:\n-                        device.setDevicePower(socket, getOnOff(command));\n-                        break;\n-                    case TURBO_CHANNEL:\n-                        device.setDeviceTurbo(socket, getOnOff(command));\n-                        break;\n-                    case LIGHT_CHANNEL:\n-                        device.setDeviceLight(socket, getOnOff(command));\n-                        break;\n-                    case TARGET_TEMP_CHANNEL:\n-                        // Set value, read back effective one and update channel\n-                        // e.g. 22.5C will result in 22.0, because the AC doesn't support half-steps for C\n-                        device.setDeviceTempSet(socket, convertTemp(command));\n-                        break;\n-                    case SWINGUD_CHANNEL:\n-                        device.setDeviceSwingUpDown(socket, getNumber(command));\n-                        break;\n-                    case SWINGLR_CHANNEL:\n-                        device.setDeviceSwingLeftRight(socket, getNumber(command));\n-                        break;\n-                    case WINDSPEED_CHANNEL:\n-                        device.setDeviceWindspeed(socket, getNumber(command));\n-                        break;\n-                    case QUIET_CHANNEL:\n-                        handleQuietCommand(socket, command);\n-                        break;\n-                    case AIR_CHANNEL:\n-                        device.setDeviceAir(socket, getOnOff(command));\n-                        break;\n-                    case DRY_CHANNEL:\n-                        device.setDeviceDry(socket, getOnOff(command));\n-                        break;\n-                    case HEALTH_CHANNEL:\n-                        device.setDeviceHealth(socket, getOnOff(command));\n-                        break;\n-                    case PWRSAV_CHANNEL:\n-                        device.setDevicePwrSaving(socket, getOnOff(command));\n-                        break;\n+\n+            boolean retry = false;\n+            do {\n+                try {\n+                    retry = false;\n+                    sendRequest(channelId, command);\n+                    // force refresh on next status refresh cycle\n+                    forceRefresh = true;\n+                    apiRetries = 0;\n+                } catch (IllegalArgumentException e) {\n+                    logInfo(\"command.invarg\", command, channelId);\n+                } catch (GreeException e) {\n+                    apiRetries++;\n+                    if (apiRetries >= MAX_API_RETRIES) {\n+                        String message = logInfo(\n+                                messages.get(\"command.exception\", command, channelId) + \": \" + e.getMessage());\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, message);\n+                    } else {\n+                        retry = true;\n+                        logger.debug(\"{}: Command {} failed for channel {}, retry\", thingId, command, channelId);\n+                    }\n+                } catch (RuntimeException e) {\n+                    logger.warn(\"{}: {}\", thingId, messages.get(\"command.exception\", command, channelId), e);\n                 }\n+            } while (retry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d30d347101582ef883fb4c4689425e7af6ccf199"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY5MjA1Mw==", "bodyText": "There is no delay in submitting commands: 3 retries in a row\nonly the status poll has delays, which means \"unit was not available over the last 3 poll cycles\"\nI think that makes sense. Nevertheless I changed the code to use a local variable rather than the instance variable used to count the status poll retries.", "url": "https://github.com/openhab/openhab-addons/pull/8472#discussion_r488692053", "createdAt": "2020-09-15T14:00:53Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.gree/src/main/java/org/openhab/binding/gree/internal/handler/GreeHandler.java", "diffHunk": "@@ -138,62 +140,78 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             String channelId = channelUID.getIdWithoutGroup();\n             logger.debug(\"{}: Handle command {} for channel {}, command class {}\", thingId, command, channelId,\n                     command.getClass());\n-            try {\n-                DatagramSocket socket = clientSocket.get();\n-                switch (channelId) {\n-                    case MODE_CHANNEL:\n-                        handleModeCommand(socket, command);\n-                        break;\n-                    case POWER_CHANNEL:\n-                        device.setDevicePower(socket, getOnOff(command));\n-                        break;\n-                    case TURBO_CHANNEL:\n-                        device.setDeviceTurbo(socket, getOnOff(command));\n-                        break;\n-                    case LIGHT_CHANNEL:\n-                        device.setDeviceLight(socket, getOnOff(command));\n-                        break;\n-                    case TARGET_TEMP_CHANNEL:\n-                        // Set value, read back effective one and update channel\n-                        // e.g. 22.5C will result in 22.0, because the AC doesn't support half-steps for C\n-                        device.setDeviceTempSet(socket, convertTemp(command));\n-                        break;\n-                    case SWINGUD_CHANNEL:\n-                        device.setDeviceSwingUpDown(socket, getNumber(command));\n-                        break;\n-                    case SWINGLR_CHANNEL:\n-                        device.setDeviceSwingLeftRight(socket, getNumber(command));\n-                        break;\n-                    case WINDSPEED_CHANNEL:\n-                        device.setDeviceWindspeed(socket, getNumber(command));\n-                        break;\n-                    case QUIET_CHANNEL:\n-                        handleQuietCommand(socket, command);\n-                        break;\n-                    case AIR_CHANNEL:\n-                        device.setDeviceAir(socket, getOnOff(command));\n-                        break;\n-                    case DRY_CHANNEL:\n-                        device.setDeviceDry(socket, getOnOff(command));\n-                        break;\n-                    case HEALTH_CHANNEL:\n-                        device.setDeviceHealth(socket, getOnOff(command));\n-                        break;\n-                    case PWRSAV_CHANNEL:\n-                        device.setDevicePwrSaving(socket, getOnOff(command));\n-                        break;\n+\n+            boolean retry = false;\n+            do {\n+                try {\n+                    retry = false;\n+                    sendRequest(channelId, command);\n+                    // force refresh on next status refresh cycle\n+                    forceRefresh = true;\n+                    apiRetries = 0;\n+                } catch (IllegalArgumentException e) {\n+                    logInfo(\"command.invarg\", command, channelId);\n+                } catch (GreeException e) {\n+                    apiRetries++;\n+                    if (apiRetries >= MAX_API_RETRIES) {\n+                        String message = logInfo(\n+                                messages.get(\"command.exception\", command, channelId) + \": \" + e.getMessage());\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, message);\n+                    } else {\n+                        retry = true;\n+                        logger.debug(\"{}: Command {} failed for channel {}, retry\", thingId, command, channelId);\n+                    }\n+                } catch (RuntimeException e) {\n+                    logger.warn(\"{}: {}\", thingId, messages.get(\"command.exception\", command, channelId), e);\n                 }\n+            } while (retry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNzY1OA=="}, "originalCommit": {"oid": "d30d347101582ef883fb4c4689425e7af6ccf199"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4502, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}