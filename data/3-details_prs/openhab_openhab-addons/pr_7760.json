{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzQ5NTIz", "number": 7760, "title": "[mqtt.homie] Improve Homie discovery time", "bodyText": "As expressed in #5963 (comment), the best way to improve the Homie discovery time was to decrease the timeout values, while also resetting the timer everytime a new value is received. This are the changes done:\n\nReschedule the batch processing service when a new value is added. This makes the service more reliable, because the run function will only be called after the last message is received, and it doesn't matter how long it takes, as long as there is a constant flow of messages.\nMake the accept function synchronized, so that no new schedules are created when multiple threads are involved.\nDecrease Homie device timeout values to smaller ones. I am 'ok' if you want to increase them, but in my tests they have work great, because MQTT messages are delivered within milliseconds. Having a one second delay between two MQTT messages seems safe \ud83d\ude09\n\nAs the DelayedBatchProccesing class is also used in the Home Assistant extension, I would really like to hear @jochen314's opinion about the proposed changes \ud83d\udc4d A review is also requested for @cpmeister, @J-N-K and @cweitkamp.\nCloses #5958\nSigned-off-by: Aitor Iturrioz riturrioz@gmail.com", "createdAt": "2020-05-24T01:31:54Z", "url": "https://github.com/openhab/openhab-addons/pull/7760", "merged": true, "mergeCommit": {"oid": "632c94792916974cfbf8818d3a925e4656134a94"}, "closed": true, "closedAt": "2020-05-26T21:18:17Z", "author": {"login": "bodiroga"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckQrPYAH2gAyNDIyMzQ5NTIzOmFkMzljNWE4OGI0MDIyZTg4Zjg0ODYwYjY5NDIyNTRmOTU2MDVkMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclKMbFAFqTQxODYzMTcyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ad39c5a88b4022e88f84860b6942254f95605d31", "author": {"user": {"login": "bodiroga", "name": "Aitor Iturrioz"}}, "url": "https://github.com/openhab/openhab-addons/commit/ad39c5a88b4022e88f84860b6942254f95605d31", "committedDate": "2020-05-24T00:53:04Z", "message": "Improve Homie discovery time\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "448fabecb685244507c50f6682d168a6022088cc", "author": {"user": {"login": "bodiroga", "name": "Aitor Iturrioz"}}, "url": "https://github.com/openhab/openhab-addons/commit/448fabecb685244507c50f6682d168a6022088cc", "committedDate": "2020-05-24T01:36:29Z", "message": "Fix javadoc\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MzIyMTA5", "url": "https://github.com/openhab/openhab-addons/pull/7760#pullrequestreview-417322109", "createdAt": "2020-05-24T02:25:48Z", "commit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjoyNTo0OFrOGZsSNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjoyNTo0OFrOGZsSNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MzE0MQ==", "bodyText": "Do you expect this method to be called concurrently?", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r429593141", "createdAt": "2020-05-24T02:25:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +56,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Mzg4MzQ2", "url": "https://github.com/openhab/openhab-addons/pull/7760#pullrequestreview-417388346", "createdAt": "2020-05-24T20:22:57Z", "commit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMDoyMjo1OFrOGZxEyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMDoyMjo1OFrOGZxEyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MTYyNA==", "bodyText": "I can see a lot of potential concurrency issues around reassigning the future which mostly has to do with how this interacts with the other methods that cancel the future. I'm going to suggest a couple of changes which will make all of this thread-safe.\nFirst, create a utility method for cancelling the future:\nprivate static void cancel(@Nullable Future<?> future){\n    Future<?> future = this.future;\n    if(future != null){\n        future.cancel(false);\n    }\n}\n\nYou will notice I don't bother checking if it is done or not since nothing bad will happen if you try to cancel an already finished future.\nThen you will want to change\nprotected @Nullable ScheduledFuture<?> future;\nto\nprotected final AtomicReference<@Nullable Future<?>> futureRef = new AtomicReference<>().\nThen when you just want to cancel the future you call cancel(futureRef.getAndSet(null))\nAnd when you want to schedule the future while canceling the old one you call cancel(futureRef.getAndSet(executor.schedule(this::run, delay, TimeUnit.MILLISECONDS)));\nA few of the other methods would also change slightly.\n    /**\n     * Return true if there is a delayed processing going on.\n     */\n    public boolean isArmed() {\n        ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n        return scheduledFuture != null && !scheduledFuture.isDone();\n    }\n\nDoing all this will allow you to safely remove the synchronized you added to accept as well as making all sure all of your other code is interacting with your future in an atomic way. I think using an AtomicReference here is more performant and less error prone than trying to basically synchronize every method in this class.", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r429671624", "createdAt": "2020-05-24T20:22:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +56,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {\n         queue.add(t);\n         final ScheduledFuture<?> scheduledFuture = this.future;\n-        if (scheduledFuture == null || scheduledFuture.isDone()) {\n-            this.future = executor.schedule(this::run, delay, TimeUnit.MILLISECONDS);\n+        if (scheduledFuture != null && !scheduledFuture.isDone()) {\n+            scheduledFuture.cancel(true);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448fabecb685244507c50f6682d168a6022088cc"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f3e2e9f9c5af4e6eb3d25159ad311459a0657f0", "author": {"user": {"login": "bodiroga", "name": "Aitor Iturrioz"}}, "url": "https://github.com/openhab/openhab-addons/commit/3f3e2e9f9c5af4e6eb3d25159ad311459a0657f0", "committedDate": "2020-05-26T17:06:36Z", "message": "Replace 'synchronized' with AtomicReference\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>"}, "afterCommit": {"oid": "448fabecb685244507c50f6682d168a6022088cc", "author": {"user": {"login": "bodiroga", "name": "Aitor Iturrioz"}}, "url": "https://github.com/openhab/openhab-addons/commit/448fabecb685244507c50f6682d168a6022088cc", "committedDate": "2020-05-24T01:36:29Z", "message": "Fix javadoc\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f", "author": {"user": {"login": "bodiroga", "name": "Aitor Iturrioz"}}, "url": "https://github.com/openhab/openhab-addons/commit/9bf26c28ed49750d6738fe1a122e9f2119b2227f", "committedDate": "2020-05-26T17:30:01Z", "message": "Replace 'synchronized' with AtomicReference\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTkyMDI4", "url": "https://github.com/openhab/openhab-addons/pull/7760#pullrequestreview-418592028", "createdAt": "2020-05-26T19:04:00Z", "commit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNDowMFrOGasPLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTowNzo1MVrOGasXRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MDk0MA==", "bodyText": "The AtomicReference handles your synchronization so you can remove the synchronized here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                synchronized public void accept(T t) {\n          \n          \n            \n                public void accept(T t) {", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430640940", "createdAt": "2020-05-26T19:04:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +57,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MTQ1NA==", "bodyText": "The cancel is already handled in the next statement. So you can remove this logic.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n          \n          \n            \n                    if (scheduledFuture != null && !scheduledFuture.isDone()) {\n          \n          \n            \n                        cancel(futureRef.getAndSet(null));\n          \n          \n            \n                    }", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430641454", "createdAt": "2020-05-26T19:05:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -56,18 +57,19 @@ public DelayedBatchProcessing(int delay, Consumer<List<T>> consumer, ScheduledEx\n     }\n \n     /**\n-     * Add new object to the batch process list. If the list was empty, the delay timer\n-     * is armed and all successive objects are accumulated from here on.\n+     * Add new object to the batch process list. Every time a new object is received,\n+     * the delay timer is rescheduled.\n      *\n      * @param t An object\n      */\n     @Override\n-    public void accept(T t) {\n+    synchronized public void accept(T t) {\n         queue.add(t);\n-        final ScheduledFuture<?> scheduledFuture = this.future;\n-        if (scheduledFuture == null || scheduledFuture.isDone()) {\n-            this.future = executor.schedule(this::run, delay, TimeUnit.MILLISECONDS);\n+        final ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n+        if (scheduledFuture != null && !scheduledFuture.isDone()) {\n+            cancel(futureRef.getAndSet(null));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MjQ0MA==", "bodyText": "You can replace all this with just cancel(futureRef.getAndSet(null));", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430642440", "createdAt": "2020-05-26T19:06:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -76,9 +78,9 @@ public void accept(T t) {\n      * @return A list of accumulated objects\n      */\n     public List<T> join() {\n-        ScheduledFuture<?> scheduledFuture = this.future;\n+        ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n         if (scheduledFuture != null && !scheduledFuture.isDone()) {\n-            scheduledFuture.cancel(false);\n+            cancel(futureRef.getAndSet(null));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MzAxMw==", "bodyText": "Same here, just replace all this with cancel(futureRef.getAndSet(null));.", "url": "https://github.com/openhab/openhab-addons/pull/7760#discussion_r430643013", "createdAt": "2020-05-26T19:07:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/tools/DelayedBatchProcessing.java", "diffHunk": "@@ -92,17 +94,17 @@ public void accept(T t) {\n      * Return true if there is a delayed processing going on.\n      */\n     public boolean isArmed() {\n-        ScheduledFuture<?> scheduledFuture = this.future;\n+        ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n         return scheduledFuture != null && !scheduledFuture.isDone();\n     }\n \n     /**\n      * Deliver queued items now to the target consumer.\n      */\n     public void forceProcessNow() {\n-        ScheduledFuture<?> scheduledFuture = this.future;\n+        ScheduledFuture<?> scheduledFuture = this.futureRef.get();\n         if (scheduledFuture != null && !scheduledFuture.isDone()) {\n-            scheduledFuture.cancel(false);\n+            cancel(futureRef.getAndSet(null));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf26c28ed49750d6738fe1a122e9f2119b2227f"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59f4f160a4edbd364a69fdb380399eba0a31642a", "author": {"user": {"login": "bodiroga", "name": "Aitor Iturrioz"}}, "url": "https://github.com/openhab/openhab-addons/commit/59f4f160a4edbd364a69fdb380399eba0a31642a", "committedDate": "2020-05-26T19:42:01Z", "message": "Address review comments\n\nSigned-off-by: Aitor Iturrioz <riturrioz@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjMxNzI0", "url": "https://github.com/openhab/openhab-addons/pull/7760#pullrequestreview-418631724", "createdAt": "2020-05-26T19:53:54Z", "commit": {"oid": "59f4f160a4edbd364a69fdb380399eba0a31642a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 676, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}