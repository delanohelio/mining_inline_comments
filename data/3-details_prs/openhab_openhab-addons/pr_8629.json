{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTAyOTk2", "number": 8629, "title": "[boschshc] Initial contribution - Bindings for Bosch Smart Home devices", "bodyText": "Hi there,\n@stefan-kaestle started a fork of your repository in November 2019 to implement the bindings for Bosch Smart Home devices which are pretty popular in Germany. @GerdZanker and I joined earlier this year.\nTogether we managed to built a good base for a first release, which already has the base structure to setup and communicate with the Bosch Smart Home controller and supports a lot of devices:\n\nBosch In-Wall switches\nBosch Smart Plugs (use \"in-wall-switch\" thing too).\nBosch TwinGuard smoke detector\nBosch Window/Door contacts\nBosch Motion Detector\nBosch Shutter Control in-wall\nBosch Thermostat\nBosch Climate Control\n\nBefore we continue our development we'd like to do a first public release to gather user feedback and your feedback as openHAB maintainers :)\nWe already found some fellow openHAB users who tested pre-release versions and apart from some minor issues which we fixed, they were already quite content with the result (and had some ideas for enhancements for the next version of course :) ).\nWe tried to get some upfront feedback about our code base from one of your maintainers, but got no answer, so we thought we just create a pull request to discuss any further issues here: https://community.openhab.org/t/towards-merging-the-new-bosch-shc-binding/101952\nYou can find the fork here: https://github.com/stefan-kaestle/openhab2-addons We already tried to sign-off each commit and follow your coding guidelines (https://www.openhab.org/docs/developer/development/guidelines.html), but might have missed some points as it is our first contribution to your project.\nWe have a thread in the community forum: https://community.openhab.org/t/will-there-be-a-bosch-smart-home-binding\nThe last pre-release is up-to-date apart from some file moving: https://github.com/stefan-kaestle/openhab2-addons/releases/tag/v1.0-beta.1\nFeel free to ask any questions and let us know what work needs to be done before our work can be merged. Thanks for your help and for your great open-source Smart Home platform!\nThis pull request continues the first merge of our binding from the previous pull request #8371 Due to openHAB 3 we rebased our binding on the new code base.", "createdAt": "2020-10-01T19:40:19Z", "url": "https://github.com/openhab/openhab-addons/pull/8629", "merged": true, "mergeCommit": {"oid": "2a5bdf3b47215d4c27a273d3a4db1459a174d8bf"}, "closed": true, "closedAt": "2021-01-17T21:20:21Z", "author": {"login": "coeing"}, "timelineItems": {"totalCount": 225, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdt4wc7AH2gAyNDk2NTAyOTk2OmUyMmI3MzA2MTI4ZWQ2NzU0NmRiMmE5ODNjMDhkZGVkM2QzN2E5ODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdw1n_dgFqTU2OTk3MzI0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e22b7306128ed67546db2a983c08dded3d37a984", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/e22b7306128ed67546db2a983c08dded3d37a984", "committedDate": "2021-01-07T18:51:26Z", "message": "#14 Move nested class AbortLongPolling to end of LongPolling class\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf2f8e7767326f004afaf46ac0b1fa67c5b467c1", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/bf2f8e7767326f004afaf46ac0b1fa67c5b467c1", "committedDate": "2021-01-07T18:51:26Z", "message": "#14 Make gson instance static final in BoschHttpClient\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8db66fd8253e04ed006e37f349e71ed02fa8af59", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/8db66fd8253e04ed006e37f349e71ed02fa8af59", "committedDate": "2021-01-07T18:51:26Z", "message": "#14 Rename gson to GSON and make it static final in BoschSHCHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd310d9251f8b4e6b4ca58667a7ecaed1f109c83", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/cd310d9251f8b4e6b4ca58667a7ecaed1f109c83", "committedDate": "2021-01-07T18:51:26Z", "message": "#14 Remove @Nullable annotations from GSON-created objects\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5467e0567ec8736ff3c2424777ea52935ac144c7", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/5467e0567ec8736ff3c2424777ea52935ac144c7", "committedDate": "2021-01-07T18:51:26Z", "message": "#14 Add causing exception to ExecutionException in BoschHttpClient.sendRequest\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee0528b033c8710100e17110565c6ea4f9abd457", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ee0528b033c8710100e17110565c6ea4f9abd457", "committedDate": "2021-01-07T18:51:26Z", "message": "#14 Add JsonSyntaxException to definition of processUpdate in BoschTwinguardHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44919842a3dfc4761e0f9887bbd0b0b26509f573", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/44919842a3dfc4761e0f9887bbd0b0b26509f573", "committedDate": "2021-01-07T18:51:26Z", "message": "fixed keyStore creation\n\nMoved PEM files into expected folder according to package\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "713184e9fa7f5b705c817bd5c3cd1c2c02d87f45", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/713184e9fa7f5b705c817bd5c3cd1c2c02d87f45", "committedDate": "2021-01-07T18:51:26Z", "message": "moved final fields above non-final fields\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "066487456e7bfd0fbfcf5afe3334c8c5740e56d4", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/066487456e7bfd0fbfcf5afe3334c8c5740e56d4", "committedDate": "2021-01-07T18:51:27Z", "message": "updated copyright year in header by executing mvn license:format\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b7cc8eb7509684fdf39e23084e4ab1988554f2c", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/1b7cc8eb7509684fdf39e23084e4ab1988554f2c", "committedDate": "2021-01-07T17:58:53Z", "message": "updated copyright year in header by executing mvn license:format\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}, "afterCommit": {"oid": "066487456e7bfd0fbfcf5afe3334c8c5740e56d4", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/066487456e7bfd0fbfcf5afe3334c8c5740e56d4", "committedDate": "2021-01-07T18:51:27Z", "message": "updated copyright year in header by executing mvn license:format\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfbf9824fdc747a5c48fe051e1eb001df477a15d", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/dfbf9824fdc747a5c48fe051e1eb001df477a15d", "committedDate": "2021-01-07T19:05:06Z", "message": "fixed last two pending warnings\n\nadded back the removed @Nullable annotation in sendRequest()\nreplaced deprecated SslContextFactory constructor call\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTY0NDgw", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-563964480", "createdAt": "2021-01-08T02:34:10Z", "commit": {"oid": "dfbf9824fdc747a5c48fe051e1eb001df477a15d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMjozNDoxMFrOIQDlIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMjozNDoxMFrOIQDlIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcwNjc4Nw==", "bodyText": "Is there a documentation which information of the dependencies should go into the NOTICE file?\n\nNot that I'm aware of, but you can look at other bindings as an example.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553706787", "createdAt": "2021-01-08T02:34:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b6baaed4c9a74cd8a6c9bf96bf8a7fa5dd4f0e7", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/5b6baaed4c9a74cd8a6c9bf96bf8a7fa5dd4f0e7", "committedDate": "2021-01-09T17:14:25Z", "message": "added Bouncy Castle third-party license info into NOTICE\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc0364600b0085a234b1b0af31f2cf9c0fe3e510", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/dc0364600b0085a234b1b0af31f2cf9c0fe3e510", "committedDate": "2021-01-09T17:18:32Z", "message": "changed Bouncy Castle version to same version as  currently used in org.openhab.core.io.jetty.certificate to later reduce download size\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a29068d86d89bdb6b82daa053a690f6410e63ade", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/a29068d86d89bdb6b82daa053a690f6410e63ade", "committedDate": "2021-01-10T22:54:14Z", "message": "#62 Correctly check if long poll response is valid\n\nGSON will not return null if there is no \"result\" field, but will just set the \"result\" member to null.\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ed36092b6bc6d147cc06094bc6578ea1cc717bcf", "committedDate": "2021-01-10T22:54:14Z", "message": "Add @NonNullByDefault annotation to LongPollResultTest class and fix method name\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NjA3NDkz", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-567607493", "createdAt": "2021-01-13T20:49:12Z", "commit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo0OToxMlrOITBifA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo0OToxMlrOITBifA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA==", "bodyText": "After switch the dependencies to provided you would then need to update your feature.xml to let the osgi system know where it can find those dependencies. This should solve the error your are seeing in the build.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<feature>openhab-runtime-base</feature>\n          \n          \n            \n            \t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>\n          \n          \n            \n            \t\t<feature>openhab-runtime-base</feature>\n          \n          \n            \n            \t\t<bundle dependency=\"true\">mvn:org.bouncycastle/bcpkix-jdk15on/1.52</bundle>\n          \n          \n            \n            \t\t<bundle dependency=\"true\">mvn:org.bouncycastle/bcprov-jdk15on/1.52</bundle>\n          \n          \n            \n            \t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r556819068", "createdAt": "2021-01-13T20:49:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de759947d267c5a7cc57dc103a73d4dfc9c33cca", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/de759947d267c5a7cc57dc103a73d4dfc9c33cca", "committedDate": "2021-01-16T18:53:49Z", "message": "added first unittests for BoschSslUtil class\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab17362f872e2e1c8d8677fcd0a32d0ac54af610", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/ab17362f872e2e1c8d8677fcd0a32d0ac54af610", "committedDate": "2021-01-16T18:53:49Z", "message": "added next unittests for BoschHttpClient class\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0136cf0d81ae315395b0758b6dd8bf007cf77806", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/0136cf0d81ae315395b0758b6dd8bf007cf77806", "committedDate": "2021-01-16T18:53:49Z", "message": "#55 replaced the password with a fixed one\n\nThe changeable SHC system password for the keystore is replaced by a static string in the code.\nThe keyStore name is now based on SHC ipAddress to support multiple SmartHomeControllers.\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5OTczMjQz", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-569973243", "createdAt": "2021-01-16T22:54:15Z", "commit": {"oid": "0136cf0d81ae315395b0758b6dd8bf007cf77806"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02d79d8f64a992a04e0dad0ffa0848b4ef82db8", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/e02d79d8f64a992a04e0dad0ffa0848b4ef82db8", "committedDate": "2021-01-07T18:51:11Z", "message": "#45 Ran mvn spotless:apply\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0881885a10173ed9fe2b9ab8bf2f93b1c979cb43", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/0881885a10173ed9fe2b9ab8bf2f93b1c979cb43", "committedDate": "2021-01-07T18:51:12Z", "message": "use SIUnits\n\nreplaced all Celcius units with eclipse SIUnits\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3744396fc8b8b838fe167457d6a904c7517c238", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/c3744396fc8b8b838fe167457d6a904c7517c238", "committedDate": "2021-01-07T18:51:12Z", "message": "change logging and GSON related code\n\nincreased many log levels\navoid creating new GSON instances in derived handler subclasses\nchanged catch code to avoid stack trace dumps\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "571e7b0500ce22c0c5b8aa2c878a8d2dfbe2a427", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/571e7b0500ce22c0c5b8aa2c878a8d2dfbe2a427", "committedDate": "2021-01-07T18:51:12Z", "message": "Add @NonNullByDefault to BoschSHCConfiguration class and remove obsolete usages of configuration in handlers\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b7d7791150e81440cb51bcef3e492d20bcebbbc", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/7b7d7791150e81440cb51bcef3e492d20bcebbbc", "committedDate": "2021-01-07T18:51:12Z", "message": "Throw BoschSHCExceptions instead of generic Errors and handle them during creation of services\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "561e991f828c8781546edd0bfd018bef87e41436", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/561e991f828c8781546edd0bfd018bef87e41436", "committedDate": "2021-01-07T18:51:12Z", "message": "Use Class::new supplier function instead of deprecated Class.newInstance() method\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20721c1b6c1c5fde5843aab4f44a9cd60e4bcc63", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/20721c1b6c1c5fde5843aab4f44a9cd60e4bcc63", "committedDate": "2021-01-07T18:51:12Z", "message": "Remove @NonNullByDefault from inner classes and unused logger member to remove compile warnings\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96498d1c3afd33de3ac331948f45e99258e8cb08", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/96498d1c3afd33de3ac331948f45e99258e8cb08", "committedDate": "2021-01-07T18:51:12Z", "message": "Use Base64.getEncoder().encodeToString instead of Base64.getEncoder().encode and a manual conversion to String\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c78251f18c1ae5a8ead62caafe7b7c45a8c047db", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/c78251f18c1ae5a8ead62caafe7b7c45a8c047db", "committedDate": "2021-01-07T18:51:13Z", "message": "Add @NonNullByDefault annotation to BoschSHCBridgeConfiguration and check for empty password and ip address in configuration\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b5184da006c5b53557c358046922e869ae02736", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/2b5184da006c5b53557c358046922e869ae02736", "committedDate": "2021-01-07T18:51:13Z", "message": "Use try-with-resources to auto-close streams for key store creation\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f32de78fabf3adebc434141aa83ab6c57c397f2c", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/f32de78fabf3adebc434141aa83ab6c57c397f2c", "committedDate": "2021-01-07T18:51:13Z", "message": "Move data transfer objects of bridge into dto folder\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68195e04d4a0672b02a675f1d4f4c3c97a99523b", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/68195e04d4a0672b02a675f1d4f4c3c97a99523b", "committedDate": "2021-01-07T18:51:13Z", "message": "Add thing type ids and channel type ids to README.md\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04775697437e86d2a26dfa1a1e6c68a4ee0a5973", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/04775697437e86d2a26dfa1a1e6c68a4ee0a5973", "committedDate": "2021-01-07T18:51:13Z", "message": "Move thing configurations out of thing-types.xml and into configs.xml. Remove deprecated required element and use attribute instead.\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03c3ff8d514538ebd0c0e0eb2503d38e1e6c46cc", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/03c3ff8d514538ebd0c0e0eb2503d38e1e6c46cc", "committedDate": "2021-01-07T18:51:13Z", "message": "Adjust some elements, units, descriptions and labels in configs.xml and thing-types.xml\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aa6f0ee188d705b1d9d3d2eb5f1020aa760849f", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/6aa6f0ee188d705b1d9d3d2eb5f1020aa760849f", "committedDate": "2021-01-07T18:51:13Z", "message": "Move url and request creation from BoschSHCBridgeHandler to BoschHttpClient to reuse it inside BoschHttpClient\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333799cf66f9ac8e27f2dbe6062e3ce91274555c", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/333799cf66f9ac8e27f2dbe6062e3ce91274555c", "committedDate": "2021-01-07T18:51:14Z", "message": "Add default timeout to request to smart home controller\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73899df04d43f03fa08648d7a44e5a1b5e0dbed3", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/73899df04d43f03fa08648d7a44e5a1b5e0dbed3", "committedDate": "2021-01-07T18:51:14Z", "message": "Make httpClient of BoschSHCBridgeHandler @Nullable and use BoschHttpClient createUrl and createRequest methods where possible\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddcdd0d1ebb3f02903f40189a0ea4c85fde6c68b", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ddcdd0d1ebb3f02903f40189a0ea4c85fde6c68b", "committedDate": "2021-01-07T18:51:14Z", "message": "Make gson field in BoschSHCBridgeHandler final\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a102d6002070b61310fcee0c5626d305ba549a", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/b5a102d6002070b61310fcee0c5626d305ba549a", "committedDate": "2021-01-07T18:51:14Z", "message": "Simplify getDevices method of BoschSHCBridgeHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "210a33137f3db1ea7c8c926734ed73deb6f9fe9a", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/210a33137f3db1ea7c8c926734ed73deb6f9fe9a", "committedDate": "2021-01-07T18:51:14Z", "message": "Use getContentAsString() instead of getContent() plus manual conversion to String\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "869c5f745ff5b59f7392d8108f8ce89e7ef8f88a", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/869c5f745ff5b59f7392d8108f8ce89e7ef8f88a", "committedDate": "2021-01-07T18:51:14Z", "message": "Use instanceof instead of isInstance(...) in BoschSHCBridgeHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "521efb680cb02165eb0e99329c003bf4df4cd758", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/521efb680cb02165eb0e99329c003bf4df4cd758", "committedDate": "2021-01-07T18:51:14Z", "message": "Add registerService method to BoschSHCHandler to register already created services, so they can be created in the constructor of a handler and do not have to be @Nullable\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e85c5b60b490bce07fa3a8b31642d05619bc025", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/3e85c5b60b490bce07fa3a8b31642d05619bc025", "committedDate": "2021-01-07T18:51:14Z", "message": "Using simpler String.format instead of MessageFormatter in BoschSHCBridgeHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee868eeb4b8002aad8341660073d63b51d814789", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ee868eeb4b8002aad8341660073d63b51d814789", "committedDate": "2021-01-07T18:51:15Z", "message": "Move ShutterControlState into dto subfolder and remove @NonNullByDefault annotation\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a18deefc718da7b9d95f0f181f7e9078729bf42d", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/a18deefc718da7b9d95f0f181f7e9078729bf42d", "committedDate": "2021-01-07T18:51:15Z", "message": "Make bridgeHandler and deviceId in BoschSHCService @Nullable\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18086743f672b87fd11154425af7e1f8f473b88b", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/18086743f672b87fd11154425af7e1f8f473b88b", "committedDate": "2021-01-07T18:51:15Z", "message": "Move DTOs in dto subfolders and remove @NonNullByDefault annotations from them\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d32f5ae299630008f0d6f24384b53a43418bde3c", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/d32f5ae299630008f0d6f24384b53a43418bde3c", "committedDate": "2021-01-07T18:51:15Z", "message": "Add texts for errors during initialization of bridge\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cd4f2fb677db3fcc792facbf380b2bce5a93cc7", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/6cd4f2fb677db3fcc792facbf380b2bce5a93cc7", "committedDate": "2021-01-07T18:51:15Z", "message": "Migrate PowerSwitch to new service architecture to get rid of BoschSHCBridgeHandler.updateSwitchState\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b0d5916db02782b6ea77b6f9c7440340d80e5c7", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/4b0d5916db02782b6ea77b6f9c7440340d80e5c7", "committedDate": "2021-01-07T18:51:15Z", "message": "Remove obsolete null parameter from subscription request\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4356adb68ff42c2fc10e9c546c36554d183cb22", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/b4356adb68ff42c2fc10e9c546c36554d183cb22", "committedDate": "2021-01-07T18:51:16Z", "message": "Removed obsolete TODO about hard-coded data which does not exist anymore\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15cb412024856db7113a7ce619ad9e36d7b132c2", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/15cb412024856db7113a7ce619ad9e36d7b132c2", "committedDate": "2021-01-07T18:51:16Z", "message": "Use lambda for response handling of long poll\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "863d5979f6d30c8877d98a230f601b150d02d582", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/863d5979f6d30c8877d98a230f601b150d02d582", "committedDate": "2021-01-07T18:51:16Z", "message": "Remove obsolete @NonNull annotations in BoschSHCBridgeHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ecdc2203b020d5b951cf98134db18e8a3ded962", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/2ecdc2203b020d5b951cf98134db18e8a3ded962", "committedDate": "2021-01-07T18:51:16Z", "message": "Throw http exceptions when trying to request state from a device to set the thing to offline\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "632c204d5780ae8f129c9567fe9fbf32c73be331", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/632c204d5780ae8f129c9567fe9fbf32c73be331", "committedDate": "2021-01-07T18:51:16Z", "message": "Add state options for combined-rating, temperature-rating and humidity-rating channels\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922d8d0c0fb50ce84e31249bd0380526282f4862", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/922d8d0c0fb50ce84e31249bd0380526282f4862", "committedDate": "2021-01-07T18:51:16Z", "message": "Fix several minor static code analysis warnings\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db484f1acd622936c98b9d44bf4bcf809b44470b", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/db484f1acd622936c98b9d44bf4bcf809b44470b", "committedDate": "2021-01-07T18:51:16Z", "message": "Added migration artifacts\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cac455affe869197d4af7d0aa186d4ae5cab703", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/0cac455affe869197d4af7d0aa186d4ae5cab703", "committedDate": "2021-01-07T18:51:17Z", "message": "Fix formatting and increase version number\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e03fcb521570d4075bd6efd8e409ddeb4377063", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/9e03fcb521570d4075bd6efd8e409ddeb4377063", "committedDate": "2021-01-07T18:51:17Z", "message": "fix HTTP client issue, improve connection logging, add Developers markdown\n\nthe HTTPClient requests were broken\nupdated exception handling and logging for connection and pairing\ndescribing source of certificates\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "978d7f28f3f9220133123a71c6ffbc41140e9499", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/978d7f28f3f9220133123a71c6ffbc41140e9499", "committedDate": "2021-01-07T18:51:17Z", "message": "Use service for shutter control handling instead of having the logic inside the ShutterControlHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7260b44938482ef4c9cf05a12daea6df3f6f85", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/2a7260b44938482ef4c9cf05a12daea6df3f6f85", "committedDate": "2021-01-07T18:51:17Z", "message": "#47 Fix code formatting to remove code analysis warnings\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05159686feb9d5b6260ea0886cf264ce92058bfa", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/05159686feb9d5b6260ea0886cf264ce92058bfa", "committedDate": "2021-01-07T18:51:17Z", "message": "Fixed pairing\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1dae3ced6dd2b2612b762ec89c5276477e2def7", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/c1dae3ced6dd2b2612b762ec89c5276477e2def7", "committedDate": "2021-01-07T18:51:17Z", "message": "Fixed long poll\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4c8069d5f9fc1b16e9be7e7da0fe3f94d7d5383", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/c4c8069d5f9fc1b16e9be7e7da0fe3f94d7d5383", "committedDate": "2021-01-07T18:51:18Z", "message": "Move common error handling for parsing responses from BoschHttpClient into sendRequest method to make subscribe request logic clearer\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "074cf212addc97ac6224c90704dacb3d1084bd44", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/074cf212addc97ac6224c90704dacb3d1084bd44", "committedDate": "2021-01-07T18:51:18Z", "message": "Use scheduler.schedule instead of Thread.sleep during long polling\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02d2b5fb9ad2dd01a57d20b0da9a7fda6532dc8d", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/02d2b5fb9ad2dd01a57d20b0da9a7fda6532dc8d", "committedDate": "2021-01-07T18:51:18Z", "message": "Using synchronous request for subscribe request\n\nThe initialization is not finished without a successful subscription.\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa081c0bfafc236dbb9e1f5230c884e4217c27c1", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/fa081c0bfafc236dbb9e1f5230c884e4217c27c1", "committedDate": "2021-01-07T18:51:18Z", "message": "Use synchronous long poll request to get it to work\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6df1f495684918358dbec3e99a4954db0b5c5e8d", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/6df1f495684918358dbec3e99a4954db0b5c5e8d", "committedDate": "2021-01-07T18:51:18Z", "message": "Make long polling asynchronous to not block scheduler threads\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d90ed573a7ef3deb47811d49b27c6366c68ebb26", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/d90ed573a7ef3deb47811d49b27c6366c68ebb26", "committedDate": "2021-01-07T18:51:18Z", "message": "Only scheduling new long polls while bridge is not disposed and aborting long polling on disposal\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccab99c7674e6dc4d2a1e1c76a910f784eada941", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ccab99c7674e6dc4d2a1e1c76a910f784eada941", "committedDate": "2021-01-07T18:51:18Z", "message": "Move long polling logic into separate class\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba387964188da2120838bc620d55e02c93a08a59", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ba387964188da2120838bc620d55e02c93a08a59", "committedDate": "2021-01-07T18:51:18Z", "message": "Make long polling requests synchronous again, the asynchronous way still does not receive any state updates\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62cd64ecc3866cd0c068634ddf412b0d5d781dd1", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/62cd64ecc3866cd0c068634ddf412b0d5d781dd1", "committedDate": "2021-01-07T18:51:19Z", "message": "replaced while loop for pairing with scheduler calls\n\nPattern from LongPolling reused.\nScheduling new initial access checks including pairing every 15 seconds until it was successful and long polling can be started\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43cd25a3adcc7b4b604c2492fbd4869dcaa70efa", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/43cd25a3adcc7b4b604c2492fbd4869dcaa70efa", "committedDate": "2021-01-07T18:51:19Z", "message": "#47 Throw BoschSHCException instead of raw error to avoid code analysis warning\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ce0ad7ba1e587be3bc757858de4177cfe1357b2", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/7ce0ad7ba1e587be3bc757858de4177cfe1357b2", "committedDate": "2021-01-07T18:51:19Z", "message": "#47 Remove TODO from code and add issue #55 instead\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1295caea4ab425c425bd68169195a5d9785e5f24", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/1295caea4ab425c425bd68169195a5d9785e5f24", "committedDate": "2021-01-07T18:51:19Z", "message": "#47 Pass non-null httpClient to bridge initialization instead of having to check for null reference\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed66f5dbb99add0573a932536168fc5b1e7326d3", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ed66f5dbb99add0573a932536168fc5b1e7326d3", "committedDate": "2021-01-07T18:51:19Z", "message": "#14 Use one supportsThingTypes mapping to list the supported things with their handler in BoschSHCHandlerFactory\n\nPreviously an array plus a big switch was required.\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af04929e943cbb67af7254a5cb007b73da7b940f", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/af04929e943cbb67af7254a5cb007b73da7b940f", "committedDate": "2021-01-07T18:51:19Z", "message": "#47 Starting http client before scheduling initial access\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4390b2fcb6b0593664c069c940899d474c44161", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/d4390b2fcb6b0593664c069c940899d474c44161", "committedDate": "2021-01-07T18:51:19Z", "message": "Use logger.debug instead of logger.info\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a099939e1be469eecebadcd357077497423988e0", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/a099939e1be469eecebadcd357077497423988e0", "committedDate": "2021-01-07T18:51:20Z", "message": "Include cause exception in the PairingFailedException\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b859ed54bb93f6e8f168d4a489479466a387db3", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/2b859ed54bb93f6e8f168d4a489479466a387db3", "committedDate": "2021-01-07T18:51:20Z", "message": "#14 Move fields above constructor in BoschSHCBridgeHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97c042ef4d89f83e6966ee8632c5927e9a959ef6", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/97c042ef4d89f83e6966ee8632c5927e9a959ef6", "committedDate": "2021-01-07T18:51:20Z", "message": "#14 Remove obsolete configuration field from BoschSHCBridgeHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65d2fbc6abeeb98fa88b847972c9de694261ed73", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/65d2fbc6abeeb98fa88b847972c9de694261ed73", "committedDate": "2021-01-07T18:51:20Z", "message": "#14 Move fields and constructor in JsonRpcRequest to top of the class\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e386ac8b13e53e4811fff0a5159a8b406984ce59", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/e386ac8b13e53e4811fff0a5159a8b406984ce59", "committedDate": "2021-01-07T18:51:20Z", "message": "#14 Log the failure of a long poll as warning instead of error\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a6520c7a9d57f3ba1437e2c10da91cd769c3fc7", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/5a6520c7a9d57f3ba1437e2c10da91cd769c3fc7", "committedDate": "2021-01-07T18:51:20Z", "message": "#14 Use %s instead of {} as placeholder for String.format\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce72802612d54fc387aae0dd65d45a62aca5598f", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ce72802612d54fc387aae0dd65d45a62aca5598f", "committedDate": "2021-01-07T18:51:20Z", "message": "#14 Move @Nullable annotation in front of field name\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf8ab31001440fcf567e8d83300c6a9287803996", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/cf8ab31001440fcf567e8d83300c6a9287803996", "committedDate": "2021-01-07T18:51:21Z", "message": "#14 Specify UTF_8 as charset to convert string to byte array\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3be5724339f4912f6c66cd4777b1690858fd4291", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/3be5724339f4912f6c66cd4777b1690858fd4291", "committedDate": "2021-01-07T18:51:21Z", "message": "#14 Remove spaces from pem files\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "486905090a55fc437951ca8e46823d1b53799f3a", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/486905090a55fc437951ca8e46823d1b53799f3a", "committedDate": "2021-01-07T18:51:21Z", "message": "#14 Change ArrayList to List in Device.java\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657206343e6aa9cf7e51802afc30d0a4ab61fe90", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/657206343e6aa9cf7e51802afc30d0a4ab61fe90", "committedDate": "2021-01-07T18:51:21Z", "message": "#14 Use QuantityType for power and energy consumption of the in-wall switch handler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e230889c76e917a51de44b6f5a5648e842eb51bf", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/e230889c76e917a51de44b6f5a5648e842eb51bf", "committedDate": "2021-01-07T18:51:21Z", "message": "#14 Check if StopMoveType is STOP in ShutterControlHandler before setting the device state\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "365696d6df53d3f60593ac476dc157112036b083", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/365696d6df53d3f60593ac476dc157112036b083", "committedDate": "2021-01-07T18:51:21Z", "message": "#14 Make fields of DeviceService final\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ad881ba6d30806b24e28053156f823028670a80", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/0ad881ba6d30806b24e28053156f823028670a80", "committedDate": "2021-01-07T18:51:21Z", "message": "#14 Stop http client and cancel scheduled pairing on bridge disposal\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f26012852f1d281920c2f855dd225d63643c9bfa", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/f26012852f1d281920c2f855dd225d63643c9bfa", "committedDate": "2021-01-07T18:51:21Z", "message": "#14 Remove channel check in BoschTwinguardHandler for Refresh command\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e413524c4232ad9ed5700786609ca9f511671665", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/e413524c4232ad9ed5700786609ca9f511671665", "committedDate": "2021-01-07T18:51:22Z", "message": "#14 Add exception message to warning when update in BoschTwinguardHandler and WindowContactHandler returns incorrect state\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d1e2f9e9f552485dbec7e7b28eddf0433b4ea1", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/98d1e2f9e9f552485dbec7e7b28eddf0433b4ea1", "committedDate": "2021-01-07T18:51:22Z", "message": "#14 Add additional information about channels to thing-types.xml and README.md\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9b172a9821185d6f632632d3c98325df082afbc", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/c9b172a9821185d6f632632d3c98325df082afbc", "committedDate": "2021-01-07T18:51:22Z", "message": "#14 Remove confusing comment from LongPolling.subscribe method\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ded1589c90ec06611add8525cf2bc35b3188ad18", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ded1589c90ec06611add8525cf2bc35b3188ad18", "committedDate": "2021-01-07T18:51:22Z", "message": "#14 Removed obsolete error log in LongPolling.subscribe\n\nA warning is already logged in BoschBridgeHandler when an exception occurs\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27d69ca0e4ada15f707131e2b0a5e236eaa1e91a", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/27d69ca0e4ada15f707131e2b0a5e236eaa1e91a", "committedDate": "2021-01-07T18:51:22Z", "message": "#14 Add detailed description for purity channel\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9696149d95465d07f24c069823c588d07a670bee", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/9696149d95465d07f24c069823c588d07a670bee", "committedDate": "2021-01-07T18:51:22Z", "message": "#14 Fix typo in DEVELOPERS.md\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9314a2761ce991bb936cc49e55d4da13d4fc546", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/b9314a2761ce991bb936cc49e55d4da13d4fc546", "committedDate": "2021-01-07T18:51:22Z", "message": "#14 Change scheduledPairing field in BoschSHCBridgeHandler to be @Nullable\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fad5510466ac7e6a06d0cbf3e0a6da648cc9a2d", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/5fad5510466ac7e6a06d0cbf3e0a6da648cc9a2d", "committedDate": "2021-01-07T18:51:22Z", "message": "#14 Change type of channel values from DecimalType to QuantityType in BoschTwinguardHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cf8fa4cf348994e7041bbf5d010c8037b797dbf", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/8cf8fa4cf348994e7041bbf5d010c8037b797dbf", "committedDate": "2021-01-07T18:51:23Z", "message": "#14 Remove obsolete .classpath and .project files\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c05582f977bda7cd1cac5ef0b0674ed8acfdbe9", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/9c05582f977bda7cd1cac5ef0b0674ed8acfdbe9", "committedDate": "2021-01-07T18:51:23Z", "message": "#14 Fixed typo in DEVELOPERS.md\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c610d241bc29c4dd96e082afc21075d9275330aa", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/c610d241bc29c4dd96e082afc21075d9275330aa", "committedDate": "2021-01-07T18:51:23Z", "message": "#14 Only log error message instead of whole stack trace in BoschSHCBridgeHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf2283ae2a6de9e7c82ca1ef0560f485683f7722", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/bf2283ae2a6de9e7c82ca1ef0560f485683f7722", "committedDate": "2021-01-07T18:51:23Z", "message": "#14 Remove exception which is not thrown and typo in BoschSslUtil\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6838c25890c1b002178a44b5e3f812d57996edf6", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/6838c25890c1b002178a44b5e3f812d57996edf6", "committedDate": "2021-01-07T18:51:23Z", "message": "#14 Use SmartHomeUnits instead of AbstractUnit in BoschTwinguardHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d390842e5376eda34690f73d3e5696b9c151915", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/7d390842e5376eda34690f73d3e5696b9c151915", "committedDate": "2021-01-07T18:51:23Z", "message": "#14 Added supported-bridge-type-refs to thing-types.xml\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbb59237add6c1252293cdd38d5f853e63cc5df3", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/fbb59237add6c1252293cdd38d5f853e63cc5df3", "committedDate": "2021-01-07T18:51:23Z", "message": "#14 Remove invalid whitespace from thing-types.xml\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d750be721efe35bef464f3d51aa2bee7992d9e4", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/2d750be721efe35bef464f3d51aa2bee7992d9e4", "committedDate": "2021-01-07T18:51:24Z", "message": "#14 Fixed warnings and errors caused by updated Gson library\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aefdc08f13febdd86e7cd79065f0b650ff58786", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/1aefdc08f13febdd86e7cd79065f0b650ff58786", "committedDate": "2021-01-07T18:51:24Z", "message": "#14 Update info about auto reload of bundle jar in DEVELOPERS.md\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "021dcb32aa7ff083e6e84c679a5cdcea0dc8caa0", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/021dcb32aa7ff083e6e84c679a5cdcea0dc8caa0", "committedDate": "2021-01-07T18:51:24Z", "message": "#14 Update information about adding items and things via UI, added missing password configuration value and changed headline in README.md\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8d53c217f0f272b60955f3f89a382d45fa09e3e", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/e8d53c217f0f272b60955f3f89a382d45fa09e3e", "committedDate": "2021-01-07T18:51:24Z", "message": "#14 Execute long polling requests asynchronous to not block a thread\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b936768082a279848ae30ad7b70c37a56d8c3a09", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/b936768082a279848ae30ad7b70c37a56d8c3a09", "committedDate": "2021-01-07T18:51:24Z", "message": "#14 Refactored WindowContactHandler to use ShutterContactService instead of implementing service logic itself\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc66008447b0c5dcc0ee74d5cc8fb3f7b0e945e6", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/cc66008447b0c5dcc0ee74d5cc8fb3f7b0e945e6", "committedDate": "2021-01-07T18:51:24Z", "message": "#14 Remove obsolete .gitignore. The ignored files are already ignored by the root .gitignore\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0140d99db52c37a0c9a5c9378a2e1d16490f3cb5", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/0140d99db52c37a0c9a5c9378a2e1d16490f3cb5", "committedDate": "2021-01-07T18:51:24Z", "message": "#14 Rename constant supportsThingTypes to SUPPORTED_THING_TYPES in BoschSHCHandlerFactory\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b6f5901ffde97b4779d9dfbb647cba99e73eaba", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/2b6f5901ffde97b4779d9dfbb647cba99e73eaba", "committedDate": "2021-01-07T18:51:25Z", "message": "#14 Use List.of instead of Arrays.asList\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34fc36ac96200260248c894ac517c3d556298691", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/34fc36ac96200260248c894ac517c3d556298691", "committedDate": "2021-01-07T18:51:25Z", "message": "#14 Call super.dispose last in BoschSHCBridgeHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfabacef89876e5d1084a3a113fd76f838206328", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/bfabacef89876e5d1084a3a113fd76f838206328", "committedDate": "2021-01-07T18:51:25Z", "message": "#14 Add exception message to status when http connection to controller fails\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9df5540d06d5a08aa6cc180cabba0c36ba851c", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/4c9df5540d06d5a08aa6cc180cabba0c36ba851c", "committedDate": "2021-01-07T18:51:25Z", "message": "#14 Handle JsonSyntaxException in BoschHttpClient.sendRequest\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62b201c13800c9ab52709405c796d0f663b81584", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/62b201c13800c9ab52709405c796d0f663b81584", "committedDate": "2021-01-07T18:51:25Z", "message": "#14 Forward InterruptedExceptions to callers, so they have to be handled correctly\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d31bd958299421f386745114c77c0c62acc7a352", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/d31bd958299421f386745114c77c0c62acc7a352", "committedDate": "2021-01-07T18:51:25Z", "message": "#14 Logging long poll error message and code instead of hash\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c19df4801b69cc137f39c86201c406b30f2e9d30", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/c19df4801b69cc137f39c86201c406b30f2e9d30", "committedDate": "2020-10-18T19:09:39Z", "message": "#47 Pass non-null httpClient to bridge initialization instead of having to check for null reference\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>"}, "afterCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/d2389b287c20c9b5e3197106eb018de3403c2927", "committedDate": "2020-10-22T18:59:08Z", "message": "#47 Pass non-null httpClient to bridge initialization instead of having to check for null reference\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzMwNTYw", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-516330560", "createdAt": "2020-10-25T07:15:53Z", "commit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxNTo1NFrOHn3AwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoyMjoxMVrOHn3C7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NzgyNQ==", "bodyText": "Please remove all these blank lines before your else statements", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511557825", "createdAt": "2020-10-25T07:15:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandlerFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_CLIMATE_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_INWALL_SWITCH;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_MOTION_DETECTOR;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHC;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHUTTER_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_THERMOSTAT;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_TWINGUARD;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_WINDOW_CONTACT;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.devices.climatecontrol.ClimateControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.BoschInWallSwitchHandler;\n+import org.openhab.binding.boschshc.internal.devices.motiondetector.MotionDetectorHandler;\n+import org.openhab.binding.boschshc.internal.devices.shuttercontrol.ShutterControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.thermostat.ThermostatHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.BoschTwinguardHandler;\n+import org.openhab.binding.boschshc.internal.devices.windowcontact.WindowContactHandler;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link BoschSHCHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - added Shutter Control and ThermostatHandler\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.boschshc\", service = ThingHandlerFactory.class)\n+public class BoschSHCHandlerFactory extends BaseThingHandlerFactory {\n+\n+    // List of all supported Bosch devices.\n+    public static final Collection<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Arrays.asList(THING_TYPE_SHC,\n+            THING_TYPE_INWALL_SWITCH, THING_TYPE_TWINGUARD, THING_TYPE_WINDOW_CONTACT, THING_TYPE_MOTION_DETECTOR,\n+            THING_TYPE_SHUTTER_CONTROL, THING_TYPE_THERMOSTAT, THING_TYPE_CLIMATE_CONTROL);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_SHC.equals(thingTypeUID)) {\n+            return new BoschSHCBridgeHandler((Bridge) thing);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1Nzg5NA==", "bodyText": "Please avoid using info logging, change this to debug instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.info(\"Pairing successful.\");\n          \n          \n            \n                            logger.debug(\"Pairing successful.\");", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511557894", "createdAt": "2020-10-25T07:16:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.info(\"Pairing successful.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NzkzNw==", "bodyText": "Please put fields above the constructor", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511557937", "createdAt": "2020-10-25T07:17:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODAxMw==", "bodyText": "Don't assign the config here as it is subject to change. Instead it should be assigned in the initialize method.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558013", "createdAt": "2020-10-25T07:18:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODA2OA==", "bodyText": "either remove this log or lower the logging level.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558068", "createdAt": "2020-10-25T07:19:04Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODE2MA==", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.\nPlease change this to warn.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558160", "createdAt": "2020-10-25T07:19:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.error(\"Long polling failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODIyNA==", "bodyText": "same issue here", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558224", "createdAt": "2020-10-25T07:20:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.error(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODMwNg==", "bodyText": "Always include the cause exception when throwing another exception.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n          \n          \n            \n                                + \". Check path, write access and JKS content.\");\n          \n          \n            \n                        throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n          \n          \n            \n                                + \". Check path, write access and JKS content.\", e);", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558306", "createdAt": "2020-10-25T07:21:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODM4Mg==", "bodyText": "Please put fields at the top of the class.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558382", "createdAt": "2020-10-25T07:22:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/JsonRpcRequest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Payload as POST data for triggering a RPC call on the Bosch Smart Home Controller.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+class JsonRpcRequest {\n+\n+    public JsonRpcRequest(String jsonrpc, String method, String[] params) {\n+        this.jsonrpc = jsonrpc;\n+        this.method = method;\n+        this.params = params;\n+    }\n+\n+    public String getJsonrpc() {\n+        return jsonrpc;\n+    }\n+\n+    public void setJsonrpc(String jsonrpc) {\n+        this.jsonrpc = jsonrpc;\n+    }\n+\n+    public String getMethod() {\n+        return method;\n+    }\n+\n+    public void setMethod(String method) {\n+        this.method = method;\n+    }\n+\n+    public String[] getParams() {\n+        return params;\n+    }\n+\n+    public void setParams(String[] params) {\n+        this.params = params;\n+    }\n+\n+    public JsonRpcRequest() {\n+        this.jsonrpc = \"\";\n+        this.method = \"\";\n+        this.params = new String[0];\n+    }\n+\n+    public String jsonrpc;\n+    public String method;\n+    public String[] params;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70beed38daad0077558b384e652227f54f0056c6", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/70beed38daad0077558b384e652227f54f0056c6", "committedDate": "2020-10-26T19:40:31Z", "message": "Include cause exception in the PairingFailedException\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>"}, "afterCommit": {"oid": "97e681acac55f2a6d5ef351d77feeb14f7bcc9e2", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/97e681acac55f2a6d5ef351d77feeb14f7bcc9e2", "committedDate": "2020-10-26T19:47:32Z", "message": "Include cause exception in the PairingFailedException\n\nCo-authored-by: Connor Petty <mistercpp2000@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a251db1b5ad71a06309a5d9ae8cdc8e88996337c", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/a251db1b5ad71a06309a5d9ae8cdc8e88996337c", "committedDate": "2020-10-26T19:47:52Z", "message": "#14 Log the failure of a long poll as warning instead of error\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>"}, "afterCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/83a86f55011d6dddeabce910fe3a3efaa105549e", "committedDate": "2020-10-26T19:54:30Z", "message": "#14 Log the failure of a long poll as warning instead of error\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzEyMTYw", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-517312160", "createdAt": "2020-10-27T02:53:06Z", "commit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo1MzowNlrOHopjsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToyNjozNFrOHor6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTk2OQ==", "bodyText": "{} isn't used for String.format, you should use %s instead.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512385969", "createdAt": "2020-10-27T02:53:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandler.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.BoschSHCService;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} represents Bosch Things. Each type of device\n+ * inherits from this abstract thing handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public abstract class BoschSHCHandler extends BaseThingHandler {\n+\n+    /**\n+     * Service State for a Bosch device.\n+     */\n+    class DeviceService<TState extends BoschSHCServiceState> {\n+        /**\n+         * Constructor.\n+         * \n+         * @param service Service which belongs to the device.\n+         * @param affectedChannels Channels which are affected by the state of this service.\n+         */\n+        public DeviceService(BoschSHCService<TState> service, Collection<String> affectedChannels) {\n+            this.service = service;\n+            this.affectedChannels = affectedChannels;\n+        }\n+\n+        /**\n+         * Service which belongs to the device.\n+         */\n+        public BoschSHCService<TState> service;\n+\n+        /**\n+         * Channels which are affected by the state of this service.\n+         */\n+        public Collection<String> affectedChannels;\n+    }\n+\n+    protected final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    /**\n+     * Reusable gson instance to convert a class to json string and back in derived classes.\n+     */\n+    protected Gson gson = new Gson();\n+\n+    /**\n+     * Bosch SHC configuration loaded from openHAB configuration.\n+     */\n+    private @Nullable BoschSHCConfiguration config;\n+\n+    /**\n+     * Services of the device.\n+     */\n+    private List<DeviceService<? extends BoschSHCServiceState>> services = new ArrayList<>();\n+\n+    public BoschSHCHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Returns the unique id of the Bosch device.\n+     * \n+     * @return Unique id of the Bosch device.\n+     */\n+    public @Nullable String getBoschID() {\n+        BoschSHCConfiguration config = this.config;\n+        if (config != null) {\n+            return config.id;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Initializes this handler. Use this method to register all services of the device with\n+     * {@link #registerService(BoschSHCService)}.\n+     */\n+    @Override\n+    public void initialize() {\n+        this.config = getConfigAs(BoschSHCConfiguration.class);\n+\n+        try {\n+            this.initializeServices();\n+\n+            // Mark immediately as online - if the bridge is online, the thing is too.\n+            this.updateStatus(ThingStatus.ONLINE);\n+        } catch (BoschSHCException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Handles the refresh command of all registered services. Override it to handle custom commands (e.g. to update\n+     * states of services).\n+     * \n+     * @param channelUID {@link ChannelUID} of the channel to which the command was sent\n+     * @param command {@link Command}\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // Refresh state of services that affect the channel\n+            for (DeviceService<? extends BoschSHCServiceState> deviceService : this.services) {\n+                if (deviceService.affectedChannels.contains(channelUID.getIdWithoutGroup())) {\n+                    try {\n+                        deviceService.service.refreshState();\n+                    } catch (InterruptedException | TimeoutException | ExecutionException | BoschSHCException e) {\n+                        this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                                String.format(\"Error when trying to refresh state from service {}: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMTI2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public String id;\n          \n          \n            \n                public @Nullable String id;", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512421269", "createdAt": "2020-10-27T05:14:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCConfiguration.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link BoschSHCConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSHCConfiguration {\n+    /**\n+     * ID of the device as returned by the controller.\n+     */\n+    @Nullable\n+    public String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjA3OA==", "bodyText": "same here", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512422078", "createdAt": "2020-10-27T05:17:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed\", e);\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Query the Bosch Smart Home Controller for the state of the given thing.\n+     *\n+     * @param deviceId Id of device to get state for\n+     * @param stateName Name of the state to query\n+     * @param stateClass Class to convert the resulting JSON to\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     * @throws BoschSHCException\n+     */\n+    public <T extends BoschSHCServiceState> @Nullable T getState(String deviceId, String stateName, Class<T> stateClass)\n+            throws InterruptedException, TimeoutException, ExecutionException, BoschSHCException {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            logger.warn(\"HttpClient not initialized\");\n+            return null;\n+        }\n+\n+        String url = httpClient.createServiceUrl(stateName, deviceId);\n+        Request request = httpClient.createRequest(url, GET).header(\"Accept\", \"application/json\");\n+\n+        logger.debug(\"refreshState: Requesting \\\"{}\\\" from Bosch: {} via {}\", stateName, deviceId, url);\n+\n+        ContentResponse contentResponse = request.send();\n+\n+        String content = contentResponse.getContentAsString();\n+        logger.debug(\"refreshState: Request complete: [{}] - return code: {}\", content, contentResponse.getStatus());\n+\n+        int statusCode = contentResponse.getStatus();\n+        if (statusCode != 200) {\n+            JsonRestExceptionResponse errorResponse = gson.fromJson(content, JsonRestExceptionResponse.class);\n+            throw new BoschSHCException(String.format(\n+                    \"State request for service {} of device {} failed with status code {} and error code {}\", stateName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjM3Ng==", "bodyText": "The default charset varies from system to system so it is better to specify it yourself instead of using the default.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512422376", "createdAt": "2020-10-27T05:18:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {\n+        final String dirName = \"CN=\" + getBoschSHCId() + \", O=openHAB, L=None, ST=None, C=None\";\n+        logger.debug(\"Creating a new self signed certificate: {}\", dirName);\n+        final Instant now = Instant.now();\n+        final Date notBefore = Date.from(now);\n+        final Date notAfter = Date.from(now.plus(Duration.ofDays(365 * 10)));\n+        X500Name name = new X500Name(dirName);\n+\n+        // create the certificate\n+        X509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(name, // Issuer\n+                BigInteger.valueOf(now.toEpochMilli()), notBefore, notAfter, name, // Subject\n+                keyPair.getPublic() // Public key to be associated with the certificate\n+        );\n+        // and sign it\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n+        return new JcaX509CertificateConverter().setProvider(new BouncyCastleProvider())\n+                .getCertificate(certificateBuilder.build(contentSigner));\n+    }\n+\n+    private KeyStore createKeyStore(String keystore, String keystorePassword)\n+            throws IOException, OperatorCreationException, GeneralSecurityException {\n+        // create a new keystore\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        keyStore.load(null, null);\n+\n+        // create new key pair for BoschSHC binding\n+        logger.debug(\"Creating new keypair\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+        KeyPair keyPair = kpg.generateKeyPair();\n+\n+        Security.addProvider(new BouncyCastleProvider());\n+        Signature signer = Signature.getInstance(\"SHA256withRSA\", \"BC\");\n+        signer.initSign(keyPair.getPrivate());\n+        signer.update(\"Hello OpenHAB\".getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjc0Mw==", "bodyText": "Can you you remove the spaces in these file names?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512422743", "createdAt": "2020-10-27T05:19:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {\n+        final String dirName = \"CN=\" + getBoschSHCId() + \", O=openHAB, L=None, ST=None, C=None\";\n+        logger.debug(\"Creating a new self signed certificate: {}\", dirName);\n+        final Instant now = Instant.now();\n+        final Date notBefore = Date.from(now);\n+        final Date notAfter = Date.from(now.plus(Duration.ofDays(365 * 10)));\n+        X500Name name = new X500Name(dirName);\n+\n+        // create the certificate\n+        X509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(name, // Issuer\n+                BigInteger.valueOf(now.toEpochMilli()), notBefore, notAfter, name, // Subject\n+                keyPair.getPublic() // Public key to be associated with the certificate\n+        );\n+        // and sign it\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n+        return new JcaX509CertificateConverter().setProvider(new BouncyCastleProvider())\n+                .getCertificate(certificateBuilder.build(contentSigner));\n+    }\n+\n+    private KeyStore createKeyStore(String keystore, String keystorePassword)\n+            throws IOException, OperatorCreationException, GeneralSecurityException {\n+        // create a new keystore\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        keyStore.load(null, null);\n+\n+        // create new key pair for BoschSHC binding\n+        logger.debug(\"Creating new keypair\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+        KeyPair keyPair = kpg.generateKeyPair();\n+\n+        Security.addProvider(new BouncyCastleProvider());\n+        Signature signer = Signature.getInstance(\"SHA256withRSA\", \"BC\");\n+        signer.initSign(keyPair.getPrivate());\n+        signer.update(\"Hello OpenHAB\".getBytes());\n+        signer.sign();\n+\n+        X509Certificate cert = generateClientCertificate(keyPair);\n+\n+        logger.debug(\"Adding keypair and self signed certificate to keystore\");\n+        keyStore.setKeyEntry(getBoschSHCId(), keyPair.getPrivate(), keystorePassword.toCharArray(),\n+                new Certificate[] { cert });\n+\n+        // add Bosch Certs\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n+        logger.debug(\"Adding Issuing CA to keystore\");\n+        try (BufferedInputStream streamIssuingCA = new BufferedInputStream(\n+                BoschSslUtil.class.getClassLoader().getResourceAsStream(\"Smart Home Controller Issuing CA.pem\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzEwMw==", "bodyText": "Do you have to use ArrayList here? Would List not suffice?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512423103", "createdAt": "2020-10-27T05:20:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/dto/Device.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge.dto;\n+\n+import java.util.ArrayList;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Represents a single devices connected to the Bosch Smart Home Controller.\n+ *\n+ * Example from Json:\n+ *\n+ * {\n+ * \"@type\":\"device\",\n+ * \"rootDeviceId\":\"64-da-a0-02-14-9b\",\n+ * \"id\":\"hdm:HomeMaticIP:3014F711A00004953859F31B\",\n+ * \"deviceServiceIds\":[\"PowerMeter\",\"PowerSwitch\",\"PowerSwitchProgram\",\"Routing\"],\n+ * \"manufacturer\":\"BOSCH\",\n+ * \"roomId\":\"hz_3\",\n+ * \"deviceModel\":\"PSM\",\n+ * \"serial\":\"3014F711A00004953859F31B\",\n+ * \"profile\":\"GENERIC\",\n+ * \"name\":\"Coffee Machine\",\n+ * \"status\":\"AVAILABLE\",\n+ * \"childDeviceIds\":[]\n+ * }\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+public class Device {\n+\n+    @SerializedName(\"@type\")\n+    public String type;\n+\n+    public String rootDeviceId;\n+    public String id;\n+    public ArrayList<String> deviceSerivceIDs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzYyMQ==", "bodyText": "Can this be made final?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512423621", "createdAt": "2020-10-27T05:22:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private PowerSwitchService powerSwitchService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyNDAwOA==", "bodyText": "Should't these be QuantityType?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512424008", "createdAt": "2020-10-27T05:24:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private PowerSwitchService powerSwitchService;\n+\n+    public BoschInWallSwitchHandler(Thing thing) {\n+        super(thing);\n+        this.powerSwitchService = new PowerSwitchService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.powerSwitchService, this::updateChannels, Arrays.asList(CHANNEL_POWER_SWITCH));\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+        if (command instanceof RefreshType) {\n+            switch (channelUID.getId()) {\n+                case CHANNEL_POWER_CONSUMPTION: {\n+                    PowerMeterState state = this.getState(\"PowerMeter\", PowerMeterState.class);\n+                    if (state != null) {\n+                        updatePowerMeterState(state);\n+                    }\n+                    break;\n+                }\n+                case CHANNEL_ENERGY_CONSUMPTION:\n+                    // Nothing to do here, since the same update is received from POWER_CONSUMPTION\n+                    break;\n+                default:\n+                    logger.warn(\"Received refresh request for unsupported channel: {}\", channelUID);\n+            }\n+        } else {\n+            switch (channelUID.getId()) {\n+                case CHANNEL_POWER_SWITCH:\n+                    if (command instanceof OnOffType) {\n+                        updatePowerSwitchState((OnOffType) command);\n+                    }\n+                    break;\n+            }\n+        }\n+    }\n+\n+    void updatePowerMeterState(PowerMeterState state) {\n+        logger.debug(\"Parsed power meter state of {}: energy {} - power {}\", this.getBoschID(), state.energyConsumption,\n+                state.energyConsumption);\n+\n+        updateState(CHANNEL_POWER_CONSUMPTION, new DecimalType(state.powerConsumption));\n+        updateState(CHANNEL_ENERGY_CONSUMPTION, new DecimalType(state.energyConsumption));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyNDYzMg==", "bodyText": "You should check whether Stop or Move was specified. Wouldn't want the blinds to stop when someone tells them to move. I don't tend to implement Move though, so I suggest ignoring that particular command.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512424632", "createdAt": "2020-10-27T05:26:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/shuttercontrol/ShutterControlHandler.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.shuttercontrol;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.CHANNEL_LEVEL;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.shuttercontrol.OperationState;\n+import org.openhab.binding.boschshc.internal.services.shuttercontrol.ShutterControlService;\n+import org.openhab.binding.boschshc.internal.services.shuttercontrol.dto.ShutterControlServiceState;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StopMoveType;\n+import org.openhab.core.library.types.UpDownType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * Handler for a shutter control device\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShutterControlHandler extends BoschSHCHandler {\n+    /**\n+     * Utility functions to convert data between Bosch things and openHAB items\n+     */\n+    static final class DataConversion {\n+        public static int levelToOpenPercentage(double level) {\n+            return (int) Math.round((1 - level) * 100);\n+        }\n+\n+        public static double openPercentageToLevel(double openPercentage) {\n+            return (100 - openPercentage) / 100.0;\n+        }\n+    }\n+\n+    private ShutterControlService shutterControlService;\n+\n+    public ShutterControlHandler(Thing thing) {\n+        super(thing);\n+        this.shutterControlService = new ShutterControlService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.shutterControlService, this::updateChannels, Arrays.asList(CHANNEL_LEVEL));\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        if (command instanceof UpDownType) {\n+            // Set full close/open as target state\n+            UpDownType upDownType = (UpDownType) command;\n+            ShutterControlServiceState state = new ShutterControlServiceState();\n+            if (upDownType == UpDownType.UP) {\n+                state.level = 1.0;\n+            } else if (upDownType == UpDownType.DOWN) {\n+                state.level = 0.0;\n+            } else {\n+                logger.warn(\"Received unknown UpDownType command: {}\", upDownType);\n+                return;\n+            }\n+            this.shutterControlService.setState(state);\n+        } else if (command instanceof StopMoveType) {\n+            // Set STOPPED operation state\n+            ShutterControlServiceState state = new ShutterControlServiceState();\n+            state.operationState = OperationState.STOPPED;\n+            this.shutterControlService.setState(state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTEyMDMw", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-522912030", "createdAt": "2020-11-03T22:11:59Z", "commit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxMTo1OVrOHtCTLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo1NjowMlrOHtDZ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NTY0Ng==", "bodyText": "Can these be final?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516985646", "createdAt": "2020-11-03T22:11:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandler.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.BoschSHCService;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} represents Bosch Things. Each type of device\n+ * inherits from this abstract thing handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public abstract class BoschSHCHandler extends BaseThingHandler {\n+\n+    /**\n+     * Service State for a Bosch device.\n+     */\n+    class DeviceService<TState extends BoschSHCServiceState> {\n+        /**\n+         * Constructor.\n+         * \n+         * @param service Service which belongs to the device.\n+         * @param affectedChannels Channels which are affected by the state of this service.\n+         */\n+        public DeviceService(BoschSHCService<TState> service, Collection<String> affectedChannels) {\n+            this.service = service;\n+            this.affectedChannels = affectedChannels;\n+        }\n+\n+        /**\n+         * Service which belongs to the device.\n+         */\n+        public BoschSHCService<TState> service;\n+\n+        /**\n+         * Channels which are affected by the state of this service.\n+         */\n+        public Collection<String> affectedChannels;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4OTY0OQ==", "bodyText": "Don't you also need to stop the httpClient here?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516989649", "createdAt": "2020-11-03T22:21:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5MjMwNw==", "bodyText": "You need to keep of the Future returned here and make sure to cancel it when this handler is disposed.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516992307", "createdAt": "2020-11-03T22:27:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5Mzc2Mg==", "bodyText": "is it?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516993762", "createdAt": "2020-11-03T22:30:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling\n+     *\n+     * Method is synchronous.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTUxNw==", "bodyText": "Are you going to handle refresh of any of the other channels?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516995517", "createdAt": "2020-11-03T22:35:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType && CHANNEL_TEMPERATURE.equals(channelUID.getId())) {\n+                // Only refresh the state for CHANNEL_TEMPERATURE, the rest will be filled in too.\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTcyOA==", "bodyText": "You should include the exception message in the log.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516995728", "createdAt": "2020-11-03T22:35:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType && CHANNEL_TEMPERATURE.equals(channelUID.getId())) {\n+                // Only refresh the state for CHANNEL_TEMPERATURE, the rest will be filled in too.\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new DecimalType(state.temperature));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new DecimalType(state.humidity));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new DecimalType(state.purity));\n+        updateState(CHANNEL_AIR_DESCRIPTION, new StringType(state.description));\n+        updateState(CHANNEL_PURITY_RATING, new StringType(state.purityRating));\n+        updateState(CHANNEL_COMBINED_RATING, new StringType(state.combinedRating));\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {\n+        logger.debug(\"Twinguard: received update: {} {}\", id, state);\n+\n+        try {\n+            AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);\n+\n+            logger.debug(\"Parsed switch state of {}: {}\", this.getBoschID(), parsed);\n+            updateAirQualityState(parsed);\n+\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"Received unknown update in in-wall switch: {}\", state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTkxOQ==", "bodyText": "here too", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516995919", "createdAt": "2020-11-03T22:36:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/windowcontact/WindowContactHandler.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.windowcontact;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.CHANNEL_CONTACT;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.windowcontact.dto.ShutterContactState;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling Bosch window/door contacts.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WindowContactHandler extends BoschSHCHandler {\n+\n+    public WindowContactHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+        if (command instanceof RefreshType && CHANNEL_CONTACT.equals(channelUID.getId())) {\n+            ShutterContactState state = this.getState(\"ShutterContact\", ShutterContactState.class);\n+            if (state != null) {\n+                updateShutterContactState(state);\n+            }\n+        }\n+    }\n+\n+    void updateShutterContactState(ShutterContactState state) {\n+        State contact = state.value.equals(\"CLOSED\") ? OpenClosedType.CLOSED : OpenClosedType.OPEN;\n+        updateState(CHANNEL_CONTACT, contact);\n+\n+        logger.debug(\"Parsed shutter contact state state of {}: {}\", this.getBoschID(), state.value);\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {\n+        logger.debug(\"WindowContact: received update: {} {}\", id, state);\n+        try {\n+            updateShutterContactState(gson.fromJson(state, ShutterContactState.class));\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"Received unknown update in window contact handler: {}\", state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMTIzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | power-consumption  | Number    | Current power consumption (W) of the device. |\n          \n          \n            \n            | energy-consumption | Number    | Energy consumption of the device.            |\n          \n          \n            \n            | power-consumption  | Number:Power    | Current power consumption (W) of the device. |\n          \n          \n            \n            | energy-consumption | Number:Energy    | Energy consumption of the device.            |", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517001236", "createdAt": "2020-11-03T22:49:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type | Description                                  |\n+| ------------------ | --------- | -------------------------------------------- |\n+| power-switch       | Switch    | Current state of the switch.                 |\n+| power-consumption  | Number    | Current power consumption (W) of the device. |\n+| energy-consumption | Number    | Energy consumption of the device.            |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMTM3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | humidity           | Number             | Current measured humidity.                    |\n          \n          \n            \n            | humidity           | Number:Dimensionless             | Current measured humidity.                    |", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517001376", "createdAt": "2020-11-03T22:50:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type | Description                                  |\n+| ------------------ | --------- | -------------------------------------------- |\n+| power-switch       | Switch    | Current state of the switch.                 |\n+| power-consumption  | Number    | Current power consumption (W) of the device. |\n+| energy-consumption | Number    | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type          | Description                                   |\n+| ------------------ | ------------------ | --------------------------------------------- |\n+| temperature        | Number:Temperature | Current measured temperature.                 |\n+| temperature-rating | String             | Rating of the currently measured temperature. |\n+| humidity           | Number             | Current measured humidity.                    |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMTgyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | valve-tappet-position | Number             | Current open ratio of valve tappet (0 to 100). |\n          \n          \n            \n            | valve-tappet-position | Number:Dimensionless             | Current open ratio of valve tappet (0 to 100). |", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517001826", "createdAt": "2020-11-03T22:51:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type | Description                                  |\n+| ------------------ | --------- | -------------------------------------------- |\n+| power-switch       | Switch    | Current state of the switch.                 |\n+| power-consumption  | Number    | Current power consumption (W) of the device. |\n+| energy-consumption | Number    | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type          | Description                                   |\n+| ------------------ | ------------------ | --------------------------------------------- |\n+| temperature        | Number:Temperature | Current measured temperature.                 |\n+| temperature-rating | String             | Rating of the currently measured temperature. |\n+| humidity           | Number             | Current measured humidity.                    |\n+| humidity-rating    | String             | Rating of current measured humidity.          |\n+| purity             | String             | Purity of the air.                            |\n+| purity-rating      | String             | Rating of current measured purity.            |\n+| air-description    | String             | Overall description of the air quality.       |\n+| combined-rating    | String             | Combined rating of the air quality.           |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+| --------------- | --------- | ---------------------------- |\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+| --------------- | --------- | ------------------------------ |\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+| --------------- | ------------- | ---------------------------------------- |\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type          | Description                                    |\n+| --------------------- | ------------------ | ---------------------------------------------- |\n+| temperature           | Number:Temperature | Current measured temperature.                  |\n+| valve-tappet-position | Number             | Current open ratio of valve tappet (0 to 100). |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjg2NA==", "bodyText": "Is this supposed to be writable? Also please add some details to the README as to what purity values are supposed to mean. Is a higher value better or worse?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517002864", "createdAt": "2020-11-03T22:53:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"shutter-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Shutter Control</label>\n+\t\t<description>Bosch Shutter Control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Thermostat</label>\n+\t\t<description>Bosch Thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"valve-tappet-position\" typeId=\"valve-tappet-position\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"climate-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Climate Control</label>\n+\t\t<description>Bosch Climate Control. This is a virtual device which is automatically created for all rooms that have\n+\t\t\tthermostats in it.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"setpoint-temperature\" typeId=\"setpoint-temperature\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Current measured temperature.</description>\n+\t\t<state min=\"0\" max=\"40\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Temperature Rating</label>\n+\t\t<description>Rating of the currently measured temperature.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Temperature</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Temperature</option>\n+\t\t\t\t<option value=\"BAD\">Bad Temperature</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Current measured humidity.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Humidity Rating</label>\n+\t\t<description>Rating of current measured humidity.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Humidity</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Humidity</option>\n+\t\t\t\t<option value=\"BAD\">Bad Humidity</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"energy-consumption\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Energy consumption (Wh)</label>\n+\t\t<description>Energy consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power-consumption\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power consumption (W)</label>\n+\t\t<description>Current power consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"purity\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Purity</label>\n+\t\t<description>Purity of the air.</description>\n+\t</channel-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMzc0OQ==", "bodyText": "Channels with units will typically need to have a state pattern format defined as well.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517003749", "createdAt": "2020-11-03T22:56:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"shutter-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Shutter Control</label>\n+\t\t<description>Bosch Shutter Control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Thermostat</label>\n+\t\t<description>Bosch Thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"valve-tappet-position\" typeId=\"valve-tappet-position\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"climate-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Climate Control</label>\n+\t\t<description>Bosch Climate Control. This is a virtual device which is automatically created for all rooms that have\n+\t\t\tthermostats in it.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"setpoint-temperature\" typeId=\"setpoint-temperature\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Current measured temperature.</description>\n+\t\t<state min=\"0\" max=\"40\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Temperature Rating</label>\n+\t\t<description>Rating of the currently measured temperature.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Temperature</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Temperature</option>\n+\t\t\t\t<option value=\"BAD\">Bad Temperature</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Current measured humidity.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Humidity Rating</label>\n+\t\t<description>Rating of current measured humidity.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Humidity</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Humidity</option>\n+\t\t\t\t<option value=\"BAD\">Bad Humidity</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"energy-consumption\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Energy consumption (Wh)</label>\n+\t\t<description>Energy consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power-consumption\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power consumption (W)</label>\n+\t\t<description>Current power consumption of the device.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NjMyMDQ3", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-526632047", "createdAt": "2020-11-09T20:34:14Z", "commit": {"oid": "3fd8eebeffb0d579024148baf12f76751c63e2ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDozNDoxNVrOHwAj3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDozNDoxNVrOHwAj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwMjg3OA==", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520102878", "createdAt": "2020-11-09T20:34:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling\n+     *\n+     * Method is synchronous.\n+     * \n+     * @return Subscription id\n+     */\n+    private String subscribe(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        try {\n+            String url = httpClient.createUrl(\"remote/json-rpc\");\n+            JsonRpcRequest request = new JsonRpcRequest(\"2.0\", \"RE/subscribe\",\n+                    new String[] { \"com/bosch/sh/remote/*\", null });\n+            logger.debug(\"Subscribe: Sending request: {} - using httpClient {}\", gson.toJson(request), httpClient);\n+            Request httpRequest = httpClient.createRequest(url, POST, request);\n+            SubscribeResult response = httpClient.sendRequest(httpRequest, SubscribeResult.class);\n+\n+            logger.debug(\"Subscribe: Got subscription ID: {} {}\", response.getResult(), response.getJsonrpc());\n+            String subscriptionId = response.getResult();\n+            return subscriptionId;\n+        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n+            logger.error(\"Error on subscribe request\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd8eebeffb0d579024148baf12f76751c63e2ce"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzU0Mzk2", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-532754396", "createdAt": "2020-11-17T19:48:06Z", "commit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0ODowNlrOH1G9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0ODowNlrOH1G9rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MDY3MA==", "bodyText": "Temperature, humidity, and purity should be QuantityType instead of DecimalType.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r525450670", "createdAt": "2020-11-17T19:48:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new DecimalType(state.temperature));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new DecimalType(state.humidity));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new DecimalType(state.purity));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzY4MzI5", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-532768329", "createdAt": "2020-11-17T20:07:01Z", "commit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDowNzowMVrOH1IXRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDowNzowMVrOH1IXRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ3MzYwNg==", "bodyText": "Typo: Remove \"for\"", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r525473606", "createdAt": "2020-11-17T20:07:01Z", "author": {"login": "JohannesPtaszyk"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` for of your openHAB test instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "242909bdb5f958926e0ad80b52301dac49ee0896", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/242909bdb5f958926e0ad80b52301dac49ee0896", "committedDate": "2020-11-18T10:09:14Z", "message": "#14 Change type of channel values from DecimalType to QuantityType in BoschTwinguardHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>"}, "afterCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/01a607ac5fd1d78dbde98496248e63d79751f940", "committedDate": "2020-11-18T10:19:54Z", "message": "#14 Change type of channel values from DecimalType to QuantityType in BoschTwinguardHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODM0MDgz", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-534834083", "createdAt": "2020-11-19T20:42:11Z", "commit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0MjoxMVrOH2w0oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzoxMjozOFrOH3C_hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTA1Nw==", "bodyText": "This file shouldn't pe part of your PR, as it is generated automatically.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527185057", "createdAt": "2020-11-19T20:42:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/.classpath", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTExMQ==", "bodyText": "This file shouldn't pe part of your PR, as it is generated automatically.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527185111", "createdAt": "2020-11-19T20:42:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/.project", "diffHunk": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTYzOQ==", "bodyText": "Actually this is done automatically, when the file date of the jar in the addons folder changes.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527185639", "createdAt": "2020-11-19T20:43:23Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` folder of your openHAB test instance.\n+\n+For the first time the jar is loaded automatically as a bundle.\n+If the jar is updated, your need to execute:\n+\n+    bundle:update \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+   \n+or get the ID and update the bundle using the ID:\n+\n+    bundle:list\n+    -> Get ID for \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+    bundle:update <ID>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTk3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We need secured and paired connection from the openHAB binding instacne to the Bosch SHC.  \n          \n          \n            \n            We need secured and paired connection from the openHAB binding instance to the Bosch SHC.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527185972", "createdAt": "2020-11-19T20:44:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` folder of your openHAB test instance.\n+\n+For the first time the jar is loaded automatically as a bundle.\n+If the jar is updated, your need to execute:\n+\n+    bundle:update \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+   \n+or get the ID and update the bundle using the ID:\n+\n+    bundle:list\n+    -> Get ID for \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+    bundle:update <ID>\n+\n+    \n+\n+## Debugging\n+\n+To get debug output and traces of the Bosch SHC binding code\n+add the following lines into ``userdata/etc/log4j2.xml`` Loggers XML section. \n+\n+    <!-- Bosch SHC for debugging -->\n+\t<Logger level=\"TRACE\" name=\"org.openhab.binding.boschshc\"/>\n+\n+## Pairing and  Certificates\n+\n+We need secured and paired connection from the openHAB binding instacne to the Bosch SHC.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4ODY0Nw==", "bodyText": "This is actually the Bridge configuration. If I see correctly, your binding has no configuration at the top level.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527188647", "createdAt": "2020-11-19T20:48:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type     | Description                                  |\n+|--------------------|---------------|----------------------------------------------|\n+| power-switch       | Switch        | Current state of the switch.                 |\n+| power-consumption  | Number:Power  | Current power consumption (W) of the device. |\n+| energy-consumption | Number:Energy | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type            | Description                                                                                       |\n+|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n+| temperature        | Number:Temperature   | Current measured temperature.                                                                     |\n+| temperature-rating | String               | Rating of the currently measured temperature.                                                     |\n+| humidity           | Number:Dimensionless | Current measured humidity.                                                                        |\n+| humidity-rating    | String               | Rating of current measured humidity.                                                              |\n+| purity             | Number:Dimensionless | Purity of the air (ppm). Range from 500 to 5500 ppm. A higher value indicates a higher pollution. |\n+| purity-rating      | String               | Rating of current measured purity.                                                                |\n+| air-description    | String               | Overall description of the air quality.                                                           |\n+| combined-rating    | String               | Combined rating of the air quality.                                                               |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+|-----------------|-----------|------------------------------|\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+|-----------------|-----------|--------------------------------|\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+|-----------------|---------------|------------------------------------------|\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type            | Description                                    |\n+|-----------------------|----------------------|------------------------------------------------|\n+| temperature           | Number:Temperature   | Current measured temperature.                  |\n+| valve-tappet-position | Number:Dimensionless | Current open ratio of valve tappet (0 to 100). |\n+\n+### Bosch Climate Control\n+\n+**Thing Type ID**: `climate-control`\n+\n+| Channel Type ID      | Item Type          | Description                   |\n+|----------------------|--------------------|-------------------------------|\n+| temperature          | Number:Temperature | Current measured temperature. |\n+| setpoint-temperature | Number:Temperature | Desired temperature.          |\n+\n+## Limitations\n+\n+- Discovery of Things\n+- Discovery of Bridge\n+\n+## Discovery\n+\n+Configuration via configuration files or UI (see below).\n+\n+## Binding Configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MDczNg==", "bodyText": "Is the password parameter missing?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527190736", "createdAt": "2020-11-19T20:52:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type     | Description                                  |\n+|--------------------|---------------|----------------------------------------------|\n+| power-switch       | Switch        | Current state of the switch.                 |\n+| power-consumption  | Number:Power  | Current power consumption (W) of the device. |\n+| energy-consumption | Number:Energy | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type            | Description                                                                                       |\n+|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n+| temperature        | Number:Temperature   | Current measured temperature.                                                                     |\n+| temperature-rating | String               | Rating of the currently measured temperature.                                                     |\n+| humidity           | Number:Dimensionless | Current measured humidity.                                                                        |\n+| humidity-rating    | String               | Rating of current measured humidity.                                                              |\n+| purity             | Number:Dimensionless | Purity of the air (ppm). Range from 500 to 5500 ppm. A higher value indicates a higher pollution. |\n+| purity-rating      | String               | Rating of current measured purity.                                                                |\n+| air-description    | String               | Overall description of the air quality.                                                           |\n+| combined-rating    | String               | Combined rating of the air quality.                                                               |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+|-----------------|-----------|------------------------------|\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+|-----------------|-----------|--------------------------------|\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+|-----------------|---------------|------------------------------------------|\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type            | Description                                    |\n+|-----------------------|----------------------|------------------------------------------------|\n+| temperature           | Number:Temperature   | Current measured temperature.                  |\n+| valve-tappet-position | Number:Dimensionless | Current open ratio of valve tappet (0 to 100). |\n+\n+### Bosch Climate Control\n+\n+**Thing Type ID**: `climate-control`\n+\n+| Channel Type ID      | Item Type          | Description                   |\n+|----------------------|--------------------|-------------------------------|\n+| temperature          | Number:Temperature | Current measured temperature. |\n+| setpoint-temperature | Number:Temperature | Desired temperature.          |\n+\n+## Limitations\n+\n+- Discovery of Things\n+- Discovery of Bridge\n+\n+## Discovery\n+\n+Configuration via configuration files or UI (see below).\n+\n+## Binding Configuration\n+\n+You need to provide the IP address and the system password of your Bosch Smart Home Controller.\n+The IP address of the controller is visible in the Bosch Smart Home Mobile App (More -> System -> Smart Home Controller) or in your network router UI.\n+The system password is set by you during your initial registration steps in the _Bosch Smart Home App_.\n+\n+A keystore file with a self signed certificate is created automatically.\n+This certificate is used for pairing between the Bridge and the Bosch SHC.\n+\n+*Press and hold the Bosch Smart Home Controller Bridge button until the LED starts blinking after you save your settings for pairing*.\n+\n+## Getting the device IDs\n+\n+Bosch IDs for found devices are displayed in the openHAB log on bootup (`OPENHAB_FOLDER/userdata/logs/openhab.log`)\n+\n+Example:\n+\n+```\n+2020-08-11 12:42:49.490 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.495 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_1\n+2020-08-11 12:42:49.497 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-VentilationService- id=ventilationService\n+2020-08-11 12:42:49.498 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Gro\u00dfes Fenster id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.501 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-IntrusionDetectionSystem- id=intrusionDetectionSystem\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung Haus id=hdm:ICom:819410185:HC1\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_6\n+2020-08-11 12:42:49.504 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=PhilipsHueBridgeManager id=hdm:PhilipsHueBridge:PhilipsHueBridgeManager\n+2020-08-11 12:42:49.505 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.506 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.507 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Central Heating id=hdm:ICom:819410185\n+```\n+\n+## Thing Configuration\n+\n+You define your Bosch devices by adding them either to a `.things` file in your `$OPENHAB_CONF/things` folder like this:\n+\n+```\n+Bridge boschshc:shc:1 [ ipAddress=\"192.168.x.y\" ] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MDg4Mw==", "bodyText": "Can you express this more abstract, as PaperUI will be removed in OH3? Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527190883", "createdAt": "2020-11-19T20:52:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type     | Description                                  |\n+|--------------------|---------------|----------------------------------------------|\n+| power-switch       | Switch        | Current state of the switch.                 |\n+| power-consumption  | Number:Power  | Current power consumption (W) of the device. |\n+| energy-consumption | Number:Energy | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type            | Description                                                                                       |\n+|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n+| temperature        | Number:Temperature   | Current measured temperature.                                                                     |\n+| temperature-rating | String               | Rating of the currently measured temperature.                                                     |\n+| humidity           | Number:Dimensionless | Current measured humidity.                                                                        |\n+| humidity-rating    | String               | Rating of current measured humidity.                                                              |\n+| purity             | Number:Dimensionless | Purity of the air (ppm). Range from 500 to 5500 ppm. A higher value indicates a higher pollution. |\n+| purity-rating      | String               | Rating of current measured purity.                                                                |\n+| air-description    | String               | Overall description of the air quality.                                                           |\n+| combined-rating    | String               | Combined rating of the air quality.                                                               |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+|-----------------|-----------|------------------------------|\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+|-----------------|-----------|--------------------------------|\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+|-----------------|---------------|------------------------------------------|\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type            | Description                                    |\n+|-----------------------|----------------------|------------------------------------------------|\n+| temperature           | Number:Temperature   | Current measured temperature.                  |\n+| valve-tappet-position | Number:Dimensionless | Current open ratio of valve tappet (0 to 100). |\n+\n+### Bosch Climate Control\n+\n+**Thing Type ID**: `climate-control`\n+\n+| Channel Type ID      | Item Type          | Description                   |\n+|----------------------|--------------------|-------------------------------|\n+| temperature          | Number:Temperature | Current measured temperature. |\n+| setpoint-temperature | Number:Temperature | Desired temperature.          |\n+\n+## Limitations\n+\n+- Discovery of Things\n+- Discovery of Bridge\n+\n+## Discovery\n+\n+Configuration via configuration files or UI (see below).\n+\n+## Binding Configuration\n+\n+You need to provide the IP address and the system password of your Bosch Smart Home Controller.\n+The IP address of the controller is visible in the Bosch Smart Home Mobile App (More -> System -> Smart Home Controller) or in your network router UI.\n+The system password is set by you during your initial registration steps in the _Bosch Smart Home App_.\n+\n+A keystore file with a self signed certificate is created automatically.\n+This certificate is used for pairing between the Bridge and the Bosch SHC.\n+\n+*Press and hold the Bosch Smart Home Controller Bridge button until the LED starts blinking after you save your settings for pairing*.\n+\n+## Getting the device IDs\n+\n+Bosch IDs for found devices are displayed in the openHAB log on bootup (`OPENHAB_FOLDER/userdata/logs/openhab.log`)\n+\n+Example:\n+\n+```\n+2020-08-11 12:42:49.490 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.495 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_1\n+2020-08-11 12:42:49.497 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-VentilationService- id=ventilationService\n+2020-08-11 12:42:49.498 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Gro\u00dfes Fenster id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.501 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-IntrusionDetectionSystem- id=intrusionDetectionSystem\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung Haus id=hdm:ICom:819410185:HC1\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_6\n+2020-08-11 12:42:49.504 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=PhilipsHueBridgeManager id=hdm:PhilipsHueBridge:PhilipsHueBridgeManager\n+2020-08-11 12:42:49.505 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.506 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.507 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Central Heating id=hdm:ICom:819410185\n+```\n+\n+## Thing Configuration\n+\n+You define your Bosch devices by adding them either to a `.things` file in your `$OPENHAB_CONF/things` folder like this:\n+\n+```\n+Bridge boschshc:shc:1 [ ipAddress=\"192.168.x.y\" ] {\n+  Thing in-wall-switch bathroom \"Bathroom\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch bedroom \"Bedroom\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch kitchen \"Kitchen\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch corridor \"Corridor\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch livingroom \"Living Room\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+\n+  Thing in-wall-switch coffeemachine \"Coffee Machine\" [ id=\"hdm:HomeMaticIP:3014F711A0000XXXXXXXXXXXX\" ]\n+\n+  Thing twinguard      tg-corridor    \"Twinguard Smoke Detector\" [ id=\"hdm:ZigBee:000d6f000XXXXXXX\" ]\n+  Thing window-contact window-kitchen \"Window Kitchen\"           [ id=\"hdm:HomeMaticIP:3014F711A00000XXXXXXXXXX\" ]\n+  Thing window-contact entrance       \"Entrance door\"            [ id=\"hdm:HomeMaticIP:3014F711A00000XXXXXXXXXX\" ]\n+\n+  Thing motion-detector  motion-corridor \"Bewegungsmelder\"      [ id=\"hdm:ZigBee:000d6f000XXXXXXX\" ]\n+}\n+```\n+\n+Or by adding them via PaperUI -> Configuration -> Things -> \"+\" -> Bosch Smart Home Binding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA==", "bodyText": "Can you add these dependencies to the NOTICE file?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527191340", "createdAt": "2020-11-19T20:53:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwMDUxNw==", "bodyText": "Are you logging the stack trace by intention? Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527200517", "createdAt": "2020-11-19T21:10:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,388 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Cancel scheduled pairing.\n+        ScheduledFuture<?> scheduledPairing = this.scheduledPairing;\n+        if (scheduledPairing != null) {\n+            scheduledPairing.cancel(true);\n+            this.scheduledPairing = null;\n+        }\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.debug(\"HttpClient failed on bridge disposal: {}\", e.getMessage());\n+            }\n+            this.httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        this.scheduledPairing = scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwMTk2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    signer.update(\"Hello OpenHAB\".getBytes(StandardCharsets.UTF_8));\n          \n          \n            \n                    signer.update(\"Hello openHAB\".getBytes(StandardCharsets.UTF_8));", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527201968", "createdAt": "2020-11-19T21:13:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {\n+        final String dirName = \"CN=\" + getBoschSHCId() + \", O=openHAB, L=None, ST=None, C=None\";\n+        logger.debug(\"Creating a new self signed certificate: {}\", dirName);\n+        final Instant now = Instant.now();\n+        final Date notBefore = Date.from(now);\n+        final Date notAfter = Date.from(now.plus(Duration.ofDays(365 * 10)));\n+        X500Name name = new X500Name(dirName);\n+\n+        // create the certificate\n+        X509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(name, // Issuer\n+                BigInteger.valueOf(now.toEpochMilli()), notBefore, notAfter, name, // Subject\n+                keyPair.getPublic() // Public key to be associated with the certificate\n+        );\n+        // and sign it\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n+        return new JcaX509CertificateConverter().setProvider(new BouncyCastleProvider())\n+                .getCertificate(certificateBuilder.build(contentSigner));\n+    }\n+\n+    private KeyStore createKeyStore(String keystore, String keystorePassword)\n+            throws IOException, OperatorCreationException, GeneralSecurityException {\n+        // create a new keystore\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        keyStore.load(null, null);\n+\n+        // create new key pair for BoschSHC binding\n+        logger.debug(\"Creating new keypair\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+        KeyPair keyPair = kpg.generateKeyPair();\n+\n+        Security.addProvider(new BouncyCastleProvider());\n+        Signature signer = Signature.getInstance(\"SHA256withRSA\", \"BC\");\n+        signer.initSign(keyPair.getPrivate());\n+        signer.update(\"Hello OpenHAB\".getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwNDg5Nw==", "bodyText": "Does that mean send() will block for 20 sec regularly? If so, you could take a look at Jetty's async API to not block the framework's thread pool that long. See https://www.eclipse.org/jetty/documentation/current/http-client-api.html#http-client-async", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527204897", "createdAt": "2020-11-19T21:18:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling.\n+     * \n+     * @param httpClient Http client to use for sending subscription request\n+     * @return Subscription id\n+     */\n+    private String subscribe(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        try {\n+            String url = httpClient.createUrl(\"remote/json-rpc\");\n+            JsonRpcRequest request = new JsonRpcRequest(\"2.0\", \"RE/subscribe\",\n+                    new String[] { \"com/bosch/sh/remote/*\", null });\n+            logger.debug(\"Subscribe: Sending request: {} - using httpClient {}\", gson.toJson(request), httpClient);\n+            Request httpRequest = httpClient.createRequest(url, POST, request);\n+            SubscribeResult response = httpClient.sendRequest(httpRequest, SubscribeResult.class);\n+\n+            logger.debug(\"Subscribe: Got subscription ID: {} {}\", response.getResult(), response.getJsonrpc());\n+            String subscriptionId = response.getResult();\n+            return subscriptionId;\n+        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n+            throw new LongPollingFailedException(\"Error on subscribe request\", e);\n+        }\n+    }\n+\n+    private void executeLongPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        scheduler.execute(() -> this.longPoll(httpClient, subscriptionId));\n+    }\n+\n+    /**\n+     * Start long polling the home controller. Once a long poll resolves, a new one is started.\n+     */\n+    private void longPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        logger.debug(\"Sending long poll request\");\n+\n+        JsonRpcRequest requestContent = new JsonRpcRequest(\"2.0\", \"RE/longPoll\", new String[] { subscriptionId, \"20\" });\n+        String url = httpClient.createUrl(\"remote/json-rpc\");\n+        Request request = httpClient.createRequest(url, POST, requestContent);\n+\n+        // Long polling responds after 20 seconds with an empty response if no update has happened\n+        request.timeout(30, TimeUnit.SECONDS);\n+\n+        this.request = request;\n+        try {\n+            ContentResponse contentResponse = request.send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ3NjI2Mw==", "bodyText": "Better only use the OH units. Same for the others.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, AbstractUnit.ONE));\n          \n          \n            \n                    updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, SmartHomeUnits.ONE));", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527476263", "createdAt": "2020-11-20T06:54:47Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+import tec.uom.se.AbstractUnit;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(state.temperature, SIUnits.CELSIUS));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, AbstractUnit.ONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MDIwOA==", "bodyText": "Is the supported-bridge-type-refs tag missing?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527480208", "createdAt": "2020-11-20T07:05:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4Mjc1OA==", "bodyText": "How would you visualize the motion in a sitemap? Many motion sensors have a Contact Channel, which you can map to the motion icon easily.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527482758", "createdAt": "2020-11-20T07:12:38Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MzY0Njgz", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-535364683", "createdAt": "2020-11-20T11:55:56Z", "commit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1NTo1NlrOH3Mxtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1NTo1NlrOH3Mxtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MzA2Mg==", "bodyText": "The IOException is never thrown.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527643062", "createdAt": "2020-11-20T11:55:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzA4MTM1", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-544708135", "createdAt": "2020-12-04T07:21:25Z", "commit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzoyMToyNVrOH_D8Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo1MjoxMlrOH_Ey7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4Njg3OA==", "bodyText": "These are excluded at project level and don't need to be excluded in your bundle.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535886878", "createdAt": "2020-12-04T07:21:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/.gitignore", "diffHunk": "@@ -0,0 +1,2 @@\n+/.classpath\n+/.project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5NzM0NQ==", "bodyText": "I'm still wondering how you would control e.g. the motion icon without a rule. But that's only a functional issue, which is up to you.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535897345", "createdAt": "2020-12-04T07:44:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4Mjc1OA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwMDkxMA==", "bodyText": "Constants should be all upper case.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535900910", "createdAt": "2020-12-04T07:52:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandlerFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_CLIMATE_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_INWALL_SWITCH;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_MOTION_DETECTOR;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHC;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHUTTER_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_THERMOSTAT;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_TWINGUARD;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_WINDOW_CONTACT;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.devices.climatecontrol.ClimateControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.BoschInWallSwitchHandler;\n+import org.openhab.binding.boschshc.internal.devices.motiondetector.MotionDetectorHandler;\n+import org.openhab.binding.boschshc.internal.devices.shuttercontrol.ShutterControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.thermostat.ThermostatHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.BoschTwinguardHandler;\n+import org.openhab.binding.boschshc.internal.devices.windowcontact.WindowContactHandler;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link BoschSHCHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - Added Shutter Control and ThermostatHandler; refactored handler mapping\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.boschshc\", service = ThingHandlerFactory.class)\n+public class BoschSHCHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static class ThingTypeHandlerMapping {\n+        public ThingTypeUID thingTypeUID;\n+        public Function<Thing, BaseThingHandler> handlerSupplier;\n+\n+        public ThingTypeHandlerMapping(ThingTypeUID thingTypeUID, Function<Thing, BaseThingHandler> handlerSupplier) {\n+            this.thingTypeUID = thingTypeUID;\n+            this.handlerSupplier = handlerSupplier;\n+        }\n+    }\n+\n+    private static final Collection<ThingTypeHandlerMapping> supportedThingTypes = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NjE2NDM1", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-546616435", "createdAt": "2020-12-07T23:13:19Z", "commit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoxMzoxOVrOIA_EgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyNDo1MFrOIA_hww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNDI1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.registerService(this.powerSwitchService, this::updateChannels, Arrays.asList(CHANNEL_POWER_SWITCH));\n          \n          \n            \n                    this.registerService(this.powerSwitchService, this::updateChannels, List.of(CHANNEL_POWER_SWITCH));", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537904256", "createdAt": "2020-12-07T23:13:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import javax.measure.quantity.Energy;\n+import javax.measure.quantity.Power;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private final PowerSwitchService powerSwitchService;\n+\n+    public BoschInWallSwitchHandler(Thing thing) {\n+        super(thing);\n+        this.powerSwitchService = new PowerSwitchService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.powerSwitchService, this::updateChannels, Arrays.asList(CHANNEL_POWER_SWITCH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNjQ4MQ==", "bodyText": "You need to handle the syntax exception that gson throws here.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537906481", "createdAt": "2020-12-07T23:17:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        @Nullable\n+        TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNzU1Nw==", "bodyText": "I wouldn't consider this a proper handling of the InterruptedException. You need to either throw another exception or rethrow the InterruptedException.\nAn InterruptedException typically means that the interrupter wants the thread to stop what it is doing and shut down. Handling the InterruptedException here would cause code higher up the stack to continue running normally, which is exactly the opposite of what the interrupter wants to happen.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537907557", "createdAt": "2020-12-07T23:20:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNzc2MQ==", "bodyText": "same here", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537907761", "createdAt": "2020-12-07T23:20:31Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwODQ1MQ==", "bodyText": "super.dispose() should typically be called last.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537908451", "createdAt": "2020-12-07T23:21:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwODcyOQ==", "bodyText": "It would be useful for the user if you included the exception message in the status.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537908729", "createdAt": "2020-12-07T23:22:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwOTgxNg==", "bodyText": "same issue as earlier.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537909816", "createdAt": "2020-12-07T23:23:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Cancel scheduled pairing.\n+        ScheduledFuture<?> scheduledPairing = this.scheduledPairing;\n+        if (scheduledPairing != null) {\n+            scheduledPairing.cancel(true);\n+            this.scheduledPairing = null;\n+        }\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.debug(\"HttpClient failed on bridge disposal: {}\", e.getMessage());\n+            }\n+            this.httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        this.scheduledPairing = scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed: {}\", e.getMessage());\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMTc0Nw==", "bodyText": "same here, if I missed any others please take a look and try to address them.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537911747", "createdAt": "2020-12-07T23:24:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Cancel scheduled pairing.\n+        ScheduledFuture<?> scheduledPairing = this.scheduledPairing;\n+        if (scheduledPairing != null) {\n+            scheduledPairing.cancel(true);\n+            this.scheduledPairing = null;\n+        }\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.debug(\"HttpClient failed on bridge disposal: {}\", e.getMessage());\n+            }\n+            this.httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        this.scheduledPairing = scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed: {}\", e.getMessage());\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Query the Bosch Smart Home Controller for the state of the given thing.\n+     *\n+     * @param deviceId Id of device to get state for\n+     * @param stateName Name of the state to query\n+     * @param stateClass Class to convert the resulting JSON to\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     * @throws BoschSHCException\n+     */\n+    public <T extends BoschSHCServiceState> @Nullable T getState(String deviceId, String stateName, Class<T> stateClass)\n+            throws InterruptedException, TimeoutException, ExecutionException, BoschSHCException {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            logger.warn(\"HttpClient not initialized\");\n+            return null;\n+        }\n+\n+        String url = httpClient.createServiceUrl(stateName, deviceId);\n+        Request request = httpClient.createRequest(url, GET).header(\"Accept\", \"application/json\");\n+\n+        logger.debug(\"refreshState: Requesting \\\"{}\\\" from Bosch: {} via {}\", stateName, deviceId, url);\n+\n+        ContentResponse contentResponse = request.send();\n+\n+        String content = contentResponse.getContentAsString();\n+        logger.debug(\"refreshState: Request complete: [{}] - return code: {}\", content, contentResponse.getStatus());\n+\n+        int statusCode = contentResponse.getStatus();\n+        if (statusCode != 200) {\n+            JsonRestExceptionResponse errorResponse = gson.fromJson(content, JsonRestExceptionResponse.class);\n+            if (errorResponse != null) {\n+                throw new BoschSHCException(String.format(\n+                        \"State request for service %s of device %s failed with status code %d and error code %s\",\n+                        stateName, deviceId, errorResponse.statusCode, errorResponse.errorCode));\n+            } else {\n+                throw new BoschSHCException(\n+                        String.format(\"State request for service %s of device %s failed with status code %d\", stateName,\n+                                deviceId, statusCode));\n+            }\n+        }\n+\n+        @Nullable\n+        T state = gson.fromJson(content, stateClass);\n+        if (state == null) {\n+            throw new BoschSHCException(String.format(\"Received invalid, expected type %s\", stateClass.getName()));\n+        }\n+        return state;\n+    }\n+\n+    /**\n+     * Sends a state change for a device to the controller\n+     * \n+     * @param deviceId Id of device to change state for\n+     * @param serviceName Name of service of device to change state for\n+     * @param state New state data to set for service\n+     * \n+     * @return Response of request\n+     */\n+    public <T extends BoschSHCServiceState> @Nullable Response putState(String deviceId, String serviceName, T state) {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            logger.warn(\"HttpClient not initialized\");\n+            return null;\n+        }\n+\n+        // Create request\n+        String url = httpClient.createServiceUrl(serviceName, deviceId);\n+        Request request = httpClient.createRequest(url, PUT, state);\n+\n+        // Send request\n+        try {\n+            Response response = request.send();\n+            return response;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.warn(\"HTTP request failed: {}\", e.getMessage());\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 395}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTYyMTI2", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-550562126", "createdAt": "2020-12-11T20:38:48Z", "commit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDozODo0OFrOIEMKrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTowMzoxMFrOIENmMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NDU1Nw==", "bodyText": "Also pass on the causing exception.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ExecutionException(String.format(\"Received invalid content in response, expected type %s: %s\",\n          \n          \n            \n                                responseContentClass.getName(), e.getMessage()), null);\n          \n          \n            \n                        throw new ExecutionException(String.format(\"Received invalid content in response, expected type %s: %s\",\n          \n          \n            \n                                responseContentClass.getName(), e.getMessage()), e);", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541264557", "createdAt": "2020-12-11T20:38:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);\n+            if (content == null) {\n+                throw new ExecutionException(String.format(\"Received no content in response, expected type %s\",\n+                        responseContentClass.getName()), null);\n+            }\n+            return content;\n+        } catch (JsonSyntaxException e) {\n+            throw new ExecutionException(String.format(\"Received invalid content in response, expected type %s: %s\",\n+                    responseContentClass.getName(), e.getMessage()), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NTUwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @Nullable\n          \n          \n            \n                        TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);\n          \n          \n            \n                        TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541265508", "createdAt": "2020-12-11T20:39:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2ODg4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable\n          \n          \n            \n                    AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);\n          \n          \n            \n                    AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541268889", "createdAt": "2020-12-11T20:43:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(state.temperature, SIUnits.CELSIUS));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, Units.ONE));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new QuantityType<Dimensionless>(state.purity, Units.ONE));\n+        updateState(CHANNEL_AIR_DESCRIPTION, new StringType(state.description));\n+        updateState(CHANNEL_PURITY_RATING, new StringType(state.purityRating));\n+        updateState(CHANNEL_COMBINED_RATING, new StringType(state.combinedRating));\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {\n+        logger.debug(\"Twinguard: received update: {} {}\", id, state);\n+\n+        @Nullable\n+        AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3MTQ4NA==", "bodyText": "Although it is a RuntimeException, it should be handled by callers so you should declare it in the method signature so that callers know that it might get thrown.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void processUpdate(String id, JsonElement state) {\n          \n          \n            \n                public void processUpdate(String id, JsonElement state) throws JsonSyntaxException{", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541271484", "createdAt": "2020-12-11T20:46:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(state.temperature, SIUnits.CELSIUS));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, Units.ONE));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new QuantityType<Dimensionless>(state.purity, Units.ONE));\n+        updateState(CHANNEL_AIR_DESCRIPTION, new StringType(state.description));\n+        updateState(CHANNEL_PURITY_RATING, new StringType(state.purityRating));\n+        updateState(CHANNEL_COMBINED_RATING, new StringType(state.combinedRating));\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3ODA3MA==", "bodyText": "Gson instances should be static and final since they don't change.\nPlease make changes elsewhere as appropriate.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Gson gson = new Gson();\n          \n          \n            \n                private static final Gson gson = new Gson();\n          \n      \n    \n    \n  \n\nIt should also be noted that static final fields should be placed above all other fields.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541278070", "createdAt": "2020-12-11T20:53:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4MDY1Ng==", "bodyText": "Please put this nested class definition at the end of the class.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541280656", "createdAt": "2020-12-11T20:56:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4Nzk4NQ==", "bodyText": "I don't think logging the hashcode is going to very helpful for debugging...", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541287985", "createdAt": "2020-12-11T21:03:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling.\n+     * \n+     * @param httpClient Http client to use for sending subscription request\n+     * @return Subscription id\n+     */\n+    private String subscribe(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        try {\n+            String url = httpClient.createUrl(\"remote/json-rpc\");\n+            JsonRpcRequest request = new JsonRpcRequest(\"2.0\", \"RE/subscribe\",\n+                    new String[] { \"com/bosch/sh/remote/*\", null });\n+            logger.debug(\"Subscribe: Sending request: {} - using httpClient {}\", gson.toJson(request), httpClient);\n+            Request httpRequest = httpClient.createRequest(url, POST, request);\n+            SubscribeResult response = httpClient.sendRequest(httpRequest, SubscribeResult.class);\n+\n+            logger.debug(\"Subscribe: Got subscription ID: {} {}\", response.getResult(), response.getJsonrpc());\n+            String subscriptionId = response.getResult();\n+            return subscriptionId;\n+        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n+            throw new LongPollingFailedException(\"Error on subscribe request\", e);\n+        }\n+    }\n+\n+    private void executeLongPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        scheduler.execute(() -> this.longPoll(httpClient, subscriptionId));\n+    }\n+\n+    /**\n+     * Start long polling the home controller. Once a long poll resolves, a new one is started.\n+     */\n+    private void longPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        logger.debug(\"Sending long poll request\");\n+\n+        JsonRpcRequest requestContent = new JsonRpcRequest(\"2.0\", \"RE/longPoll\", new String[] { subscriptionId, \"20\" });\n+        String url = httpClient.createUrl(\"remote/json-rpc\");\n+        Request request = httpClient.createRequest(url, POST, requestContent);\n+\n+        // Long polling responds after 20 seconds with an empty response if no update has happened.\n+        // 10 second threshold was added to not time out if response from controller takes a bit longer than 20 seconds.\n+        request.timeout(30, TimeUnit.SECONDS);\n+\n+        this.request = request;\n+        LongPolling longPolling = this;\n+        request.send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                Throwable failure = result != null ? result.getFailure() : null;\n+                if (failure != null) {\n+                    if (failure instanceof ExecutionException) {\n+                        if (failure.getCause() instanceof AbortLongPolling) {\n+                            logger.debug(\"Canceling long polling for subscription id {} because it was aborted\",\n+                                    subscriptionId);\n+                        } else {\n+                            longPolling.handleFailure.accept(new LongPollingFailedException(\n+                                    \"Unexpected exception during long polling request\", failure));\n+                        }\n+                    } else {\n+                        longPolling.handleFailure.accept(new LongPollingFailedException(\n+                                \"Unexpected exception during long polling request\", failure));\n+                    }\n+                } else {\n+                    longPolling.onLongPollResponse(httpClient, subscriptionId, this.getContentAsString());\n+                }\n+            }\n+        });\n+    }\n+\n+    private void onLongPollResponse(BoschHttpClient httpClient, String subscriptionId, String content) {\n+        // Check if thing is still online\n+        if (this.aborted) {\n+            logger.debug(\"Canceling long polling for subscription id {} because it was aborted\", subscriptionId);\n+            return;\n+        }\n+\n+        logger.debug(\"Long poll response: {}\", content);\n+\n+        String nextSubscriptionId = subscriptionId;\n+\n+        LongPollResult longPollResult = gson.fromJson(content, LongPollResult.class);\n+        if (longPollResult != null) {\n+            this.handleResult.accept(longPollResult);\n+        } else {\n+            logger.warn(\"Could not parse long poll response: {}\", content);\n+\n+            // Check if we got a proper result from the SHC\n+            LongPollError longPollError = gson.fromJson(content, LongPollError.class);\n+\n+            if (longPollError != null) {\n+                logger.warn(\"Got error from SHC: {}\", longPollError.error.hashCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTUyOTY2", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-555952966", "createdAt": "2020-12-19T16:31:42Z", "commit": {"oid": "59165a5bc2c822910658bc181a18f0bc6ac987eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzMDg3Nzk1", "url": "https://github.com/openhab/openhab-addons/pull/8629#pullrequestreview-563087795", "createdAt": "2021-01-06T22:44:10Z", "commit": {"oid": "1d8c914d5dd468ea68ff4d3131e7d9eed2be51c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjo0NDoxMFrOIPYjuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjo0Nzo1N1rOIPYotw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMTkxNQ==", "bodyText": "Since this is a new year, please update the copyright date for all your files.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n             * Copyright (c) 2010-2021 Contributors to the openHAB project", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553001915", "createdAt": "2021-01-06T22:44:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d8c914d5dd468ea68ff4d3131e7d9eed2be51c8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMzE5MQ==", "bodyText": "Please move final fields above non-final fields.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553003191", "createdAt": "2021-01-06T22:47:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d8c914d5dd468ea68ff4d3131e7d9eed2be51c8"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "277fd94bbd9e5c5a776c2a06b6df48cfbfa167f7", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/277fd94bbd9e5c5a776c2a06b6df48cfbfa167f7", "committedDate": "2021-01-07T17:15:32Z", "message": "moved final fields above non-final fields\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}, "afterCommit": {"oid": "1b7cc8eb7509684fdf39e23084e4ab1988554f2c", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/1b7cc8eb7509684fdf39e23084e4ab1988554f2c", "committedDate": "2021-01-07T17:58:53Z", "message": "updated copyright year in header by executing mvn license:format\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42d5234ef9bfab8f9f21cb7a1de5880f3759186d", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/42d5234ef9bfab8f9f21cb7a1de5880f3759186d", "committedDate": "2021-01-07T18:51:00Z", "message": "Initial code from create_openhab_binding_skeleton.sh\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d631a85041348aa95b6a1483fad3fada8ec5005", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/5d631a85041348aa95b6a1483fad3fada8ec5005", "committedDate": "2021-01-07T18:51:00Z", "message": "Proof-of-concept: receive list of rooms and list of devices from controller\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0997aed856d9b02c5d0af34422d8600149effedb", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/0997aed856d9b02c5d0af34422d8600149effedb", "committedDate": "2021-01-07T18:51:00Z", "message": "Added subscribe and longPoll API calls\n\nThis gives basic functionality to receive updates from the Bosch Smart Home Controller\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6002f4b0ba4818c2bb54c9b3f0dbe70c7f01ae8f", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/6002f4b0ba4818c2bb54c9b3f0dbe70c7f01ae8f", "committedDate": "2021-01-07T18:51:00Z", "message": "Added classes representing data from the longPoll RPC call\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e07d7be82413b828338b8b84da6e685367e152be", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/e07d7be82413b828338b8b84da6e685367e152be", "committedDate": "2021-01-07T18:51:00Z", "message": "Made long poll API call asynchronous\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e24f493793e04cdf5516fd79395c7c640754763f", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/e24f493793e04cdf5516fd79395c7c640754763f", "committedDate": "2021-01-07T18:51:00Z", "message": "Added bridge + reorganized code\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51c199106918d373622d7f5df3348e33d71214a7", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/51c199106918d373622d7f5df3348e33d71214a7", "committedDate": "2021-01-07T18:51:01Z", "message": "Fixed compilation errors after refactoring\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efc0f09dac8044aaabca1c8a971f7948bfdea865", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/efc0f09dac8044aaabca1c8a971f7948bfdea865", "committedDate": "2021-01-07T18:51:01Z", "message": "Updating the power switch state works for a single hard-coded device\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5264dfb001d5947d1d4fb66d53f60fc7fea9166f", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/5264dfb001d5947d1d4fb66d53f60fc7fea9166f", "committedDate": "2021-01-07T18:51:01Z", "message": "Support multiple power switches: bridge ask handlers for their bosch IDs\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ab424f1df2fba472db18701db394d01f98102e", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/c5ab424f1df2fba472db18701db394d01f98102e", "committedDate": "2021-01-07T18:51:01Z", "message": "Can now switch lights + refresh light state on REFRESH\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a2dc089e7e8d31861f53d756cded448f33b6f9", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/a3a2dc089e7e8d31861f53d756cded448f33b6f9", "committedDate": "2021-01-07T18:51:01Z", "message": "Reduce debug output\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58b508e33f58feb0e54677f04929b4bf2b1f27c0", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/58b508e33f58feb0e54677f04929b4bf2b1f27c0", "committedDate": "2021-01-07T18:51:01Z", "message": "Added meta information for Bosch binding\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2da812667f8824cf19df492b5d6f1b66fe512aa0", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/2da812667f8824cf19df492b5d6f1b66fe512aa0", "committedDate": "2021-01-07T18:51:01Z", "message": "Set binding online only if fetching rooms and devices worked\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f5ac085b0336b385c4c67f818bb3688d8442967", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/4f5ac085b0336b385c4c67f818bb3688d8442967", "committedDate": "2021-01-07T18:51:01Z", "message": "Replaced hard-coded IP address with configuration from things file\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31badedc34355fab8de973d3b590b6fa9c21cdb0", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/31badedc34355fab8de973d3b590b6fa9c21cdb0", "committedDate": "2021-01-07T18:51:02Z", "message": "Fixes after rebasing on 2.5.x branch\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63b00947c305d82b40e3d37871e439e86c29f1c4", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/63b00947c305d82b40e3d37871e439e86c29f1c4", "committedDate": "2021-01-07T18:51:02Z", "message": "Put keystore where openhab user can access it\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ceb181ec7deb7abbd7bacdced8296f787708fda", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/3ceb181ec7deb7abbd7bacdced8296f787708fda", "committedDate": "2021-01-07T18:51:02Z", "message": "Attempt to get a new subscription ID when the old one is invalidated\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "725983d62c38ec11a6f1a241fcc19b6539581259", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/725983d62c38ec11a6f1a241fcc19b6539581259", "committedDate": "2021-01-07T18:51:02Z", "message": "Better install script\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dac8ee3e42024d5a5667d96cbcd0839ad64e963a", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/dac8ee3e42024d5a5667d96cbcd0839ad64e963a", "committedDate": "2021-01-07T18:51:02Z", "message": "Asynchronously get subscription ID\n\nOtherwise, code would get stuck on requesting second subscription ID\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77221069651e6742354da255ef5d21c68b369563", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/77221069651e6742354da255ef5d21c68b369563", "committedDate": "2021-01-07T18:51:02Z", "message": "Initial steps towards pairing\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "072b7987627f3e9616f744c4ea2646f06ddfae3b", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/072b7987627f3e9616f744c4ea2646f06ddfae3b", "committedDate": "2021-01-07T18:51:02Z", "message": "Doesn't compile because of bouncycastle - compiles if commented out\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ed5f6d29b0e0f7fec5864416575806064a59ed", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/76ed5f6d29b0e0f7fec5864416575806064a59ed", "committedDate": "2021-01-07T18:51:03Z", "message": "Bumped version\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "722b2842a1daa4f6ebf95edab5d31ddb275720da", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/722b2842a1daa4f6ebf95edab5d31ddb275720da", "committedDate": "2021-01-07T18:51:03Z", "message": "Added basic support for multiple devices to support Twinguard\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d223c2dcfc81ffc4c5e01869b514acc5800a385", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/0d223c2dcfc81ffc4c5e01869b514acc5800a385", "committedDate": "2021-01-07T18:51:03Z", "message": "Support for power meter in power switches + all values from Twinguard\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "446d1ff16a937866099f482ef065ba71938a71e2", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/446d1ff16a937866099f482ef065ba71938a71e2", "committedDate": "2021-01-07T18:51:03Z", "message": "Add window contact to the list of supported things\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a90aab777847c028ad680e35942a472224f0edfd", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/a90aab777847c028ad680e35942a472224f0edfd", "committedDate": "2021-01-07T18:51:03Z", "message": "Updated README to indicate new supported devices\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf9635a01ba351a106eae7540b912c4bc0e0956e", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/cf9635a01ba351a106eae7540b912c4bc0e0956e", "committedDate": "2021-01-07T18:51:03Z", "message": "Added missing file\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f913a0a8dd5f6e4ef376eb2f446805a7089435a8", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/f913a0a8dd5f6e4ef376eb2f446805a7089435a8", "committedDate": "2021-01-07T18:51:04Z", "message": "Added motion detector thing\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7be18947ebec373d37e150f3234694f43cd407fd", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/7be18947ebec373d37e150f3234694f43cd407fd", "committedDate": "2021-01-07T18:51:04Z", "message": "All devices support RefreshType now\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86e5dc99fcea8f422202706474f82ab4ee10ee22", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/86e5dc99fcea8f422202706474f82ab4ee10ee22", "committedDate": "2021-01-07T18:51:04Z", "message": "Cleanup - removed pairing related stuff that doesn't work\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d222e61e683b64e36771cb191f2667722f2a4fa", "author": {"user": {"login": "stefan-kaestle", "name": "Stefan Kaestle"}}, "url": "https://github.com/openhab/openhab-addons/commit/9d222e61e683b64e36771cb191f2667722f2a4fa", "committedDate": "2021-01-07T18:51:04Z", "message": "Fixed a weird bug where InWallSwitchHandler was not an instance of SHCHandler\n\nSigned-off-by: Stefan Kaestle <stefan@mad-kow.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a41278e72af2d6b153a3a2ed2cfe75624724ab85", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/a41278e72af2d6b153a3a2ed2cfe75624724ab85", "committedDate": "2021-01-07T18:51:04Z", "message": "Update BoschSHCBridgeHandler.java\n\nfixed HTTP request URL to get rooms from SHC\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c7e1ac465e2f91ff5971386ff994da57ae8c418", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/9c7e1ac465e2f91ff5971386ff994da57ae8c418", "committedDate": "2021-01-07T18:51:04Z", "message": "Add handler for Bosch Shutter Control to get and set its open level\n\nSigned-off-by: Christian Oeing <christian.oeing@scalamat.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e68630a44de90f82e9da59a194902e77f3d6d7f", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/9e68630a44de90f82e9da59a194902e77f3d6d7f", "committedDate": "2021-01-07T18:51:05Z", "message": "Auto update of .classpath by IDE\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1be4a4d00b4cf248f7214cc2a3638b307b43739", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/b1be4a4d00b4cf248f7214cc2a3638b307b43739", "committedDate": "2021-01-07T18:51:05Z", "message": "Handle PercentType command to set a specific shutter level\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ed012ae66cda2f080735a425b85317183987d8f", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/5ed012ae66cda2f080735a425b85317183987d8f", "committedDate": "2021-01-07T18:51:05Z", "message": "Put service name in constant instead of using it hard coded twice\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f31509c18ce7d6235e222a96aa5a029183b60f1", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/0f31509c18ce7d6235e222a96aa5a029183b60f1", "committedDate": "2021-01-07T18:51:05Z", "message": "Refactor putState method of BoschSHCBridgeHandler\n\nRemove unnecessary parts of the request like Gateway ID and put some general logic into separate methods to reuse them in other functions later\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3577cd7e8970b3a77d25ad6c165ad89b9926c127", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/3577cd7e8970b3a77d25ad6c165ad89b9926c127", "committedDate": "2021-01-07T18:51:05Z", "message": "Send operation state STOPPED to stop shutter from moving\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea1b1e08b85fdcbb69d47bca9bc7fee37a7373f2", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/ea1b1e08b85fdcbb69d47bca9bc7fee37a7373f2", "committedDate": "2021-01-07T18:51:05Z", "message": "Add shutter control to supported devices in README.md\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee2b8b95d5a13251e093f6d743c212817547ce77", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/ee2b8b95d5a13251e093f6d743c212817547ce77", "committedDate": "2021-01-07T18:51:05Z", "message": "Add null reference check to avoid a NullReferenceException in ShutterControlHandler if device state couldn't be fetched\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f248cf38fb4dd3cccd2fdb155e6d98250877178b", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f248cf38fb4dd3cccd2fdb155e6d98250877178b", "committedDate": "2021-01-07T18:51:05Z", "message": "Add TemperatureLevelService\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc450f5cd94d7c25b2e440a8e787e5079d6e2bd8", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/cc450f5cd94d7c25b2e440a8e787e5079d6e2bd8", "committedDate": "2021-01-07T18:51:06Z", "message": "Add ThermostatHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e322b453b33771631738685696c6f5fe14d109e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/9e322b453b33771631738685696c6f5fe14d109e", "committedDate": "2021-01-07T18:51:06Z", "message": "Add valve tappet position channel to thermostat via ValveTappet service\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4b49573e98793d52f11d644764ff3ead1b919c0", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f4b49573e98793d52f11d644764ff3ead1b919c0", "committedDate": "2021-01-07T18:51:06Z", "message": "Add service registration for BoschSHCHandler, so the state updates are automatically calling the registered state update callback of the handler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d58c20574fcf6ecf0435ca5524ce11675496c2e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/9d58c20574fcf6ecf0435ca5524ce11675496c2e", "committedDate": "2021-01-07T18:51:06Z", "message": "Add affectedChannels to service registration and handle RefreshType directly in BoschSHCHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "863a2ff64d21b7424d086978bb6a7c6b29e3a790", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/863a2ff64d21b7424d086978bb6a7c6b29e3a790", "committedDate": "2021-01-07T18:51:06Z", "message": "Cleaned up DeviceStatusUpdate class\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8640d247fa2937dcc63f68816b64e0e536d6095", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/b8640d247fa2937dcc63f68816b64e0e536d6095", "committedDate": "2021-01-07T18:51:06Z", "message": "added Bosch SHC certs\n\nadded public certificates from https://github.com/BoschSmartHome/bosch-shc-api-docs/tree/master/best_practice\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a19607c2362033b9313b822109388b52495dcf4f", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/a19607c2362033b9313b822109388b52495dcf4f", "committedDate": "2021-01-07T18:51:06Z", "message": "added pairing support\n\nadded support for keystore creation and pairing\ndocumented the process in readme\nrefactoring of httpClient to take care of SSL context\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bd952647548119ce12b41bc836a8928e3b9c2c1", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/5bd952647548119ce12b41bc836a8928e3b9c2c1", "committedDate": "2021-01-07T18:51:06Z", "message": "Add RoomClimateControlService and ClimateControlHandler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e5961200a14440ed2b47cc4b4a786b6eed7188", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/87e5961200a14440ed2b47cc4b4a786b6eed7188", "committedDate": "2021-01-07T18:51:07Z", "message": "Handle command to set setpoint temperature and move conversion from service state data to thing states into service state classes\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb865930afff772f305a9005798e6e99c2e7ee4e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/eb865930afff772f305a9005798e6e99c2e7ee4e", "committedDate": "2021-01-07T18:51:07Z", "message": "Remove unnecessary imports from ThermostatHandler.java\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25197541d7a280bfbb80facc2174a4bdf640b0e9", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/25197541d7a280bfbb80facc2174a4bdf640b0e9", "committedDate": "2021-01-07T18:51:07Z", "message": "Make new service and handler @NonNullByDefault\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "517f166f7e3f0782f41281d95ce93a0c4615a8cd", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/517f166f7e3f0782f41281d95ce93a0c4615a8cd", "committedDate": "2021-01-07T18:51:07Z", "message": "Added comments for climate control service, handler and base service and handler\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a86c3ac90fff045168f679911cd67530337e24", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/24a86c3ac90fff045168f679911cd67530337e24", "committedDate": "2021-01-07T18:51:07Z", "message": "Add missing comments on new classes and their methods\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27683907aea80c3a505ccc407917440054458aa2", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/27683907aea80c3a505ccc407917440054458aa2", "committedDate": "2021-01-07T18:51:07Z", "message": "Make registerService method of BoschSHCHandler private and adjust usages\n\nDerived handlers should use createService instead.\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07efc18165fb4f3ec8aa5b47dcf694e574c38d07", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/07efc18165fb4f3ec8aa5b47dcf694e574c38d07", "committedDate": "2021-01-07T18:51:07Z", "message": "Throw an error instead of returning null for method getBridgeHandler of BoschSHCHandler\n\nThis allows for fewer null checks after the initialization of a handler.\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aae9cfa7439b5e05bae669769bfd7cbe06d12f0", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/3aae9cfa7439b5e05bae669769bfd7cbe06d12f0", "committedDate": "2021-01-07T18:51:07Z", "message": "Add @author tags in JavaDoc of new classes\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e57cc9d7f7351a1024d785d8f172cbfeef70521", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/1e57cc9d7f7351a1024d785d8f172cbfeef70521", "committedDate": "2021-01-07T18:51:07Z", "message": "Ran mvn spotless:apply to apply correct code formatting\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4505e10ece3ade7ddae147c93a6236c988d185e", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/c4505e10ece3ade7ddae147c93a6236c988d185e", "committedDate": "2021-01-07T18:51:08Z", "message": "Fixed missing imports in BoschSHCService.java\n\nThis was caused by a too quick merge of me.\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "377b332bbbd0800e5a5934d723dab9a8a4ba2f98", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/377b332bbbd0800e5a5934d723dab9a8a4ba2f98", "committedDate": "2021-01-07T18:51:08Z", "message": "Fixed warnings about null annotations\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ecaefc5b7a59c55936563ff3fdc54e612767001", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/1ecaefc5b7a59c55936563ff3fdc54e612767001", "committedDate": "2021-01-07T18:51:08Z", "message": "Add @NonNullByDefault to all handlers\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff96dc39c8948d8d34519887eecd6838d3b55417", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/ff96dc39c8948d8d34519887eecd6838d3b55417", "committedDate": "2021-01-07T18:51:08Z", "message": "added license header by executing mvn license:format\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f50584828f59596372d7fa38118977570c56ccd", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/1f50584828f59596372d7fa38118977570c56ccd", "committedDate": "2021-01-07T18:51:08Z", "message": "#16 Adjust logger usages to not be too verbose\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "049a62540412c1d31d20b81b579ab420b878c7b4", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/049a62540412c1d31d20b81b579ab420b878c7b4", "committedDate": "2021-01-07T18:51:08Z", "message": "#10 Remove obsolete parse-things.py script\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cad447d48980d26eb0610156f769f8b564f1f73", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/8cad447d48980d26eb0610156f769f8b564f1f73", "committedDate": "2021-01-07T18:51:08Z", "message": "#29 Remove dev scripts install.sh and run.sh scripts\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d7e9b02acd3acd7051399f4a51aab40523538d5", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/2d7e9b02acd3acd7051399f4a51aab40523538d5", "committedDate": "2021-01-07T18:51:09Z", "message": "added author name to each class comment\n\nAdded the author(s) and small comment to each class based on the git\nhistory and if necessary created the basis class comment body.\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "080344731810f6ab907d81a37fb97d2a374d193a", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/080344731810f6ab907d81a37fb97d2a374d193a", "committedDate": "2021-01-07T18:51:09Z", "message": "added license header for new files\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "664b495b6e8b045b590b82da1c354e8198e9cca9", "author": {"user": {"login": "GerdZanker", "name": "Gerd Zanker"}}, "url": "https://github.com/openhab/openhab-addons/commit/664b495b6e8b045b590b82da1c354e8198e9cca9", "committedDate": "2021-01-07T18:51:09Z", "message": "run mvn spotless check/apply\n\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bc422fc4401d3e8c802d77a3ba48226f8f8aacc", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/8bc422fc4401d3e8c802d77a3ba48226f8f8aacc", "committedDate": "2021-01-07T18:51:09Z", "message": "#24 Catch error response when trying to get state of a service of a device and throw specific error instead of returning invalid state object\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edbd5d525f4816c8a5d32e52629e809a9142f8e4", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/edbd5d525f4816c8a5d32e52629e809a9142f8e4", "committedDate": "2021-01-07T18:51:09Z", "message": "#24 Run mvn spotless:apply and mvn license:format to respect coding guidelines\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7e571f25eaab6c02ff1f631e5f938ccd526f6f5", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/b7e571f25eaab6c02ff1f631e5f938ccd526f6f5", "committedDate": "2021-01-07T18:51:09Z", "message": "#5 Update README.md with up-to-date information about the setup of the binding\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bf7cda57f954674c147a8ec043ebd25d6c78173", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/7bf7cda57f954674c147a8ec043ebd25d6c78173", "committedDate": "2021-01-07T18:51:09Z", "message": "#31 Typo in README.md\n\nCo-authored-by: Gerd Zanker <gerd.zanker@web.de>\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20c80689b8a99e9c9d6150fc5416e2adc4180002", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/20c80689b8a99e9c9d6150fc5416e2adc4180002", "committedDate": "2021-01-07T18:51:10Z", "message": "Add detailed description of the system password to provide in README.md\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nCo-authored-by: Gerd Zanker <gerd.zanker@web.de>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "801f3bf003f52f74c9083eb9de3e6681260674b7", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/801f3bf003f52f74c9083eb9de3e6681260674b7", "committedDate": "2021-01-07T18:51:10Z", "message": "Fix non-initialized member of @NonNullByDefault class ValveTappetServiceState\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "829319c7820b00dafdf06b29c3b936d5cd810e03", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/829319c7820b00dafdf06b29c3b936d5cd810e03", "committedDate": "2021-01-07T18:51:10Z", "message": "#7 Moved each device to a separate subfolder inside devices folder\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "356efe2ec26ca9730ef91abadbbd6c9fafdacb52", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/356efe2ec26ca9730ef91abadbbd6c9fafdacb52", "committedDate": "2021-01-07T18:51:10Z", "message": "#44 Adjust version of org.openhab.addons.reactor.bundles to 2.5.9-SNAPSHOT in pom.xml\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34efc4131d22e9ffb9a8d4e62e14fecbc18fecf8", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/34efc4131d22e9ffb9a8d4e62e14fecbc18fecf8", "committedDate": "2021-01-07T18:51:10Z", "message": "#45 Increase year in copyright headers\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25cca621fdb1329b2c14c00963c928049e12c616", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/25cca621fdb1329b2c14c00963c928049e12c616", "committedDate": "2021-01-07T18:51:10Z", "message": "#45 Remove several obsolete loggers and fix logging of exceptions\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15d49c7cf58deec19471e26d3e8b4ef22b313f4b", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/15d49c7cf58deec19471e26d3e8b4ef22b313f4b", "committedDate": "2021-01-07T18:51:10Z", "message": "#45 Fixed some code analysis warnings\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02d79d8f64a992a04e0dad0ffa0848b4ef82db8", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/e02d79d8f64a992a04e0dad0ffa0848b4ef82db8", "committedDate": "2021-01-07T18:51:11Z", "message": "#45 Ran mvn spotless:apply\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c4e1bb12ed5cb0d5aec9aded1ce791328ddc19e", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/3c4e1bb12ed5cb0d5aec9aded1ce791328ddc19e", "committedDate": "2021-01-07T18:51:11Z", "message": "#45 Revert adding @NonNullByDefault to BoschSHCConfiguration\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca62d366b23a3c20b82477166343031cd8c835dc", "author": {"user": {"login": "coeing", "name": "Christian Oeing"}}, "url": "https://github.com/openhab/openhab-addons/commit/ca62d366b23a3c20b82477166343031cd8c835dc", "committedDate": "2021-01-07T18:51:11Z", "message": "#47 Fixed code analysis warnings\n\nSigned-off-by: Christian Oeing <christian.oeing@slashgames.org>\nSigned-off-by: Gerd Zanker <gerd.zanker@web.de>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4441, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}