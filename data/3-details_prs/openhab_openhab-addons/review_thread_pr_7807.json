{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDMzMDk5", "number": 7807, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozOTozOVrOEBzRcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMTozNTo1NFrOEDMRwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzI0MDgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/AbstractNetatmoThingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozOTozOVrOGd3k_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxNjo1NVrOGeAj2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MjQ3Ng==", "bodyText": "Maybe triggerEventChannels() and updateDataChannels() would be clearer ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433972476", "createdAt": "2020-06-02T15:39:39Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/AbstractNetatmoThingHandler.java", "diffHunk": "@@ -137,16 +132,39 @@ protected State getNAThingProperty(String channelId) {\n     }\n \n     protected void updateChannels() {\n-        getThing().getChannels().stream().filter(channel -> channel.getKind() != ChannelKind.TRIGGER)\n+        updateNonTriggerChannels();\n+\n+        triggerTriggerChannels();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTY0Mg==", "bodyText": "ok, good suggestion\ndone", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r434119642", "createdAt": "2020-06-02T19:16:55Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/AbstractNetatmoThingHandler.java", "diffHunk": "@@ -137,16 +132,39 @@ protected State getNAThingProperty(String channelId) {\n     }\n \n     protected void updateChannels() {\n-        getThing().getChannels().stream().filter(channel -> channel.getKind() != ChannelKind.TRIGGER)\n+        updateNonTriggerChannels();\n+\n+        triggerTriggerChannels();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MjQ3Ng=="}, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzI1MDM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0MTozNVrOGd3rBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxNjo0N1rOGeAjhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NDAyMg==", "bodyText": "Usually @nullable is put on the same line than the property declaration :\nprivate @Nullable NAWelcomeEvent lastEvent;", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433974022", "createdAt": "2020-06-02T15:41:35Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTU1Ng==", "bodyText": "ok, done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r434119556", "createdAt": "2020-06-02T19:16:47Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NDAyMg=="}, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzI1MTcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0MTo0OVrOGd3r_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMjo0Mzo0OFrOGgDk9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NDI2OQ==", "bodyText": "Cf supra.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433974269", "createdAt": "2020-06-02T15:41:49Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable\n     private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NTE2Ng==", "bodyText": "\"Cf supra\"?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436265166", "createdAt": "2020-06-06T12:29:49Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable\n     private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NDI2OQ=="}, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NjIyOQ==", "bodyText": "outdated", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436266229", "createdAt": "2020-06-06T12:43:48Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable\n     private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NDI2OQ=="}, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzI2MDUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0MzoxMlrOGd3xgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMzoxOTo1NFrOGgDuHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NTY4Mw==", "bodyText": "Instead of using a @nullable function, you could switch to Optional :\nprotected Optional<NAWelcomeHome> updateReadings() {\n....", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433975683", "createdAt": "2020-06-02T15:43:12Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable\n     private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable\n     private Integer dataTimeStamp;\n \n     public NAWelcomeHomeHandler(@NonNull Thing thing) {\n         super(thing);\n     }\n \n     @Override\n-    protected NAWelcomeHome updateReadings() {\n-        NAWelcomeHome result = null;\n+    protected @Nullable NAWelcomeHome updateReadings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODU3Mw==", "bodyText": "No, I won't do that. The method was there before my changes and it affects other classes. The Nullable/NonNull changes took already too much of my time, other people can refactor the existing code base.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436268573", "createdAt": "2020-06-06T13:19:54Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable\n     private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable\n     private Integer dataTimeStamp;\n \n     public NAWelcomeHomeHandler(@NonNull Thing thing) {\n         super(thing);\n     }\n \n     @Override\n-    protected NAWelcomeHome updateReadings() {\n-        NAWelcomeHome result = null;\n+    protected @Nullable NAWelcomeHome updateReadings() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NTY4Mw=="}, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzI2NjA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0NDowM1rOGd30xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMjo0NToyM1rOGgDlYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NjUxNg==", "bodyText": "channelId should not be nullable", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433976516", "createdAt": "2020-06-02T15:44:03Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -83,18 +84,21 @@ protected NAWelcomeHome updateReadings() {\n                     }\n                 });\n \n+                @Nullable NAWelcomeEvent previousLastEvent = lastEvent;\n                 result.getEvents().forEach(event -> {\n                     if (lastEvent == null || lastEvent.getTime() < event.getTime()) {\n                         lastEvent = event;\n                     }\n                 });\n+\n+                isNewLastEvent = previousLastEvent != null && !previousLastEvent.equals(lastEvent);\n             }\n         }\n         return result;\n     }\n \n     @Override\n-    protected State getNAThingProperty(String channelId) {\n+    protected State getNAThingProperty(@Nullable String channelId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2NjMzOQ==", "bodyText": "done (caused changes in many classes)", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436266339", "createdAt": "2020-06-06T12:45:23Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -83,18 +84,21 @@ protected NAWelcomeHome updateReadings() {\n                     }\n                 });\n \n+                @Nullable NAWelcomeEvent previousLastEvent = lastEvent;\n                 result.getEvents().forEach(event -> {\n                     if (lastEvent == null || lastEvent.getTime() < event.getTime()) {\n                         lastEvent = event;\n                     }\n                 });\n+\n+                isNewLastEvent = previousLastEvent != null && !previousLastEvent.equals(lastEvent);\n             }\n         }\n         return result;\n     }\n \n     @Override\n-    protected State getNAThingProperty(String channelId) {\n+    protected State getNAThingProperty(@Nullable String channelId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NjUxNg=="}, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzI2ODc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0NDozMlrOGd32lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMzoxODoyMVrOGgDt7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3Njk4MA==", "bodyText": "Optional would be better.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433976980", "createdAt": "2020-06-02T15:44:32Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +161,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODUyNA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436268524", "createdAt": "2020-06-06T13:18:21Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +161,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3Njk4MA=="}, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzI3MDU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0NDo0N1rOGd33lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMzoxODoxMlrOGgDt5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NzIzNg==", "bodyText": "Optional would be better.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433977236", "createdAt": "2020-06-02T15:44:47Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +161,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {\n+        if(lastEvent != null) {\n+            @Nullable String message = lastEvent.getMessage();\n+            if(message == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if(firstSubEvent != null) {\n+                    message = firstSubEvent.getMessage();\n+                }\n+            }\n+            return message;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected @Nullable String findSnapshotURL() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODUxNw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436268517", "createdAt": "2020-06-06T13:18:12Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +161,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {\n+        if(lastEvent != null) {\n+            @Nullable String message = lastEvent.getMessage();\n+            if(message == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if(firstSubEvent != null) {\n+                    message = firstSubEvent.getMessage();\n+                }\n+            }\n+            return message;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected @Nullable String findSnapshotURL() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NzIzNg=="}, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzI3NDUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0NToyMVrOGd354g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMzoxODowMlrOGgDt2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NzgyNg==", "bodyText": "Optional would be better for the function, and parameter should not be nullable.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433977826", "createdAt": "2020-06-02T15:45:21Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +161,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {\n+        if(lastEvent != null) {\n+            @Nullable String message = lastEvent.getMessage();\n+            if(message == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if(firstSubEvent != null) {\n+                    message = firstSubEvent.getMessage();\n+                }\n+            }\n+            return message;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected @Nullable String findSnapshotURL() {\n+        if(lastEvent != null) {\n+            NAWelcomeSnapshot snapshot = lastEvent.getSnapshot();\n+            if (snapshot == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if (firstSubEvent != null) {\n+                    snapshot = firstSubEvent.getSnapshot();\n+                }\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return null;\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private static @Nullable NAWelcomeSubEvent findFirstSubEvent(@Nullable NAWelcomeEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI2ODUwNQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436268505", "createdAt": "2020-06-06T13:18:02Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +161,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {\n+        if(lastEvent != null) {\n+            @Nullable String message = lastEvent.getMessage();\n+            if(message == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if(firstSubEvent != null) {\n+                    message = firstSubEvent.getMessage();\n+                }\n+            }\n+            return message;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected @Nullable String findSnapshotURL() {\n+        if(lastEvent != null) {\n+            NAWelcomeSnapshot snapshot = lastEvent.getSnapshot();\n+            if (snapshot == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if (firstSubEvent != null) {\n+                    snapshot = firstSubEvent.getSnapshot();\n+                }\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return null;\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private static @Nullable NAWelcomeSubEvent findFirstSubEvent(@Nullable NAWelcomeEvent event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NzgyNg=="}, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjk4OTk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxNTo0M1rOGf-1eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNjo0MjoyMVrOGgCPpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4ODUzOA==", "bodyText": "Based on the logic that calls this method, this parameter shouldn't be nullable.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static @Nullable NAWelcomeSubEvent findFirstSubEvent(@Nullable NAWelcomeEvent event) {\n          \n          \n            \n                private static @Nullable NAWelcomeSubEvent findFirstSubEvent(NAWelcomeEvent event) {", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436188538", "createdAt": "2020-06-05T22:15:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +159,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {\n+        if(lastEvent != null) {\n+            @Nullable String message = lastEvent.getMessage();\n+            if(message == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if(firstSubEvent != null) {\n+                    message = firstSubEvent.getMessage();\n+                }\n+            }\n+            return message;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected @Nullable String findSnapshotURL() {\n+        if(lastEvent != null) {\n+            NAWelcomeSnapshot snapshot = lastEvent.getSnapshot();\n+            if (snapshot == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if (firstSubEvent != null) {\n+                    snapshot = firstSubEvent.getSnapshot();\n+                }\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return null;\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private static @Nullable NAWelcomeSubEvent findFirstSubEvent(@Nullable NAWelcomeEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NDM4OQ==", "bodyText": "This is what a said: \"... but I think the \"feature\" is also buggy. See method NAWelcomeHomeHandler#findFirstSubEvent(...). I had to make this method to be NULL-safe, but it is never called with NULL...\". It breaks the build because the member \"lastEvent\" is marked as nullable... That the variable is checked against NULL before isn't recognized... To get the build working again I had to make the method NULL-safe which is totally useless / produces useless code. Have I said before that I don't like this stupid broken Nullable/NonNull \"feature\"...? ;-)\nYou can try to apply your code change, it breaks the Maven build without showing a warning within the IDE / IntelliJ... ;-) \"Null type mismatch (type annotations): required '@nonnull NAWelcomeEvent' but this expression has type '@nullable NAWelcomeEvent'\"", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436244389", "createdAt": "2020-06-06T06:42:21Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +159,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {\n+        if(lastEvent != null) {\n+            @Nullable String message = lastEvent.getMessage();\n+            if(message == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if(firstSubEvent != null) {\n+                    message = firstSubEvent.getMessage();\n+                }\n+            }\n+            return message;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected @Nullable String findSnapshotURL() {\n+        if(lastEvent != null) {\n+            NAWelcomeSnapshot snapshot = lastEvent.getSnapshot();\n+            if (snapshot == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if (firstSubEvent != null) {\n+                    snapshot = firstSubEvent.getSnapshot();\n+                }\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return null;\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private static @Nullable NAWelcomeSubEvent findFirstSubEvent(@Nullable NAWelcomeEvent event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4ODUzOA=="}, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjk5MDgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxNjowOVrOGf-2AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNzoxNjozMVrOGgCXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4ODY3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable private NAWelcomeEvent lastEvent;\n          \n          \n            \n                private boolean isNewLastEvent;\n          \n          \n            \n                @Nullable private Integer dataTimeStamp;\n          \n          \n            \n                private @Nullable NAWelcomeEvent lastEvent;\n          \n          \n            \n                private boolean isNewLastEvent;\n          \n          \n            \n                private @Nullable Integer dataTimeStamp;", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436188673", "createdAt": "2020-06-05T22:16:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,34 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n-    private NAWelcomeEvent lastEvent;\n-    private Integer dataTimeStamp;\n+    @Nullable private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable private Integer dataTimeStamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NjM4OA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436246388", "createdAt": "2020-06-06T07:16:31Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,34 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n-    private NAWelcomeEvent lastEvent;\n-    private Integer dataTimeStamp;\n+    @Nullable private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable private Integer dataTimeStamp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4ODY3Mw=="}, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjk5Njc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxOTozOFrOGf-5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNzowNzozM1rOGgCVfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4OTYyNw==", "bodyText": "If you are going to add this, you should fix these as well:\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[54,2066] The nullness annotation is redundant with a default that applies to this location\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[87,3626] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[100,4006] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[102,4116] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[104,4264] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[106,4416] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[112,4844] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[114,4987] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[118,5244] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[126,5681] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[144,6520] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[145,6592] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[149,6937] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[157,7287] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[159,7427] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[167,7936] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[218,9922] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[237,10497] Potential null pointer access: this expression has a '@Nullable' type", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436189627", "createdAt": "2020-06-05T22:19:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,34 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTczMQ==", "bodyText": "These are also false-positives / aren't solvable. This line can not produce a NullPointerException regarding lastEvent: \"if (lastEvent == null || lastEvent.getTime() < event.getTime())\"", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436245731", "createdAt": "2020-06-06T07:04:58Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,34 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4OTYyNw=="}, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0NTg4NQ==", "bodyText": "Only the first warning could get solved. All other warnings are false.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436245885", "createdAt": "2020-06-06T07:07:33Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,34 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4OTYyNw=="}, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4MTkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMzo1NDozMVrOGgD26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxNjo1OFrOGgFPhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MDgyNA==", "bodyText": "logger is final but not static", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436270824", "createdAt": "2020-06-06T13:54:31Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -15,50 +15,50 @@\n import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n-import java.util.Calendar;\n-import java.util.Optional;\n+import java.util.*;\n+import java.util.function.Function;\n \n-import org.eclipse.jdt.annotation.NonNull;\n+import io.swagger.client.model.*;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.netatmo.internal.ChannelTypeUtils;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI4MDQ2OQ==", "bodyText": "both is valid and I'm familiar with static declared loggers. And both is used within OpenHAB (when you search for \"static final Logger\"): http://www.slf4j.org/faq.html#declared_static\nBut I change that, in the netatmo binding code it is really never declared as static.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436280469", "createdAt": "2020-06-06T16:12:30Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -15,50 +15,50 @@\n import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n-import java.util.Calendar;\n-import java.util.Optional;\n+import java.util.*;\n+import java.util.function.Function;\n \n-import org.eclipse.jdt.annotation.NonNull;\n+import io.swagger.client.model.*;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.netatmo.internal.ChannelTypeUtils;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MDgyNA=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MzUwOQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293509", "createdAt": "2020-06-06T19:16:58Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -15,50 +15,50 @@\n import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n-import java.util.Calendar;\n-import java.util.Optional;\n+import java.util.*;\n+import java.util.function.Function;\n \n-import org.eclipse.jdt.annotation.NonNull;\n+import io.swagger.client.model.*;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.netatmo.internal.ChannelTypeUtils;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MDgyNA=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4MjU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMzo1NToyMlrOGgD3QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxNzoxMlrOGgFPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MDkxMg==", "bodyText": "Could be done at declaration", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436270912", "createdAt": "2020-06-06T13:55:22Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -15,50 +15,50 @@\n import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n-import java.util.Calendar;\n-import java.util.Optional;\n+import java.util.*;\n+import java.util.function.Function;\n \n-import org.eclipse.jdt.annotation.NonNull;\n+import io.swagger.client.model.*;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.netatmo.internal.ChannelTypeUtils;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n-    private NAWelcomeEvent lastEvent;\n-    private Integer dataTimeStamp;\n+    private Optional<NAWelcomeEvent> lastEvent;\n+    private boolean isNewLastEvent;\n+    private @Nullable Integer dataTimeStamp;\n \n-    public NAWelcomeHomeHandler(@NonNull Thing thing) {\n+    public NAWelcomeHomeHandler(Thing thing) {\n         super(thing);\n+        lastEvent = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MzUyMQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293521", "createdAt": "2020-06-06T19:17:12Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -15,50 +15,50 @@\n import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n-import java.util.Calendar;\n-import java.util.Optional;\n+import java.util.*;\n+import java.util.function.Function;\n \n-import org.eclipse.jdt.annotation.NonNull;\n+import io.swagger.client.model.*;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.netatmo.internal.ChannelTypeUtils;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n-    private NAWelcomeEvent lastEvent;\n-    private Integer dataTimeStamp;\n+    private Optional<NAWelcomeEvent> lastEvent;\n+    private boolean isNewLastEvent;\n+    private @Nullable Integer dataTimeStamp;\n \n-    public NAWelcomeHomeHandler(@NonNull Thing thing) {\n+    public NAWelcomeHomeHandler(Thing thing) {\n         super(thing);\n+        lastEvent = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MDkxMg=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4NjMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowMToyMlrOGgD5JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxODoxMlrOGgFQIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTM5Nw==", "bodyText": "space between if and '(' (doesn't the IDE format this automatically ?)", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271397", "createdAt": "2020-06-06T14:01:22Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MzY2Ng==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293666", "createdAt": "2020-06-06T19:18:12Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTM5Nw=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4NjMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowMToyOVrOGgD5Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxNzozOFrOGgFPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTM5OQ==", "bodyText": "space between if and '(' (doesn't the IDE format this automatically ?)", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271399", "createdAt": "2020-06-06T14:01:29Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MzU1Mw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293553", "createdAt": "2020-06-06T19:17:38Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTM5OQ=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4NjgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowMjozN1rOGgD5Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxNzo0NVrOGgFPuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTQ1NA==", "bodyText": "detectedObjectTypes.forEach() would be better.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271454", "createdAt": "2020-06-06T14:02:37Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MzU2Mw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293563", "createdAt": "2020-06-06T19:17:45Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTQ1NA=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4Nzg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowNDo0MVrOGgD54Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxOToyOFrOGgFQcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTU4NQ==", "bodyText": "Couldn't you use directly the EventTypeEnum to define the various events ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271585", "createdAt": "2020-06-06T14:04:41Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Mzc0NA==", "bodyText": "no, only MOVEMENT is available at EventTypeEnum. The others (human, animal and vehicle are at another enum). But I optimized the code a bit", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293744", "createdAt": "2020-06-06T19:19:28Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTU4NQ=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4ODM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowNTozM1rOGgD6Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxOTozOFrOGgFQfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTY0Mg==", "bodyText": "subEvents.forEach() would be better", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271642", "createdAt": "2020-06-06T14:05:33Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Mzc1Nw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293757", "createdAt": "2020-06-06T19:19:38Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTY0Mg=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4ODk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowNjo0NVrOGgD6Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxOTo0N1rOGgFQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTcxMQ==", "bodyText": "Why not use directly the NAWelcomeSubEvent.TypeEnum ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271711", "createdAt": "2020-06-06T14:06:45Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDgzNw==", "bodyText": "yes, when the event option should be \"HUMAN_DETECTED\" instead of \"HUMAN\". But maybe \"HUMAN\" is sufficient, the welcomeHomeEvent has also an option named \"PERSON\" instead of \"PERSON_DETECTED\".\nOk, I will change that, that simplifies it.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436290837", "createdAt": "2020-06-06T18:41:18Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTcxMQ=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Mzc3Nw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293777", "createdAt": "2020-06-06T19:19:47Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTcxMQ=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4OTI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowNzowM1rOGgD6hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxOTo1NlrOGgFQlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTc1MA==", "bodyText": "space between if and '('", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271750", "createdAt": "2020-06-06T14:07:03Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5Mzc4Mw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293783", "createdAt": "2020-06-06T19:19:56Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTc1MA=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU4OTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowNzo0NlrOGgD6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODozNzoyM1rOGgFEKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTgwOQ==", "bodyText": "Is @nullable required here ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271809", "createdAt": "2020-06-06T14:07:46Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDYwMA==", "bodyText": "yes, the variable can be NULL (it is not NonNull)", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436290600", "createdAt": "2020-06-06T18:37:23Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTgwOQ=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU5MDIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowODo0N1rOGgD6-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxNzo1M1rOGgFP2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTg2NA==", "bodyText": "space between if and '('", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271864", "createdAt": "2020-06-06T14:08:47Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MzU5NQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293595", "createdAt": "2020-06-06T19:17:53Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTg2NA=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU5MDMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDowOTowMFrOGgD7Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODozNjowM1rOGgFD3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTg3NQ==", "bodyText": "Is nullable required ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271875", "createdAt": "2020-06-06T14:09:00Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDUyNw==", "bodyText": "yes, otherwise this warning is shown: \"Expression 'findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null)' might evaluate to null but is assigned to a variable that is annotated with @NotNull\"", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436290527", "createdAt": "2020-06-06T18:36:03Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTg3NQ=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU5MTMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDoxMDo0MlrOGgD7iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxODozMjo1MFrOGgFDAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MjAwOA==", "bodyText": "Can you change this to a StringBuilder or a String.format(\"....\") ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436272008", "createdAt": "2020-06-06T14:10:42Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDI1Mw==", "bodyText": "IntelliJ shows the warning \"'StringBuilder' can be replaced with 'String'\". I think to use StringBuilder isn't required anymore since Java 6, because the compiler optimizes it itself. It is more readable when the Strings are concat with \"+\" in this case (there are no conditions, just simple String concat).", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436290253", "createdAt": "2020-06-06T18:32:11Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MjAwOA=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MDMwNw==", "bodyText": "It would look like this (+ linebreaks), but IntelliJ would show the warning, so I won't commit that:\n                return Optional.of(new StringBuilder() .append(WELCOME_PICTURE_URL) .append('?') .append(WELCOME_PICTURE_IMAGEID) .append('=') .append(snapshot.getId()) .append('&') .append(WELCOME_PICTURE_KEY) .append('=') .append(snapshot.getKey()) .toString());", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436290307", "createdAt": "2020-06-06T18:32:50Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MjAwOA=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzU5MTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDoxMTo1M1rOGgD7zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOToxNzo1OVrOGgFP_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MjA3Nw==", "bodyText": "space between if and '('", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436272077", "createdAt": "2020-06-06T14:11:53Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey());\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return Optional.empty();\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private State getPlaceInfo(Function<NAWelcomePlace, String> infoGetFunction) {\n+        return Optional.ofNullable(device).map(\n+                d -> toStringType(infoGetFunction.apply(d.getPlace()))\n+        ).orElse(UnDefType.UNDEF);\n+    }\n+\n+    private static Optional<NAWelcomeSubEvent> findFirstSubEvent(Optional<NAWelcomeEvent> event) {\n+        if(event.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5MzYyOA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436293628", "createdAt": "2020-06-06T19:17:59Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey());\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return Optional.empty();\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private State getPlaceInfo(Function<NAWelcomePlace, String> infoGetFunction) {\n+        return Optional.ofNullable(device).map(\n+                d -> toStringType(infoGetFunction.apply(d.getPlace()))\n+        ).orElse(UnDefType.UNDEF);\n+    }\n+\n+    private static Optional<NAWelcomeSubEvent> findFirstSubEvent(Optional<NAWelcomeEvent> event) {\n+        if(event.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MjA3Nw=="}, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzgyMTQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMTozMjoxMFrOGgFxgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwODoyOTowOFrOGgIA7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwMjIwOQ==", "bodyText": "This can be simplified to: lastEvent = result.getEvents().stream().min((e1, e2) -> e1.getTime() - e2.getTime());", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436302209", "createdAt": "2020-06-06T21:32:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -83,11 +82,14 @@ protected NAWelcomeHome updateReadings() {\n                     }\n                 });\n \n+                Optional<NAWelcomeEvent> previousLastEvent = lastEvent;\n                 result.getEvents().forEach(event -> {\n-                    if (lastEvent == null || lastEvent.getTime() < event.getTime()) {\n-                        lastEvent = event;\n+                    if (!lastEvent.isPresent() || lastEvent.get().getTime() < event.getTime()) {\n+                        lastEvent = Optional.of(event);\n                     }\n                 });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66622c5fa36cc9913b5eb9c59c425852dbeb960c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMzODkyNw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436338927", "createdAt": "2020-06-07T08:29:08Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -83,11 +82,14 @@ protected NAWelcomeHome updateReadings() {\n                     }\n                 });\n \n+                Optional<NAWelcomeEvent> previousLastEvent = lastEvent;\n                 result.getEvents().forEach(event -> {\n-                    if (lastEvent == null || lastEvent.getTime() < event.getTime()) {\n-                        lastEvent = event;\n+                    if (!lastEvent.isPresent() || lastEvent.get().getTime() < event.getTime()) {\n+                        lastEvent = Optional.of(event);\n                     }\n                 });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwMjIwOQ=="}, "originalCommit": {"oid": "66622c5fa36cc9913b5eb9c59c425852dbeb960c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzgyMzM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMTozNTo1NFrOGgFyZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwODoyODo1NFrOGgIA1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwMjQzOQ==", "bodyText": "I think this should work.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (event.isPresent()) {\n          \n          \n            \n                        List<NAWelcomeSubEvent> subEvents = event.get().getEventList();\n          \n          \n            \n                        if (subEvents != null && !subEvents.isEmpty()) {\n          \n          \n            \n                            return Optional.of(subEvents.get(0));\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return Optional.empty();\n          \n          \n            \n                    return event.map(NAWelcomeEvent::getEventList).flatMap(subEvents -> subEvents.stream().findFirst());", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436302439", "createdAt": "2020-06-06T21:35:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +99,151 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if (isNewLastEvent) {\n+            if (CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                findDetectedObjectTypes(lastEvent).forEach(detectedType -> triggerChannel(channelId, detectedType));\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if (!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if (event.getPersonId() != null) {\n+            detectedObjectTypes.add(NAWelcomeSubEvent.TypeEnum.HUMAN.name());\n+        }\n+\n+        if (NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.name());\n+        }\n+\n+        event.getEventList().forEach(subEvent -> {\n+            String detectedObjectType = subEvent.getType().name();\n+            detectedObjectTypes.add(detectedObjectType);\n+        });\n+        return detectedObjectTypes;\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if (lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if (lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey());\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return Optional.empty();\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private State getPlaceInfo(Function<NAWelcomePlace, String> infoGetFunction) {\n+        return Optional.ofNullable(device).map(\n+                d -> toStringType(infoGetFunction.apply(d.getPlace()))\n+        ).orElse(UnDefType.UNDEF);\n+    }\n+\n+    private static Optional<NAWelcomeSubEvent> findFirstSubEvent(Optional<NAWelcomeEvent> event) {\n+        if (event.isPresent()) {\n+            List<NAWelcomeSubEvent> subEvents = event.get().getEventList();\n+            if (subEvents != null && !subEvents.isEmpty()) {\n+                return Optional.of(subEvents.get(0));\n+            }\n+        }\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66622c5fa36cc9913b5eb9c59c425852dbeb960c"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMzODkwMQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436338901", "createdAt": "2020-06-07T08:28:54Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +99,151 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if (isNewLastEvent) {\n+            if (CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                findDetectedObjectTypes(lastEvent).forEach(detectedType -> triggerChannel(channelId, detectedType));\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if (!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if (event.getPersonId() != null) {\n+            detectedObjectTypes.add(NAWelcomeSubEvent.TypeEnum.HUMAN.name());\n+        }\n+\n+        if (NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.name());\n+        }\n+\n+        event.getEventList().forEach(subEvent -> {\n+            String detectedObjectType = subEvent.getType().name();\n+            detectedObjectTypes.add(detectedObjectType);\n+        });\n+        return detectedObjectTypes;\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if (lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if (lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey());\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return Optional.empty();\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private State getPlaceInfo(Function<NAWelcomePlace, String> infoGetFunction) {\n+        return Optional.ofNullable(device).map(\n+                d -> toStringType(infoGetFunction.apply(d.getPlace()))\n+        ).orElse(UnDefType.UNDEF);\n+    }\n+\n+    private static Optional<NAWelcomeSubEvent> findFirstSubEvent(Optional<NAWelcomeEvent> event) {\n+        if (event.isPresent()) {\n+            List<NAWelcomeSubEvent> subEvents = event.get().getEventList();\n+            if (subEvents != null && !subEvents.isEmpty()) {\n+                return Optional.of(subEvents.get(0));\n+            }\n+        }\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwMjQzOQ=="}, "originalCommit": {"oid": "66622c5fa36cc9913b5eb9c59c425852dbeb960c"}, "originalPosition": 271}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4934, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}