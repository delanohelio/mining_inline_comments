{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNDI1OTE1", "number": 8521, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0NTo0N1rOEmtfjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDoxMToyNFrOE2dnIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDI2NzAyOnYy", "diffSide": "RIGHT", "path": "bom/openhab-addons/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0NTo0N1rOHW5s_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0NTo0N1rOHW5s_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3NjEyNQ==", "bodyText": "?", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r493776125", "createdAt": "2020-09-23T17:45:47Z", "author": {"login": "cpmeister"}, "path": "bom/openhab-addons/pom.xml", "diffHunk": "@@ -765,7 +770,7 @@\n       <groupId>org.openhab.addons.bundles</groupId>\n       <artifactId>org.openhab.binding.neohub</artifactId>\n       <version>${project.version}</version>\n-    </dependency>\n+   </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6ed3c2e6396765feda2c572c37fc40cd376b9c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDI3MTM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/feature/feature.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0Njo1NVrOHW5vnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMTo0OToyNFrOHYm3nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3Njc5OQ==", "bodyText": "isn't this supposed to be changed now?", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r493776799", "createdAt": "2020-09-23T17:46:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.http/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.http-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6ed3c2e6396765feda2c572c37fc40cd376b9c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2MDY0OQ==", "bodyText": "According to the discussions in another PR: no.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r495560649", "createdAt": "2020-09-27T11:01:39Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.http/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.http-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3Njc5OQ=="}, "originalCommit": {"oid": "1f6ed3c2e6396765feda2c572c37fc40cd376b9c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU2NDcwMQ==", "bodyText": "openhab/openhab-core#1673", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r495564701", "createdAt": "2020-09-27T11:49:24Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.http/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.http-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3Njc5OQ=="}, "originalCommit": {"oid": "1f6ed3c2e6396765feda2c572c37fc40cd376b9c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDMyNTAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/GenericItemConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowMDozMFrOHW6Q4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowMDozMFrOHW6Q4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NTMxNQ==", "bodyText": "I don't know if generics would complicate things. But if the compiler will accept StringType::new as a Function<String, State> instance then it should be possible to replace the following without difficulty.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GenericItemConverter<T extends State> extends AbstractTransformingItemConverter {\n          \n          \n            \n                private final Class<T> clazz;\n          \n          \n            \n            \n          \n          \n            \n                public GenericItemConverter(Class<T> clazz, Consumer<State> updateState, Consumer<Command> postCommand,\n          \n          \n            \n                        @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n          \n          \n            \n                        ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n          \n          \n            \n                    super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n          \n          \n            \n                    this.clazz = clazz;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                protected State toState(String value) {\n          \n          \n            \n                    try {\n          \n          \n            \n                        return clazz.getConstructor(String.class).newInstance(value);\n          \n          \n            \n                    } catch (NoSuchMethodException | InvocationTargetException | InstantiationException\n          \n          \n            \n                            | IllegalAccessException e) {\n          \n          \n            \n                        return UnDefType.NULL;\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n            public class GenericItemConverter extends AbstractTransformingItemConverter {\n          \n          \n            \n                private final Function<String, State> toStateFunction;\n          \n          \n            \n            \n          \n          \n            \n                public GenericItemConverter(Function<String, State> toStateFunction, Consumer<State> updateState, Consumer<Command> postCommand,\n          \n          \n            \n                        @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n          \n          \n            \n                        ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n          \n          \n            \n                    super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n          \n          \n            \n                    this.toStateFunction = toStateFunction;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                protected State toState(String value) {\n          \n          \n            \n                    return toStateFunction.apply(value);\n          \n          \n            \n                }", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r493785315", "createdAt": "2020-09-23T18:00:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/GenericItemConverter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link GenericItemConverter} implements simple conversions for different item types\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GenericItemConverter<T extends State> extends AbstractTransformingItemConverter {\n+    private final Class<T> clazz;\n+\n+    public GenericItemConverter(Class<T> clazz, Consumer<State> updateState, Consumer<Command> postCommand,\n+            @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n+            ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n+        super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n+        this.clazz = clazz;\n+    }\n+\n+    protected State toState(String value) {\n+        try {\n+            return clazz.getConstructor(String.class).newInstance(value);\n+        } catch (NoSuchMethodException | InvocationTargetException | InstantiationException\n+                | IllegalAccessException e) {\n+            return UnDefType.NULL;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6ed3c2e6396765feda2c572c37fc40cd376b9c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDM2MTg4OnYy", "diffSide": "RIGHT", "path": "bundles/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoxMDo0OFrOHW6oPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoxMDo0OFrOHW6oPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5MTI5NA==", "bodyText": "?", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r493791294", "createdAt": "2020-09-23T18:10:48Z", "author": {"login": "cpmeister"}, "path": "bundles/pom.xml", "diffHunk": "@@ -118,7 +118,8 @@\n     <module>org.openhab.binding.heos</module>\n     <module>org.openhab.binding.homematic</module>\n     <module>org.openhab.binding.hpprinter</module>\n-    <module>org.openhab.binding.hue</module>\n+    <module>org.openhab.binding.http</module>\n+\t<module>org.openhab.binding.hue</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6ed3c2e6396765feda2c572c37fc40cd376b9c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDM3MTgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoxMzozNlrOHW6uyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoxMzozNlrOHW6uyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5Mjk3MQ==", "bodyText": "So result.isFailed() returns false on a 401?", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r493792971", "createdAt": "2020-09-23T18:13:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpResponseListener} is responsible for processing the result of a HTTP request\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpResponseListener extends BufferingResponseListener {\n+    private final Logger logger = LoggerFactory.getLogger(HttpResponseListener.class);\n+    private final CompletableFuture<@Nullable Content> future;\n+    private final String fallbackEncoding;\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future) {\n+        this(future, null);\n+    }\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future, @Nullable String fallbackEncoding) {\n+        this.future = future;\n+        this.fallbackEncoding = fallbackEncoding != null ? fallbackEncoding : StandardCharsets.UTF_8.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void onComplete(@NonNullByDefault({}) Result result) {\n+        Response response = result.getResponse();\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"Received from '{}': {}\", result.getRequest().getURI(), responseToLogString(response));\n+        }\n+        if (!result.isFailed() && response.getStatus() == HttpStatus.OK_200) {\n+            byte[] content = getContent();\n+            String encoding = getEncoding();\n+            if (content != null) {\n+                future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n+            } else {\n+                future.complete(null);\n+            }\n+        } else {\n+            Request request = result.getRequest();\n+            if (result.isFailed()) {\n+                logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n+                        request.getMethod(), request.getContent(), result.getFailure().getMessage());\n+                future.complete(null);\n+            } else if (result.getResponse().getStatus() == HttpStatus.UNAUTHORIZED_401) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6ed3c2e6396765feda2c572c37fc40cd376b9c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjI5NjYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowNTozMFrOHZNvRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowNTozMFrOHZNvRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMTU0MQ==", "bodyText": "I went ahead and rearranged the logic here into something a bit more straight forward. I noticed that you don't handle other response types here which means that future might hang indefinitely if say a 504 occurs. You need a default fallback that completes the future regardless.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!result.isFailed() && response.getStatus() == HttpStatus.OK_200) {\n          \n          \n            \n                        byte[] content = getContent();\n          \n          \n            \n                        String encoding = getEncoding();\n          \n          \n            \n                        if (content != null) {\n          \n          \n            \n                            future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            future.complete(null);\n          \n          \n            \n                        }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        Request request = result.getRequest();\n          \n          \n            \n                        if (result.isFailed()) {\n          \n          \n            \n                            logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n          \n          \n            \n                                    request.getMethod(), request.getContent(), result.getFailure().getMessage());\n          \n          \n            \n                            future.complete(null);\n          \n          \n            \n                        } else if (result.getResponse().getStatus() == HttpStatus.UNAUTHORIZED_401) {\n          \n          \n            \n                            logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n          \n          \n            \n                                    request.getURI(), request.getMethod(), request.getContent());\n          \n          \n            \n                            future.completeExceptionally(new IllegalStateException(\"Auth Error\"));\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    if(result.isFailed()){\n          \n          \n            \n                        logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n          \n          \n            \n                                    request.getMethod(), request.getContent(), result.getFailure().getMessage());\n          \n          \n            \n                        future.complete(null);\n          \n          \n            \n                    }else switch(response.getStatus()) {\n          \n          \n            \n                        case HttpStatus.OK_200:\n          \n          \n            \n                            byte[] content = getContent();\n          \n          \n            \n                            String encoding = getEncoding();\n          \n          \n            \n                            if (content != null) {\n          \n          \n            \n                                future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n          \n          \n            \n                            } else {\n          \n          \n            \n                                future.complete(null);\n          \n          \n            \n                            }\n          \n          \n            \n                            break;\n          \n          \n            \n                        case HttpStatus.UNAUTHORIZED_401:\n          \n          \n            \n                            logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n          \n          \n            \n                                    request.getURI(), request.getMethod(), request.getContent());\n          \n          \n            \n                            future.completeExceptionally(new IllegalStateException(\"Auth Error\"));\n          \n          \n            \n                            break;\n          \n          \n            \n                    }", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r496201541", "createdAt": "2020-09-28T20:05:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpResponseListener} is responsible for processing the result of a HTTP request\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpResponseListener extends BufferingResponseListener {\n+    private final Logger logger = LoggerFactory.getLogger(HttpResponseListener.class);\n+    private final CompletableFuture<@Nullable Content> future;\n+    private final String fallbackEncoding;\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future) {\n+        this(future, null);\n+    }\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future, @Nullable String fallbackEncoding) {\n+        this.future = future;\n+        this.fallbackEncoding = fallbackEncoding != null ? fallbackEncoding : StandardCharsets.UTF_8.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void onComplete(@NonNullByDefault({}) Result result) {\n+        Response response = result.getResponse();\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"Received from '{}': {}\", result.getRequest().getURI(), responseToLogString(response));\n+        }\n+        if (!result.isFailed() && response.getStatus() == HttpStatus.OK_200) {\n+            byte[] content = getContent();\n+            String encoding = getEncoding();\n+            if (content != null) {\n+                future.complete(new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n+            } else {\n+                future.complete(null);\n+            }\n+        } else {\n+            Request request = result.getRequest();\n+            if (result.isFailed()) {\n+                logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(),\n+                        request.getMethod(), request.getContent(), result.getFailure().getMessage());\n+                future.complete(null);\n+            } else if (result.getResponse().getStatus() == HttpStatus.UNAUTHORIZED_401) {\n+                logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n+                        request.getURI(), request.getMethod(), request.getContent());\n+                future.completeExceptionally(new IllegalStateException(\"Auth Error\"));\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f0dd0de4dd3c63a8adeb6dc1311a00dd2dcfd3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTI4Mzc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/.classpath", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTowNzoyMVrOHvQA8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTowNzoyMVrOHvQA8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwNzUwNg==", "bodyText": "This file shouldn't be part of the PR.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519307506", "createdAt": "2020-11-08T09:07:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/.classpath", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTI4Mzk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/.project", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTowNzoyNVrOHvQBEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTowNzoyNVrOHvQBEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwNzUzNw==", "bodyText": "This file shouldn't be part of the PR.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519307537", "createdAt": "2020-11-08T09:07:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/.project", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTMwOTEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/README.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOToxODowNFrOHvQRpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoyNDozNlrOHv2tEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxMTc4MQ==", "bodyText": "By reading the documentation I don't understand what these special values are about. Are they searched in the response body respectively sent in the body?", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519311781", "createdAt": "2020-11-08T09:18:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/README.md", "diffHunk": "@@ -0,0 +1,120 @@\n+# HTTP Binding\n+\n+This binding allows using HTTP to bring external data into openHAB or execute HTTP requests on commands.  \n+\n+## Supported Things\n+\n+Only one thing named `url` is available.\n+It can be extended with different channels.\n+\n+## Thing Configuration\n+\n+| parameter         | optional | default | description |\n+|-------------------|----------|---------|-------------|\n+| `baseURL`         | no       |    -    | The base URL for this thing. Can be extended in channel-configuration. |\n+| `refresh`         | no       |   30    | Time in seconds between two refresh calls for the channels of this thing. |\n+| `timeout`         | no       |  3000   | Timeout for HTTP requests in ms. |\n+| `username`        | yes      |    -    | Username for authentication (advanced parameter). |\n+| `password`        | yes      |    -    | Password for authentication (advanced parameter). |\n+| `authMode`        | no       |  BASIC  | Authentication mode, `BASIC` or `DIGEST` (advanced parameter). |\n+| `commandMethod`   | no       |   GET   | Method used for sending commands `GET`, `PUT`, `POST`. |\n+| `contentType`     | yes      |    -    | MIME content-type of the command requests. Only used for  `PUT` and `POST`. |\n+| `encoding`        | yes      |    -    | Encoding to be used if no encoding is found in responses (advanced parameter). |  \n+| `headers`         | yes      |    -    | Additional headers that are sent along with the request. Format is \"header=value\".| \n+| `ignoreSSLErrors` | no       |  false  | If set to true ignores invalid SSL certificate errors. This is potentially dangerous.|\n+\n+*Note:* optional \"no\" means that you have to configure a value unless a default is provided and you are ok with that setting.\n+\n+## Channels\n+\n+Each item type has its own channel-type.\n+Depending on the channel-type, channels have different configuration options.\n+All channel-types (except `image`) have `stateExtension`, `commandExtension`, `stateTransformation`, `commandTransformation` and `mode` parameters.\n+The `image` channel-type supports `stateExtension` only.\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `stateExtension`        | yes      |      -      | Appended to the `baseURL` for requesting states. |\n+| `commandExtension`      | yes      |      -      | Appended to the `baseURL` for sending commands. If empty, same as `stateExtension`. |\n+| `stateTransformation  ` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to received values before updating channel. |\n+| `commandTransformation` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to channel value before sending to a remote. |\n+| `mode`                  | no       | `READWRITE` | Mode this channel is allowed to operate. `READ` means receive state, `WRITE` means send commands. |\n+\n+Some channels have additional parameters.\n+When concatenating the `baseURL` and `stateExtions` or `commandExtension` the binding checks if a proper URL part separator (`/`, `&` or `?`) is present and adds a `/` if missing.\n+\n+### `color`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | yes      |      -      | A special value that represents `ON` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5MDI4NQ==", "bodyText": "If the response (after transformation) is equal to that value, it is interpreted as ON (e.g. a response could be true, 1 or eingeschalltet).", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519390285", "createdAt": "2020-11-08T12:53:35Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.http/README.md", "diffHunk": "@@ -0,0 +1,120 @@\n+# HTTP Binding\n+\n+This binding allows using HTTP to bring external data into openHAB or execute HTTP requests on commands.  \n+\n+## Supported Things\n+\n+Only one thing named `url` is available.\n+It can be extended with different channels.\n+\n+## Thing Configuration\n+\n+| parameter         | optional | default | description |\n+|-------------------|----------|---------|-------------|\n+| `baseURL`         | no       |    -    | The base URL for this thing. Can be extended in channel-configuration. |\n+| `refresh`         | no       |   30    | Time in seconds between two refresh calls for the channels of this thing. |\n+| `timeout`         | no       |  3000   | Timeout for HTTP requests in ms. |\n+| `username`        | yes      |    -    | Username for authentication (advanced parameter). |\n+| `password`        | yes      |    -    | Password for authentication (advanced parameter). |\n+| `authMode`        | no       |  BASIC  | Authentication mode, `BASIC` or `DIGEST` (advanced parameter). |\n+| `commandMethod`   | no       |   GET   | Method used for sending commands `GET`, `PUT`, `POST`. |\n+| `contentType`     | yes      |    -    | MIME content-type of the command requests. Only used for  `PUT` and `POST`. |\n+| `encoding`        | yes      |    -    | Encoding to be used if no encoding is found in responses (advanced parameter). |  \n+| `headers`         | yes      |    -    | Additional headers that are sent along with the request. Format is \"header=value\".| \n+| `ignoreSSLErrors` | no       |  false  | If set to true ignores invalid SSL certificate errors. This is potentially dangerous.|\n+\n+*Note:* optional \"no\" means that you have to configure a value unless a default is provided and you are ok with that setting.\n+\n+## Channels\n+\n+Each item type has its own channel-type.\n+Depending on the channel-type, channels have different configuration options.\n+All channel-types (except `image`) have `stateExtension`, `commandExtension`, `stateTransformation`, `commandTransformation` and `mode` parameters.\n+The `image` channel-type supports `stateExtension` only.\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `stateExtension`        | yes      |      -      | Appended to the `baseURL` for requesting states. |\n+| `commandExtension`      | yes      |      -      | Appended to the `baseURL` for sending commands. If empty, same as `stateExtension`. |\n+| `stateTransformation  ` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to received values before updating channel. |\n+| `commandTransformation` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to channel value before sending to a remote. |\n+| `mode`                  | no       | `READWRITE` | Mode this channel is allowed to operate. `READ` means receive state, `WRITE` means send commands. |\n+\n+Some channels have additional parameters.\n+When concatenating the `baseURL` and `stateExtions` or `commandExtension` the binding checks if a proper URL part separator (`/`, `&` or `?`) is present and adds a `/` if missing.\n+\n+### `color`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | yes      |      -      | A special value that represents `ON` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxMTc4MQ=="}, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3ODA3NQ==", "bodyText": "Can you put this sentence in the readme? I think it would help the user to understand how this binding is actually working, as you don't provide examples.\nWhen thinking about how this works, I also wouldn't know what to set the transformation parameters to. I think a full example would be really helpful.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519578075", "createdAt": "2020-11-09T06:35:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/README.md", "diffHunk": "@@ -0,0 +1,120 @@\n+# HTTP Binding\n+\n+This binding allows using HTTP to bring external data into openHAB or execute HTTP requests on commands.  \n+\n+## Supported Things\n+\n+Only one thing named `url` is available.\n+It can be extended with different channels.\n+\n+## Thing Configuration\n+\n+| parameter         | optional | default | description |\n+|-------------------|----------|---------|-------------|\n+| `baseURL`         | no       |    -    | The base URL for this thing. Can be extended in channel-configuration. |\n+| `refresh`         | no       |   30    | Time in seconds between two refresh calls for the channels of this thing. |\n+| `timeout`         | no       |  3000   | Timeout for HTTP requests in ms. |\n+| `username`        | yes      |    -    | Username for authentication (advanced parameter). |\n+| `password`        | yes      |    -    | Password for authentication (advanced parameter). |\n+| `authMode`        | no       |  BASIC  | Authentication mode, `BASIC` or `DIGEST` (advanced parameter). |\n+| `commandMethod`   | no       |   GET   | Method used for sending commands `GET`, `PUT`, `POST`. |\n+| `contentType`     | yes      |    -    | MIME content-type of the command requests. Only used for  `PUT` and `POST`. |\n+| `encoding`        | yes      |    -    | Encoding to be used if no encoding is found in responses (advanced parameter). |  \n+| `headers`         | yes      |    -    | Additional headers that are sent along with the request. Format is \"header=value\".| \n+| `ignoreSSLErrors` | no       |  false  | If set to true ignores invalid SSL certificate errors. This is potentially dangerous.|\n+\n+*Note:* optional \"no\" means that you have to configure a value unless a default is provided and you are ok with that setting.\n+\n+## Channels\n+\n+Each item type has its own channel-type.\n+Depending on the channel-type, channels have different configuration options.\n+All channel-types (except `image`) have `stateExtension`, `commandExtension`, `stateTransformation`, `commandTransformation` and `mode` parameters.\n+The `image` channel-type supports `stateExtension` only.\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `stateExtension`        | yes      |      -      | Appended to the `baseURL` for requesting states. |\n+| `commandExtension`      | yes      |      -      | Appended to the `baseURL` for sending commands. If empty, same as `stateExtension`. |\n+| `stateTransformation  ` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to received values before updating channel. |\n+| `commandTransformation` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to channel value before sending to a remote. |\n+| `mode`                  | no       | `READWRITE` | Mode this channel is allowed to operate. `READ` means receive state, `WRITE` means send commands. |\n+\n+Some channels have additional parameters.\n+When concatenating the `baseURL` and `stateExtions` or `commandExtension` the binding checks if a proper URL part separator (`/`, `&` or `?`) is present and adds a `/` if missing.\n+\n+### `color`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | yes      |      -      | A special value that represents `ON` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxMTc4MQ=="}, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0MTM5NQ==", "bodyText": "I added a note for the special values and also examples for the transformation", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519941395", "createdAt": "2020-11-09T16:24:36Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.http/README.md", "diffHunk": "@@ -0,0 +1,120 @@\n+# HTTP Binding\n+\n+This binding allows using HTTP to bring external data into openHAB or execute HTTP requests on commands.  \n+\n+## Supported Things\n+\n+Only one thing named `url` is available.\n+It can be extended with different channels.\n+\n+## Thing Configuration\n+\n+| parameter         | optional | default | description |\n+|-------------------|----------|---------|-------------|\n+| `baseURL`         | no       |    -    | The base URL for this thing. Can be extended in channel-configuration. |\n+| `refresh`         | no       |   30    | Time in seconds between two refresh calls for the channels of this thing. |\n+| `timeout`         | no       |  3000   | Timeout for HTTP requests in ms. |\n+| `username`        | yes      |    -    | Username for authentication (advanced parameter). |\n+| `password`        | yes      |    -    | Password for authentication (advanced parameter). |\n+| `authMode`        | no       |  BASIC  | Authentication mode, `BASIC` or `DIGEST` (advanced parameter). |\n+| `commandMethod`   | no       |   GET   | Method used for sending commands `GET`, `PUT`, `POST`. |\n+| `contentType`     | yes      |    -    | MIME content-type of the command requests. Only used for  `PUT` and `POST`. |\n+| `encoding`        | yes      |    -    | Encoding to be used if no encoding is found in responses (advanced parameter). |  \n+| `headers`         | yes      |    -    | Additional headers that are sent along with the request. Format is \"header=value\".| \n+| `ignoreSSLErrors` | no       |  false  | If set to true ignores invalid SSL certificate errors. This is potentially dangerous.|\n+\n+*Note:* optional \"no\" means that you have to configure a value unless a default is provided and you are ok with that setting.\n+\n+## Channels\n+\n+Each item type has its own channel-type.\n+Depending on the channel-type, channels have different configuration options.\n+All channel-types (except `image`) have `stateExtension`, `commandExtension`, `stateTransformation`, `commandTransformation` and `mode` parameters.\n+The `image` channel-type supports `stateExtension` only.\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `stateExtension`        | yes      |      -      | Appended to the `baseURL` for requesting states. |\n+| `commandExtension`      | yes      |      -      | Appended to the `baseURL` for sending commands. If empty, same as `stateExtension`. |\n+| `stateTransformation  ` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to received values before updating channel. |\n+| `commandTransformation` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to channel value before sending to a remote. |\n+| `mode`                  | no       | `READWRITE` | Mode this channel is allowed to operate. `READ` means receive state, `WRITE` means send commands. |\n+\n+Some channels have additional parameters.\n+When concatenating the `baseURL` and `stateExtions` or `commandExtension` the binding checks if a proper URL part separator (`/`, `&` or `?`) is present and adds a `/` if missing.\n+\n+### `color`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | yes      |      -      | A special value that represents `ON` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxMTc4MQ=="}, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTMxNTk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOToyMDo0OFrOHvQWNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMzowNzozMVrOHvVTgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxMjk1MA==", "bodyText": "Can you fill this?", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519312950", "createdAt": "2020-11-08T09:20:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/README.md", "diffHunk": "@@ -0,0 +1,120 @@\n+# HTTP Binding\n+\n+This binding allows using HTTP to bring external data into openHAB or execute HTTP requests on commands.  \n+\n+## Supported Things\n+\n+Only one thing named `url` is available.\n+It can be extended with different channels.\n+\n+## Thing Configuration\n+\n+| parameter         | optional | default | description |\n+|-------------------|----------|---------|-------------|\n+| `baseURL`         | no       |    -    | The base URL for this thing. Can be extended in channel-configuration. |\n+| `refresh`         | no       |   30    | Time in seconds between two refresh calls for the channels of this thing. |\n+| `timeout`         | no       |  3000   | Timeout for HTTP requests in ms. |\n+| `username`        | yes      |    -    | Username for authentication (advanced parameter). |\n+| `password`        | yes      |    -    | Password for authentication (advanced parameter). |\n+| `authMode`        | no       |  BASIC  | Authentication mode, `BASIC` or `DIGEST` (advanced parameter). |\n+| `commandMethod`   | no       |   GET   | Method used for sending commands `GET`, `PUT`, `POST`. |\n+| `contentType`     | yes      |    -    | MIME content-type of the command requests. Only used for  `PUT` and `POST`. |\n+| `encoding`        | yes      |    -    | Encoding to be used if no encoding is found in responses (advanced parameter). |  \n+| `headers`         | yes      |    -    | Additional headers that are sent along with the request. Format is \"header=value\".| \n+| `ignoreSSLErrors` | no       |  false  | If set to true ignores invalid SSL certificate errors. This is potentially dangerous.|\n+\n+*Note:* optional \"no\" means that you have to configure a value unless a default is provided and you are ok with that setting.\n+\n+## Channels\n+\n+Each item type has its own channel-type.\n+Depending on the channel-type, channels have different configuration options.\n+All channel-types (except `image`) have `stateExtension`, `commandExtension`, `stateTransformation`, `commandTransformation` and `mode` parameters.\n+The `image` channel-type supports `stateExtension` only.\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `stateExtension`        | yes      |      -      | Appended to the `baseURL` for requesting states. |\n+| `commandExtension`      | yes      |      -      | Appended to the `baseURL` for sending commands. If empty, same as `stateExtension`. |\n+| `stateTransformation  ` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to received values before updating channel. |\n+| `commandTransformation` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to channel value before sending to a remote. |\n+| `mode`                  | no       | `READWRITE` | Mode this channel is allowed to operate. `READ` means receive state, `WRITE` means send commands. |\n+\n+Some channels have additional parameters.\n+When concatenating the `baseURL` and `stateExtions` or `commandExtension` the binding checks if a proper URL part separator (`/`, `&` or `?`) is present and adds a `/` if missing.\n+\n+### `color`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | yes      |      -      | A special value that represents `ON` |\n+| `offValue`              | yes      |      -      | A special value that represents `OFF` |\n+| `increaseValue`         | yes      |      -      | A special value that represents `INCREASE` |\n+| `decreaseValue`         | yes      |      -      | A special value that represents `DECREASE` |\n+| `step`                  | no       |      1      | The amount the brightness is increased/decreased on `INCREASE`/`DECREASE` |\n+| `colorMode`             | no       |    RGB      | Mode for color values: `RGB` or `HSB` |\n+\n+All values that are not `onValue`, `offValue`, `increaseValue`, `decreaseValue` are interpreted as color value (according to the color mode) in the format `r,g,b` or `h,s,v`.\n+\n+### `contact`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `openValue`             | no      |      -      | A special value that represents `OPEN` |\n+| `closedValue`           | no      |      -      | A special value that represents `CLOSED` |\n+\n+### `dimmer`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | yes      |      -      | A special value that represents `ON` |\n+| `offValue`              | yes      |      -      | A special value that represents `OFF` |\n+| `increaseValue`         | yes      |      -      | A special value that represents `INCREASE` |\n+| `decreaseValue`         | yes      |      -      | A special value that represents `DECREASE` |\n+| `step`                  | no       |      1      | The amount the brightness is increased/decreased on `INCREASE`/`DECREASE` |\n+\n+All values that are not `onValue`, `offValue`, `increaseValue`, `decreaseValue` are interpreted as brightness 0-100% and need to be numeric only.\n+\n+### `rollershutter`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `upValue`               | yes      |      -      | A special value that represents `UP` |\n+| `downValue`             | yes      |      -      | A special value that represents `DOWN` |\n+| `stopValue`             | yes      |      -      | A special value that represents `STOP` |\n+| `moveValue`             | yes      |      -      | A special value that represents `MOVE` |\n+\n+All values that are not `upValue`, `downValue`, `stopValue`, `moveValue` are interpreted as position 0-100% and need to be numeric only.\n+                    \n+### `switch`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | no       |      -      | A special value that represents `ON` |\n+| `offValue`              | no       |      -      | A special value that represents `OFF` |\n+\n+## URL Formatting\n+\n+After concatenation of the `baseURL` and the `commandExtension` or the `stateExtension` (if provided) the URL is formatted using the [java.util.Formatter](http://docs.oracle.com/javase/6/docs/api/java/util/Formatter.html).\n+The URL is used as format string and two parameters are added:\n+\n+- the current date (referenced as `%1$`)\n+- the transformed command (referenced as `%2$`)\n+\n+After the parameter reference the format needs to be appended.\n+See the link above for more information about the available format parameters (e.g. to use the string representation, you need to append `s` to the reference).\n+When sending an OFF command on 2020-07-06, the URL\n+\n+```\n+http://www.domain.org/home/lights/23871/?status=%2$s&date=%1$tY-%1$tm-%1$td\n+``` \n+\n+is transformed to \n+\n+```\n+http://www.domain.org/home/lights/23871/?status=OFF&date=2020-07-06\n+```\n+\n+## Full Example\n+\n+_Provide a full usage example based on textual configuration files (*.things, *.items, *.sitemap)._", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5NDE3Ng==", "bodyText": "removed the section.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519394176", "createdAt": "2020-11-08T13:07:31Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.http/README.md", "diffHunk": "@@ -0,0 +1,120 @@\n+# HTTP Binding\n+\n+This binding allows using HTTP to bring external data into openHAB or execute HTTP requests on commands.  \n+\n+## Supported Things\n+\n+Only one thing named `url` is available.\n+It can be extended with different channels.\n+\n+## Thing Configuration\n+\n+| parameter         | optional | default | description |\n+|-------------------|----------|---------|-------------|\n+| `baseURL`         | no       |    -    | The base URL for this thing. Can be extended in channel-configuration. |\n+| `refresh`         | no       |   30    | Time in seconds between two refresh calls for the channels of this thing. |\n+| `timeout`         | no       |  3000   | Timeout for HTTP requests in ms. |\n+| `username`        | yes      |    -    | Username for authentication (advanced parameter). |\n+| `password`        | yes      |    -    | Password for authentication (advanced parameter). |\n+| `authMode`        | no       |  BASIC  | Authentication mode, `BASIC` or `DIGEST` (advanced parameter). |\n+| `commandMethod`   | no       |   GET   | Method used for sending commands `GET`, `PUT`, `POST`. |\n+| `contentType`     | yes      |    -    | MIME content-type of the command requests. Only used for  `PUT` and `POST`. |\n+| `encoding`        | yes      |    -    | Encoding to be used if no encoding is found in responses (advanced parameter). |  \n+| `headers`         | yes      |    -    | Additional headers that are sent along with the request. Format is \"header=value\".| \n+| `ignoreSSLErrors` | no       |  false  | If set to true ignores invalid SSL certificate errors. This is potentially dangerous.|\n+\n+*Note:* optional \"no\" means that you have to configure a value unless a default is provided and you are ok with that setting.\n+\n+## Channels\n+\n+Each item type has its own channel-type.\n+Depending on the channel-type, channels have different configuration options.\n+All channel-types (except `image`) have `stateExtension`, `commandExtension`, `stateTransformation`, `commandTransformation` and `mode` parameters.\n+The `image` channel-type supports `stateExtension` only.\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `stateExtension`        | yes      |      -      | Appended to the `baseURL` for requesting states. |\n+| `commandExtension`      | yes      |      -      | Appended to the `baseURL` for sending commands. If empty, same as `stateExtension`. |\n+| `stateTransformation  ` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to received values before updating channel. |\n+| `commandTransformation` | yes      |      -      | One or more transformation (concatenated with `\u2229`) applied to channel value before sending to a remote. |\n+| `mode`                  | no       | `READWRITE` | Mode this channel is allowed to operate. `READ` means receive state, `WRITE` means send commands. |\n+\n+Some channels have additional parameters.\n+When concatenating the `baseURL` and `stateExtions` or `commandExtension` the binding checks if a proper URL part separator (`/`, `&` or `?`) is present and adds a `/` if missing.\n+\n+### `color`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | yes      |      -      | A special value that represents `ON` |\n+| `offValue`              | yes      |      -      | A special value that represents `OFF` |\n+| `increaseValue`         | yes      |      -      | A special value that represents `INCREASE` |\n+| `decreaseValue`         | yes      |      -      | A special value that represents `DECREASE` |\n+| `step`                  | no       |      1      | The amount the brightness is increased/decreased on `INCREASE`/`DECREASE` |\n+| `colorMode`             | no       |    RGB      | Mode for color values: `RGB` or `HSB` |\n+\n+All values that are not `onValue`, `offValue`, `increaseValue`, `decreaseValue` are interpreted as color value (according to the color mode) in the format `r,g,b` or `h,s,v`.\n+\n+### `contact`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `openValue`             | no      |      -      | A special value that represents `OPEN` |\n+| `closedValue`           | no      |      -      | A special value that represents `CLOSED` |\n+\n+### `dimmer`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | yes      |      -      | A special value that represents `ON` |\n+| `offValue`              | yes      |      -      | A special value that represents `OFF` |\n+| `increaseValue`         | yes      |      -      | A special value that represents `INCREASE` |\n+| `decreaseValue`         | yes      |      -      | A special value that represents `DECREASE` |\n+| `step`                  | no       |      1      | The amount the brightness is increased/decreased on `INCREASE`/`DECREASE` |\n+\n+All values that are not `onValue`, `offValue`, `increaseValue`, `decreaseValue` are interpreted as brightness 0-100% and need to be numeric only.\n+\n+### `rollershutter`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `upValue`               | yes      |      -      | A special value that represents `UP` |\n+| `downValue`             | yes      |      -      | A special value that represents `DOWN` |\n+| `stopValue`             | yes      |      -      | A special value that represents `STOP` |\n+| `moveValue`             | yes      |      -      | A special value that represents `MOVE` |\n+\n+All values that are not `upValue`, `downValue`, `stopValue`, `moveValue` are interpreted as position 0-100% and need to be numeric only.\n+                    \n+### `switch`\n+\n+| parameter               | optional | default     | description |\n+|-------------------------|----------|-------------|-------------|\n+| `onValue`               | no       |      -      | A special value that represents `ON` |\n+| `offValue`              | no       |      -      | A special value that represents `OFF` |\n+\n+## URL Formatting\n+\n+After concatenation of the `baseURL` and the `commandExtension` or the `stateExtension` (if provided) the URL is formatted using the [java.util.Formatter](http://docs.oracle.com/javase/6/docs/api/java/util/Formatter.html).\n+The URL is used as format string and two parameters are added:\n+\n+- the current date (referenced as `%1$`)\n+- the transformed command (referenced as `%2$`)\n+\n+After the parameter reference the format needs to be appended.\n+See the link above for more information about the available format parameters (e.g. to use the string representation, you need to append `s` to the reference).\n+When sending an OFF command on 2020-07-06, the URL\n+\n+```\n+http://www.domain.org/home/lights/23871/?status=%2$s&date=%1$tY-%1$tm-%1$td\n+``` \n+\n+is transformed to \n+\n+```\n+http://www.domain.org/home/lights/23871/?status=OFF&date=2020-07-06\n+```\n+\n+## Full Example\n+\n+_Provide a full usage example based on textual configuration files (*.things, *.items, *.sitemap)._", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxMjk1MA=="}, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTMxNzE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/feature/feature.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOToyMToyMVrOHvQW9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOToyMToyMVrOHvQW9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxMzE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<feature name=\"openhab-binding-http\" description=\"http Binding\" version=\"${project.version}\">\n          \n          \n            \n            \t<feature name=\"openhab-binding-http\" description=\"HTTP Binding\" version=\"${project.version}\">", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519313143", "createdAt": "2020-11-08T09:21:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.http-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-http\" description=\"http Binding\" version=\"${project.version}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTM0MDgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTozMDo1OFrOHvQmpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTozMDo1OFrOHvQmpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxNzE1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());\n          \n          \n            \n                private static final Set<Character> URL_PART_DELIMITER = Set.of('/', '?', '&');", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519317158", "createdAt": "2020-11-08T09:30:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Authentication;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.BasicAuthentication;\n+import org.eclipse.jetty.client.util.DigestAuthentication;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.config.HttpChannelMode;\n+import org.openhab.binding.http.internal.config.HttpThingConfig;\n+import org.openhab.binding.http.internal.converter.AbstractTransformingItemConverter;\n+import org.openhab.binding.http.internal.converter.ColorItemConverter;\n+import org.openhab.binding.http.internal.converter.DimmerItemConverter;\n+import org.openhab.binding.http.internal.converter.FixedValueMappingItemConverter;\n+import org.openhab.binding.http.internal.converter.GenericItemConverter;\n+import org.openhab.binding.http.internal.converter.ImageItemConverter;\n+import org.openhab.binding.http.internal.converter.ItemValueConverter;\n+import org.openhab.binding.http.internal.converter.PlayerItemConverter;\n+import org.openhab.binding.http.internal.converter.RollershutterItemConverter;\n+import org.openhab.binding.http.internal.http.Content;\n+import org.openhab.binding.http.internal.http.HttpAuthException;\n+import org.openhab.binding.http.internal.http.HttpResponseListener;\n+import org.openhab.binding.http.internal.http.RefreshingUrlCache;\n+import org.openhab.binding.http.internal.transform.ValueTransformationProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.StateDescription;\n+import org.openhab.core.types.StateDescriptionFragmentBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpThingHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpThingHandler extends BaseThingHandler {\n+    private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTM1MDQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTozNDo1MlrOHvQs0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMzoxMDoyNVrOHvVWqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxODczOA==", "bodyText": "If I see correctly this exception is only raised if the baseURL is incorrect, not the authentication. You might want to include the exceptions message.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519318738", "createdAt": "2020-11-08T09:34:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Authentication;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.BasicAuthentication;\n+import org.eclipse.jetty.client.util.DigestAuthentication;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.config.HttpChannelMode;\n+import org.openhab.binding.http.internal.config.HttpThingConfig;\n+import org.openhab.binding.http.internal.converter.AbstractTransformingItemConverter;\n+import org.openhab.binding.http.internal.converter.ColorItemConverter;\n+import org.openhab.binding.http.internal.converter.DimmerItemConverter;\n+import org.openhab.binding.http.internal.converter.FixedValueMappingItemConverter;\n+import org.openhab.binding.http.internal.converter.GenericItemConverter;\n+import org.openhab.binding.http.internal.converter.ImageItemConverter;\n+import org.openhab.binding.http.internal.converter.ItemValueConverter;\n+import org.openhab.binding.http.internal.converter.PlayerItemConverter;\n+import org.openhab.binding.http.internal.converter.RollershutterItemConverter;\n+import org.openhab.binding.http.internal.http.Content;\n+import org.openhab.binding.http.internal.http.HttpAuthException;\n+import org.openhab.binding.http.internal.http.HttpResponseListener;\n+import org.openhab.binding.http.internal.http.RefreshingUrlCache;\n+import org.openhab.binding.http.internal.transform.ValueTransformationProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.StateDescription;\n+import org.openhab.core.types.StateDescriptionFragmentBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpThingHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpThingHandler extends BaseThingHandler {\n+    private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());\n+\n+    private final Logger logger = LoggerFactory.getLogger(HttpThingHandler.class);\n+    private final ValueTransformationProvider valueTransformationProvider;\n+    private final HttpClientProvider httpClientProvider;\n+    private HttpClient httpClient;\n+    private final HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider;\n+\n+    private HttpThingConfig config = new HttpThingConfig();\n+    private final Map<String, RefreshingUrlCache> urlHandlers = new HashMap<>();\n+    private final Map<ChannelUID, ItemValueConverter> channels = new HashMap<>();\n+    private final Map<ChannelUID, String> channelUrls = new HashMap<>();\n+    private @Nullable Authentication authentication;\n+\n+    public HttpThingHandler(Thing thing, HttpClientProvider httpClientProvider,\n+            ValueTransformationProvider valueTransformationProvider,\n+            HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider) {\n+        super(thing);\n+        this.httpClientProvider = httpClientProvider;\n+        this.httpClient = httpClientProvider.getSecureClient();\n+        this.valueTransformationProvider = valueTransformationProvider;\n+        this.httpDynamicStateDescriptionProvider = httpDynamicStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ItemValueConverter itemValueConverter = channels.get(channelUID);\n+        if (itemValueConverter == null) {\n+            logger.warn(\"Cannot find channel implementation for channel {}.\", channelUID);\n+            return;\n+        }\n+\n+        if (command instanceof RefreshType) {\n+            String stateUrl = channelUrls.get(channelUID);\n+            if (stateUrl != null) {\n+                RefreshingUrlCache refreshingUrlCache = urlHandlers.get(stateUrl);\n+                if (refreshingUrlCache != null) {\n+                    try {\n+                        refreshingUrlCache.get().ifPresent(itemValueConverter::process);\n+                    } catch (IllegalArgumentException | IllegalStateException e) {\n+                        logger.warn(\"Failed processing REFRESH command for channel {}: {}\", channelUID, e.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            try {\n+                itemValueConverter.send(command);\n+            } catch (IllegalArgumentException e) {\n+                logger.warn(\"Failed to convert command '{}' to channel '{}' for sending\", command, channelUID);\n+            } catch (IllegalStateException e) {\n+                logger.debug(\"Writing to read-only channel {} not permitted\", channelUID);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(HttpThingConfig.class);\n+\n+        if (config.baseURL.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Parameter baseURL must not be empty!\");\n+            return;\n+        }\n+        authentication = null;\n+        if (!config.username.isEmpty()) {\n+            try {\n+                URI uri = new URI(config.baseURL);\n+                switch (config.authMode) {\n+                    case BASIC:\n+                        authentication = new BasicAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Basic Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    case DIGEST:\n+                        authentication = new DigestAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Digest Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    default:\n+                        logger.warn(\"Unknown authentication method '{}' for thing '{}'\", config.authMode,\n+                                thing.getUID());\n+                }\n+                if (authentication != null) {\n+                    AuthenticationStore authStore = httpClient.getAuthenticationStore();\n+                    authStore.addAuthentication(authentication);\n+                }\n+            } catch (URISyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"failed to create authentication\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5NDk4Ng==", "bodyText": "But this only happens when the authentication is constructed. I clarified the message.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519394986", "createdAt": "2020-11-08T13:10:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Authentication;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.BasicAuthentication;\n+import org.eclipse.jetty.client.util.DigestAuthentication;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.config.HttpChannelMode;\n+import org.openhab.binding.http.internal.config.HttpThingConfig;\n+import org.openhab.binding.http.internal.converter.AbstractTransformingItemConverter;\n+import org.openhab.binding.http.internal.converter.ColorItemConverter;\n+import org.openhab.binding.http.internal.converter.DimmerItemConverter;\n+import org.openhab.binding.http.internal.converter.FixedValueMappingItemConverter;\n+import org.openhab.binding.http.internal.converter.GenericItemConverter;\n+import org.openhab.binding.http.internal.converter.ImageItemConverter;\n+import org.openhab.binding.http.internal.converter.ItemValueConverter;\n+import org.openhab.binding.http.internal.converter.PlayerItemConverter;\n+import org.openhab.binding.http.internal.converter.RollershutterItemConverter;\n+import org.openhab.binding.http.internal.http.Content;\n+import org.openhab.binding.http.internal.http.HttpAuthException;\n+import org.openhab.binding.http.internal.http.HttpResponseListener;\n+import org.openhab.binding.http.internal.http.RefreshingUrlCache;\n+import org.openhab.binding.http.internal.transform.ValueTransformationProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.StateDescription;\n+import org.openhab.core.types.StateDescriptionFragmentBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpThingHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpThingHandler extends BaseThingHandler {\n+    private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());\n+\n+    private final Logger logger = LoggerFactory.getLogger(HttpThingHandler.class);\n+    private final ValueTransformationProvider valueTransformationProvider;\n+    private final HttpClientProvider httpClientProvider;\n+    private HttpClient httpClient;\n+    private final HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider;\n+\n+    private HttpThingConfig config = new HttpThingConfig();\n+    private final Map<String, RefreshingUrlCache> urlHandlers = new HashMap<>();\n+    private final Map<ChannelUID, ItemValueConverter> channels = new HashMap<>();\n+    private final Map<ChannelUID, String> channelUrls = new HashMap<>();\n+    private @Nullable Authentication authentication;\n+\n+    public HttpThingHandler(Thing thing, HttpClientProvider httpClientProvider,\n+            ValueTransformationProvider valueTransformationProvider,\n+            HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider) {\n+        super(thing);\n+        this.httpClientProvider = httpClientProvider;\n+        this.httpClient = httpClientProvider.getSecureClient();\n+        this.valueTransformationProvider = valueTransformationProvider;\n+        this.httpDynamicStateDescriptionProvider = httpDynamicStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ItemValueConverter itemValueConverter = channels.get(channelUID);\n+        if (itemValueConverter == null) {\n+            logger.warn(\"Cannot find channel implementation for channel {}.\", channelUID);\n+            return;\n+        }\n+\n+        if (command instanceof RefreshType) {\n+            String stateUrl = channelUrls.get(channelUID);\n+            if (stateUrl != null) {\n+                RefreshingUrlCache refreshingUrlCache = urlHandlers.get(stateUrl);\n+                if (refreshingUrlCache != null) {\n+                    try {\n+                        refreshingUrlCache.get().ifPresent(itemValueConverter::process);\n+                    } catch (IllegalArgumentException | IllegalStateException e) {\n+                        logger.warn(\"Failed processing REFRESH command for channel {}: {}\", channelUID, e.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            try {\n+                itemValueConverter.send(command);\n+            } catch (IllegalArgumentException e) {\n+                logger.warn(\"Failed to convert command '{}' to channel '{}' for sending\", command, channelUID);\n+            } catch (IllegalStateException e) {\n+                logger.debug(\"Writing to read-only channel {} not permitted\", channelUID);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(HttpThingConfig.class);\n+\n+        if (config.baseURL.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Parameter baseURL must not be empty!\");\n+            return;\n+        }\n+        authentication = null;\n+        if (!config.username.isEmpty()) {\n+            try {\n+                URI uri = new URI(config.baseURL);\n+                switch (config.authMode) {\n+                    case BASIC:\n+                        authentication = new BasicAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Basic Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    case DIGEST:\n+                        authentication = new DigestAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Digest Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    default:\n+                        logger.warn(\"Unknown authentication method '{}' for thing '{}'\", config.authMode,\n+                                thing.getUID());\n+                }\n+                if (authentication != null) {\n+                    AuthenticationStore authStore = httpClient.getAuthenticationStore();\n+                    authStore.addAuthentication(authentication);\n+                }\n+            } catch (URISyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"failed to create authentication\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxODczOA=="}, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTM1MzgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTozNjoxNVrOHvQu5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjo1Njo1NVrOHvVIlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxOTI3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.info(\"Using the insecure client for thing '{}'.\", thing.getUID());\n          \n          \n            \n                        logger.debug(\"Using the insecure client for thing '{}'.\", thing.getUID());", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519319270", "createdAt": "2020-11-08T09:36:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Authentication;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.BasicAuthentication;\n+import org.eclipse.jetty.client.util.DigestAuthentication;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.config.HttpChannelMode;\n+import org.openhab.binding.http.internal.config.HttpThingConfig;\n+import org.openhab.binding.http.internal.converter.AbstractTransformingItemConverter;\n+import org.openhab.binding.http.internal.converter.ColorItemConverter;\n+import org.openhab.binding.http.internal.converter.DimmerItemConverter;\n+import org.openhab.binding.http.internal.converter.FixedValueMappingItemConverter;\n+import org.openhab.binding.http.internal.converter.GenericItemConverter;\n+import org.openhab.binding.http.internal.converter.ImageItemConverter;\n+import org.openhab.binding.http.internal.converter.ItemValueConverter;\n+import org.openhab.binding.http.internal.converter.PlayerItemConverter;\n+import org.openhab.binding.http.internal.converter.RollershutterItemConverter;\n+import org.openhab.binding.http.internal.http.Content;\n+import org.openhab.binding.http.internal.http.HttpAuthException;\n+import org.openhab.binding.http.internal.http.HttpResponseListener;\n+import org.openhab.binding.http.internal.http.RefreshingUrlCache;\n+import org.openhab.binding.http.internal.transform.ValueTransformationProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.StateDescription;\n+import org.openhab.core.types.StateDescriptionFragmentBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpThingHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpThingHandler extends BaseThingHandler {\n+    private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());\n+\n+    private final Logger logger = LoggerFactory.getLogger(HttpThingHandler.class);\n+    private final ValueTransformationProvider valueTransformationProvider;\n+    private final HttpClientProvider httpClientProvider;\n+    private HttpClient httpClient;\n+    private final HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider;\n+\n+    private HttpThingConfig config = new HttpThingConfig();\n+    private final Map<String, RefreshingUrlCache> urlHandlers = new HashMap<>();\n+    private final Map<ChannelUID, ItemValueConverter> channels = new HashMap<>();\n+    private final Map<ChannelUID, String> channelUrls = new HashMap<>();\n+    private @Nullable Authentication authentication;\n+\n+    public HttpThingHandler(Thing thing, HttpClientProvider httpClientProvider,\n+            ValueTransformationProvider valueTransformationProvider,\n+            HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider) {\n+        super(thing);\n+        this.httpClientProvider = httpClientProvider;\n+        this.httpClient = httpClientProvider.getSecureClient();\n+        this.valueTransformationProvider = valueTransformationProvider;\n+        this.httpDynamicStateDescriptionProvider = httpDynamicStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ItemValueConverter itemValueConverter = channels.get(channelUID);\n+        if (itemValueConverter == null) {\n+            logger.warn(\"Cannot find channel implementation for channel {}.\", channelUID);\n+            return;\n+        }\n+\n+        if (command instanceof RefreshType) {\n+            String stateUrl = channelUrls.get(channelUID);\n+            if (stateUrl != null) {\n+                RefreshingUrlCache refreshingUrlCache = urlHandlers.get(stateUrl);\n+                if (refreshingUrlCache != null) {\n+                    try {\n+                        refreshingUrlCache.get().ifPresent(itemValueConverter::process);\n+                    } catch (IllegalArgumentException | IllegalStateException e) {\n+                        logger.warn(\"Failed processing REFRESH command for channel {}: {}\", channelUID, e.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            try {\n+                itemValueConverter.send(command);\n+            } catch (IllegalArgumentException e) {\n+                logger.warn(\"Failed to convert command '{}' to channel '{}' for sending\", command, channelUID);\n+            } catch (IllegalStateException e) {\n+                logger.debug(\"Writing to read-only channel {} not permitted\", channelUID);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(HttpThingConfig.class);\n+\n+        if (config.baseURL.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Parameter baseURL must not be empty!\");\n+            return;\n+        }\n+        authentication = null;\n+        if (!config.username.isEmpty()) {\n+            try {\n+                URI uri = new URI(config.baseURL);\n+                switch (config.authMode) {\n+                    case BASIC:\n+                        authentication = new BasicAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Basic Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    case DIGEST:\n+                        authentication = new DigestAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Digest Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    default:\n+                        logger.warn(\"Unknown authentication method '{}' for thing '{}'\", config.authMode,\n+                                thing.getUID());\n+                }\n+                if (authentication != null) {\n+                    AuthenticationStore authStore = httpClient.getAuthenticationStore();\n+                    authStore.addAuthentication(authentication);\n+                }\n+            } catch (URISyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"failed to create authentication\");\n+            }\n+        } else {\n+            logger.debug(\"No authentication configured for thing '{}'\", thing.getUID());\n+        }\n+\n+        if (config.ignoreSSLErrors) {\n+            logger.info(\"Using the insecure client for thing '{}'.\", thing.getUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5MTM4MA==", "bodyText": "This is not written very often but an important information. So I think INFO is ok here. I adjusted the other message.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519391380", "createdAt": "2020-11-08T12:56:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/HttpThingHandler.java", "diffHunk": "@@ -0,0 +1,369 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Authentication;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.BasicAuthentication;\n+import org.eclipse.jetty.client.util.DigestAuthentication;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.config.HttpChannelMode;\n+import org.openhab.binding.http.internal.config.HttpThingConfig;\n+import org.openhab.binding.http.internal.converter.AbstractTransformingItemConverter;\n+import org.openhab.binding.http.internal.converter.ColorItemConverter;\n+import org.openhab.binding.http.internal.converter.DimmerItemConverter;\n+import org.openhab.binding.http.internal.converter.FixedValueMappingItemConverter;\n+import org.openhab.binding.http.internal.converter.GenericItemConverter;\n+import org.openhab.binding.http.internal.converter.ImageItemConverter;\n+import org.openhab.binding.http.internal.converter.ItemValueConverter;\n+import org.openhab.binding.http.internal.converter.PlayerItemConverter;\n+import org.openhab.binding.http.internal.converter.RollershutterItemConverter;\n+import org.openhab.binding.http.internal.http.Content;\n+import org.openhab.binding.http.internal.http.HttpAuthException;\n+import org.openhab.binding.http.internal.http.HttpResponseListener;\n+import org.openhab.binding.http.internal.http.RefreshingUrlCache;\n+import org.openhab.binding.http.internal.transform.ValueTransformationProvider;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.StateDescription;\n+import org.openhab.core.types.StateDescriptionFragmentBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpThingHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpThingHandler extends BaseThingHandler {\n+    private static final Set<Character> URL_PART_DELIMITER = Stream.of('/', '?', '&').collect(Collectors.toSet());\n+\n+    private final Logger logger = LoggerFactory.getLogger(HttpThingHandler.class);\n+    private final ValueTransformationProvider valueTransformationProvider;\n+    private final HttpClientProvider httpClientProvider;\n+    private HttpClient httpClient;\n+    private final HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider;\n+\n+    private HttpThingConfig config = new HttpThingConfig();\n+    private final Map<String, RefreshingUrlCache> urlHandlers = new HashMap<>();\n+    private final Map<ChannelUID, ItemValueConverter> channels = new HashMap<>();\n+    private final Map<ChannelUID, String> channelUrls = new HashMap<>();\n+    private @Nullable Authentication authentication;\n+\n+    public HttpThingHandler(Thing thing, HttpClientProvider httpClientProvider,\n+            ValueTransformationProvider valueTransformationProvider,\n+            HttpDynamicStateDescriptionProvider httpDynamicStateDescriptionProvider) {\n+        super(thing);\n+        this.httpClientProvider = httpClientProvider;\n+        this.httpClient = httpClientProvider.getSecureClient();\n+        this.valueTransformationProvider = valueTransformationProvider;\n+        this.httpDynamicStateDescriptionProvider = httpDynamicStateDescriptionProvider;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ItemValueConverter itemValueConverter = channels.get(channelUID);\n+        if (itemValueConverter == null) {\n+            logger.warn(\"Cannot find channel implementation for channel {}.\", channelUID);\n+            return;\n+        }\n+\n+        if (command instanceof RefreshType) {\n+            String stateUrl = channelUrls.get(channelUID);\n+            if (stateUrl != null) {\n+                RefreshingUrlCache refreshingUrlCache = urlHandlers.get(stateUrl);\n+                if (refreshingUrlCache != null) {\n+                    try {\n+                        refreshingUrlCache.get().ifPresent(itemValueConverter::process);\n+                    } catch (IllegalArgumentException | IllegalStateException e) {\n+                        logger.warn(\"Failed processing REFRESH command for channel {}: {}\", channelUID, e.getMessage());\n+                    }\n+                }\n+            }\n+        } else {\n+            try {\n+                itemValueConverter.send(command);\n+            } catch (IllegalArgumentException e) {\n+                logger.warn(\"Failed to convert command '{}' to channel '{}' for sending\", command, channelUID);\n+            } catch (IllegalStateException e) {\n+                logger.debug(\"Writing to read-only channel {} not permitted\", channelUID);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(HttpThingConfig.class);\n+\n+        if (config.baseURL.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Parameter baseURL must not be empty!\");\n+            return;\n+        }\n+        authentication = null;\n+        if (!config.username.isEmpty()) {\n+            try {\n+                URI uri = new URI(config.baseURL);\n+                switch (config.authMode) {\n+                    case BASIC:\n+                        authentication = new BasicAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Basic Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    case DIGEST:\n+                        authentication = new DigestAuthentication(uri, Authentication.ANY_REALM, config.username,\n+                                config.password);\n+                        logger.debug(\"Digest Authentication configured for thing '{}'\", thing.getUID());\n+                        break;\n+                    default:\n+                        logger.warn(\"Unknown authentication method '{}' for thing '{}'\", config.authMode,\n+                                thing.getUID());\n+                }\n+                if (authentication != null) {\n+                    AuthenticationStore authStore = httpClient.getAuthenticationStore();\n+                    authStore.addAuthentication(authentication);\n+                }\n+            } catch (URISyntaxException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"failed to create authentication\");\n+            }\n+        } else {\n+            logger.debug(\"No authentication configured for thing '{}'\", thing.getUID());\n+        }\n+\n+        if (config.ignoreSSLErrors) {\n+            logger.info(\"Using the insecure client for thing '{}'.\", thing.getUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMxOTI3MA=="}, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTM3NzA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTo0NjowMVrOHvQ-nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTo0NjowMVrOHvQ-nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyMzI5Mg==", "bodyText": "You might want to mention in the readme, that these values are case sensitive.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519323292", "createdAt": "2020-11-08T09:46:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.math.BigDecimal;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link DimmerItemConverter} implements {@link org.openhab.core.library.items.DimmerItem} conversions\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class DimmerItemConverter extends AbstractTransformingItemConverter {\n+    private static final BigDecimal HUNDRED = BigDecimal.valueOf(100);\n+\n+    private State state = UnDefType.UNDEF;\n+\n+    public DimmerItemConverter(Consumer<State> updateState, Consumer<Command> postCommand,\n+            @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n+            ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n+        super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n+        this.channelConfig = channelConfig;\n+    }\n+\n+    @Override\n+    protected @Nullable Command toCommand(String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString(Command command) {\n+        String string = channelConfig.commandToFixedValue(command);\n+        if (string != null) {\n+            return string;\n+        }\n+\n+        if (command instanceof PercentType) {\n+            return ((PercentType) command).toString();\n+        }\n+\n+        throw new IllegalArgumentException(\"Command type '\" + command.toString() + \"' not supported\");\n+    }\n+\n+    @Override\n+    public State toState(String string) {\n+        State newState = UnDefType.UNDEF;\n+\n+        if (string.equals(channelConfig.onValue)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTM4MTI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTo0Nzo1M1rOHvRBlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMzowNzoxNlrOHvVTSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyNDA1Mw==", "bodyText": "What throws a NumberFormatException here?", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519324053", "createdAt": "2020-11-08T09:47:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.math.BigDecimal;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link DimmerItemConverter} implements {@link org.openhab.core.library.items.DimmerItem} conversions\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class DimmerItemConverter extends AbstractTransformingItemConverter {\n+    private static final BigDecimal HUNDRED = BigDecimal.valueOf(100);\n+\n+    private State state = UnDefType.UNDEF;\n+\n+    public DimmerItemConverter(Consumer<State> updateState, Consumer<Command> postCommand,\n+            @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n+            ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n+        super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n+        this.channelConfig = channelConfig;\n+    }\n+\n+    @Override\n+    protected @Nullable Command toCommand(String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString(Command command) {\n+        String string = channelConfig.commandToFixedValue(command);\n+        if (string != null) {\n+            return string;\n+        }\n+\n+        if (command instanceof PercentType) {\n+            return ((PercentType) command).toString();\n+        }\n+\n+        throw new IllegalArgumentException(\"Command type '\" + command.toString() + \"' not supported\");\n+    }\n+\n+    @Override\n+    public State toState(String string) {\n+        State newState = UnDefType.UNDEF;\n+\n+        if (string.equals(channelConfig.onValue)) {\n+            newState = PercentType.HUNDRED;\n+        } else if (string.equals(channelConfig.offValue)) {\n+            newState = PercentType.ZERO;\n+        } else if (string.equals(channelConfig.increaseValue) && state instanceof PercentType) {\n+            BigDecimal newBrightness = ((PercentType) state).toBigDecimal().add(channelConfig.step);\n+            if (HUNDRED.compareTo(newBrightness) < 0) {\n+                newBrightness = HUNDRED;\n+            }\n+            newState = new PercentType(newBrightness);\n+        } else if (string.equals(channelConfig.decreaseValue) && state instanceof PercentType) {\n+            BigDecimal newBrightness = ((PercentType) state).toBigDecimal().subtract(channelConfig.step);\n+            if (BigDecimal.ZERO.compareTo(newBrightness) > 0) {\n+                newBrightness = BigDecimal.ZERO;\n+            }\n+            newState = new PercentType(newBrightness);\n+        } else {\n+            try {\n+                BigDecimal value = new BigDecimal(string);\n+                if (value.compareTo(PercentType.HUNDRED.toBigDecimal()) > 0) {\n+                    value = PercentType.HUNDRED.toBigDecimal();\n+                }\n+                if (value.compareTo(PercentType.ZERO.toBigDecimal()) < 0) {\n+                    value = PercentType.ZERO.toBigDecimal();\n+                }\n+                newState = new PercentType(value);\n+            } catch (NumberFormatException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5NDEyMQ==", "bodyText": "BigDecimal(string) throws a NumberFormatException if string is not a number.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519394121", "createdAt": "2020-11-08T13:07:16Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/DimmerItemConverter.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.math.BigDecimal;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link DimmerItemConverter} implements {@link org.openhab.core.library.items.DimmerItem} conversions\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class DimmerItemConverter extends AbstractTransformingItemConverter {\n+    private static final BigDecimal HUNDRED = BigDecimal.valueOf(100);\n+\n+    private State state = UnDefType.UNDEF;\n+\n+    public DimmerItemConverter(Consumer<State> updateState, Consumer<Command> postCommand,\n+            @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n+            ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n+        super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n+        this.channelConfig = channelConfig;\n+    }\n+\n+    @Override\n+    protected @Nullable Command toCommand(String value) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String toString(Command command) {\n+        String string = channelConfig.commandToFixedValue(command);\n+        if (string != null) {\n+            return string;\n+        }\n+\n+        if (command instanceof PercentType) {\n+            return ((PercentType) command).toString();\n+        }\n+\n+        throw new IllegalArgumentException(\"Command type '\" + command.toString() + \"' not supported\");\n+    }\n+\n+    @Override\n+    public State toState(String string) {\n+        State newState = UnDefType.UNDEF;\n+\n+        if (string.equals(channelConfig.onValue)) {\n+            newState = PercentType.HUNDRED;\n+        } else if (string.equals(channelConfig.offValue)) {\n+            newState = PercentType.ZERO;\n+        } else if (string.equals(channelConfig.increaseValue) && state instanceof PercentType) {\n+            BigDecimal newBrightness = ((PercentType) state).toBigDecimal().add(channelConfig.step);\n+            if (HUNDRED.compareTo(newBrightness) < 0) {\n+                newBrightness = HUNDRED;\n+            }\n+            newState = new PercentType(newBrightness);\n+        } else if (string.equals(channelConfig.decreaseValue) && state instanceof PercentType) {\n+            BigDecimal newBrightness = ((PercentType) state).toBigDecimal().subtract(channelConfig.step);\n+            if (BigDecimal.ZERO.compareTo(newBrightness) > 0) {\n+                newBrightness = BigDecimal.ZERO;\n+            }\n+            newState = new PercentType(newBrightness);\n+        } else {\n+            try {\n+                BigDecimal value = new BigDecimal(string);\n+                if (value.compareTo(PercentType.HUNDRED.toBigDecimal()) > 0) {\n+                    value = PercentType.HUNDRED.toBigDecimal();\n+                }\n+                if (value.compareTo(PercentType.ZERO.toBigDecimal()) < 0) {\n+                    value = PercentType.ZERO.toBigDecimal();\n+                }\n+                newState = new PercentType(value);\n+            } catch (NumberFormatException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyNDA1Mw=="}, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTM4NzYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/PlayerItemConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTo1MDo0MVrOHvRF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTo1MDo0MVrOHvRF0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyNTEzNw==", "bodyText": "This converter is not mentioned in the readme.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519325137", "createdAt": "2020-11-08T09:50:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/PlayerItemConverter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.library.types.NextPreviousType;\n+import org.openhab.core.library.types.PlayPauseType;\n+import org.openhab.core.library.types.RewindFastforwardType;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link PlayerItemConverter} implements {@link org.openhab.core.library.items.RollershutterItem}\n+ * conversions\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class PlayerItemConverter extends AbstractTransformingItemConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTM4OTQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/RollershutterItemConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTo1MToyOFrOHvRHGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTo1MToyOFrOHvRHGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyNTQ2Nw==", "bodyText": "Marker", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519325467", "createdAt": "2020-11-08T09:51:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/converter/RollershutterItemConverter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.converter;\n+\n+import java.math.BigDecimal;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.http.internal.config.HttpChannelConfig;\n+import org.openhab.binding.http.internal.transform.ValueTransformation;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StopMoveType;\n+import org.openhab.core.library.types.UpDownType;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link RollershutterItemConverter} implements {@link org.openhab.core.library.items.RollershutterItem}\n+ * conversions\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class RollershutterItemConverter extends AbstractTransformingItemConverter {\n+    private final HttpChannelConfig channelConfig;\n+\n+    public RollershutterItemConverter(Consumer<State> updateState, Consumer<Command> postCommand,\n+            @Nullable Consumer<String> sendHttpValue, ValueTransformation stateTransformations,\n+            ValueTransformation commandTransformations, HttpChannelConfig channelConfig) {\n+        super(updateState, postCommand, sendHttpValue, stateTransformations, commandTransformations, channelConfig);\n+        this.channelConfig = channelConfig;\n+    }\n+\n+    @Override\n+    public String toString(Command command) {\n+        String string = channelConfig.commandToFixedValue(command);\n+        if (string != null) {\n+            return string;\n+        }\n+\n+        if (command instanceof PercentType) {\n+            final String downValue = channelConfig.downValue;\n+            final String upValue = channelConfig.upValue;\n+            if (command.equals(PercentType.HUNDRED) && downValue != null) {\n+                return downValue;\n+            } else if (command.equals(PercentType.ZERO) && upValue != null) {\n+                return upValue;\n+            } else {\n+                return ((PercentType) command).toString();\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\"Command type '\" + command.toString() + \"' not supported\");\n+    }\n+\n+    @Override\n+    protected @Nullable Command toCommand(String string) {\n+        if (string.equals(channelConfig.upValue)) {\n+            return UpDownType.UP;\n+        } else if (string.equals(channelConfig.downValue)) {\n+            return UpDownType.DOWN;\n+        } else if (string.equals(channelConfig.moveValue)) {\n+            return StopMoveType.MOVE;\n+        } else if (string.equals(channelConfig.stopValue)) {\n+            return StopMoveType.STOP;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public State toState(String string) {\n+        try {\n+            BigDecimal value = new BigDecimal(string);\n+            if (value.compareTo(PercentType.HUNDRED.toBigDecimal()) > 0) {\n+                return PercentType.HUNDRED;\n+            }\n+            if (value.compareTo(PercentType.ZERO.toBigDecimal()) < 0) {\n+                return PercentType.ZERO;\n+            }\n+        } catch (NumberFormatException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTQwNTk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/Content.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwOTo1ODowN1rOHvRR4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMzowMzoyMFrOHvVPUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyODIyNw==", "bodyText": "encoding can't be null here. Or do you mean this.encoding?\nIllegalArgumentException is only thrown if encoding is null.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519328227", "createdAt": "2020-11-08T09:58:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/Content.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link Content} defines the pre-processed response\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Content {\n+    private final byte[] rawContent;\n+    private final Charset encoding;\n+    private final @Nullable String mediaType;\n+\n+    public Content(byte[] rawContent, String encoding, @Nullable String mediaType) {\n+        this.rawContent = rawContent;\n+        this.mediaType = mediaType;\n+\n+        Charset finalEncoding = StandardCharsets.UTF_8;\n+        if (encoding != null) {\n+            try {\n+                finalEncoding = Charset.forName(encoding);\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5MzEwNg==", "bodyText": "Null-Check is leftover from a previous version where encoding could be null.\nIllegalCharsetNameException is a subset from IllegalArgumentException, so this also catechs an invalid name.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519393106", "createdAt": "2020-11-08T13:03:20Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/Content.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link Content} defines the pre-processed response\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Content {\n+    private final byte[] rawContent;\n+    private final Charset encoding;\n+    private final @Nullable String mediaType;\n+\n+    public Content(byte[] rawContent, String encoding, @Nullable String mediaType) {\n+        this.rawContent = rawContent;\n+        this.mediaType = mediaType;\n+\n+        Charset finalEncoding = StandardCharsets.UTF_8;\n+        if (encoding != null) {\n+            try {\n+                finalEncoding = Charset.forName(encoding);\n+            } catch (IllegalArgumentException e) {\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyODIyNw=="}, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTQxNDIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDowMToyOFrOHvRXVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDowMToyOFrOHvRXVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMyOTYyMQ==", "bodyText": "Does this annotation has any effect?", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519329621", "createdAt": "2020-11-08T10:01:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpResponseListener} is responsible for processing the result of a HTTP request\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpResponseListener extends BufferingResponseListener {\n+    private final Logger logger = LoggerFactory.getLogger(HttpResponseListener.class);\n+    private final CompletableFuture<@Nullable Content> future;\n+    private final String fallbackEncoding;\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future) {\n+        this(future, null);\n+    }\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future, @Nullable String fallbackEncoding) {\n+        this.future = future;\n+        this.fallbackEncoding = fallbackEncoding != null ? fallbackEncoding : StandardCharsets.UTF_8.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTQxNzQ2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDowMjo0MVrOHvRZcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMzowNDo0NFrOHvVQwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMzMDE2MA==", "bodyText": "info is not adequate here. See https://www.openhab.org/docs/developer/guidelines.html#f-logging\n\"info logging should be used sparsely. e.g. a newly started component or a user file that has been loaded.\"", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519330160", "createdAt": "2020-11-08T10:02:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpResponseListener} is responsible for processing the result of a HTTP request\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpResponseListener extends BufferingResponseListener {\n+    private final Logger logger = LoggerFactory.getLogger(HttpResponseListener.class);\n+    private final CompletableFuture<@Nullable Content> future;\n+    private final String fallbackEncoding;\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future) {\n+        this(future, null);\n+    }\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future, @Nullable String fallbackEncoding) {\n+        this.future = future;\n+        this.fallbackEncoding = fallbackEncoding != null ? fallbackEncoding : StandardCharsets.UTF_8.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void onComplete(@NonNullByDefault({}) Result result) {\n+        Response response = result.getResponse();\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"Received from '{}': {}\", result.getRequest().getURI(), responseToLogString(response));\n+        }\n+        Request request = result.getRequest();\n+        if (result.isFailed()) {\n+            logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(), request.getMethod(),\n+                    request.getContent(), result.getFailure().getMessage());\n+            future.complete(null);\n+        } else {\n+            switch (response.getStatus()) {\n+                case HttpStatus.OK_200:\n+                    byte[] content = getContent();\n+                    String encoding = getEncoding();\n+                    if (content != null) {\n+                        future.complete(\n+                                new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n+                    } else {\n+                        future.complete(null);\n+                    }\n+                    break;\n+                case HttpStatus.UNAUTHORIZED_401:\n+                    logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n+                            request.getURI(), request.getMethod(), request.getContent());\n+                    future.completeExceptionally(new HttpAuthException());\n+                    break;\n+                default:\n+                    logger.info(\"Requesting '{}' (method='{}', content='{}') failed: {} {}\", request.getURI(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM5MzQ3Mw==", "bodyText": "Since this is an error state, I raised it to warn.", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519393473", "createdAt": "2020-11-08T13:04:44Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/HttpResponseListener.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link HttpResponseListener} is responsible for processing the result of a HTTP request\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HttpResponseListener extends BufferingResponseListener {\n+    private final Logger logger = LoggerFactory.getLogger(HttpResponseListener.class);\n+    private final CompletableFuture<@Nullable Content> future;\n+    private final String fallbackEncoding;\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future) {\n+        this(future, null);\n+    }\n+\n+    public HttpResponseListener(CompletableFuture<@Nullable Content> future, @Nullable String fallbackEncoding) {\n+        this.future = future;\n+        this.fallbackEncoding = fallbackEncoding != null ? fallbackEncoding : StandardCharsets.UTF_8.name();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void onComplete(@NonNullByDefault({}) Result result) {\n+        Response response = result.getResponse();\n+        if (logger.isTraceEnabled()) {\n+            logger.trace(\"Received from '{}': {}\", result.getRequest().getURI(), responseToLogString(response));\n+        }\n+        Request request = result.getRequest();\n+        if (result.isFailed()) {\n+            logger.warn(\"Requesting '{}' (method='{}', content='{}') failed: {}\", request.getURI(), request.getMethod(),\n+                    request.getContent(), result.getFailure().getMessage());\n+            future.complete(null);\n+        } else {\n+            switch (response.getStatus()) {\n+                case HttpStatus.OK_200:\n+                    byte[] content = getContent();\n+                    String encoding = getEncoding();\n+                    if (content != null) {\n+                        future.complete(\n+                                new Content(content, encoding == null ? fallbackEncoding : encoding, getMediaType()));\n+                    } else {\n+                        future.complete(null);\n+                    }\n+                    break;\n+                case HttpStatus.UNAUTHORIZED_401:\n+                    logger.debug(\"Requesting '{}' (method='{}', content='{}') failed: Authorization error\",\n+                            request.getURI(), request.getMethod(), request.getContent());\n+                    future.completeExceptionally(new HttpAuthException());\n+                    break;\n+                default:\n+                    logger.info(\"Requesting '{}' (method='{}', content='{}') failed: {} {}\", request.getURI(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMzMDE2MA=="}, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTQyOTY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDowODoxOVrOHvRhrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDowODoxOVrOHvRhrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMzMjI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\textensible=\"color,contact,datetime,dimmer,image,location,number,rollershutter, string,switch\">\n          \n          \n            \n            \t\textensible=\"color,contact,datetime,dimmer,image,location,number,rollershutter,string,switch\">", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519332271", "createdAt": "2020-11-08T10:08:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"http\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"url\"\n+\t\textensible=\"color,contact,datetime,dimmer,image,location,number,rollershutter, string,switch\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTQzMzA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDowOTozOVrOHvRj5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDowOTozOVrOHvRj5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMzMjgzNw==", "bodyText": "Should this be url?", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519332837", "createdAt": "2020-11-08T10:09:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"http\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"url\"\n+\t\textensible=\"color,contact,datetime,dimmer,image,location,number,rollershutter, string,switch\">\n+\t\t<label>HTTP URL Thing</label>\n+\t\t<description>Represents a base URL and all associated requests.</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"baseURL\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Base URL</label>\n+\t\t\t\t<description>The URL set here can be extended in the channel configuration.</description>\n+\t\t\t\t<context>network-address</context>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTQzNzEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDoxMToyNFrOHvRmjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMDoxMToyNFrOHvRmjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMzMzUxOQ==", "bodyText": "0 would raise an IllegalArgumentException in scheduleWithFixedDelay().\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"s\" min=\"0\">\n          \n          \n            \n            \t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"s\" min=\"1\">", "url": "https://github.com/openhab/openhab-addons/pull/8521#discussion_r519333519", "createdAt": "2020-11-08T10:11:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.http/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"http\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"url\"\n+\t\textensible=\"color,contact,datetime,dimmer,image,location,number,rollershutter, string,switch\">\n+\t\t<label>HTTP URL Thing</label>\n+\t\t<description>Represents a base URL and all associated requests.</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"baseURL\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Base URL</label>\n+\t\t\t\t<description>The URL set here can be extended in the channel configuration.</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"s\" min=\"0\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882fc67afc78d64aee39f1515d70c9e5a18ce97c"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4305, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}