{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODMwMTk2", "number": 8339, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjoyMTowMFrOEefjLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjo0MToxMVrOEegF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDA5NjQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/.gitignore", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjoyMTowMFrOHKLLkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTo0NzoyNVrOHKujSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMDk5NA==", "bodyText": "Why are you adding a gitignore file here?", "url": "https://github.com/openhab/openhab-addons/pull/8339#discussion_r480430994", "createdAt": "2020-08-31T22:21:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+/RoboMapViewer.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "120ac1ae52068f4f09cf81bf42bc9169166faa8b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxMDUwNg==", "bodyText": "I discovered that classes in the test folder are not in the regular jar file.\nHence to build the standalone viewer, https://community.openhab.org/t/xiaomi-vacuum-map-viewer-to-find-coordinates-for-zone-cleaning/103500 , I needed to move the file to the regular/main folder.\nto prevent it from being uploaded I clicked ignore. seems that generates the .gitignore file.\nI'll remove the .gitignore file as it is no longer needed", "url": "https://github.com/openhab/openhab-addons/pull/8339#discussion_r481010506", "createdAt": "2020-09-01T09:47:25Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+/RoboMapViewer.java", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMDk5NA=="}, "originalCommit": {"oid": "120ac1ae52068f4f09cf81bf42bc9169166faa8b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDExMDU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjoyNTo1NlrOHKLTyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDoxNDo0NFrOHK4RIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzA5OQ==", "bodyText": "please put static fields above non-static fields", "url": "https://github.com/openhab/openhab-addons/pull/8339#discussion_r480433099", "createdAt": "2020-08-31T22:25:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -86,11 +97,16 @@\n     private String lastHistoryId = \"\";\n     private String lastMap = \"\";\n     private CloudConnector cloudConnector;\n+    private boolean hasChannelStructure;\n+    private ConcurrentHashMap<RobotCababilities, Boolean> deviceCapabilities = new ConcurrentHashMap<>();\n+    private ChannelTypeRegistry channelTypeRegistry;\n+    private static final Gson GSON = new GsonBuilder().serializeNulls().create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "120ac1ae52068f4f09cf81bf42bc9169166faa8b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE2OTY5OA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8339#discussion_r481169698", "createdAt": "2020-09-01T14:14:44Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -86,11 +97,16 @@\n     private String lastHistoryId = \"\";\n     private String lastMap = \"\";\n     private CloudConnector cloudConnector;\n+    private boolean hasChannelStructure;\n+    private ConcurrentHashMap<RobotCababilities, Boolean> deviceCapabilities = new ConcurrentHashMap<>();\n+    private ChannelTypeRegistry channelTypeRegistry;\n+    private static final Gson GSON = new GsonBuilder().serializeNulls().create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMzA5OQ=="}, "originalCommit": {"oid": "120ac1ae52068f4f09cf81bf42bc9169166faa8b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDEzNTgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjozMDo1M1rOHKLhbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDoxNTowNFrOHK4SQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzNjU4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            case CHARGING:\n          \n          \n            \n                                control = \"dock\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case CHARGING_ERROR:\n          \n          \n            \n                                control = \"dock\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case DOCKING:\n          \n          \n            \n                                control = \"dock\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case FULL:\n          \n          \n            \n                                control = \"dock\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case IDLE:\n          \n          \n            \n                                control = \"pause\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case PAUSED:\n          \n          \n            \n                                control = \"pause\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case RETURNING:\n          \n          \n            \n                                control = \"dock\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case SLEEPING:\n          \n          \n            \n                                control = \"pause\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case SPOTCLEAN:\n          \n          \n            \n                                control = \"spot\";\n          \n          \n            \n                                vacuum = OnOffType.ON;\n          \n          \n            \n                                break;\n          \n          \n            \n                            case CHARGING:\n          \n          \n            \n                            case CHARGING_ERROR:\n          \n          \n            \n                            case DOCKING:\n          \n          \n            \n                            case FULL:\n          \n          \n            \n                            case RETURNING:\n          \n          \n            \n                                control = \"dock\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case IDLE:\n          \n          \n            \n                            case PAUSED:\n          \n          \n            \n                            case SLEEPING:\n          \n          \n            \n                                control = \"pause\";\n          \n          \n            \n                                break;\n          \n          \n            \n                            case SPOTCLEAN:\n          \n          \n            \n                                control = \"spot\";\n          \n          \n            \n                                vacuum = OnOffType.ON;\n          \n          \n            \n                                break;", "url": "https://github.com/openhab/openhab-addons/pull/8339#discussion_r480436588", "createdAt": "2020-08-31T22:30:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -226,69 +253,105 @@ private void forceStatusUpdate() {\n         status.getValue();\n     }\n \n+    private void safeUpdateState(String channelID, @Nullable Integer state) {\n+        if (state != null) {\n+            updateState(channelID, new DecimalType(state));\n+        } else {\n+            logger.debug(\"Channel {} not update. value not available.\", channelID);\n+        }\n+    }\n+\n     private boolean updateVacuumStatus(JsonObject statusData) {\n-        updateState(CHANNEL_BATTERY, new DecimalType(statusData.get(\"battery\").getAsBigDecimal()));\n-        updateState(CHANNEL_CLEAN_AREA, new DecimalType(statusData.get(\"clean_area\").getAsDouble() / 1000000.0));\n-        updateState(CHANNEL_CLEAN_TIME,\n-                new DecimalType(TimeUnit.SECONDS.toMinutes(statusData.get(\"clean_time\").getAsLong())));\n-        updateState(CHANNEL_DND_ENABLED, new DecimalType(statusData.get(\"dnd_enabled\").getAsBigDecimal()));\n-        updateState(CHANNEL_ERROR_CODE,\n-                new StringType(VacuumErrorType.getType(statusData.get(\"error_code\").getAsInt()).getDescription()));\n-        updateState(CHANNEL_ERROR_ID, new DecimalType(statusData.get(\"error_code\").getAsInt()));\n-        int fanLevel = statusData.get(\"fan_power\").getAsInt();\n-        updateState(CHANNEL_FAN_POWER, new DecimalType(fanLevel));\n-        updateState(CHANNEL_FAN_CONTROL, new DecimalType(FanModeType.getType(fanLevel).getId()));\n-        updateState(CHANNEL_IN_CLEANING, new DecimalType(statusData.get(\"in_cleaning\").getAsInt()));\n-        updateState(CHANNEL_MAP_PRESENT, new DecimalType(statusData.get(\"map_present\").getAsBigDecimal()));\n-        StatusType state = StatusType.getType(statusData.get(\"state\").getAsInt());\n-        updateState(CHANNEL_STATE, new StringType(state.getDescription()));\n-        stateId = statusData.get(\"state\").getAsInt();\n-        updateState(CHANNEL_STATE_ID, new DecimalType(stateId));\n-        State vacuum = OnOffType.OFF;\n-        String control;\n-        switch (state) {\n-            case CLEANING:\n-                control = \"vacuum\";\n-                vacuum = OnOffType.ON;\n-                break;\n-            case CHARGING:\n-                control = \"dock\";\n-                break;\n-            case CHARGING_ERROR:\n-                control = \"dock\";\n-                break;\n-            case DOCKING:\n-                control = \"dock\";\n-                break;\n-            case FULL:\n-                control = \"dock\";\n-                break;\n-            case IDLE:\n-                control = \"pause\";\n-                break;\n-            case PAUSED:\n-                control = \"pause\";\n-                break;\n-            case RETURNING:\n-                control = \"dock\";\n-                break;\n-            case SLEEPING:\n-                control = \"pause\";\n-                break;\n-            case SPOTCLEAN:\n-                control = \"spot\";\n-                vacuum = OnOffType.ON;\n-                break;\n-            default:\n-                control = \"undef\";\n-                break;\n+        StatusDTO statusInfo = GSON.fromJson(statusData, StatusDTO.class);\n+        safeUpdateState(CHANNEL_BATTERY, statusInfo.getBattery());\n+        if (statusInfo.getCleanArea() != null) {\n+            updateState(CHANNEL_CLEAN_AREA, new DecimalType(statusInfo.getCleanArea() / 1000000.0));\n         }\n-        if (control.equals(\"undef\")) {\n-            updateState(CHANNEL_CONTROL, UnDefType.UNDEF);\n-        } else {\n-            updateState(CHANNEL_CONTROL, new StringType(control));\n+        if (statusInfo.getCleanTime() != null) {\n+            updateState(CHANNEL_CLEAN_TIME, new DecimalType(TimeUnit.SECONDS.toMinutes(statusInfo.getCleanTime())));\n+        }\n+        safeUpdateState(CHANNEL_DND_ENABLED, statusInfo.getDndEnabled());\n+\n+        if (statusInfo.getErrorCode() != null) {\n+            updateState(CHANNEL_ERROR_CODE,\n+                    new StringType(VacuumErrorType.getType(statusInfo.getErrorCode()).getDescription()));\n+            safeUpdateState(CHANNEL_ERROR_ID, statusInfo.getErrorCode());\n+        }\n+\n+        if (statusInfo.getFanPower() != null) {\n+            updateState(CHANNEL_FAN_POWER, new DecimalType(statusInfo.getFanPower()));\n+            updateState(CHANNEL_FAN_CONTROL, new DecimalType(FanModeType.getType(statusInfo.getFanPower()).getId()));\n+        }\n+        safeUpdateState(CHANNEL_IN_CLEANING, statusInfo.getInCleaning());\n+        safeUpdateState(CHANNEL_MAP_PRESENT, statusInfo.getMapPresent());\n+        if (statusInfo.getState() != null) {\n+            StatusType state = StatusType.getType(statusInfo.getState());\n+            updateState(CHANNEL_STATE, new StringType(state.getDescription()));\n+            updateState(CHANNEL_STATE_ID, new DecimalType(statusInfo.getState()));\n+\n+            State vacuum = OnOffType.OFF;\n+            String control;\n+            switch (state) {\n+                case ZONE:\n+                case ROOM:\n+                case CLEANING:\n+                    control = \"vacuum\";\n+                    vacuum = OnOffType.ON;\n+                    break;\n+                case CHARGING:\n+                    control = \"dock\";\n+                    break;\n+                case CHARGING_ERROR:\n+                    control = \"dock\";\n+                    break;\n+                case DOCKING:\n+                    control = \"dock\";\n+                    break;\n+                case FULL:\n+                    control = \"dock\";\n+                    break;\n+                case IDLE:\n+                    control = \"pause\";\n+                    break;\n+                case PAUSED:\n+                    control = \"pause\";\n+                    break;\n+                case RETURNING:\n+                    control = \"dock\";\n+                    break;\n+                case SLEEPING:\n+                    control = \"pause\";\n+                    break;\n+                case SPOTCLEAN:\n+                    control = \"spot\";\n+                    vacuum = OnOffType.ON;\n+                    break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "120ac1ae52068f4f09cf81bf42bc9169166faa8b"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE2OTk4Ng==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8339#discussion_r481169986", "createdAt": "2020-09-01T14:15:04Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -226,69 +253,105 @@ private void forceStatusUpdate() {\n         status.getValue();\n     }\n \n+    private void safeUpdateState(String channelID, @Nullable Integer state) {\n+        if (state != null) {\n+            updateState(channelID, new DecimalType(state));\n+        } else {\n+            logger.debug(\"Channel {} not update. value not available.\", channelID);\n+        }\n+    }\n+\n     private boolean updateVacuumStatus(JsonObject statusData) {\n-        updateState(CHANNEL_BATTERY, new DecimalType(statusData.get(\"battery\").getAsBigDecimal()));\n-        updateState(CHANNEL_CLEAN_AREA, new DecimalType(statusData.get(\"clean_area\").getAsDouble() / 1000000.0));\n-        updateState(CHANNEL_CLEAN_TIME,\n-                new DecimalType(TimeUnit.SECONDS.toMinutes(statusData.get(\"clean_time\").getAsLong())));\n-        updateState(CHANNEL_DND_ENABLED, new DecimalType(statusData.get(\"dnd_enabled\").getAsBigDecimal()));\n-        updateState(CHANNEL_ERROR_CODE,\n-                new StringType(VacuumErrorType.getType(statusData.get(\"error_code\").getAsInt()).getDescription()));\n-        updateState(CHANNEL_ERROR_ID, new DecimalType(statusData.get(\"error_code\").getAsInt()));\n-        int fanLevel = statusData.get(\"fan_power\").getAsInt();\n-        updateState(CHANNEL_FAN_POWER, new DecimalType(fanLevel));\n-        updateState(CHANNEL_FAN_CONTROL, new DecimalType(FanModeType.getType(fanLevel).getId()));\n-        updateState(CHANNEL_IN_CLEANING, new DecimalType(statusData.get(\"in_cleaning\").getAsInt()));\n-        updateState(CHANNEL_MAP_PRESENT, new DecimalType(statusData.get(\"map_present\").getAsBigDecimal()));\n-        StatusType state = StatusType.getType(statusData.get(\"state\").getAsInt());\n-        updateState(CHANNEL_STATE, new StringType(state.getDescription()));\n-        stateId = statusData.get(\"state\").getAsInt();\n-        updateState(CHANNEL_STATE_ID, new DecimalType(stateId));\n-        State vacuum = OnOffType.OFF;\n-        String control;\n-        switch (state) {\n-            case CLEANING:\n-                control = \"vacuum\";\n-                vacuum = OnOffType.ON;\n-                break;\n-            case CHARGING:\n-                control = \"dock\";\n-                break;\n-            case CHARGING_ERROR:\n-                control = \"dock\";\n-                break;\n-            case DOCKING:\n-                control = \"dock\";\n-                break;\n-            case FULL:\n-                control = \"dock\";\n-                break;\n-            case IDLE:\n-                control = \"pause\";\n-                break;\n-            case PAUSED:\n-                control = \"pause\";\n-                break;\n-            case RETURNING:\n-                control = \"dock\";\n-                break;\n-            case SLEEPING:\n-                control = \"pause\";\n-                break;\n-            case SPOTCLEAN:\n-                control = \"spot\";\n-                vacuum = OnOffType.ON;\n-                break;\n-            default:\n-                control = \"undef\";\n-                break;\n+        StatusDTO statusInfo = GSON.fromJson(statusData, StatusDTO.class);\n+        safeUpdateState(CHANNEL_BATTERY, statusInfo.getBattery());\n+        if (statusInfo.getCleanArea() != null) {\n+            updateState(CHANNEL_CLEAN_AREA, new DecimalType(statusInfo.getCleanArea() / 1000000.0));\n         }\n-        if (control.equals(\"undef\")) {\n-            updateState(CHANNEL_CONTROL, UnDefType.UNDEF);\n-        } else {\n-            updateState(CHANNEL_CONTROL, new StringType(control));\n+        if (statusInfo.getCleanTime() != null) {\n+            updateState(CHANNEL_CLEAN_TIME, new DecimalType(TimeUnit.SECONDS.toMinutes(statusInfo.getCleanTime())));\n+        }\n+        safeUpdateState(CHANNEL_DND_ENABLED, statusInfo.getDndEnabled());\n+\n+        if (statusInfo.getErrorCode() != null) {\n+            updateState(CHANNEL_ERROR_CODE,\n+                    new StringType(VacuumErrorType.getType(statusInfo.getErrorCode()).getDescription()));\n+            safeUpdateState(CHANNEL_ERROR_ID, statusInfo.getErrorCode());\n+        }\n+\n+        if (statusInfo.getFanPower() != null) {\n+            updateState(CHANNEL_FAN_POWER, new DecimalType(statusInfo.getFanPower()));\n+            updateState(CHANNEL_FAN_CONTROL, new DecimalType(FanModeType.getType(statusInfo.getFanPower()).getId()));\n+        }\n+        safeUpdateState(CHANNEL_IN_CLEANING, statusInfo.getInCleaning());\n+        safeUpdateState(CHANNEL_MAP_PRESENT, statusInfo.getMapPresent());\n+        if (statusInfo.getState() != null) {\n+            StatusType state = StatusType.getType(statusInfo.getState());\n+            updateState(CHANNEL_STATE, new StringType(state.getDescription()));\n+            updateState(CHANNEL_STATE_ID, new DecimalType(statusInfo.getState()));\n+\n+            State vacuum = OnOffType.OFF;\n+            String control;\n+            switch (state) {\n+                case ZONE:\n+                case ROOM:\n+                case CLEANING:\n+                    control = \"vacuum\";\n+                    vacuum = OnOffType.ON;\n+                    break;\n+                case CHARGING:\n+                    control = \"dock\";\n+                    break;\n+                case CHARGING_ERROR:\n+                    control = \"dock\";\n+                    break;\n+                case DOCKING:\n+                    control = \"dock\";\n+                    break;\n+                case FULL:\n+                    control = \"dock\";\n+                    break;\n+                case IDLE:\n+                    control = \"pause\";\n+                    break;\n+                case PAUSED:\n+                    control = \"pause\";\n+                    break;\n+                case RETURNING:\n+                    control = \"dock\";\n+                    break;\n+                case SLEEPING:\n+                    control = \"pause\";\n+                    break;\n+                case SPOTCLEAN:\n+                    control = \"spot\";\n+                    vacuum = OnOffType.ON;\n+                    break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzNjU4OA=="}, "originalCommit": {"oid": "120ac1ae52068f4f09cf81bf42bc9169166faa8b"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDE4NTM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjo0MToxMVrOHKL9Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDo0MDoyNlrOHK5dXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ0MzY3OQ==", "bodyText": "One of the few times that streams improves readability.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            for (Channel ch : thing.getChannels()) {\n          \n          \n            \n                                logger.debug(\"Channel :{}, Channeltype UID: {}\", ch.getUID(), ch.getChannelTypeUID());\n          \n          \n            \n                                if (ch.getUID().getId().equalsIgnoreCase(capability.getChannel())) {\n          \n          \n            \n                                    logger.debug(\"Channel already available...skip creation of channel '{}'.\",\n          \n          \n            \n                                            capability.getChannel());\n          \n          \n            \n                                    deviceCapabilities.replace(capability, true);\n          \n          \n            \n                                    channelfound = true;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            if (channelfound) {\n          \n          \n            \n                                break;\n          \n          \n            \n                            }\n          \n          \n            \n                            if(thing.getChannels().stream()\n          \n          \n            \n                                    .anyMatch(ch -> ch.getUID().getId().equalsIgnoreCase(capability.getChannel()))) {\n          \n          \n            \n                                logger.debug(\"Channel already available...skip creation of channel '{}'.\",\n          \n          \n            \n                                        capability.getChannel());\n          \n          \n            \n                                deviceCapabilities.replace(capability, true);\n          \n          \n            \n                                continue;\n          \n          \n            \n                            }\n          \n      \n    \n    \n  \n\nAlso, I think you intended to continue instead of break in your initial code.", "url": "https://github.com/openhab/openhab-addons/pull/8339#discussion_r480443679", "createdAt": "2020-08-31T22:41:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -468,6 +542,62 @@ public void onMessageReceived(MiIoSendCommand response) {\n         }\n     }\n \n+    private void setCapabilities(JsonObject statusResponse) {\n+        for (RobotCababilities capability : RobotCababilities.values()) {\n+            if (statusResponse.has(capability.getStatusFieldName())) {\n+                deviceCapabilities.putIfAbsent(capability, false);\n+                logger.debug(\"Setting additional vacuum {}\", capability);\n+            }\n+        }\n+    }\n+\n+    private void createCapabilityChannels() {\n+        ThingBuilder thingBuilder = editThing();\n+        int cnt = 0;\n+\n+        for (Entry<RobotCababilities, Boolean> robotCapability : deviceCapabilities.entrySet()) {\n+            RobotCababilities capability = robotCapability.getKey();\n+            Boolean channelCreated = robotCapability.getValue();\n+            boolean channelfound = false;\n+            if (!channelCreated) {\n+                for (Channel ch : thing.getChannels()) {\n+                    logger.debug(\"Channel :{}, Channeltype UID: {}\", ch.getUID(), ch.getChannelTypeUID());\n+                    if (ch.getUID().getId().equalsIgnoreCase(capability.getChannel())) {\n+                        logger.debug(\"Channel already available...skip creation of channel '{}'.\",\n+                                capability.getChannel());\n+                        deviceCapabilities.replace(capability, true);\n+                        channelfound = true;\n+                        break;\n+                    }\n+                }\n+                if (channelfound) {\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "120ac1ae52068f4f09cf81bf42bc9169166faa8b"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE4OTIxNA==", "bodyText": "thanks.", "url": "https://github.com/openhab/openhab-addons/pull/8339#discussion_r481189214", "createdAt": "2020-09-01T14:40:26Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -468,6 +542,62 @@ public void onMessageReceived(MiIoSendCommand response) {\n         }\n     }\n \n+    private void setCapabilities(JsonObject statusResponse) {\n+        for (RobotCababilities capability : RobotCababilities.values()) {\n+            if (statusResponse.has(capability.getStatusFieldName())) {\n+                deviceCapabilities.putIfAbsent(capability, false);\n+                logger.debug(\"Setting additional vacuum {}\", capability);\n+            }\n+        }\n+    }\n+\n+    private void createCapabilityChannels() {\n+        ThingBuilder thingBuilder = editThing();\n+        int cnt = 0;\n+\n+        for (Entry<RobotCababilities, Boolean> robotCapability : deviceCapabilities.entrySet()) {\n+            RobotCababilities capability = robotCapability.getKey();\n+            Boolean channelCreated = robotCapability.getValue();\n+            boolean channelfound = false;\n+            if (!channelCreated) {\n+                for (Channel ch : thing.getChannels()) {\n+                    logger.debug(\"Channel :{}, Channeltype UID: {}\", ch.getUID(), ch.getChannelTypeUID());\n+                    if (ch.getUID().getId().equalsIgnoreCase(capability.getChannel())) {\n+                        logger.debug(\"Channel already available...skip creation of channel '{}'.\",\n+                                capability.getChannel());\n+                        deviceCapabilities.replace(capability, true);\n+                        channelfound = true;\n+                        break;\n+                    }\n+                }\n+                if (channelfound) {\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ0MzY3OQ=="}, "originalCommit": {"oid": "120ac1ae52068f4f09cf81bf42bc9169166faa8b"}, "originalPosition": 304}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4668, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}