{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTM5MTQx", "number": 6742, "reviewThreads": {"totalCount": 73, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowMzoxNFrODm4tWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowMToyM1rOEi5XrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAxNTk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowMzoxNFrOF0kA4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowMzoxNFrOF0kA4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MDMyMA==", "bodyText": "Instead of throwing a RuntimeException you should be logging then error and then return immediately.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r390660320", "createdAt": "2020-03-10T23:03:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    private volatile WriteRunnable currentWrite = null;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3223e8570df25632fe98d4774c3ad2ee51b89967"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAyNjY3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowODozNlrOF0kHcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowODozNlrOF0kHcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjAwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"error writing message\", e);\n          \n          \n            \n                            logger.warn(\"error writing message\", e);", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r390662001", "createdAt": "2020-03-10T23:08:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    private volatile WriteRunnable currentWrite = null;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            throw new RuntimeException(e);\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            while (!done) {\n+                try {\n+                    for (int len = -1; (len = in.read(buffer)) >= 0;) {\n+                        addData(buffer, len);\n+                        if (done) {\n+                            break;\n+                        }\n+                    }\n+                } catch (final IOException e) {\n+                    logger.error(\"Exception during receive, exiting thread\", e);\n+                    break;\n+                }\n+            }\n+        } catch (final Exception e) {\n+            logger.error(\"Exception in UPB read thread\", e);\n+        } finally {\n+            logger.info(\"shutting down receive thread\");\n+            shutdownAndAwaitTermination(writeExecutor);\n+            serialPort.removeEventListener();\n+            try {\n+                serialPort.close();\n+            } catch (final Exception e) {\n+                // ignore\n+            }\n+        }\n+        logger.debug(\"UPB read thread stopped\");\n+    }\n+\n+    private void addData(final byte[] data, final int length) {\n+        if (bufferLength + length > buffer.length) {\n+            // buffer overflow, discard entire buffer\n+            bufferLength = 0;\n+        }\n+        System.arraycopy(data, 0, buffer, bufferLength, length);\n+        bufferLength += length;\n+        interpretBuffer();\n+    }\n+\n+    private int findMessageLength(final byte[] buffer, final int bufferLength) {\n+        for (int i = 0; i < bufferLength; i++) {\n+            if (buffer[i] == 13) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Attempts to interpret any messages that may be contained in the buffer.\n+     */\n+    private void interpretBuffer() {\n+        int messageLength = findMessageLength(buffer, bufferLength);\n+\n+        while (messageLength != -1) {\n+            final String message = new String(Arrays.copyOfRange(buffer, 0, messageLength), US_ASCII);\n+            logger.debug(\"UPB Message: {}\", message);\n+\n+            final int remainingBuffer = bufferLength - messageLength - 1;\n+            if (remainingBuffer > 0) {\n+                System.arraycopy(buffer, messageLength + 1, buffer, 0, remainingBuffer);\n+            }\n+            bufferLength = remainingBuffer;\n+            handleMessage(UPBMessage.fromString(message));\n+            messageLength = findMessageLength(buffer, bufferLength);\n+        }\n+    }\n+\n+    private void handleMessage(final UPBMessage msg) {\n+        switch (msg.getType()) {\n+            case ACK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(true);\n+                }\n+                break;\n+            case NAK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(false);\n+                }\n+                break;\n+            case ACCEPT:\n+                break;\n+            case ERROR:\n+                logger.warn(\"received ERROR response from PIM\");\n+                break;\n+            default:\n+                // ignore\n+        }\n+        listener.incomingMessage(msg);\n+    }\n+\n+    public CompletionStage<CmdStatus> enqueue(final MessageBuilder msg) {\n+        final CompletableFuture<CmdStatus> completion = new CompletableFuture<>();\n+        final Runnable task = new WriteRunnable(msg.build(), completion);\n+        try {\n+            writeExecutor.execute(task);\n+        } catch (final RejectedExecutionException e) {\n+            completion.completeExceptionally(e);\n+        }\n+        return completion;\n+    }\n+\n+    // puts the PIM is in message mode\n+    private void enterMessageMode() {\n+        try {\n+            serialPort.getOutputStream().write(ENABLE_MESSAGE_MODE_CMD);\n+        } catch (final IOException e) {\n+            logger.error(\"error setting message mode\", e);\n+        }\n+    }\n+\n+    void shutdownAndAwaitTermination(final ExecutorService pool) {\n+        pool.shutdown();\n+        try {\n+            if (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n+                pool.shutdownNow();\n+                if (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n+                    logger.error(\"executor did not terminate\");\n+                }\n+            }\n+        } catch (final InterruptedException ie) {\n+            pool.shutdownNow();\n+            Thread.currentThread().interrupt();\n+        }\n+    }\n+\n+    public void terminate() {\n+        done = true;\n+        try {\n+            serialPort.close();\n+        } catch (final Exception e) {\n+            logger.warn(\"failed to close serial port\", e);\n+        }\n+    }\n+\n+    private class WriteRunnable implements Runnable {\n+        private static final int MAX_RETRIES = 3;\n+\n+        private final String msg;\n+        private final CompletableFuture<CmdStatus> completion;\n+\n+        private Boolean ack = null;\n+        private volatile CountDownLatch ackLatch;\n+\n+        public WriteRunnable(final String msg, final CompletableFuture<CmdStatus> completion) {\n+            this.msg = msg;\n+            this.completion = completion;\n+        }\n+\n+        // called by reader thread if on ACK or NAK\n+        public void ackReceived(final boolean ack) {\n+            if (logger.isDebugEnabled()) {\n+                if (ack) {\n+                    logger.debug(\"ACK received\");\n+                } else {\n+                    logger.debug(\"NAK received\");\n+                }\n+            }\n+            this.ack = ack;\n+            ackLatch.countDown();\n+        }\n+\n+        @Override\n+        public void run() {\n+            currentWrite = this;\n+            try {\n+                logger.debug(\"Writing bytes: {}\", msg);\n+                final OutputStream out = serialPort.getOutputStream();\n+                for (int tries = 0; tries < MAX_RETRIES && ack == null; tries++) {\n+                    ackLatch = new CountDownLatch(1);\n+                    out.write(0x14);\n+                    out.write(msg.getBytes(US_ASCII));\n+                    out.write(0x0d);\n+                    final boolean acked = ackLatch.await(ACK_TIMEOUT_MS, MILLISECONDS);\n+                    if (acked) {\n+                        break;\n+                    }\n+                    logger.debug(\"ack timed out, retrying ({} of {})\", tries + 1, MAX_RETRIES);\n+                }\n+                if (ack == null) {\n+                    logger.debug(\"write not acked\");\n+                    completion.complete(CmdStatus.WRITE_FAILED);\n+                } else if (ack) {\n+                    completion.complete(CmdStatus.ACK);\n+                } else {\n+                    completion.complete(CmdStatus.NAK);\n+                }\n+            } catch (final Exception e) {\n+                logger.error(\"error writing message\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3223e8570df25632fe98d4774c3ad2ee51b89967"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAyNjkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowODo0NlrOF0kHmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowODo0NlrOF0kHmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjA0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"serial port is not set\");\n          \n          \n            \n                        logger.warn(\"serial port is not set\");", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r390662043", "createdAt": "2020-03-10T23:08:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile SerialIoThread receiveThread;\n+    private volatile ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.error(\"serial port is not set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3223e8570df25632fe98d4774c3ad2ee51b89967"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAyNzMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowODo1OFrOF0kH4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowODo1OFrOF0kH4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjExNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Stopped UPB serial handler\");\n          \n          \n            \n                    logger.debug(\"Stopped UPB serial handler\");", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r390662114", "createdAt": "2020-03-10T23:08:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile SerialIoThread receiveThread;\n+    private volatile ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.error(\"serial port is not set\");\n+            return;\n+        }\n+\n+        futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_INIT_DELAY_MS,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (futSerialPortInit != null) {\n+            futSerialPortInit.cancel(true);\n+        }\n+        futSerialPortInit = null;\n+        if (receiveThread != null) {\n+            receiveThread.terminate();\n+            try {\n+                receiveThread.join(1000);\n+            } catch (final InterruptedException e) {\n+                // ignore\n+            }\n+            receiveThread = null;\n+        }\n+        logger.info(\"Stopped UPB serial handler\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3223e8570df25632fe98d4774c3ad2ee51b89967"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAzMDIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMDoyN1rOF0kJsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMDoyN1rOF0kJsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjU3Ng==", "bodyText": "remove this logging statement, the user is already notified through a change in the Thing status.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r390662576", "createdAt": "2020-03-10T23:10:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile SerialIoThread receiveThread;\n+    private volatile ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.error(\"serial port is not set\");\n+            return;\n+        }\n+\n+        futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_INIT_DELAY_MS,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (futSerialPortInit != null) {\n+            futSerialPortInit.cancel(true);\n+        }\n+        futSerialPortInit = null;\n+        if (receiveThread != null) {\n+            receiveThread.terminate();\n+            try {\n+                receiveThread.join(1000);\n+            } catch (final InterruptedException e) {\n+                // ignore\n+            }\n+            receiveThread = null;\n+        }\n+        logger.info(\"Stopped UPB serial handler\");\n+        super.dispose();\n+    }\n+\n+    private void openSerialPort(final String portId) {\n+        try {\n+            final SerialPort serialPort = tryOpenSerialPort(portId);\n+            if (serialPort == null) {\n+                futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_RETRY_DELAY_MS,\n+                        TimeUnit.MILLISECONDS);\n+                return;\n+            }\n+            logger.debug(\"Starting receive thread\");\n+            receiveThread = new SerialIoThread(serialPort, this);\n+            receiveThread.setName(\"upb-serial-reader\");\n+            // Once the receiver starts, it may set the PIM status to ONLINE\n+            // so we must ensure all initialization is finished at that point.\n+            receiveThread.start();\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (final Exception e) {\n+            logger.error(\"failed to open serial port\", e);\n+        }\n+    }\n+\n+    private SerialPort tryOpenSerialPort(final String portId) {\n+        logger.info(\"opening serial port {}\", portId);\n+        final SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(portId);\n+        if (portIdentifier == null) {\n+            logger.error(\"port not found: {}\", portId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3223e8570df25632fe98d4774c3ad2ee51b89967"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAzMDMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMDozMVrOF0kJxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMDozMVrOF0kJxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjU5OQ==", "bodyText": "remove this logging statement, the user is already notified through a change in the Thing status.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r390662599", "createdAt": "2020-03-10T23:10:31Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile SerialIoThread receiveThread;\n+    private volatile ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.error(\"serial port is not set\");\n+            return;\n+        }\n+\n+        futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_INIT_DELAY_MS,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (futSerialPortInit != null) {\n+            futSerialPortInit.cancel(true);\n+        }\n+        futSerialPortInit = null;\n+        if (receiveThread != null) {\n+            receiveThread.terminate();\n+            try {\n+                receiveThread.join(1000);\n+            } catch (final InterruptedException e) {\n+                // ignore\n+            }\n+            receiveThread = null;\n+        }\n+        logger.info(\"Stopped UPB serial handler\");\n+        super.dispose();\n+    }\n+\n+    private void openSerialPort(final String portId) {\n+        try {\n+            final SerialPort serialPort = tryOpenSerialPort(portId);\n+            if (serialPort == null) {\n+                futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_RETRY_DELAY_MS,\n+                        TimeUnit.MILLISECONDS);\n+                return;\n+            }\n+            logger.debug(\"Starting receive thread\");\n+            receiveThread = new SerialIoThread(serialPort, this);\n+            receiveThread.setName(\"upb-serial-reader\");\n+            // Once the receiver starts, it may set the PIM status to ONLINE\n+            // so we must ensure all initialization is finished at that point.\n+            receiveThread.start();\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (final Exception e) {\n+            logger.error(\"failed to open serial port\", e);\n+        }\n+    }\n+\n+    private SerialPort tryOpenSerialPort(final String portId) {\n+        logger.info(\"opening serial port {}\", portId);\n+        final SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(portId);\n+        if (portIdentifier == null) {\n+            logger.error(\"port not found: {}\", portId);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    Constants.OFFLINE_SERIAL_EXISTS);\n+            return null;\n+        }\n+\n+        final SerialPort serialPort;\n+        try {\n+            serialPort = portIdentifier.open(\"org.openhab.binding.upb\", 1000);\n+        } catch (final PortInUseException e) {\n+            logger.error(\"cannot open serial port\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3223e8570df25632fe98d4774c3ad2ee51b89967"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDYxNzk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyMToxN1rOF5DoYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyMToxN1rOF5DoYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MjY0MA==", "bodyText": "We just had another release so this needs to be changed again.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>2.5.3-SNAPSHOT</version>\n          \n          \n            \n                <version>2.5.4-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395372640", "createdAt": "2020-03-19T23:21:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/pom.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>2.5.3-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDYyMTQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/PIMHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyMzowMlrOF5DqaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjozMzowMlrOF5vUDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzE2MA==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395373160", "createdAt": "2020-03-19T23:23:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/PIMHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.internal.UPBController;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base class for Powerline Interface Module handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public abstract class PIMHandler extends BaseBridgeHandler implements MessageListener, UPBIoHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4ODMzMw==", "bodyText": "I'm adding package-level declarations for this.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r396088333", "createdAt": "2020-03-22T12:33:02Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/PIMHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.internal.UPBController;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base class for Powerline Interface Module handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public abstract class PIMHandler extends BaseBridgeHandler implements MessageListener, UPBIoHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzE2MA=="}, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDYyMjc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/PIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyMzo0MlrOF5DrLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyMzo0MlrOF5DrLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzM1OQ==", "bodyText": "I see no reason for this to be volatile\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private volatile UPBController controller;\n          \n          \n            \n                private UPBController controller;", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395373359", "createdAt": "2020-03-19T23:23:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/PIMHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.internal.UPBController;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base class for Powerline Interface Module handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public abstract class PIMHandler extends BaseBridgeHandler implements MessageListener, UPBIoHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(PIMHandler.class);\n+\n+    private volatile UPBController controller;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDYyNjA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyNTozN1rOF5DtSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyNTozN1rOF5DtSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3Mzg5OA==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395373898", "createdAt": "2020-03-19T23:25:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDYyNjk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyNjowOVrOF5Dt1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNDoxNDoxMFrOF5v7Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NDAzOQ==", "bodyText": "Might be useful to log the error message.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395374039", "createdAt": "2020-03-19T23:26:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    private volatile WriteRunnable currentWrite = null;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            while (!done) {\n+                try {\n+                    for (int len = -1; (len = in.read(buffer)) >= 0;) {\n+                        addData(buffer, len);\n+                        if (done) {\n+                            break;\n+                        }\n+                    }\n+                } catch (final IOException e) {\n+                    logger.warn(\"Exception during receive, exiting thread\", e);\n+                    break;\n+                }\n+            }\n+        } catch (final Exception e) {\n+            logger.warn(\"Exception in UPB read thread\", e);\n+        } finally {\n+            logger.debug(\"shutting down receive thread\");\n+            shutdownAndAwaitTermination(writeExecutor);\n+            serialPort.removeEventListener();\n+            try {\n+                serialPort.close();\n+            } catch (final Exception e) {\n+                // ignore\n+            }\n+        }\n+        logger.debug(\"UPB read thread stopped\");\n+    }\n+\n+    private void addData(final byte[] data, final int length) {\n+        if (bufferLength + length > buffer.length) {\n+            // buffer overflow, discard entire buffer\n+            bufferLength = 0;\n+        }\n+        System.arraycopy(data, 0, buffer, bufferLength, length);\n+        bufferLength += length;\n+        interpretBuffer();\n+    }\n+\n+    private int findMessageLength(final byte[] buffer, final int bufferLength) {\n+        for (int i = 0; i < bufferLength; i++) {\n+            if (buffer[i] == 13) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Attempts to interpret any messages that may be contained in the buffer.\n+     */\n+    private void interpretBuffer() {\n+        int messageLength = findMessageLength(buffer, bufferLength);\n+\n+        while (messageLength != -1) {\n+            final String message = new String(Arrays.copyOfRange(buffer, 0, messageLength), US_ASCII);\n+            logger.debug(\"UPB Message: {}\", message);\n+\n+            final int remainingBuffer = bufferLength - messageLength - 1;\n+            if (remainingBuffer > 0) {\n+                System.arraycopy(buffer, messageLength + 1, buffer, 0, remainingBuffer);\n+            }\n+            bufferLength = remainingBuffer;\n+            handleMessage(UPBMessage.fromString(message));\n+            messageLength = findMessageLength(buffer, bufferLength);\n+        }\n+    }\n+\n+    private void handleMessage(final UPBMessage msg) {\n+        switch (msg.getType()) {\n+            case ACK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(true);\n+                }\n+                break;\n+            case NAK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(false);\n+                }\n+                break;\n+            case ACCEPT:\n+                break;\n+            case ERROR:\n+                logger.info(\"received ERROR response from PIM\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5ODM0Ng==", "bodyText": "There isn't anything to log, the PIM just sends an error indication.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r396098346", "createdAt": "2020-03-22T14:14:10Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    private volatile WriteRunnable currentWrite = null;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            while (!done) {\n+                try {\n+                    for (int len = -1; (len = in.read(buffer)) >= 0;) {\n+                        addData(buffer, len);\n+                        if (done) {\n+                            break;\n+                        }\n+                    }\n+                } catch (final IOException e) {\n+                    logger.warn(\"Exception during receive, exiting thread\", e);\n+                    break;\n+                }\n+            }\n+        } catch (final Exception e) {\n+            logger.warn(\"Exception in UPB read thread\", e);\n+        } finally {\n+            logger.debug(\"shutting down receive thread\");\n+            shutdownAndAwaitTermination(writeExecutor);\n+            serialPort.removeEventListener();\n+            try {\n+                serialPort.close();\n+            } catch (final Exception e) {\n+                // ignore\n+            }\n+        }\n+        logger.debug(\"UPB read thread stopped\");\n+    }\n+\n+    private void addData(final byte[] data, final int length) {\n+        if (bufferLength + length > buffer.length) {\n+            // buffer overflow, discard entire buffer\n+            bufferLength = 0;\n+        }\n+        System.arraycopy(data, 0, buffer, bufferLength, length);\n+        bufferLength += length;\n+        interpretBuffer();\n+    }\n+\n+    private int findMessageLength(final byte[] buffer, final int bufferLength) {\n+        for (int i = 0; i < bufferLength; i++) {\n+            if (buffer[i] == 13) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Attempts to interpret any messages that may be contained in the buffer.\n+     */\n+    private void interpretBuffer() {\n+        int messageLength = findMessageLength(buffer, bufferLength);\n+\n+        while (messageLength != -1) {\n+            final String message = new String(Arrays.copyOfRange(buffer, 0, messageLength), US_ASCII);\n+            logger.debug(\"UPB Message: {}\", message);\n+\n+            final int remainingBuffer = bufferLength - messageLength - 1;\n+            if (remainingBuffer > 0) {\n+                System.arraycopy(buffer, messageLength + 1, buffer, 0, remainingBuffer);\n+            }\n+            bufferLength = remainingBuffer;\n+            handleMessage(UPBMessage.fromString(message));\n+            messageLength = findMessageLength(buffer, bufferLength);\n+        }\n+    }\n+\n+    private void handleMessage(final UPBMessage msg) {\n+        switch (msg.getType()) {\n+            case ACK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(true);\n+                }\n+                break;\n+            case NAK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(false);\n+                }\n+                break;\n+            case ACCEPT:\n+                break;\n+            case ERROR:\n+                logger.info(\"received ERROR response from PIM\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NDAzOQ=="}, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY0MjMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzozNDozNlrOF5D3Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjo0MjoyMFrOF5vXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NjQ4Mw==", "bodyText": "If len=-1 that is supposed to mean it is the end of the stream. Wouldn't this code just endlessly call read on a closed stream then?", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395376483", "createdAt": "2020-03-19T23:34:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    private volatile WriteRunnable currentWrite = null;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            while (!done) {\n+                try {\n+                    for (int len = -1; (len = in.read(buffer)) >= 0;) {\n+                        addData(buffer, len);\n+                        if (done) {\n+                            break;\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4OTE2OA==", "bodyText": "Good catch, rewriting this.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r396089168", "createdAt": "2020-03-22T12:42:20Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    private volatile WriteRunnable currentWrite = null;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            while (!done) {\n+                try {\n+                    for (int len = -1; (len = in.read(buffer)) >= 0;) {\n+                        addData(buffer, len);\n+                        if (done) {\n+                            break;\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NjQ4Mw=="}, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY1NDEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0MDo1NVrOF5D-mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNDoxNToxNFrOF5v7dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3ODMyOQ==", "bodyText": "I would suggest flushing the stream as well to make sure it gets written.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395378329", "createdAt": "2020-03-19T23:40:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    private volatile WriteRunnable currentWrite = null;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            while (!done) {\n+                try {\n+                    for (int len = -1; (len = in.read(buffer)) >= 0;) {\n+                        addData(buffer, len);\n+                        if (done) {\n+                            break;\n+                        }\n+                    }\n+                } catch (final IOException e) {\n+                    logger.warn(\"Exception during receive, exiting thread\", e);\n+                    break;\n+                }\n+            }\n+        } catch (final Exception e) {\n+            logger.warn(\"Exception in UPB read thread\", e);\n+        } finally {\n+            logger.debug(\"shutting down receive thread\");\n+            shutdownAndAwaitTermination(writeExecutor);\n+            serialPort.removeEventListener();\n+            try {\n+                serialPort.close();\n+            } catch (final Exception e) {\n+                // ignore\n+            }\n+        }\n+        logger.debug(\"UPB read thread stopped\");\n+    }\n+\n+    private void addData(final byte[] data, final int length) {\n+        if (bufferLength + length > buffer.length) {\n+            // buffer overflow, discard entire buffer\n+            bufferLength = 0;\n+        }\n+        System.arraycopy(data, 0, buffer, bufferLength, length);\n+        bufferLength += length;\n+        interpretBuffer();\n+    }\n+\n+    private int findMessageLength(final byte[] buffer, final int bufferLength) {\n+        for (int i = 0; i < bufferLength; i++) {\n+            if (buffer[i] == 13) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Attempts to interpret any messages that may be contained in the buffer.\n+     */\n+    private void interpretBuffer() {\n+        int messageLength = findMessageLength(buffer, bufferLength);\n+\n+        while (messageLength != -1) {\n+            final String message = new String(Arrays.copyOfRange(buffer, 0, messageLength), US_ASCII);\n+            logger.debug(\"UPB Message: {}\", message);\n+\n+            final int remainingBuffer = bufferLength - messageLength - 1;\n+            if (remainingBuffer > 0) {\n+                System.arraycopy(buffer, messageLength + 1, buffer, 0, remainingBuffer);\n+            }\n+            bufferLength = remainingBuffer;\n+            handleMessage(UPBMessage.fromString(message));\n+            messageLength = findMessageLength(buffer, bufferLength);\n+        }\n+    }\n+\n+    private void handleMessage(final UPBMessage msg) {\n+        switch (msg.getType()) {\n+            case ACK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(true);\n+                }\n+                break;\n+            case NAK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(false);\n+                }\n+                break;\n+            case ACCEPT:\n+                break;\n+            case ERROR:\n+                logger.info(\"received ERROR response from PIM\");\n+                break;\n+            default:\n+                // ignore\n+        }\n+        listener.incomingMessage(msg);\n+    }\n+\n+    public CompletionStage<CmdStatus> enqueue(final MessageBuilder msg) {\n+        final CompletableFuture<CmdStatus> completion = new CompletableFuture<>();\n+        final Runnable task = new WriteRunnable(msg.build(), completion);\n+        try {\n+            writeExecutor.execute(task);\n+        } catch (final RejectedExecutionException e) {\n+            completion.completeExceptionally(e);\n+        }\n+        return completion;\n+    }\n+\n+    // puts the PIM is in message mode\n+    private void enterMessageMode() {\n+        try {\n+            serialPort.getOutputStream().write(ENABLE_MESSAGE_MODE_CMD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5ODQyMg==", "bodyText": "Pretty sure it's not buffering but I'll add it.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r396098422", "createdAt": "2020-03-22T14:15:14Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    private volatile WriteRunnable currentWrite = null;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            while (!done) {\n+                try {\n+                    for (int len = -1; (len = in.read(buffer)) >= 0;) {\n+                        addData(buffer, len);\n+                        if (done) {\n+                            break;\n+                        }\n+                    }\n+                } catch (final IOException e) {\n+                    logger.warn(\"Exception during receive, exiting thread\", e);\n+                    break;\n+                }\n+            }\n+        } catch (final Exception e) {\n+            logger.warn(\"Exception in UPB read thread\", e);\n+        } finally {\n+            logger.debug(\"shutting down receive thread\");\n+            shutdownAndAwaitTermination(writeExecutor);\n+            serialPort.removeEventListener();\n+            try {\n+                serialPort.close();\n+            } catch (final Exception e) {\n+                // ignore\n+            }\n+        }\n+        logger.debug(\"UPB read thread stopped\");\n+    }\n+\n+    private void addData(final byte[] data, final int length) {\n+        if (bufferLength + length > buffer.length) {\n+            // buffer overflow, discard entire buffer\n+            bufferLength = 0;\n+        }\n+        System.arraycopy(data, 0, buffer, bufferLength, length);\n+        bufferLength += length;\n+        interpretBuffer();\n+    }\n+\n+    private int findMessageLength(final byte[] buffer, final int bufferLength) {\n+        for (int i = 0; i < bufferLength; i++) {\n+            if (buffer[i] == 13) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Attempts to interpret any messages that may be contained in the buffer.\n+     */\n+    private void interpretBuffer() {\n+        int messageLength = findMessageLength(buffer, bufferLength);\n+\n+        while (messageLength != -1) {\n+            final String message = new String(Arrays.copyOfRange(buffer, 0, messageLength), US_ASCII);\n+            logger.debug(\"UPB Message: {}\", message);\n+\n+            final int remainingBuffer = bufferLength - messageLength - 1;\n+            if (remainingBuffer > 0) {\n+                System.arraycopy(buffer, messageLength + 1, buffer, 0, remainingBuffer);\n+            }\n+            bufferLength = remainingBuffer;\n+            handleMessage(UPBMessage.fromString(message));\n+            messageLength = findMessageLength(buffer, bufferLength);\n+        }\n+    }\n+\n+    private void handleMessage(final UPBMessage msg) {\n+        switch (msg.getType()) {\n+            case ACK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(true);\n+                }\n+                break;\n+            case NAK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(false);\n+                }\n+                break;\n+            case ACCEPT:\n+                break;\n+            case ERROR:\n+                logger.info(\"received ERROR response from PIM\");\n+                break;\n+            default:\n+                // ignore\n+        }\n+        listener.incomingMessage(msg);\n+    }\n+\n+    public CompletionStage<CmdStatus> enqueue(final MessageBuilder msg) {\n+        final CompletableFuture<CmdStatus> completion = new CompletableFuture<>();\n+        final Runnable task = new WriteRunnable(msg.build(), completion);\n+        try {\n+            writeExecutor.execute(task);\n+        } catch (final RejectedExecutionException e) {\n+            completion.completeExceptionally(e);\n+        }\n+        return completion;\n+    }\n+\n+    // puts the PIM is in message mode\n+    private void enterMessageMode() {\n+        try {\n+            serialPort.getOutputStream().write(ENABLE_MESSAGE_MODE_CMD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3ODMyOQ=="}, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY1NTI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0MTo0N1rOF5D_ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0MTo0N1rOF5D_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3ODUzOA==", "bodyText": "make sure to flush after this", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395378538", "createdAt": "2020-03-19T23:41:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    private volatile WriteRunnable currentWrite = null;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            while (!done) {\n+                try {\n+                    for (int len = -1; (len = in.read(buffer)) >= 0;) {\n+                        addData(buffer, len);\n+                        if (done) {\n+                            break;\n+                        }\n+                    }\n+                } catch (final IOException e) {\n+                    logger.warn(\"Exception during receive, exiting thread\", e);\n+                    break;\n+                }\n+            }\n+        } catch (final Exception e) {\n+            logger.warn(\"Exception in UPB read thread\", e);\n+        } finally {\n+            logger.debug(\"shutting down receive thread\");\n+            shutdownAndAwaitTermination(writeExecutor);\n+            serialPort.removeEventListener();\n+            try {\n+                serialPort.close();\n+            } catch (final Exception e) {\n+                // ignore\n+            }\n+        }\n+        logger.debug(\"UPB read thread stopped\");\n+    }\n+\n+    private void addData(final byte[] data, final int length) {\n+        if (bufferLength + length > buffer.length) {\n+            // buffer overflow, discard entire buffer\n+            bufferLength = 0;\n+        }\n+        System.arraycopy(data, 0, buffer, bufferLength, length);\n+        bufferLength += length;\n+        interpretBuffer();\n+    }\n+\n+    private int findMessageLength(final byte[] buffer, final int bufferLength) {\n+        for (int i = 0; i < bufferLength; i++) {\n+            if (buffer[i] == 13) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Attempts to interpret any messages that may be contained in the buffer.\n+     */\n+    private void interpretBuffer() {\n+        int messageLength = findMessageLength(buffer, bufferLength);\n+\n+        while (messageLength != -1) {\n+            final String message = new String(Arrays.copyOfRange(buffer, 0, messageLength), US_ASCII);\n+            logger.debug(\"UPB Message: {}\", message);\n+\n+            final int remainingBuffer = bufferLength - messageLength - 1;\n+            if (remainingBuffer > 0) {\n+                System.arraycopy(buffer, messageLength + 1, buffer, 0, remainingBuffer);\n+            }\n+            bufferLength = remainingBuffer;\n+            handleMessage(UPBMessage.fromString(message));\n+            messageLength = findMessageLength(buffer, bufferLength);\n+        }\n+    }\n+\n+    private void handleMessage(final UPBMessage msg) {\n+        switch (msg.getType()) {\n+            case ACK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(true);\n+                }\n+                break;\n+            case NAK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(false);\n+                }\n+                break;\n+            case ACCEPT:\n+                break;\n+            case ERROR:\n+                logger.info(\"received ERROR response from PIM\");\n+                break;\n+            default:\n+                // ignore\n+        }\n+        listener.incomingMessage(msg);\n+    }\n+\n+    public CompletionStage<CmdStatus> enqueue(final MessageBuilder msg) {\n+        final CompletableFuture<CmdStatus> completion = new CompletableFuture<>();\n+        final Runnable task = new WriteRunnable(msg.build(), completion);\n+        try {\n+            writeExecutor.execute(task);\n+        } catch (final RejectedExecutionException e) {\n+            completion.completeExceptionally(e);\n+        }\n+        return completion;\n+    }\n+\n+    // puts the PIM is in message mode\n+    private void enterMessageMode() {\n+        try {\n+            serialPort.getOutputStream().write(ENABLE_MESSAGE_MODE_CMD);\n+        } catch (final IOException e) {\n+            logger.warn(\"error setting message mode\", e);\n+        }\n+    }\n+\n+    void shutdownAndAwaitTermination(final ExecutorService pool) {\n+        pool.shutdown();\n+        try {\n+            if (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n+                pool.shutdownNow();\n+                if (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n+                    logger.warn(\"executor did not terminate\");\n+                }\n+            }\n+        } catch (final InterruptedException ie) {\n+            pool.shutdownNow();\n+            Thread.currentThread().interrupt();\n+        }\n+    }\n+\n+    public void terminate() {\n+        done = true;\n+        try {\n+            serialPort.close();\n+        } catch (final Exception e) {\n+            logger.warn(\"failed to close serial port\", e);\n+        }\n+    }\n+\n+    private class WriteRunnable implements Runnable {\n+        private static final int MAX_RETRIES = 3;\n+\n+        private final String msg;\n+        private final CompletableFuture<CmdStatus> completion;\n+\n+        private Boolean ack = null;\n+        private volatile CountDownLatch ackLatch;\n+\n+        public WriteRunnable(final String msg, final CompletableFuture<CmdStatus> completion) {\n+            this.msg = msg;\n+            this.completion = completion;\n+        }\n+\n+        // called by reader thread if on ACK or NAK\n+        public void ackReceived(final boolean ack) {\n+            if (logger.isDebugEnabled()) {\n+                if (ack) {\n+                    logger.debug(\"ACK received\");\n+                } else {\n+                    logger.debug(\"NAK received\");\n+                }\n+            }\n+            this.ack = ack;\n+            ackLatch.countDown();\n+        }\n+\n+        @Override\n+        public void run() {\n+            currentWrite = this;\n+            try {\n+                logger.debug(\"Writing bytes: {}\", msg);\n+                final OutputStream out = serialPort.getOutputStream();\n+                for (int tries = 0; tries < MAX_RETRIES && ack == null; tries++) {\n+                    ackLatch = new CountDownLatch(1);\n+                    out.write(0x14);\n+                    out.write(msg.getBytes(US_ASCII));\n+                    out.write(0x0d);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY1OTYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0NDowNlrOF5ECFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNDoxNjo0OVrOF5v8Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3OTIyMA==", "bodyText": "remove comment", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395379220", "createdAt": "2020-03-19T23:44:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile SerialIoThread receiveThread;\n+    private volatile ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.warn(\"serial port is not set\");\n+            return;\n+        }\n+\n+        futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_INIT_DELAY_MS,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (futSerialPortInit != null) {\n+            futSerialPortInit.cancel(true);\n+        }\n+        futSerialPortInit = null;\n+        if (receiveThread != null) {\n+            receiveThread.terminate();\n+            try {\n+                receiveThread.join(1000);\n+            } catch (final InterruptedException e) {\n+                // ignore\n+            }\n+            receiveThread = null;\n+        }\n+        logger.debug(\"Stopped UPB serial handler\");\n+        super.dispose();\n+    }\n+\n+    private void openSerialPort(final String portId) {\n+        try {\n+            final SerialPort serialPort = tryOpenSerialPort(portId);\n+            if (serialPort == null) {\n+                futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_RETRY_DELAY_MS,\n+                        TimeUnit.MILLISECONDS);\n+                return;\n+            }\n+            logger.debug(\"Starting receive thread\");\n+            receiveThread = new SerialIoThread(serialPort, this);\n+            receiveThread.setName(\"upb-serial-reader\");\n+            // Once the receiver starts, it may set the PIM status to ONLINE\n+            // so we must ensure all initialization is finished at that point.\n+            receiveThread.start();\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (final Exception e) {\n+            logger.warn(\"failed to open serial port\", e);\n+        }\n+    }\n+\n+    private SerialPort tryOpenSerialPort(final String portId) {\n+        logger.debug(\"opening serial port {}\", portId);\n+        final SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(portId);\n+        if (portIdentifier == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    Constants.OFFLINE_SERIAL_EXISTS);\n+            return null;\n+        }\n+\n+        final SerialPort serialPort;\n+        try {\n+            serialPort = portIdentifier.open(\"org.openhab.binding.upb\", 1000);\n+        } catch (final PortInUseException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    Constants.OFFLINE_SERIAL_INUSE);\n+            return null;\n+        }\n+        try {\n+            serialPort.setSerialPortParams(BAUD_RATE, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                    SerialPort.PARITY_NONE);\n+            serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);\n+            try {\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(SERIAL_RECEIVE_TIMEOUT);\n+            } catch (final UnsupportedCommOperationException e) {\n+                // ignore - not supported for RFC2217 ports\n+            }\n+        } catch (final UnsupportedCommOperationException e) {\n+            logger.warn(\"cannot open serial port\", e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    Constants.OFFLINE_SERIAL_UNSUPPORTED);\n+            return null;\n+        }\n+        logger.debug(\"Serial port is initialized\");\n+        return serialPort;\n+    }\n+\n+    @Override\n+    public CompletionStage<CmdStatus> sendPacket(final MessageBuilder msg) {\n+        if (receiveThread != null) {\n+            return receiveThread.enqueue(msg);\n+        } else {\n+            return exceptionallyCompletedFuture(new IllegalStateException(\"I/O thread not active\"));\n+        }\n+    }\n+\n+    @Override\n+    public void deviceDiscovered(int node) {\n+        // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5ODU5MQ==", "bodyText": "removed the method", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r396098591", "createdAt": "2020-03-22T14:16:49Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile SerialIoThread receiveThread;\n+    private volatile ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.warn(\"serial port is not set\");\n+            return;\n+        }\n+\n+        futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_INIT_DELAY_MS,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (futSerialPortInit != null) {\n+            futSerialPortInit.cancel(true);\n+        }\n+        futSerialPortInit = null;\n+        if (receiveThread != null) {\n+            receiveThread.terminate();\n+            try {\n+                receiveThread.join(1000);\n+            } catch (final InterruptedException e) {\n+                // ignore\n+            }\n+            receiveThread = null;\n+        }\n+        logger.debug(\"Stopped UPB serial handler\");\n+        super.dispose();\n+    }\n+\n+    private void openSerialPort(final String portId) {\n+        try {\n+            final SerialPort serialPort = tryOpenSerialPort(portId);\n+            if (serialPort == null) {\n+                futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_RETRY_DELAY_MS,\n+                        TimeUnit.MILLISECONDS);\n+                return;\n+            }\n+            logger.debug(\"Starting receive thread\");\n+            receiveThread = new SerialIoThread(serialPort, this);\n+            receiveThread.setName(\"upb-serial-reader\");\n+            // Once the receiver starts, it may set the PIM status to ONLINE\n+            // so we must ensure all initialization is finished at that point.\n+            receiveThread.start();\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (final Exception e) {\n+            logger.warn(\"failed to open serial port\", e);\n+        }\n+    }\n+\n+    private SerialPort tryOpenSerialPort(final String portId) {\n+        logger.debug(\"opening serial port {}\", portId);\n+        final SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(portId);\n+        if (portIdentifier == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    Constants.OFFLINE_SERIAL_EXISTS);\n+            return null;\n+        }\n+\n+        final SerialPort serialPort;\n+        try {\n+            serialPort = portIdentifier.open(\"org.openhab.binding.upb\", 1000);\n+        } catch (final PortInUseException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    Constants.OFFLINE_SERIAL_INUSE);\n+            return null;\n+        }\n+        try {\n+            serialPort.setSerialPortParams(BAUD_RATE, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                    SerialPort.PARITY_NONE);\n+            serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);\n+            try {\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(SERIAL_RECEIVE_TIMEOUT);\n+            } catch (final UnsupportedCommOperationException e) {\n+                // ignore - not supported for RFC2217 ports\n+            }\n+        } catch (final UnsupportedCommOperationException e) {\n+            logger.warn(\"cannot open serial port\", e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    Constants.OFFLINE_SERIAL_UNSUPPORTED);\n+            return null;\n+        }\n+        logger.debug(\"Serial port is initialized\");\n+        return serialPort;\n+    }\n+\n+    @Override\n+    public CompletionStage<CmdStatus> sendPacket(final MessageBuilder msg) {\n+        if (receiveThread != null) {\n+            return receiveThread.enqueue(msg);\n+        } else {\n+            return exceptionallyCompletedFuture(new IllegalStateException(\"I/O thread not active\"));\n+        }\n+    }\n+\n+    @Override\n+    public void deviceDiscovered(int node) {\n+        // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3OTIyMA=="}, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY2Mjk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0NjoxNFrOF5EEMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0NjoxNFrOF5EEMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3OTc2Mg==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395379762", "createdAt": "2020-03-19T23:46:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialPIMHandler extends PIMHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY2Mzc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0Njo0NFrOF5EEtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0Njo0NFrOF5EEtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3OTg5NA==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395379894", "createdAt": "2020-03-19T23:46:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingChannel.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+\n+/**\n+ * A channel supported by UPB things.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class UPBThingChannel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY2NDIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0Njo1NFrOF5EE8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0Njo1NFrOF5EE8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3OTk1NQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395379955", "createdAt": "2020-03-19T23:46:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class UPBThingHandler extends BaseThingHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY3MTMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MToxMFrOF5EJUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNDoxODo0NVrOF5v8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MTA3Mw==", "bodyText": "Why do you need to make keys? Can't you just put the objects in a Set instead of a map?", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395381073", "createdAt": "2020-03-19T23:51:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.UPBDevice.DeviceState;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.openhab.binding.upb.internal.message.UPBMessage.Command;\n+import org.openhab.binding.upb.internal.message.UPBMessage.Type;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Controller logic for UPB network communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class UPBController {\n+    private final Logger logger = LoggerFactory.getLogger(UPBController.class);\n+\n+    // Maps of devices and things keyed by (networkId, unitId)\n+    private final ConcurrentHashMap<Integer, UPBDevice> devices = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<Integer, UPBThingHandler> things = new ConcurrentHashMap<>();\n+\n+    public void incomingMessage(final UPBMessage msg) {\n+        if (msg.getType() != Type.MESSAGE_REPORT) {\n+            return;\n+        }\n+\n+        final byte networkId = msg.getNetwork();\n+        final byte srcId = msg.getSource();\n+        final byte dstId = msg.getDestination();\n+        final Command cmd = msg.getCommand();\n+        logger.debug(\"received message, network={} src={} dst={} cmd={}\", networkId & 0xff, srcId & 0xff, dstId & 0xff,\n+                cmd);\n+        if (!isValidId(srcId)) {\n+            return;\n+        }\n+        final int srcAddr = mkAddr(networkId, srcId);\n+        final UPBDevice src = devices.getOrDefault(srcAddr, new UPBDevice(networkId, srcId));\n+        src.setState(DeviceState.ALIVE);\n+\n+        final UPBThingHandler thingHnd = things.get(srcAddr);\n+        if (thingHnd == null) {\n+            logger.debug(\"unknown source device {}\", srcId & 0xff);\n+            return;\n+        }\n+\n+        if (msg.getControlWord().isLink() || srcId == dstId) {\n+            thingHnd.onMessageReceived(msg);\n+        }\n+\n+        // link messages are additionally sent to any virtual devices\n+        if (msg.getControlWord().isLink()) {\n+            things.values().stream().filter(hnd -> hnd instanceof VirtualThingHandler)\n+                    .forEach(hnd -> hnd.onMessageReceived(msg));\n+        }\n+    }\n+\n+    private static boolean isValidId(final byte id) {\n+        return id != 0 && id != -1;\n+    }\n+\n+    public UPBDevice getDevice(final byte networkId, final byte unitId) {\n+        return devices.get(mkAddr(networkId, unitId));\n+    }\n+\n+    public void deviceAdded(final ThingHandler childHandler, final Thing childThing) {\n+        if (childHandler instanceof UPBThingHandler) {\n+            final UPBThingHandler hnd = (UPBThingHandler) childHandler;\n+            things.put(mkAddr(hnd.getNetworkId(), hnd.getUnitId()), hnd);\n+        }\n+    }\n+\n+    public void deviceRemoved(final ThingHandler childHandler, final Thing childThing) {\n+        if (childHandler instanceof UPBThingHandler) {\n+            final UPBThingHandler hnd = (UPBThingHandler) childHandler;\n+            things.remove(mkAddr(hnd.getNetworkId(), hnd.getUnitId()), hnd);\n+        }\n+    }\n+\n+    // forms a device lookup key from a network and unit ID\n+    private static int mkAddr(final byte networkId, final byte srcId) {\n+        return networkId << 8 | srcId;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5ODgxMA==", "bodyText": "When we receive a message, we need to use the source address to look up the handler for the device.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r396098810", "createdAt": "2020-03-22T14:18:45Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.UPBDevice.DeviceState;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.openhab.binding.upb.internal.message.UPBMessage.Command;\n+import org.openhab.binding.upb.internal.message.UPBMessage.Type;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Controller logic for UPB network communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class UPBController {\n+    private final Logger logger = LoggerFactory.getLogger(UPBController.class);\n+\n+    // Maps of devices and things keyed by (networkId, unitId)\n+    private final ConcurrentHashMap<Integer, UPBDevice> devices = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<Integer, UPBThingHandler> things = new ConcurrentHashMap<>();\n+\n+    public void incomingMessage(final UPBMessage msg) {\n+        if (msg.getType() != Type.MESSAGE_REPORT) {\n+            return;\n+        }\n+\n+        final byte networkId = msg.getNetwork();\n+        final byte srcId = msg.getSource();\n+        final byte dstId = msg.getDestination();\n+        final Command cmd = msg.getCommand();\n+        logger.debug(\"received message, network={} src={} dst={} cmd={}\", networkId & 0xff, srcId & 0xff, dstId & 0xff,\n+                cmd);\n+        if (!isValidId(srcId)) {\n+            return;\n+        }\n+        final int srcAddr = mkAddr(networkId, srcId);\n+        final UPBDevice src = devices.getOrDefault(srcAddr, new UPBDevice(networkId, srcId));\n+        src.setState(DeviceState.ALIVE);\n+\n+        final UPBThingHandler thingHnd = things.get(srcAddr);\n+        if (thingHnd == null) {\n+            logger.debug(\"unknown source device {}\", srcId & 0xff);\n+            return;\n+        }\n+\n+        if (msg.getControlWord().isLink() || srcId == dstId) {\n+            thingHnd.onMessageReceived(msg);\n+        }\n+\n+        // link messages are additionally sent to any virtual devices\n+        if (msg.getControlWord().isLink()) {\n+            things.values().stream().filter(hnd -> hnd instanceof VirtualThingHandler)\n+                    .forEach(hnd -> hnd.onMessageReceived(msg));\n+        }\n+    }\n+\n+    private static boolean isValidId(final byte id) {\n+        return id != 0 && id != -1;\n+    }\n+\n+    public UPBDevice getDevice(final byte networkId, final byte unitId) {\n+        return devices.get(mkAddr(networkId, unitId));\n+    }\n+\n+    public void deviceAdded(final ThingHandler childHandler, final Thing childThing) {\n+        if (childHandler instanceof UPBThingHandler) {\n+            final UPBThingHandler hnd = (UPBThingHandler) childHandler;\n+            things.put(mkAddr(hnd.getNetworkId(), hnd.getUnitId()), hnd);\n+        }\n+    }\n+\n+    public void deviceRemoved(final ThingHandler childHandler, final Thing childThing) {\n+        if (childHandler instanceof UPBThingHandler) {\n+            final UPBThingHandler hnd = (UPBThingHandler) childHandler;\n+            things.remove(mkAddr(hnd.getNetworkId(), hnd.getUnitId()), hnd);\n+        }\n+    }\n+\n+    // forms a device lookup key from a network and unit ID\n+    private static int mkAddr(final byte networkId, final byte srcId) {\n+        return networkId << 8 | srcId;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MTA3Mw=="}, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY3MTU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MToyMFrOF5EJfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MToyMFrOF5EJfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MTExOQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395381119", "createdAt": "2020-03-19T23:51:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Dictionary;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.handler.SerialPIMHandler;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory for UPB handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.upb\")\n+public class UPBHandlerFactory extends BaseThingHandlerFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY3MTg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MToyOVrOF5EJsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MToyOVrOF5EJsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MTE3MA==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395381170", "createdAt": "2020-03-19T23:51:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.UPBDevice.DeviceState;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.openhab.binding.upb.internal.message.UPBMessage.Command;\n+import org.openhab.binding.upb.internal.message.UPBMessage.Type;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Controller logic for UPB network communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class UPBController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY3MjMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/ControlWord.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MTo0N1rOF5EKAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MTo0N1rOF5EKAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MTI0OQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395381249", "createdAt": "2020-03-19T23:51:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/ControlWord.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+/**\n+ * Copyright (c) 2010-2016, openHAB.org and others.\n+ *\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ */\n+\n+/**\n+ * Model for the first two bytes of UPB messages.\n+ *\n+ * @author cvanorman - Initial contribution\n+ * @since 1.9.0\n+ */\n+public class ControlWord {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY3Mjk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/MessageBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MjoxM1rOF5EKbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1MjoxM1rOF5EKbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MTM1Ng==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395381356", "createdAt": "2020-03-19T23:52:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/MessageBuilder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import org.eclipse.smarthome.core.util.HexUtils;\n+\n+/**\n+ * Builder class for building UPB messages.\n+ *\n+ * @author cvanorman - Initial contribution\n+ * @since 1.9.0\n+ */\n+public final class MessageBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY3NDQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/i18n/upb_xx_XX.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1Mjo1NlrOF5ELRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1Mjo1NlrOF5ELRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MTU3Mw==", "bodyText": "Please remove this file", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395381573", "createdAt": "2020-03-19T23:52:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/i18n/upb_xx_XX.properties", "diffHunk": "@@ -0,0 +1,17 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY4MTQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1Njo1MVrOF5EPmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1Njo1MVrOF5EPmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MjY4Mg==", "bodyText": "This information should be included in the Type enum.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395382682", "createdAt": "2020-03-19T23:56:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Model for a message sent or received from a UPB modem.\n+ *\n+ * @author cvanorman - Initial contribution\n+ * @since 1.9.0\n+ */\n+public class UPBMessage {\n+\n+    /**\n+     * An enum of possible commands.\n+     *\n+     * @author cvanorman\n+     *\n+     */\n+    public enum Command {\n+        ACTIVATE,\n+        DEACTIVATE,\n+        GOTO,\n+        START_FADE,\n+        STOP_FADE,\n+        BLINK,\n+        REPORT_STATE,\n+        STORE_STATE,\n+        DEVICE_STATE,\n+        NONE;\n+\n+        /**\n+         * Gets the protocol byte code for this Command.\n+         *\n+         * @return\n+         */\n+        public byte toByte() {\n+            for (Entry<Integer, Command> e : commandMap.entrySet()) {\n+                if (e.getValue() == this) {\n+                    return e.getKey().byteValue();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+        /**\n+         * Converts a byte value into a Command.\n+         *\n+         * @param value\n+         *                  the byte value.\n+         * @return the Command that is represented by the given byte value.\n+         */\n+        public static Command valueOf(byte value) {\n+            return commandMap.get(value);\n+        }\n+    }\n+\n+    /**\n+     * An enum of possible modem response types.\n+     *\n+     * @author cvanorman\n+     *\n+     */\n+    public enum Type {\n+        ACCEPT,\n+        BUSY,\n+        ERROR,\n+        ACK,\n+        NAK,\n+        MESSAGE_REPORT,\n+        NONE;\n+    }\n+\n+    private static final Logger logger = LoggerFactory.getLogger(UPBMessage.class);\n+\n+    private static HashMap<Integer, Command> commandMap = new HashMap<>();\n+\n+    static {\n+        commandMap.put(0x20, Command.ACTIVATE);\n+        commandMap.put(0x21, Command.DEACTIVATE);\n+        commandMap.put(0x22, Command.GOTO);\n+        commandMap.put(0x23, Command.START_FADE);\n+        commandMap.put(0x24, Command.STOP_FADE);\n+        commandMap.put(0x25, Command.BLINK);\n+        commandMap.put(0x30, Command.REPORT_STATE);\n+        commandMap.put(0x31, Command.STORE_STATE);\n+        commandMap.put(0x86, Command.DEVICE_STATE);\n+    }\n+\n+    private static HashMap<String, Type> typeMap = new HashMap<>();\n+\n+    static {\n+        typeMap.put(\"PA\", Type.ACCEPT);\n+        typeMap.put(\"PB\", Type.BUSY);\n+        typeMap.put(\"PE\", Type.ERROR);\n+        typeMap.put(\"PK\", Type.ACK);\n+        typeMap.put(\"PN\", Type.NAK);\n+        typeMap.put(\"PU\", Type.MESSAGE_REPORT);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY4MjI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1NzoxOVrOF5EQMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1NzoxOVrOF5EQMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MjgzMg==", "bodyText": "This information should be included in the Command enum.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395382832", "createdAt": "2020-03-19T23:57:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Model for a message sent or received from a UPB modem.\n+ *\n+ * @author cvanorman - Initial contribution\n+ * @since 1.9.0\n+ */\n+public class UPBMessage {\n+\n+    /**\n+     * An enum of possible commands.\n+     *\n+     * @author cvanorman\n+     *\n+     */\n+    public enum Command {\n+        ACTIVATE,\n+        DEACTIVATE,\n+        GOTO,\n+        START_FADE,\n+        STOP_FADE,\n+        BLINK,\n+        REPORT_STATE,\n+        STORE_STATE,\n+        DEVICE_STATE,\n+        NONE;\n+\n+        /**\n+         * Gets the protocol byte code for this Command.\n+         *\n+         * @return\n+         */\n+        public byte toByte() {\n+            for (Entry<Integer, Command> e : commandMap.entrySet()) {\n+                if (e.getValue() == this) {\n+                    return e.getKey().byteValue();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+        /**\n+         * Converts a byte value into a Command.\n+         *\n+         * @param value\n+         *                  the byte value.\n+         * @return the Command that is represented by the given byte value.\n+         */\n+        public static Command valueOf(byte value) {\n+            return commandMap.get(value);\n+        }\n+    }\n+\n+    /**\n+     * An enum of possible modem response types.\n+     *\n+     * @author cvanorman\n+     *\n+     */\n+    public enum Type {\n+        ACCEPT,\n+        BUSY,\n+        ERROR,\n+        ACK,\n+        NAK,\n+        MESSAGE_REPORT,\n+        NONE;\n+    }\n+\n+    private static final Logger logger = LoggerFactory.getLogger(UPBMessage.class);\n+\n+    private static HashMap<Integer, Command> commandMap = new HashMap<>();\n+\n+    static {\n+        commandMap.put(0x20, Command.ACTIVATE);\n+        commandMap.put(0x21, Command.DEACTIVATE);\n+        commandMap.put(0x22, Command.GOTO);\n+        commandMap.put(0x23, Command.START_FADE);\n+        commandMap.put(0x24, Command.STOP_FADE);\n+        commandMap.put(0x25, Command.BLINK);\n+        commandMap.put(0x30, Command.REPORT_STATE);\n+        commandMap.put(0x31, Command.STORE_STATE);\n+        commandMap.put(0x86, Command.DEVICE_STATE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDY4MzY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1Nzo1N1rOF5EQ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo1Nzo1N1rOF5EQ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MzAzNw==", "bodyText": "Please put this into its own file", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r395383037", "createdAt": "2020-03-19T23:57:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Model for a message sent or received from a UPB modem.\n+ *\n+ * @author cvanorman - Initial contribution\n+ * @since 1.9.0\n+ */\n+public class UPBMessage {\n+\n+    /**\n+     * An enum of possible commands.\n+     *\n+     * @author cvanorman\n+     *\n+     */\n+    public enum Command {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db15e34bfa328068559a6bbbc65da1046183b20"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQ2MDg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo1OTowMFrOF8frjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo1OTowMFrOF8frjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NzkzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private volatile WriteRunnable currentWrite;\n          \n          \n            \n                private volatile @Nullable WriteRunnable currentWrite;", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r398977932", "createdAt": "2020-03-27T00:59:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    @Nullable\n+    private volatile WriteRunnable currentWrite;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78062ee53db1bbdb918e040e02aa00b67c2cf480"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQ2MjMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo1OTo0NlrOF8fsXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo1OTo0NlrOF8fsXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3ODE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private volatile SerialIoThread receiveThread;\n          \n          \n            \n                private volatile @Nullable SerialIoThread receiveThread;", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r398978142", "createdAt": "2020-03-27T00:59:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    @Nullable\n+    private volatile SerialIoThread receiveThread;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78062ee53db1bbdb918e040e02aa00b67c2cf480"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQ2MjY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo1OTo1OFrOF8fskg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo1OTo1OFrOF8fskg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3ODE5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private volatile ScheduledFuture<?> futSerialPortInit;\n          \n          \n            \n                private volatile @Nullable ScheduledFuture<?> futSerialPortInit;", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r398978194", "createdAt": "2020-03-27T00:59:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    @Nullable\n+    private volatile SerialIoThread receiveThread;\n+    @Nullable\n+    private volatile ScheduledFuture<?> futSerialPortInit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78062ee53db1bbdb918e040e02aa00b67c2cf480"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njg5NzU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDoxOTowMFrOF9Al5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDoxOTowMFrOF9Al5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxNzE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable\n          \n          \n            \n                    private Boolean ack;\n          \n          \n            \n                    @Nullable\n          \n          \n            \n                    private volatile CountDownLatch ackLatch;\n          \n          \n            \n                    private @Nullable Boolean ack;\n          \n          \n            \n                    private volatile @Nullable CountDownLatch ackLatch;", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399517156", "createdAt": "2020-03-27T20:19:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    @Nullable\n+    private volatile WriteRunnable currentWrite;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            int len;\n+            while (!done && (len = in.read(buffer)) >= 0) {\n+                addData(buffer, len);\n+            }\n+        } catch (final Exception e) {\n+            logger.warn(\"Exception in UPB read thread\", e);\n+        } finally {\n+            logger.debug(\"shutting down receive thread\");\n+            shutdownAndAwaitTermination(writeExecutor);\n+            serialPort.removeEventListener();\n+            try {\n+                serialPort.close();\n+            } catch (final Exception e) {\n+                // ignore\n+            }\n+        }\n+        logger.debug(\"UPB read thread stopped\");\n+    }\n+\n+    private void addData(final byte[] data, final int length) {\n+        if (bufferLength + length > buffer.length) {\n+            // buffer overflow, discard entire buffer\n+            bufferLength = 0;\n+        }\n+        System.arraycopy(data, 0, buffer, bufferLength, length);\n+        bufferLength += length;\n+        interpretBuffer();\n+    }\n+\n+    private int findMessageLength(final byte[] buffer, final int bufferLength) {\n+        for (int i = 0; i < bufferLength; i++) {\n+            if (buffer[i] == 13) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Attempts to interpret any messages that may be contained in the buffer.\n+     */\n+    private void interpretBuffer() {\n+        int messageLength = findMessageLength(buffer, bufferLength);\n+\n+        while (messageLength != -1) {\n+            final String message = new String(Arrays.copyOfRange(buffer, 0, messageLength), US_ASCII);\n+            logger.debug(\"UPB Message: {}\", message);\n+\n+            final int remainingBuffer = bufferLength - messageLength - 1;\n+            if (remainingBuffer > 0) {\n+                System.arraycopy(buffer, messageLength + 1, buffer, 0, remainingBuffer);\n+            }\n+            bufferLength = remainingBuffer;\n+            handleMessage(UPBMessage.fromString(message));\n+            messageLength = findMessageLength(buffer, bufferLength);\n+        }\n+    }\n+\n+    private void handleMessage(final UPBMessage msg) {\n+        switch (msg.getType()) {\n+            case ACK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(true);\n+                }\n+                break;\n+            case NAK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(false);\n+                }\n+                break;\n+            case ACCEPT:\n+                break;\n+            case ERROR:\n+                logger.info(\"received ERROR response from PIM\");\n+                break;\n+            default:\n+                // ignore\n+        }\n+        listener.incomingMessage(msg);\n+    }\n+\n+    public CompletionStage<CmdStatus> enqueue(final MessageBuilder msg) {\n+        final CompletableFuture<CmdStatus> completion = new CompletableFuture<>();\n+        final Runnable task = new WriteRunnable(msg.build(), completion);\n+        try {\n+            writeExecutor.execute(task);\n+        } catch (final RejectedExecutionException e) {\n+            completion.completeExceptionally(e);\n+        }\n+        return completion;\n+    }\n+\n+    // puts the PIM is in message mode\n+    private void enterMessageMode() {\n+        try {\n+            serialPort.getOutputStream().write(ENABLE_MESSAGE_MODE_CMD);\n+            serialPort.getOutputStream().flush();\n+        } catch (final IOException e) {\n+            logger.warn(\"error setting message mode\", e);\n+        }\n+    }\n+\n+    void shutdownAndAwaitTermination(final ExecutorService pool) {\n+        pool.shutdown();\n+        try {\n+            if (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n+                pool.shutdownNow();\n+                if (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n+                    logger.warn(\"executor did not terminate\");\n+                }\n+            }\n+        } catch (final InterruptedException ie) {\n+            pool.shutdownNow();\n+            Thread.currentThread().interrupt();\n+        }\n+    }\n+\n+    public void terminate() {\n+        done = true;\n+        try {\n+            serialPort.close();\n+        } catch (final Exception e) {\n+            logger.warn(\"failed to close serial port\", e);\n+        }\n+    }\n+\n+    private class WriteRunnable implements Runnable {\n+        private static final int MAX_RETRIES = 3;\n+\n+        private final String msg;\n+        private final CompletableFuture<CmdStatus> completion;\n+\n+        @Nullable\n+        private Boolean ack;\n+        @Nullable\n+        private volatile CountDownLatch ackLatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjkwODU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDoyMzowM1rOF9AstQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDoyMzowM1rOF9AstQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxODkwMQ==", "bodyText": "Please use a NamedThreadFactory to make sure that created threads have a name that can be tied to this binding as well as to make sure that those threads are daemon.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399518901", "createdAt": "2020-03-27T20:23:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjkxNDIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDoyNTowNlrOF9AwXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDoyNTowNlrOF9AwXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxOTgzOQ==", "bodyText": "You should create a local variable for currentWrite to prevent threading issues and to satisfy the compile time null checker.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399519839", "createdAt": "2020-03-27T20:25:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH));\n+\n+    private int bufferLength = 0;\n+    @Nullable\n+    private volatile WriteRunnable currentWrite;\n+    private volatile SerialPort serialPort;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            enterMessageMode();\n+            int len;\n+            while (!done && (len = in.read(buffer)) >= 0) {\n+                addData(buffer, len);\n+            }\n+        } catch (final Exception e) {\n+            logger.warn(\"Exception in UPB read thread\", e);\n+        } finally {\n+            logger.debug(\"shutting down receive thread\");\n+            shutdownAndAwaitTermination(writeExecutor);\n+            serialPort.removeEventListener();\n+            try {\n+                serialPort.close();\n+            } catch (final Exception e) {\n+                // ignore\n+            }\n+        }\n+        logger.debug(\"UPB read thread stopped\");\n+    }\n+\n+    private void addData(final byte[] data, final int length) {\n+        if (bufferLength + length > buffer.length) {\n+            // buffer overflow, discard entire buffer\n+            bufferLength = 0;\n+        }\n+        System.arraycopy(data, 0, buffer, bufferLength, length);\n+        bufferLength += length;\n+        interpretBuffer();\n+    }\n+\n+    private int findMessageLength(final byte[] buffer, final int bufferLength) {\n+        for (int i = 0; i < bufferLength; i++) {\n+            if (buffer[i] == 13) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Attempts to interpret any messages that may be contained in the buffer.\n+     */\n+    private void interpretBuffer() {\n+        int messageLength = findMessageLength(buffer, bufferLength);\n+\n+        while (messageLength != -1) {\n+            final String message = new String(Arrays.copyOfRange(buffer, 0, messageLength), US_ASCII);\n+            logger.debug(\"UPB Message: {}\", message);\n+\n+            final int remainingBuffer = bufferLength - messageLength - 1;\n+            if (remainingBuffer > 0) {\n+                System.arraycopy(buffer, messageLength + 1, buffer, 0, remainingBuffer);\n+            }\n+            bufferLength = remainingBuffer;\n+            handleMessage(UPBMessage.fromString(message));\n+            messageLength = findMessageLength(buffer, bufferLength);\n+        }\n+    }\n+\n+    private void handleMessage(final UPBMessage msg) {\n+        switch (msg.getType()) {\n+            case ACK:\n+                if (currentWrite != null) {\n+                    currentWrite.ackReceived(true);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjkyOTk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/VirtualThingHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDozMDo1MFrOF9A6aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwNDoyNDo1N1rOF9OZ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyMjQwOA==", "bodyText": "Why can't you handle refresh?", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399522408", "createdAt": "2020-03-27T20:30:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/VirtualThingHandler.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Thing handler for a virtual device.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class VirtualThingHandler extends UPBThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(VirtualThingHandler.class);\n+\n+    public VirtualThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device, defaultNetworkId);\n+    }\n+\n+    @Override\n+    protected void pingDevice() {\n+        // always succeeds for virtual device\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(final ChannelUID channelUID, final Command cmd) {\n+        if (controllerHandler == null) {\n+            logger.info(\"DEV {}: received cmd {} but no bridge handler\", unitId, cmd);\n+            return;\n+        }\n+\n+        if (cmd == RefreshType.REFRESH) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0MzQ2NQ==", "bodyText": "Added a comment. There is no concept of a \"currently active scene\" in UPB as far as I understand it. It's just a command that gets broadcast to all devices in a write-only fashion.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399743465", "createdAt": "2020-03-29T04:24:57Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/VirtualThingHandler.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Thing handler for a virtual device.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class VirtualThingHandler extends UPBThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(VirtualThingHandler.class);\n+\n+    public VirtualThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device, defaultNetworkId);\n+    }\n+\n+    @Override\n+    protected void pingDevice() {\n+        // always succeeds for virtual device\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(final ChannelUID channelUID, final Command cmd) {\n+        if (controllerHandler == null) {\n+            logger.info(\"DEV {}: received cmd {} but no bridge handler\", unitId, cmd);\n+            return;\n+        }\n+\n+        if (cmd == RefreshType.REFRESH) {\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyMjQwOA=="}, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk0MDQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/virtual.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDozNDo1MlrOF9BBQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDozNDo1MlrOF9BBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNDE2MA==", "bodyText": "Looks like this needs to be reformatted.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399524160", "createdAt": "2020-03-27T20:34:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/virtual.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"upb\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"virtual\">\n+\t<supported-bridge-type-refs>\n+\t\t<bridge-type-ref id=\"serial-pim\"/>\n+\t</supported-bridge-type-refs>\n+\t<label>Virtual UPB device</label>\n+\t<description>This pseudo-device is useful for switching scenes and receiving scene updates.\n+\tIt does not correspond to any physical device on the network.</description>\n+\t<category>WallSwitch</category>\n+\n+\t<channels>\n+\t\t<channel id=\"linkActivated\" typeId=\"link\">\n+\t\t<label>Link Activated</label>\n+\t\t</channel>\n+\t\t<channel id=\"linkDeactivated\" typeId=\"link\">\n+\t\t<label>Link Deactivated</label>\n+\t\t</channel>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk0MTQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/virtual.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDozNTowOFrOF9BBww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDozNTowOFrOF9BBww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNDI5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<label>Virtual UPB device</label>\n          \n          \n            \n            \t<label>Virtual UPB Device</label>", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399524291", "createdAt": "2020-03-27T20:35:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/virtual.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"upb\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"virtual\">\n+\t<supported-bridge-type-refs>\n+\t\t<bridge-type-ref id=\"serial-pim\"/>\n+\t</supported-bridge-type-refs>\n+\t<label>Virtual UPB device</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk0OTI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDozNzo1N1rOF9BGoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDozNzo1N1rOF9BGoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNTUzNw==", "bodyText": "Please move this method to below the constructor", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399525537", "createdAt": "2020-03-27T20:37:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Model for a message sent or received from a UPB modem.\n+ *\n+ * @author cvanorman - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UPBMessage {\n+\n+    /**\n+     * An enum of possible modem response types.\n+     *\n+     * @author cvanorman\n+     *\n+     */\n+    public enum Type {\n+        ACCEPT,\n+        BUSY,\n+        ERROR,\n+        ACK,\n+        NAK,\n+        MESSAGE_REPORT,\n+        NONE;\n+    }\n+\n+    private static final Logger logger = LoggerFactory.getLogger(UPBMessage.class);\n+\n+    static HashMap<Integer, Command> commandMap = new HashMap<>();\n+\n+    static {\n+        commandMap.put(0x20, Command.ACTIVATE);\n+        commandMap.put(0x21, Command.DEACTIVATE);\n+        commandMap.put(0x22, Command.GOTO);\n+        commandMap.put(0x23, Command.START_FADE);\n+        commandMap.put(0x24, Command.STOP_FADE);\n+        commandMap.put(0x25, Command.BLINK);\n+        commandMap.put(0x30, Command.REPORT_STATE);\n+        commandMap.put(0x31, Command.STORE_STATE);\n+        commandMap.put(0x86, Command.DEVICE_STATE);\n+    }\n+\n+    private static HashMap<String, Type> typeMap = new HashMap<>();\n+\n+    static {\n+        typeMap.put(\"PA\", Type.ACCEPT);\n+        typeMap.put(\"PB\", Type.BUSY);\n+        typeMap.put(\"PE\", Type.ERROR);\n+        typeMap.put(\"PK\", Type.ACK);\n+        typeMap.put(\"PN\", Type.NAK);\n+        typeMap.put(\"PU\", Type.MESSAGE_REPORT);\n+    }\n+\n+    /**\n+     * Converts a hex string into a {@link UPBMessage}.\n+     *\n+     * @param commandString\n+     *                          the string as returned by the modem.\n+     * @return a new UPBMessage.\n+     */\n+    public static UPBMessage fromString(String commandString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk1NTg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0MDoyMlrOF9BKwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0MDoyMlrOF9BKwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNjU5NA==", "bodyText": "This should be in the Command enum instead.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399526594", "createdAt": "2020-03-27T20:40:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Model for a message sent or received from a UPB modem.\n+ *\n+ * @author cvanorman - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UPBMessage {\n+\n+    /**\n+     * An enum of possible modem response types.\n+     *\n+     * @author cvanorman\n+     *\n+     */\n+    public enum Type {\n+        ACCEPT,\n+        BUSY,\n+        ERROR,\n+        ACK,\n+        NAK,\n+        MESSAGE_REPORT,\n+        NONE;\n+    }\n+\n+    private static final Logger logger = LoggerFactory.getLogger(UPBMessage.class);\n+\n+    static HashMap<Integer, Command> commandMap = new HashMap<>();\n+\n+    static {\n+        commandMap.put(0x20, Command.ACTIVATE);\n+        commandMap.put(0x21, Command.DEACTIVATE);\n+        commandMap.put(0x22, Command.GOTO);\n+        commandMap.put(0x23, Command.START_FADE);\n+        commandMap.put(0x24, Command.STOP_FADE);\n+        commandMap.put(0x25, Command.BLINK);\n+        commandMap.put(0x30, Command.REPORT_STATE);\n+        commandMap.put(0x31, Command.STORE_STATE);\n+        commandMap.put(0x86, Command.DEVICE_STATE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njk1ODg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0MTo0MFrOF9BM3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzo0MDowMVrOF-vvww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNzEzMg==", "bodyText": "I suggest passing in SerialPortManager from the constructor instead, that way you can make this field non-null and final.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r399527132", "createdAt": "2020-03-27T20:41:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Dictionary;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.handler.SerialPIMHandler;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory for UPB handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.upb\")\n+@NonNullByDefault\n+public class UPBHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(UPBHandlerFactory.class);\n+\n+    @Nullable\n+    private SerialPortManager serialPortManager;\n+    @Nullable\n+    private Byte networkId;\n+\n+    @Override\n+    protected void activate(final ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        final Dictionary<String, Object> config = componentContext.getProperties();\n+        final BigDecimal nid = (BigDecimal) config.get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (nid != null) {\n+            if (nid.compareTo(BigDecimal.ZERO) < 0 || nid.compareTo(BigDecimal.valueOf(255)) > 0) {\n+                logger.warn(\"invalid network ID {}\", nid);\n+                throw new IllegalArgumentException(\"network ID out of range\");\n+            }\n+            networkId = nid.byteValue();\n+        }\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(final ThingTypeUID thingTypeUID) {\n+        return Constants.BINDING_ID.equals(thingTypeUID.getBindingId());\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(final Thing thing) {\n+        logger.debug(\"Creating thing {}\", thing.getUID());\n+        final ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        if (thingTypeUID.equals(Constants.PIM_UID)) {\n+            assert serialPortManager != null;\n+            return new SerialPIMHandler((Bridge) thing, (@NonNull SerialPortManager) serialPortManager);\n+        } else if (thingTypeUID.equals(Constants.VIRTUAL_DEVICE_UID)) {\n+            return new VirtualThingHandler(thing, networkId);\n+        } else {\n+            return new UPBThingHandler(thing, networkId);\n+        }\n+    }\n+\n+    @Reference\n+    protected void setSerialPortManager(final SerialPortManager serialPortManager) {\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    protected void unsetSerialPortManager(final SerialPortManager serialPortManager) {\n+        this.serialPortManager = null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzODMwNw==", "bodyText": "Good idea, done.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r401338307", "createdAt": "2020-04-01T03:40:01Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Dictionary;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.handler.SerialPIMHandler;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory for UPB handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.upb\")\n+@NonNullByDefault\n+public class UPBHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(UPBHandlerFactory.class);\n+\n+    @Nullable\n+    private SerialPortManager serialPortManager;\n+    @Nullable\n+    private Byte networkId;\n+\n+    @Override\n+    protected void activate(final ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        final Dictionary<String, Object> config = componentContext.getProperties();\n+        final BigDecimal nid = (BigDecimal) config.get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (nid != null) {\n+            if (nid.compareTo(BigDecimal.ZERO) < 0 || nid.compareTo(BigDecimal.valueOf(255)) > 0) {\n+                logger.warn(\"invalid network ID {}\", nid);\n+                throw new IllegalArgumentException(\"network ID out of range\");\n+            }\n+            networkId = nid.byteValue();\n+        }\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(final ThingTypeUID thingTypeUID) {\n+        return Constants.BINDING_ID.equals(thingTypeUID.getBindingId());\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(final Thing thing) {\n+        logger.debug(\"Creating thing {}\", thing.getUID());\n+        final ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        if (thingTypeUID.equals(Constants.PIM_UID)) {\n+            assert serialPortManager != null;\n+            return new SerialPIMHandler((Bridge) thing, (@NonNull SerialPortManager) serialPortManager);\n+        } else if (thingTypeUID.equals(Constants.VIRTUAL_DEVICE_UID)) {\n+            return new VirtualThingHandler(thing, networkId);\n+        } else {\n+            return new UPBThingHandler(thing, networkId);\n+        }\n+    }\n+\n+    @Reference\n+    protected void setSerialPortManager(final SerialPortManager serialPortManager) {\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    protected void unsetSerialPortManager(final SerialPortManager serialPortManager) {\n+        this.serialPortManager = null;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNzEzMg=="}, "originalCommit": {"oid": "fb7b099c59604471a972d09cdfacc605bd5352be"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzU0MjQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMjoyMTo1MlrOGAC39w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDo0OTo0OFrOGAFAVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcwMDI3OQ==", "bodyText": "For example to solve this type of null warning you need to cache the field value into a local variable:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (futSerialPortInit != null) {\n          \n          \n            \n                        futSerialPortInit.cancel(true);\n          \n          \n            \n                    }\n          \n          \n            \n                    futSerialPortInit = null;\n          \n          \n            \n                    ScheduledFuture<?> futSerialPortInit = this.futSerialPortInit;\n          \n          \n            \n                    if (futSerialPortInit != null) {\n          \n          \n            \n                        futSerialPortInit.cancel(true);\n          \n          \n            \n                    }\n          \n          \n            \n                    this.futSerialPortInit = null;\n          \n      \n    \n    \n  \n\nYes it may seem unnecessary to do it like this but the warnings help prevent NPE in a concurrent environment so you should treat what it complains about very seriously with the exception of Map fields which the static analysis seems to have trouble with. If the warning relate to your usage of a Map field just ignore it for now, I'll help you address those later.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r402700279", "createdAt": "2020-04-03T02:21:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile @Nullable SerialIoThread receiveThread;\n+    private volatile @Nullable ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.warn(\"serial port is not set\");\n+            return;\n+        }\n+\n+        futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_INIT_DELAY_MS,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (futSerialPortInit != null) {\n+            futSerialPortInit.cancel(true);\n+        }\n+        futSerialPortInit = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f817e09e73e0bcb2bcf6f312035da6ff58324c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczNTE4OQ==", "bodyText": "Ok, done. It helped clean up the code in some cases.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r402735189", "createdAt": "2020-04-03T04:49:48Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile @Nullable SerialIoThread receiveThread;\n+    private volatile @Nullable ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.warn(\"serial port is not set\");\n+            return;\n+        }\n+\n+        futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_INIT_DELAY_MS,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (futSerialPortInit != null) {\n+            futSerialPortInit.cancel(true);\n+        }\n+        futSerialPortInit = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcwMDI3OQ=="}, "originalCommit": {"oid": "07f817e09e73e0bcb2bcf6f312035da6ff58324c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg1MDg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozNTo0OVrOGAFq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTozNTo0OVrOGAFq1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjA2OA==", "bodyText": "Maybe instead of having this field, you just lookup the PIMHandler anytime you need it?\nprivate @Nullable PIMHandler getPIMHandler(){\n        final Bridge bridge = getBridge();\n        if (bridge == null) {\n            logger.debug(\"DEV {}: bridge is null!\", unitId);\n            return null;\n        }\n        final PIMHandler bridgeHandler = (PIMHandler) bridge.getHandler();\n        if (bridgeHandler == null) {\n            logger.debug(\"DEV {}: bridge handler is null!\", unitId);\n            return null;\n        }\n        return bridgeHandler;\n}", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r402746068", "createdAt": "2020-04-03T05:35:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile @Nullable PIMHandler controllerHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg2NjM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo0NDo0OFrOGAF0Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMDowMjowMlrOHT5b9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0ODQ3MA==", "bodyText": "You should still check if the thingTypeUID is a UPBThingHandler type. Better safe than sorry and I think this method allows null returns for a reason \ud83d\ude15", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r402748470", "createdAt": "2020-04-03T05:44:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Dictionary;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.handler.SerialPIMHandler;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory for UPB handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.upb\")\n+@NonNullByDefault\n+public class UPBHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(UPBHandlerFactory.class);\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable Byte networkId;\n+\n+    @Activate\n+    public UPBHandlerFactory(@Reference SerialPortManager serialPortManager) {\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    @NonNullByDefault({})\n+    protected void activate(final ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        final Dictionary<String, Object> config = componentContext.getProperties();\n+        final BigDecimal nid = (BigDecimal) config.get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (nid != null) {\n+            if (nid.compareTo(BigDecimal.ZERO) < 0 || nid.compareTo(BigDecimal.valueOf(255)) > 0) {\n+                logger.warn(\"invalid network ID {}\", nid);\n+                throw new IllegalArgumentException(\"network ID out of range\");\n+            }\n+            networkId = nid.byteValue();\n+        }\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(final ThingTypeUID thingTypeUID) {\n+        return Constants.BINDING_ID.equals(thingTypeUID.getBindingId());\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(final Thing thing) {\n+        logger.debug(\"Creating thing {}\", thing.getUID());\n+        final ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        if (thingTypeUID.equals(Constants.PIM_UID)) {\n+            assert serialPortManager != null;\n+            return new SerialPIMHandler((Bridge) thing, serialPortManager);\n+        } else if (thingTypeUID.equals(Constants.VIRTUAL_DEVICE_UID)) {\n+            return new VirtualThingHandler(thing, networkId);\n+        } else {\n+            return new UPBThingHandler(thing, networkId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MDE5OQ==", "bodyText": "This is a catch-all for multiple thing types. Currently there is only the generic and leviton-38a00-1, but I think more types can be added for specific devices. They are all handled by the UPBThingHandler.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r403640199", "createdAt": "2020-04-05T02:41:22Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Dictionary;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.handler.SerialPIMHandler;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory for UPB handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.upb\")\n+@NonNullByDefault\n+public class UPBHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(UPBHandlerFactory.class);\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable Byte networkId;\n+\n+    @Activate\n+    public UPBHandlerFactory(@Reference SerialPortManager serialPortManager) {\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    @NonNullByDefault({})\n+    protected void activate(final ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        final Dictionary<String, Object> config = componentContext.getProperties();\n+        final BigDecimal nid = (BigDecimal) config.get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (nid != null) {\n+            if (nid.compareTo(BigDecimal.ZERO) < 0 || nid.compareTo(BigDecimal.valueOf(255)) > 0) {\n+                logger.warn(\"invalid network ID {}\", nid);\n+                throw new IllegalArgumentException(\"network ID out of range\");\n+            }\n+            networkId = nid.byteValue();\n+        }\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(final ThingTypeUID thingTypeUID) {\n+        return Constants.BINDING_ID.equals(thingTypeUID.getBindingId());\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(final Thing thing) {\n+        logger.debug(\"Creating thing {}\", thing.getUID());\n+        final ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        if (thingTypeUID.equals(Constants.PIM_UID)) {\n+            assert serialPortManager != null;\n+            return new SerialPIMHandler((Bridge) thing, serialPortManager);\n+        } else if (thingTypeUID.equals(Constants.VIRTUAL_DEVICE_UID)) {\n+            return new VirtualThingHandler(thing, networkId);\n+        } else {\n+            return new UPBThingHandler(thing, networkId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0ODQ3MA=="}, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODAyMg==", "bodyText": "I agree with @cpmeister , the behavior should be the same throughout all bindings.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487558022", "createdAt": "2020-09-13T17:55:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Dictionary;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.handler.SerialPIMHandler;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory for UPB handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.upb\")\n+@NonNullByDefault\n+public class UPBHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(UPBHandlerFactory.class);\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable Byte networkId;\n+\n+    @Activate\n+    public UPBHandlerFactory(@Reference SerialPortManager serialPortManager) {\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    @NonNullByDefault({})\n+    protected void activate(final ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        final Dictionary<String, Object> config = componentContext.getProperties();\n+        final BigDecimal nid = (BigDecimal) config.get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (nid != null) {\n+            if (nid.compareTo(BigDecimal.ZERO) < 0 || nid.compareTo(BigDecimal.valueOf(255)) > 0) {\n+                logger.warn(\"invalid network ID {}\", nid);\n+                throw new IllegalArgumentException(\"network ID out of range\");\n+            }\n+            networkId = nid.byteValue();\n+        }\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(final ThingTypeUID thingTypeUID) {\n+        return Constants.BINDING_ID.equals(thingTypeUID.getBindingId());\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(final Thing thing) {\n+        logger.debug(\"Creating thing {}\", thing.getUID());\n+        final ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        if (thingTypeUID.equals(Constants.PIM_UID)) {\n+            assert serialPortManager != null;\n+            return new SerialPIMHandler((Bridge) thing, serialPortManager);\n+        } else if (thingTypeUID.equals(Constants.VIRTUAL_DEVICE_UID)) {\n+            return new VirtualThingHandler(thing, networkId);\n+        } else {\n+            return new UPBThingHandler(thing, networkId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0ODQ3MA=="}, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNjAzOA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r490626038", "createdAt": "2020-09-18T00:02:02Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Dictionary;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.handler.SerialPIMHandler;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory for UPB handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.upb\")\n+@NonNullByDefault\n+public class UPBHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(UPBHandlerFactory.class);\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable Byte networkId;\n+\n+    @Activate\n+    public UPBHandlerFactory(@Reference SerialPortManager serialPortManager) {\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    @NonNullByDefault({})\n+    protected void activate(final ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        final Dictionary<String, Object> config = componentContext.getProperties();\n+        final BigDecimal nid = (BigDecimal) config.get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (nid != null) {\n+            if (nid.compareTo(BigDecimal.ZERO) < 0 || nid.compareTo(BigDecimal.valueOf(255)) > 0) {\n+                logger.warn(\"invalid network ID {}\", nid);\n+                throw new IllegalArgumentException(\"network ID out of range\");\n+            }\n+            networkId = nid.byteValue();\n+        }\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(final ThingTypeUID thingTypeUID) {\n+        return Constants.BINDING_ID.equals(thingTypeUID.getBindingId());\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(final Thing thing) {\n+        logger.debug(\"Creating thing {}\", thing.getUID());\n+        final ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        if (thingTypeUID.equals(Constants.PIM_UID)) {\n+            assert serialPortManager != null;\n+            return new SerialPIMHandler((Bridge) thing, serialPortManager);\n+        } else if (thingTypeUID.equals(Constants.VIRTUAL_DEVICE_UID)) {\n+            return new VirtualThingHandler(thing, networkId);\n+        } else {\n+            return new UPBThingHandler(thing, networkId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0ODQ3MA=="}, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg3MjYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/channels.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo0ODoyMFrOGAF30Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo0ODoyMFrOGAF30Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0OTM5Mw==", "bodyText": "The first letter of every word in a label should be capitalized.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Scene selection events</label>\n          \n          \n            \n            \t\t<label>Scene Selection Events</label>", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r402749393", "createdAt": "2020-04-03T05:48:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,42 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"upb\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"link\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Scene</label>\n+\t\t<description>Selected scene</description>\n+\t\t<state min=\"1\" max=\"250\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"scene-selection\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Scene selection events</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg4MDYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/binding/binding.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo1MjozMFrOGAF8Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo1MjozMFrOGAF8Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MDUzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>Default Network ID for devices</label>\n          \n          \n            \n            \t\t\t<label>Default Network ID for Devices</label>", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r402750531", "createdAt": "2020-04-03T05:52:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"upb\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>UPB Binding</name>\n+\t<description>The Universal Powerline Bus (UPB) binding reads and writes messages to and from a UPB modem</description>\n+\t<author>Marcus Better</author>\n+\n+\t<service-id>org.openhab.upb</service-id>\n+\n+\t<config-description>\n+\t\t<parameter name=\"networkId\" type=\"integer\" min=\"0\" max=\"255\" required=\"false\">\n+\t\t\t<label>Default Network ID for devices</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzg4ODM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNTo1NjowNlrOGAGAcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDozMDoyMlrOHPZM8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MTYwMg==", "bodyText": "Shouldn't this change the thing status to OFFLINE?", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r402751602", "createdAt": "2020-04-03T05:56:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile @Nullable PIMHandler controllerHandler;\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.warn(\"missing network ID for {}\", getThing().getUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzOTg5MQ==", "bodyText": "I think it's better to leave it at UNINITIALIZED as in the other mis-configuration cases.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r403639891", "createdAt": "2020-04-05T02:36:58Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile @Nullable PIMHandler controllerHandler;\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.warn(\"missing network ID for {}\", getThing().getUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MTYwMg=="}, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NTI3Ng==", "bodyText": "There is a specific offline description for this though:\nupdateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\")\nThis is the standard way bindings can notify the user of a misconfiguration issue.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r403755276", "createdAt": "2020-04-05T20:50:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile @Nullable PIMHandler controllerHandler;\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.warn(\"missing network ID for {}\", getThing().getUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MTYwMg=="}, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMzYwMw==", "bodyText": "Some more information about allowed states can be found here:\nhttps://www.openhab.org/docs/concepts/things.html#status-details\nThe log should be debug, as the update status already log it.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485903603", "createdAt": "2020-09-09T20:30:22Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile @Nullable PIMHandler controllerHandler;\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.warn(\"missing network ID for {}\", getThing().getUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MTYwMg=="}, "originalCommit": {"oid": "72f86307bc4100abe7f218a4a00ac2a87d6460c1"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTIyMTM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/VirtualThingHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMDo1MjowNFrOGBDRjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMDo1MjowNFrOGBDRjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NTQwNA==", "bodyText": "Can you cache it when you change the value? Or can the scene be changed outside of the binding so caching wouldn't work?", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r403755404", "createdAt": "2020-04-05T20:52:04Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/VirtualThingHandler.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Thing handler for a virtual device.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class VirtualThingHandler extends UPBThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(VirtualThingHandler.class);\n+\n+    public VirtualThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device, defaultNetworkId);\n+    }\n+\n+    @Override\n+    protected void pingDevice() {\n+        // always succeeds for virtual device\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(final ChannelUID channelUID, final Command cmd) {\n+        final PIMHandler pimHandler = getPIMHandler();\n+        if (pimHandler == null) {\n+            logger.info(\"DEV {}: received cmd {} but no bridge handler\", unitId, cmd);\n+            return;\n+        }\n+\n+        if (cmd == RefreshType.REFRESH) {\n+            // there is no way to read the currently active scene", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaec40bcbfd5cbbed8cd1e368b87afb88801e46a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTIyNjA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMDo1NzozMFrOGBDT9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMDo1NzozMFrOGBDT9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NjAyMQ==", "bodyText": "It might be safer to cast to a Number instead, just to give more flexibility if the core decides to change things down the line.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r403756021", "createdAt": "2020-04-05T20:57:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/UPBHandlerFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Dictionary;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.handler.SerialPIMHandler;\n+import org.openhab.binding.upb.handler.UPBThingHandler;\n+import org.openhab.binding.upb.handler.VirtualThingHandler;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory for UPB handlers.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.upb\")\n+@NonNullByDefault\n+public class UPBHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(UPBHandlerFactory.class);\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable Byte networkId;\n+\n+    @Activate\n+    public UPBHandlerFactory(@Reference SerialPortManager serialPortManager) {\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    @NonNullByDefault({})\n+    protected void activate(final ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        final Dictionary<String, Object> config = componentContext.getProperties();\n+        final BigDecimal nid = (BigDecimal) config.get(Constants.CONFIGURATION_NETWORK_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaec40bcbfd5cbbed8cd1e368b87afb88801e46a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTIzNDQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMTowODowMlrOGBDYJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMTowODowMlrOGBDYJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NzA5Mg==", "bodyText": "I'd rather you set the name from within the SerialIoThread constructor instead. Also make sure that you make the thread daemon.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r403757092", "createdAt": "2020-04-05T21:08:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile @Nullable SerialIoThread receiveThread;\n+    private volatile @Nullable ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.warn(\"serial port is not set\");\n+            return;\n+        }\n+\n+        futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_INIT_DELAY_MS,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> futSerialPortInit = this.futSerialPortInit;\n+        if (futSerialPortInit != null) {\n+            futSerialPortInit.cancel(true);\n+            this.futSerialPortInit = null;\n+        }\n+        final SerialIoThread receiveThread = this.receiveThread;\n+        if (receiveThread != null) {\n+            receiveThread.terminate();\n+            try {\n+                receiveThread.join(1000);\n+            } catch (final InterruptedException e) {\n+                // ignore\n+            }\n+            this.receiveThread = null;\n+        }\n+        logger.debug(\"Stopped UPB serial handler\");\n+        super.dispose();\n+    }\n+\n+    private void openSerialPort(final String portId) {\n+        try {\n+            final SerialPort serialPort = tryOpenSerialPort(portId);\n+            if (serialPort == null) {\n+                futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_RETRY_DELAY_MS,\n+                        TimeUnit.MILLISECONDS);\n+                return;\n+            }\n+            logger.debug(\"Starting receive thread\");\n+            final SerialIoThread receiveThread = new SerialIoThread(serialPort, this);\n+            receiveThread.setName(\"upb-serial-reader\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaec40bcbfd5cbbed8cd1e368b87afb88801e46a"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTI2NjExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMTo0NjoxOVrOGBDn8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTo1NTowNFrOHQLgIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc2MTEzNg==", "bodyText": "Instead of managing a buffer yourself why not use a ByteArrayOutputStream?\nOr another option would be to use a BufferedInputStream and take advantage of the mark() and reset() methods to parse messages as you encounter the message terminator byte.\nWDYT?", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r403761136", "createdAt": "2020-04-05T21:46:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.NamedThreadFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+    private static final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] buffer = new byte[512];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaec40bcbfd5cbbed8cd1e368b87afb88801e46a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyNzcxNQ==", "bodyText": "Done, but I think it got more complicated for little benefit...", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r486727715", "createdAt": "2020-09-11T01:55:04Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.NamedThreadFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+    private static final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] buffer = new byte[512];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc2MTEzNg=="}, "originalCommit": {"oid": "eaec40bcbfd5cbbed8cd1e368b87afb88801e46a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTIwMTQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDowNzo1OFrOHPYg3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDowNzo1OFrOHPYg3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5MjMxOQ==", "bodyText": "Can you add an items example", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485892319", "createdAt": "2020-09-09T20:07:58Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+# UPB Binding\n+\n+Universal Powerline Bus (UPB) is a protocol for communication over household electrical wiring.\n+\n+## Supported Things\n+\n+The binding has not yet been tested with a variety of devices, so specific device support is limited.\n+Instead the binding provides some generic devices, and allows adding channels that match the type of device.\n+\n+* `serial-pim` - Serial PIM\n+* `generic` - Generic UPB device\n+* `virtual` - \"Virtual\" device that allows scene selection\n+\n+Specific devices that are supported:\n+\n+ * `leviton-38a00-1` - 6-button scene switch\n+\n+## Binding Configuration\n+\n+The following binding configuration parameters are supported:\n+\n+| Parameter                | Description                                    | Config   | Default |\n+| ------------------------ | ---------------------------------------------- |--------- | ------- |\n+| networkId                | Default UPB network ID (0-255)                 | Optional | -       |\n+\n+## Thing Configuration\n+\n+### Serial PIM\n+\n+You need a Powerline Interface Module (PIM) for the binding to work. This is a piece of equipment\n+that connects a computer to the powerline. There are a few different PIM interfaces but this binding\n+only supports serial PIMs\n+\n+The `serial-pim` takes the following configuration parameters:\n+\n+| Parameter                | Description                                    | Config   | Default |\n+| ------------------------ | ---------------------------------------------- |--------- | ------- |\n+| port                     | Serial port where the PIM is connected         | Required | -       |\n+\n+### Generic device\n+\n+The `generic` thing type supports most UPB devices such as dimmers, light switches,\n+and appliance modules. It has the following configuration parameters:\n+\n+| Parameter                | Description                                    | Config   | Default |\n+| ------------------------ | ---------------------------------------------- |--------- | ------- |\n+| networkId                | ID of the UPB network (0-255)                  | Optional | binding config |\n+| unitId                   | Unit ID (unique address) of the device (1-250) | Required | -       |\n+\n+### Virtual device\n+\n+The `virtual` pseudo-device does not correspond to any real device on the UPB network. It is\n+nevertheless useful for reading and setting the current scene. The device has two channels,\n+`linkActivated` and `linkDeactivated`. If a device on the UPB network activates or de-activates\n+a scene by broadcasting a link activation command, the link ID (or scene number) can be read from\n+the corresponding channel. Similarly, updating the channel with a link ID will send out the\n+corresponding link command on the UPB network.\n+\n+## Channels\n+\n+\n+These channels are available for generic devices:\n+\n+| Channel Type | Item type | Description                                     |\n+| ------------ | --------- | ----------------------------------------------- |\n+| switch       | Switch    | On/off switch for lights and appliance switches |\n+| dimmer       | Dimmer    | Dimmer brightness                               |\n+| scene-selection | -      | Trigger channel for scene selection             |\n+\n+The virtual device supports the `link` channel type:\n+\n+| Channel Type | Item type | Description                            |\n+| ------------ | --------- | -------------------------------------- |\n+| link         | Number    | A scene to activate or deactivate      |\n+\n+## Full Example\n+\n+Here is a sample `.things configuration file:\n+\n+```\n+Bridge upb:serial-pim:pim \"UPB PIM\" @ \"Basement\" [port=\"/dev/ttyUSB0\"] {\n+  Thing generic light-switch \"Living Room Light\" [networkId=1, unitId=1] {\n+    Channels:\n+      Type switch : power\n+      Type dimmer : level\n+  }\n+\n+  Thing virtual upb-scene \"UPB Scene Control\" [networkId=1, unitId=250]\n+\n+  Thing leviton-38a00-1 scene-switch \"Scene Switch\" @ \"Bedroom\" [networkId=1, unitId=2] {\n+    Channels:\n+      Type scene-selection : btnOn [linkId=1]\n+      Type scene-selection : btnOff [linkId=2]\n+      Type scene-selection : btnA [linkId=3]\n+      Type scene-selection : btnB [linkId=4]\n+      Type scene-selection : btnC [linkId=5]\n+      Type scene-selection : btnD [linkId=6]\n+  }\n+}\n+\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTIwNDY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDowOTowN1rOHPYjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDowOTowN1rOHPYjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5Mjg2NQ==", "bodyText": "Please put each sentences on a single line. that makes it easier to review differences.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485892865", "createdAt": "2020-09-09T20:09:07Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+# UPB Binding\n+\n+Universal Powerline Bus (UPB) is a protocol for communication over household electrical wiring.\n+\n+## Supported Things\n+\n+The binding has not yet been tested with a variety of devices, so specific device support is limited.\n+Instead the binding provides some generic devices, and allows adding channels that match the type of device.\n+\n+* `serial-pim` - Serial PIM\n+* `generic` - Generic UPB device\n+* `virtual` - \"Virtual\" device that allows scene selection\n+\n+Specific devices that are supported:\n+\n+ * `leviton-38a00-1` - 6-button scene switch\n+\n+## Binding Configuration\n+\n+The following binding configuration parameters are supported:\n+\n+| Parameter                | Description                                    | Config   | Default |\n+| ------------------------ | ---------------------------------------------- |--------- | ------- |\n+| networkId                | Default UPB network ID (0-255)                 | Optional | -       |\n+\n+## Thing Configuration\n+\n+### Serial PIM\n+\n+You need a Powerline Interface Module (PIM) for the binding to work. This is a piece of equipment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTIxODk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxMzo0MlrOHPYrzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxMzo0MlrOHPYrzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NTExNg==", "bodyText": "Could you use the following naming convention for the thread:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    setName(\"upb-serial-reader\");\n          \n          \n            \n                    setName(\"OH-binding-\" + thingUID + \"serial-reader\");\n          \n      \n    \n    \n  \n\nThe postfix serial-reader is maybe not needed it this is the only thread started by this binding. The convention is to easily detect binding started threads.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485895116", "createdAt": "2020-09-09T20:13:42Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.NamedThreadFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+    private static final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    // Single-threaded executor for writes that serves to serialize writes.\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH), new NamedThreadFactory(\"upb-serial-writer\", true));\n+    private final SerialPort serialPort;\n+\n+    private int bufferLength = 0;\n+    private volatile @Nullable WriteRunnable currentWrite;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+        setName(\"upb-serial-reader\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTIyNTQxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxNTo0OFrOHPYv1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzozNTo0NVrOHQ-D1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NjE0OA==", "bodyText": "It's unclear if this is still needed. It seem to have fixed in newer versions of the library. I've had people remove this and they had no problem. So you probably should remove it, and then best test if there is indeed no problem anymore.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485896148", "createdAt": "2020-09-09T20:15:48Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.NamedThreadFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+    private static final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    // Single-threaded executor for writes that serves to serialize writes.\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH), new NamedThreadFactory(\"upb-serial-writer\", true));\n+    private final SerialPort serialPort;\n+\n+    private int bufferLength = 0;\n+    private volatile @Nullable WriteRunnable currentWrite;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+        setName(\"upb-serial-reader\");\n+        setDaemon(true);\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzOTU5NQ==", "bodyText": "Did you checked if the endless sleep was still needed? Otherwise I think you should just remove it.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487539595", "createdAt": "2020-09-13T14:57:15Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.NamedThreadFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+    private static final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    // Single-threaded executor for writes that serves to serialize writes.\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH), new NamedThreadFactory(\"upb-serial-writer\", true));\n+    private final SerialPort serialPort;\n+\n+    private int bufferLength = 0;\n+    private volatile @Nullable WriteRunnable currentWrite;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+        setName(\"upb-serial-reader\");\n+        setDaemon(true);\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NjE0OA=="}, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NjA1Mw==", "bodyText": "This has been fixed. You can safely remove the entire method.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487556053", "createdAt": "2020-09-13T17:35:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.NamedThreadFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+    private static final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    // Single-threaded executor for writes that serves to serialize writes.\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH), new NamedThreadFactory(\"upb-serial-writer\", true));\n+    private final SerialPort serialPort;\n+\n+    private int bufferLength = 0;\n+    private volatile @Nullable WriteRunnable currentWrite;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+        setName(\"upb-serial-reader\");\n+        setDaemon(true);\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NjE0OA=="}, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTIzMzkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoxODozMFrOHPY1Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNDowM1rOHPZAOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NzUwMw==", "bodyText": "Can you catch the specific exception (or reduce it to RuntimException). This comment applies to all locations that catch Exception.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485897503", "createdAt": "2020-09-09T20:18:30Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.NamedThreadFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+    private static final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    // Single-threaded executor for writes that serves to serialize writes.\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH), new NamedThreadFactory(\"upb-serial-writer\", true));\n+    private final SerialPort serialPort;\n+\n+    private int bufferLength = 0;\n+    private volatile @Nullable WriteRunnable currentWrite;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+        setName(\"upb-serial-reader\");\n+        setDaemon(true);\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            if (in == null) {\n+                // should never happen\n+                throw new IllegalStateException(\"serial port is not readable\");\n+            }\n+            enterMessageMode();\n+            int len;\n+            while (!done && (len = in.read(buffer)) >= 0) {\n+                addData(buffer, len);\n+            }\n+        } catch (final Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMDM0NA==", "bodyText": "If there is an exception it means the thread is shutdown. Does this tickle down to the user in form of a status update offline? or does the binding simply stop working without visible indication and only by looking at the log one could find the error and deduce the binding has crashed.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485900344", "createdAt": "2020-09-09T20:24:03Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.TooManyListenersException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.NamedThreadFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+    private static final byte[] ENABLE_MESSAGE_MODE_CMD = { 0x17, 0x70, 0x02, (byte) 0x8e, 0x0d };\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final byte[] buffer = new byte[512];\n+    private final MessageListener listener;\n+    // Single-threaded executor for writes that serves to serialize writes.\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH), new NamedThreadFactory(\"upb-serial-writer\", true));\n+    private final SerialPort serialPort;\n+\n+    private int bufferLength = 0;\n+    private volatile @Nullable WriteRunnable currentWrite;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+        setName(\"upb-serial-reader\");\n+        setDaemon(true);\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        // RXTX serial port library causes high CPU load\n+        // Start event listener, which will just sleep and slow down event loop\n+        try {\n+            serialPort.addEventListener(this);\n+        } catch (final TooManyListenersException e) {\n+            logger.warn(\"serial port setup failed\", e);\n+            return;\n+        }\n+        serialPort.notifyOnDataAvailable(true);\n+\n+        final byte[] buffer = new byte[256];\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            if (in == null) {\n+                // should never happen\n+                throw new IllegalStateException(\"serial port is not readable\");\n+            }\n+            enterMessageMode();\n+            int len;\n+            while (!done && (len = in.read(buffer)) >= 0) {\n+                addData(buffer, len);\n+            }\n+        } catch (final Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg5NzUwMw=="}, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTI1Nzk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNjowNFrOHPZEEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNjowNFrOHPZEEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMTMyOQ==", "bodyText": "This should result in a  updateStatus offline, configuration error. The user should not have to look into the log to find out what is wrong.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485901329", "createdAt": "2020-09-09T20:26:04Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile @Nullable SerialIoThread receiveThread;\n+    private volatile @Nullable ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.warn(\"serial port is not set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTI2MzQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNzo0M1rOHPZHXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDoyNzo0M1rOHPZHXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwMjE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.warn(\"cannot open serial port\", e);\n          \n          \n            \n                        logger.debug(\"cannot open serial port\", e);\n          \n      \n    \n    \n  \n\nMessage already set in status, which is also logged.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485902175", "createdAt": "2020-09-09T20:27:43Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;\n+    private static final int BAUD_RATE = 4800;\n+    private static final int SERIAL_PORT_OPEN_INIT_DELAY_MS = 500;\n+    private static final int SERIAL_PORT_OPEN_RETRY_DELAY_MS = 30_000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialPIMHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+    private volatile @Nullable SerialIoThread receiveThread;\n+    private volatile @Nullable ScheduledFuture<?> futSerialPortInit;\n+\n+    public SerialPIMHandler(final Bridge thing, final SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Serial UPB PIM {}.\", getThing().getUID());\n+        super.initialize();\n+\n+        final String portId = (String) getConfig().get(Constants.CONFIGURATION_PORT);\n+        if (portId == null || portId.isEmpty()) {\n+            logger.warn(\"serial port is not set\");\n+            return;\n+        }\n+\n+        futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_INIT_DELAY_MS,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> futSerialPortInit = this.futSerialPortInit;\n+        if (futSerialPortInit != null) {\n+            futSerialPortInit.cancel(true);\n+            this.futSerialPortInit = null;\n+        }\n+        final SerialIoThread receiveThread = this.receiveThread;\n+        if (receiveThread != null) {\n+            receiveThread.terminate();\n+            try {\n+                receiveThread.join(1000);\n+            } catch (final InterruptedException e) {\n+                // ignore\n+            }\n+            this.receiveThread = null;\n+        }\n+        logger.debug(\"Stopped UPB serial handler\");\n+        super.dispose();\n+    }\n+\n+    private void openSerialPort(final String portId) {\n+        try {\n+            final SerialPort serialPort = tryOpenSerialPort(portId);\n+            if (serialPort == null) {\n+                futSerialPortInit = scheduler.schedule(() -> openSerialPort(portId), SERIAL_PORT_OPEN_RETRY_DELAY_MS,\n+                        TimeUnit.MILLISECONDS);\n+                return;\n+            }\n+            logger.debug(\"Starting receive thread\");\n+            final SerialIoThread receiveThread = new SerialIoThread(serialPort, this);\n+            this.receiveThread = receiveThread;\n+            // Once the receiver starts, it may set the PIM status to ONLINE\n+            // so we must ensure all initialization is finished at that point.\n+            receiveThread.start();\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (final Exception e) {\n+            logger.warn(\"failed to open serial port\", e);\n+        }\n+    }\n+\n+    private @Nullable SerialPort tryOpenSerialPort(final String portId) {\n+        logger.debug(\"opening serial port {}\", portId);\n+        final SerialPortIdentifier portIdentifier = serialPortManager.getIdentifier(portId);\n+        if (portIdentifier == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    Constants.OFFLINE_SERIAL_EXISTS);\n+            return null;\n+        }\n+\n+        final SerialPort serialPort;\n+        try {\n+            serialPort = portIdentifier.open(\"org.openhab.binding.upb\", 1000);\n+        } catch (final PortInUseException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    Constants.OFFLINE_SERIAL_INUSE);\n+            return null;\n+        }\n+        try {\n+            serialPort.setSerialPortParams(BAUD_RATE, SerialPort.DATABITS_8, SerialPort.STOPBITS_1,\n+                    SerialPort.PARITY_NONE);\n+            serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_NONE);\n+            try {\n+                serialPort.enableReceiveThreshold(1);\n+                serialPort.enableReceiveTimeout(SERIAL_RECEIVE_TIMEOUT);\n+            } catch (final UnsupportedCommOperationException e) {\n+                // ignore - not supported for RFC2217 ports\n+            }\n+        } catch (final UnsupportedCommOperationException e) {\n+            logger.warn(\"cannot open serial port\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTI4MDMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDozMjozNlrOHPZRqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNDo1ODo1N1rOHQ9EJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNDgxMQ==", "bodyText": "The refresh is given for each channel. So calling refreshDeviceState might be a bit of an overload.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485904811", "createdAt": "2020-09-09T20:32:36Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.warn(\"missing network ID for {}\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\");\n+                return;\n+            }\n+            networkId = defaultNetworkId.byteValue();\n+        } else if (val.compareTo(BigDecimal.ZERO) < 0 || val.compareTo(BigDecimal.valueOf(255)) > 0) {\n+            logger.warn(\"invalid network ID {} for {}\", val, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid network ID\");\n+            return;\n+        } else {\n+            networkId = val.byteValue();\n+        }\n+\n+        final BigDecimal cfgUnitId = (BigDecimal) getConfig().get(Constants.CONFIGURATION_UNIT_ID);\n+        if (cfgUnitId == null) {\n+            logger.warn(\"Unit ID is not set in {}\", getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing unit ID\");\n+            return;\n+        }\n+        unitId = cfgUnitId.intValue();\n+        if (unitId < 1 || unitId > 250) {\n+            logger.warn(\"Unit ID ({}) out of range for {}\", cfgUnitId, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid unit ID\");\n+            return;\n+        }\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+        bridgeStatusChanged(bridge.getStatusInfo());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(final ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"DEV {}: Controller status is {}\", unitId, bridgeStatusInfo.getStatus());\n+\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+\n+        logger.debug(\"DEV {}: Controller is ONLINE. Starting device initialisation.\", unitId);\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"DEV {}: bridge is null!\", unitId);\n+            return;\n+        }\n+        final PIMHandler bridgeHandler = (PIMHandler) bridge.getHandler();\n+        if (bridgeHandler == null) {\n+            logger.debug(\"DEV {}: bridge handler is null!\", unitId);\n+            return;\n+        }\n+        updateDeviceStatus(bridgeHandler);\n+        pingDevice();\n+    }\n+\n+    @Override\n+    public void handleCommand(final ChannelUID channelUID, final Command cmd) {\n+        final PIMHandler pimHandler = getPIMHandler();\n+        if (pimHandler == null) {\n+            logger.info(\"DEV {}: received cmd {} but no bridge handler\", unitId, cmd);\n+            return;\n+        }\n+\n+        final MessageBuilder message;\n+        if (cmd == OnOffType.ON) {\n+            message = MessageBuilder.forCommand(ACTIVATE);\n+        } else if (cmd == OnOffType.OFF) {\n+            message = MessageBuilder.forCommand(DEACTIVATE);\n+        } else if (cmd instanceof PercentType) {\n+            message = MessageBuilder.forCommand(GOTO).args(((PercentType) cmd).byteValue());\n+        } else if (cmd == RefreshType.REFRESH) {\n+            refreshDeviceState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUzOTc1MA==", "bodyText": "refreshDeviceState might still cause multiple calls to the device on refresh. You could use a (org.eclipse..) ExpiringCache with something of 3 seconds timeout to avoid it when the ui calls refresh on all channels.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487539750", "createdAt": "2020-09-13T14:58:57Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.warn(\"missing network ID for {}\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\");\n+                return;\n+            }\n+            networkId = defaultNetworkId.byteValue();\n+        } else if (val.compareTo(BigDecimal.ZERO) < 0 || val.compareTo(BigDecimal.valueOf(255)) > 0) {\n+            logger.warn(\"invalid network ID {} for {}\", val, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid network ID\");\n+            return;\n+        } else {\n+            networkId = val.byteValue();\n+        }\n+\n+        final BigDecimal cfgUnitId = (BigDecimal) getConfig().get(Constants.CONFIGURATION_UNIT_ID);\n+        if (cfgUnitId == null) {\n+            logger.warn(\"Unit ID is not set in {}\", getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing unit ID\");\n+            return;\n+        }\n+        unitId = cfgUnitId.intValue();\n+        if (unitId < 1 || unitId > 250) {\n+            logger.warn(\"Unit ID ({}) out of range for {}\", cfgUnitId, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid unit ID\");\n+            return;\n+        }\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+        bridgeStatusChanged(bridge.getStatusInfo());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(final ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"DEV {}: Controller status is {}\", unitId, bridgeStatusInfo.getStatus());\n+\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+\n+        logger.debug(\"DEV {}: Controller is ONLINE. Starting device initialisation.\", unitId);\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"DEV {}: bridge is null!\", unitId);\n+            return;\n+        }\n+        final PIMHandler bridgeHandler = (PIMHandler) bridge.getHandler();\n+        if (bridgeHandler == null) {\n+            logger.debug(\"DEV {}: bridge handler is null!\", unitId);\n+            return;\n+        }\n+        updateDeviceStatus(bridgeHandler);\n+        pingDevice();\n+    }\n+\n+    @Override\n+    public void handleCommand(final ChannelUID channelUID, final Command cmd) {\n+        final PIMHandler pimHandler = getPIMHandler();\n+        if (pimHandler == null) {\n+            logger.info(\"DEV {}: received cmd {} but no bridge handler\", unitId, cmd);\n+            return;\n+        }\n+\n+        final MessageBuilder message;\n+        if (cmd == OnOffType.ON) {\n+            message = MessageBuilder.forCommand(ACTIVATE);\n+        } else if (cmd == OnOffType.OFF) {\n+            message = MessageBuilder.forCommand(DEACTIVATE);\n+        } else if (cmd instanceof PercentType) {\n+            message = MessageBuilder.forCommand(GOTO).args(((PercentType) cmd).byteValue());\n+        } else if (cmd == RefreshType.REFRESH) {\n+            refreshDeviceState();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNDgxMQ=="}, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTI5NTQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDozNjo1M1rOHPZa6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjowNTo1N1rOHQPfWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNzE3Nw==", "bodyText": "This author tag should be removed (probably a left over from the old binding)", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485907177", "createdAt": "2020-09-09T20:36:53Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Model for a message sent or received from a UPB modem.\n+ *\n+ * @author cvanorman - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UPBMessage {\n+\n+    /**\n+     * An enum of possible modem response types.\n+     *\n+     * @author cvanorman", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczMTQ1OA==", "bodyText": "It is, this class was brought over from the old binding, so I'm uncomfortable removing the author tag.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r486731458", "createdAt": "2020-09-11T02:09:15Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Model for a message sent or received from a UPB modem.\n+ *\n+ * @author cvanorman - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UPBMessage {\n+\n+    /**\n+     * An enum of possible modem response types.\n+     *\n+     * @author cvanorman", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNzE3Nw=="}, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5MzA1MA==", "bodyText": "The author is already on the class so it's no problem removing the tag.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r486793050", "createdAt": "2020-09-11T06:05:57Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Model for a message sent or received from a UPB modem.\n+ *\n+ * @author cvanorman - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UPBMessage {\n+\n+    /**\n+     * An enum of possible modem response types.\n+     *\n+     * @author cvanorman", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNzE3Nw=="}, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTMwMDY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDozODozMFrOHPZeHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDozODozMFrOHPZeHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwNzk5OQ==", "bodyText": "Is there a specific  exception to catch or else RuntimeException.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485907999", "createdAt": "2020-09-09T20:38:30Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/internal/message/UPBMessage.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.internal.message;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Model for a message sent or received from a UPB modem.\n+ *\n+ * @author cvanorman - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UPBMessage {\n+\n+    /**\n+     * An enum of possible modem response types.\n+     *\n+     * @author cvanorman\n+     *\n+     */\n+    public enum Type {\n+        ACCEPT(\"PA\"),\n+        BUSY(\"PB\"),\n+        ERROR(\"PE\"),\n+        ACK(\"PK\"),\n+        NAK(\"PN\"),\n+        MESSAGE_REPORT(\"PU\"),\n+        NONE(\"\");\n+\n+        private final String prefix;\n+\n+        Type(final String prefix) {\n+            this.prefix = prefix;\n+        }\n+\n+        /**\n+         * @return the message prefix string for this type\n+         */\n+        public String prefix() {\n+            return prefix;\n+        }\n+\n+        /**\n+         * Returns the message type for a protocol string prefix.\n+         *\n+         * @param value the prefix string\n+         * @return the message type for the given string\n+         */\n+        public static Type forPrefix(final String value) {\n+            for (final Type t : values()) {\n+                if (t.prefix().equals(value)) {\n+                    return t;\n+                }\n+            }\n+            return NONE;\n+        }\n+    }\n+\n+    private static final Logger logger = LoggerFactory.getLogger(UPBMessage.class);\n+\n+    private final Type type;\n+\n+    private ControlWord controlWord = new ControlWord();\n+    private byte network;\n+    private byte destination;\n+    private byte source;\n+\n+    private Command command = Command.NULL;\n+    private byte[] arguments = new byte[0];\n+\n+    private UPBMessage(final Type type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Converts a hex string into a {@link UPBMessage}.\n+     *\n+     * @param commandString\n+     *            the string as returned by the modem.\n+     * @return a new UPBMessage.\n+     */\n+    public static UPBMessage fromString(String commandString) {\n+        final String prefix = commandString.substring(0, 2);\n+        final UPBMessage msg = new UPBMessage(Type.forPrefix(prefix));\n+\n+        try {\n+            if (commandString.length() > 2) {\n+                byte[] data = HexUtils.hexToBytes(commandString.substring(2));\n+                msg.getControlWord().setBytes(data[0], data[1]);\n+                int index = 2;\n+                msg.setNetwork(data[index++]);\n+                msg.setDestination(data[index++]);\n+                msg.setSource(data[index++]);\n+\n+                byte commandCode = data[index++];\n+                msg.setCommand(Command.valueOf(commandCode));\n+\n+                if (index <= data.length - 1) {\n+                    msg.setArguments(Arrays.copyOfRange(data, index, data.length - 1));\n+                }\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTMxMTI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo0MTo0N1rOHPZkhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo0MTo0N1rOHPZkhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwOTYzOQ==", "bodyText": "Can you align the table.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485909639", "createdAt": "2020-09-09T20:41:47Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+# UPB Binding\n+\n+Universal Powerline Bus (UPB) is a protocol for communication over household electrical wiring.\n+\n+## Supported Things\n+\n+The binding has not yet been tested with a variety of devices, so specific device support is limited.\n+Instead the binding provides some generic devices, and allows adding channels that match the type of device.\n+\n+* `serial-pim` - Serial PIM\n+* `generic` - Generic UPB device\n+* `virtual` - \"Virtual\" device that allows scene selection\n+\n+Specific devices that are supported:\n+\n+ * `leviton-38a00-1` - 6-button scene switch\n+\n+## Binding Configuration\n+\n+The following binding configuration parameters are supported:\n+\n+| Parameter                | Description                                    | Config   | Default |\n+| ------------------------ | ---------------------------------------------- |--------- | ------- |\n+| networkId                | Default UPB network ID (0-255)                 | Optional | -       |\n+\n+## Thing Configuration\n+\n+### Serial PIM\n+\n+You need a Powerline Interface Module (PIM) for the binding to work. This is a piece of equipment\n+that connects a computer to the powerline. There are a few different PIM interfaces but this binding\n+only supports serial PIMs\n+\n+The `serial-pim` takes the following configuration parameters:\n+\n+| Parameter                | Description                                    | Config   | Default |\n+| ------------------------ | ---------------------------------------------- |--------- | ------- |\n+| port                     | Serial port where the PIM is connected         | Required | -       |\n+\n+### Generic device\n+\n+The `generic` thing type supports most UPB devices such as dimmers, light switches,\n+and appliance modules. It has the following configuration parameters:\n+\n+| Parameter                | Description                                    | Config   | Default |\n+| ------------------------ | ---------------------------------------------- |--------- | ------- |\n+| networkId                | ID of the UPB network (0-255)                  | Optional | binding config |\n+| unitId                   | Unit ID (unique address) of the device (1-250) | Required | -       |\n+\n+### Virtual device\n+\n+The `virtual` pseudo-device does not correspond to any real device on the UPB network. It is\n+nevertheless useful for reading and setting the current scene. The device has two channels,\n+`linkActivated` and `linkDeactivated`. If a device on the UPB network activates or de-activates\n+a scene by broadcasting a link activation command, the link ID (or scene number) can be read from\n+the corresponding channel. Similarly, updating the channel with a link ID will send out the\n+corresponding link command on the UPB network.\n+\n+## Channels\n+\n+\n+These channels are available for generic devices:\n+\n+| Channel Type | Item type | Description                                     |\n+| ------------ | --------- | ----------------------------------------------- |\n+| switch       | Switch    | On/off switch for lights and appliance switches |\n+| dimmer       | Dimmer    | Dimmer brightness                               |\n+| scene-selection | -      | Trigger channel for scene selection             |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTMzMzEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo0ODozM1rOHPZx0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo0ODozM1rOHPZx0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxMzA0MA==", "bodyText": "Because a dimmer channel also should accept on/off the convention we use it to not model a separate switch channel when using a dimmer. In items the dimmer channel can simply be configured as a switch. Therefor please remove this channel. Since the code already doesn't check for which channel the command is, the code already seems to support this use case.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485913040", "createdAt": "2020-09-09T20:48:33Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"upb\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"generic\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"serial-pim\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Generic Powerline Device</label>\n+\t\t<description>A generic device in a UPB network</description>\n+\t\t<category>WallSwitch</category>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTQyOTE1OnYy", "diffSide": "RIGHT", "path": "bom/openhab-addons/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxODo1NlrOHPar8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxODo1NlrOHPar8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNzkyMw==", "bodyText": "Adding the groupId here will help with getting the build fixed:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <dependency>\n          \n          \n            \n                  <artifactId>org.openhab.binding.upb</artifactId>\n          \n          \n            \n                <dependency>\n          \n          \n            \n                  <groupId>org.openhab.addons.bundles</groupId>\n          \n          \n            \n                  <artifactId>org.openhab.binding.upb</artifactId>", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r485927923", "createdAt": "2020-09-09T21:18:56Z", "author": {"login": "wborn"}, "path": "bom/openhab-addons/pom.xml", "diffHunk": "@@ -1131,6 +1131,10 @@\n       <artifactId>org.openhab.binding.upnpcontrol</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+    <dependency>\n+      <artifactId>org.openhab.binding.upb</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbdba16a977a3e7ecb2e62b8998fd125908a3ef"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI0MzczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzoyOTo0OFrOHQ-BPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxNTozM1rOHQ-S5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NTM5MA==", "bodyText": "Is this class not in the internal package intentionally? Same for the others not in internal.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487555390", "createdAt": "2020-09-13T17:29:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/Constants.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+\n+/**\n+ * Common constants used in the binding.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@NonNullByDefault\n+public final class Constants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1OTkxMA==", "bodyText": "This is probably a remnisant of the older version of the binding. Since then we changed to have all files that are used in other projects to be in the internal package. For bindings this means all files should be in the internal package. So yes please move these files to the internal package.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487559910", "createdAt": "2020-09-13T18:15:33Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/Constants.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+\n+/**\n+ * Common constants used in the binding.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ */\n+@NonNullByDefault\n+public final class Constants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NTM5MA=="}, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1MDQ2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzozNzozNVrOHQ-Ecw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzozNzozNVrOHQ-Ecw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NjIxMQ==", "bodyText": "Logging to info should be used rarely. This could be debug or warn.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487556211", "createdAt": "2020-09-13T17:37:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialIoThread.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.NamedThreadFactory;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.util.HexUtils;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.MessageParseException;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Event loop for serial communications. Handles sending and receiving UPB messages.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialIoThread extends Thread implements SerialPortEventListener {\n+    private static final int WRITE_QUEUE_LENGTH = 128;\n+    private static final int ACK_TIMEOUT_MS = 500;\n+    private static final byte[] ENABLE_MESSAGE_MODE_CMD = \"\\u001770028E\\n\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final int MAX_READ_SIZE = 128;\n+    private static final int CR = 13;\n+\n+    private final Logger logger = LoggerFactory.getLogger(SerialIoThread.class);\n+    private final MessageListener listener;\n+    // Single-threaded executor for writes that serves to serialize writes.\n+    private final ExecutorService writeExecutor = new ThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS,\n+            new LinkedBlockingQueue<>(WRITE_QUEUE_LENGTH), new NamedThreadFactory(\"upb-serial-writer\", true));\n+    private final SerialPort serialPort;\n+\n+    private volatile @Nullable WriteRunnable currentWrite;\n+    private volatile boolean done;\n+\n+    public SerialIoThread(final SerialPort serialPort, final MessageListener listener, final ThingUID thingUID) {\n+        this.serialPort = serialPort;\n+        this.listener = listener;\n+        setName(\"OH-binding-\" + thingUID + \"-serial-reader\");\n+        setDaemon(true);\n+    }\n+\n+    @Override\n+    public void serialEvent(final SerialPortEvent event) {\n+        try {\n+            logger.trace(\"RXTX library CPU load workaround, sleep forever\");\n+            Thread.sleep(Long.MAX_VALUE);\n+        } catch (final InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        serialPort.disableReceiveTimeout();\n+        enterMessageMode();\n+        try (final InputStream in = serialPort.getInputStream()) {\n+            if (in == null) {\n+                // should never happen\n+                throw new IllegalStateException(\"serial port is not readable\");\n+            }\n+            try (final InputStream bufIn = new BufferedInputStream(in)) {\n+                bufIn.mark(MAX_READ_SIZE);\n+                int b;\n+                int len = 0;\n+                while (!done && (b = bufIn.read()) >= 0) {\n+                    len++;\n+                    if (b == CR) {\n+                        // message terminator read, rewind the stream and parse the buffered message\n+                        try {\n+                            bufIn.reset();\n+                            processBuffer(bufIn, len);\n+                        } catch (final IOException e) {\n+                            logger.warn(\"buffer overrun, dropped long message\", e);\n+                        } finally {\n+                            bufIn.mark(MAX_READ_SIZE);\n+                            len = 0;\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (final IOException e) {\n+            logger.warn(\"Exception in UPB read thread\", e);\n+        } finally {\n+            logger.debug(\"shutting down receive thread\");\n+            shutdownAndAwaitTermination(writeExecutor);\n+            try {\n+                serialPort.close();\n+            } catch (final RuntimeException e) {\n+                // ignore\n+            }\n+        }\n+        logger.debug(\"UPB read thread stopped\");\n+    }\n+\n+    /**\n+     * Attempts to parse a message from the input stream.\n+     *\n+     * @param in the stream to read from\n+     * @param len the number of bytes in the message\n+     */\n+    private void processBuffer(final InputStream in, final int len) {\n+        final byte[] buf = new byte[len];\n+        final int n;\n+        try {\n+            n = in.read(buf);\n+        } catch (final IOException e) {\n+            logger.warn(\"error reading message\", e);\n+            return;\n+        }\n+        if (n < len) {\n+            // should not happen when replaying the buffered input\n+            logger.warn(\"truncated read, expected={} read={}\", len, n);\n+            return;\n+        }\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"UPB Message: {}\", HexUtils.bytesToHex(buf));\n+        }\n+        final UPBMessage msg;\n+        try {\n+            msg = UPBMessage.parse(buf);\n+        } catch (final MessageParseException e) {\n+            logger.warn(\"failed to parse message: {}\", HexUtils.bytesToHex(buf), e);\n+            return;\n+        }\n+        handleMessage(msg);\n+    }\n+\n+    private void handleMessage(final UPBMessage msg) {\n+        final WriteRunnable writeRunnable = currentWrite;\n+        switch (msg.getType()) {\n+            case ACK:\n+                if (writeRunnable != null) {\n+                    writeRunnable.ackReceived(true);\n+                }\n+                break;\n+            case NAK:\n+                if (writeRunnable != null) {\n+                    writeRunnable.ackReceived(false);\n+                }\n+                break;\n+            case ACCEPT:\n+                break;\n+            case ERROR:\n+                logger.info(\"received ERROR response from PIM\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1MTY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzozOToxOFrOHQ-FDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzozOToxOFrOHQ-FDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NjM2Nw==", "bodyText": "It's good practice to append the unit to the field name e.g. TIMEOUT_SEC.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487556367", "createdAt": "2020-09-13T17:39:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/SerialPIMHandler.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bridge handler responsible for serial PIM communications.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class SerialPIMHandler extends PIMHandler {\n+    private static final int SERIAL_RECEIVE_TIMEOUT = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1Mzg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0MTo1NVrOHQ-GGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0MTo1NVrOHQ-GGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NjYzMw==", "bodyText": "Enum members should be all upper case and SNAKE_CASE.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487556633", "createdAt": "2020-09-13T17:41:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingChannel.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+\n+/**\n+ * A channel supported by UPB things.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingChannel {\n+    public enum DataType {\n+        OnOffType,\n+        PercentType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1NTI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0Mzo0NVrOHQ-Gwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0Mzo0NVrOHQ-Gwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NjgwMg==", "bodyText": "You could remove the logging statement, as updateStatus() already does the logging. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487556802", "createdAt": "2020-09-13T17:43:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.debug(\"missing network ID for {}\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1OTI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0Nzo1MlrOHQ-Iqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMjo0MzozN1rOHTNRKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzI5MQ==", "bodyText": "Child Things are set to OFFLINE by the framework, when the bridge goes offline and vice versa. If I see correctly, you could remove the entire method and invoke updateDeviceStatus() and pingDevice() in initialize().", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487557291", "createdAt": "2020-09-13T17:47:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.debug(\"missing network ID for {}\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\");\n+                return;\n+            }\n+            networkId = defaultNetworkId.byteValue();\n+        } else if (val.compareTo(BigDecimal.ZERO) < 0 || val.compareTo(BigDecimal.valueOf(255)) > 0) {\n+            logger.debug(\"invalid network ID {} for {}\", val, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid network ID\");\n+            return;\n+        } else {\n+            networkId = val.byteValue();\n+        }\n+\n+        final BigDecimal cfgUnitId = (BigDecimal) getConfig().get(Constants.CONFIGURATION_UNIT_ID);\n+        if (cfgUnitId == null) {\n+            logger.debug(\"Unit ID is not set in {}\", getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing unit ID\");\n+            return;\n+        }\n+        unitId = cfgUnitId.intValue();\n+        if (unitId < 1 || unitId > 250) {\n+            logger.debug(\"Unit ID ({}) out of range for {}\", cfgUnitId, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid unit ID\");\n+            return;\n+        }\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+        bridgeStatusChanged(bridge.getStatusInfo());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(final ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"DEV {}: Controller status is {}\", unitId, bridgeStatusInfo.getStatus());\n+\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYwMjM2Mg==", "bodyText": "If the method is removed, how would updateDeviceStatus() and pingDevice() get called when the bridge goes online again?", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487602362", "createdAt": "2020-09-14T00:56:04Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.debug(\"missing network ID for {}\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\");\n+                return;\n+            }\n+            networkId = defaultNetworkId.byteValue();\n+        } else if (val.compareTo(BigDecimal.ZERO) < 0 || val.compareTo(BigDecimal.valueOf(255)) > 0) {\n+            logger.debug(\"invalid network ID {} for {}\", val, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid network ID\");\n+            return;\n+        } else {\n+            networkId = val.byteValue();\n+        }\n+\n+        final BigDecimal cfgUnitId = (BigDecimal) getConfig().get(Constants.CONFIGURATION_UNIT_ID);\n+        if (cfgUnitId == null) {\n+            logger.debug(\"Unit ID is not set in {}\", getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing unit ID\");\n+            return;\n+        }\n+        unitId = cfgUnitId.intValue();\n+        if (unitId < 1 || unitId > 250) {\n+            logger.debug(\"Unit ID ({}) out of range for {}\", cfgUnitId, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid unit ID\");\n+            return;\n+        }\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+        bridgeStatusChanged(bridge.getStatusInfo());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(final ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"DEV {}: Controller status is {}\", unitId, bridgeStatusInfo.getStatus());\n+\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzI5MQ=="}, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwODM3MQ==", "bodyText": "I just saw, that initialize() is not invoked when the Thing status changes from OFFLINE to ONLINE again. Please ignore my comment.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487708371", "createdAt": "2020-09-14T07:35:49Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.debug(\"missing network ID for {}\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\");\n+                return;\n+            }\n+            networkId = defaultNetworkId.byteValue();\n+        } else if (val.compareTo(BigDecimal.ZERO) < 0 || val.compareTo(BigDecimal.valueOf(255)) > 0) {\n+            logger.debug(\"invalid network ID {} for {}\", val, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid network ID\");\n+            return;\n+        } else {\n+            networkId = val.byteValue();\n+        }\n+\n+        final BigDecimal cfgUnitId = (BigDecimal) getConfig().get(Constants.CONFIGURATION_UNIT_ID);\n+        if (cfgUnitId == null) {\n+            logger.debug(\"Unit ID is not set in {}\", getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing unit ID\");\n+            return;\n+        }\n+        unitId = cfgUnitId.intValue();\n+        if (unitId < 1 || unitId > 250) {\n+            logger.debug(\"Unit ID ({}) out of range for {}\", cfgUnitId, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid unit ID\");\n+            return;\n+        }\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+        bridgeStatusChanged(bridge.getStatusInfo());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(final ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"DEV {}: Controller status is {}\", unitId, bridgeStatusInfo.getStatus());\n+\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzI5MQ=="}, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkwMjM3Nw==", "bodyText": "I have verified that this method is needed. Even if I just remove the above call to updateStatus(), the devices never come back online after the bridge comes online. So it seems we cannot rely on the framework updating the status of the child things.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r489902377", "createdAt": "2020-09-17T02:43:37Z", "author": {"login": "marcusb"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.debug(\"missing network ID for {}\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\");\n+                return;\n+            }\n+            networkId = defaultNetworkId.byteValue();\n+        } else if (val.compareTo(BigDecimal.ZERO) < 0 || val.compareTo(BigDecimal.valueOf(255)) > 0) {\n+            logger.debug(\"invalid network ID {} for {}\", val, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid network ID\");\n+            return;\n+        } else {\n+            networkId = val.byteValue();\n+        }\n+\n+        final BigDecimal cfgUnitId = (BigDecimal) getConfig().get(Constants.CONFIGURATION_UNIT_ID);\n+        if (cfgUnitId == null) {\n+            logger.debug(\"Unit ID is not set in {}\", getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing unit ID\");\n+            return;\n+        }\n+        unitId = cfgUnitId.intValue();\n+        if (unitId < 1 || unitId > 250) {\n+            logger.debug(\"Unit ID ({}) out of range for {}\", cfgUnitId, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid unit ID\");\n+            return;\n+        }\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+        bridgeStatusChanged(bridge.getStatusInfo());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(final ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"DEV {}: Controller status is {}\", unitId, bridgeStatusInfo.getStatus());\n+\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzI5MQ=="}, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1OTQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0ODoxNVrOHQ-Iww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0ODoxNVrOHQ-Iww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzMxNQ==", "bodyText": "See above. Logging to info.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487557315", "createdAt": "2020-09-13T17:48:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.debug(\"missing network ID for {}\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\");\n+                return;\n+            }\n+            networkId = defaultNetworkId.byteValue();\n+        } else if (val.compareTo(BigDecimal.ZERO) < 0 || val.compareTo(BigDecimal.valueOf(255)) > 0) {\n+            logger.debug(\"invalid network ID {} for {}\", val, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid network ID\");\n+            return;\n+        } else {\n+            networkId = val.byteValue();\n+        }\n+\n+        final BigDecimal cfgUnitId = (BigDecimal) getConfig().get(Constants.CONFIGURATION_UNIT_ID);\n+        if (cfgUnitId == null) {\n+            logger.debug(\"Unit ID is not set in {}\", getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing unit ID\");\n+            return;\n+        }\n+        unitId = cfgUnitId.intValue();\n+        if (unitId < 1 || unitId > 250) {\n+            logger.debug(\"Unit ID ({}) out of range for {}\", cfgUnitId, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid unit ID\");\n+            return;\n+        }\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+        bridgeStatusChanged(bridge.getStatusInfo());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(final ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"DEV {}: Controller status is {}\", unitId, bridgeStatusInfo.getStatus());\n+\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+\n+        logger.debug(\"DEV {}: Controller is ONLINE. Starting device initialisation.\", unitId);\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"DEV {}: bridge is null!\", unitId);\n+            return;\n+        }\n+        final PIMHandler bridgeHandler = (PIMHandler) bridge.getHandler();\n+        if (bridgeHandler == null) {\n+            logger.debug(\"DEV {}: bridge handler is null!\", unitId);\n+            return;\n+        }\n+        updateDeviceStatus(bridgeHandler);\n+        pingDevice();\n+    }\n+\n+    @Override\n+    public void handleCommand(final ChannelUID channelUID, final Command cmd) {\n+        final PIMHandler pimHandler = getPIMHandler();\n+        if (pimHandler == null) {\n+            logger.info(\"DEV {}: received cmd {} but no bridge handler\", unitId, cmd);\n+            return;\n+        }\n+\n+        final MessageBuilder message;\n+        if (cmd == OnOffType.ON) {\n+            message = MessageBuilder.forCommand(ACTIVATE);\n+        } else if (cmd == OnOffType.OFF) {\n+            message = MessageBuilder.forCommand(DEACTIVATE);\n+        } else if (cmd instanceof PercentType) {\n+            message = MessageBuilder.forCommand(GOTO).args(((PercentType) cmd).byteValue());\n+        } else if (cmd == RefreshType.REFRESH) {\n+            refreshDeviceState();\n+            return;\n+        } else {\n+            logger.info(\"channel {}: unsupported cmd {}\", channelUID, cmd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI1OTY3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0ODoyOFrOHQ-I2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo0ODoyOFrOHQ-I2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzMzNg==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487557336", "createdAt": "2020-09-13T17:48:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/UPBThingHandler.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.UPBDevice;\n+import org.openhab.binding.upb.handler.UPBIoHandler.CmdStatus;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for things representing devices on an UPB network.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class UPBThingHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UPBThingHandler.class);\n+    private final @Nullable Byte defaultNetworkId;\n+\n+    protected volatile byte networkId;\n+    protected volatile int unitId;\n+\n+    public UPBThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device);\n+        this.defaultNetworkId = defaultNetworkId;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing UPB thing handler {}\", getThing().getUID());\n+\n+        final BigDecimal val = (BigDecimal) getConfig().get(Constants.CONFIGURATION_NETWORK_ID);\n+        if (val == null) {\n+            // use value from binding config\n+            final Byte defaultNetworkId = this.defaultNetworkId;\n+            if (defaultNetworkId == null) {\n+                logger.debug(\"missing network ID for {}\", getThing().getUID());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing network ID\");\n+                return;\n+            }\n+            networkId = defaultNetworkId.byteValue();\n+        } else if (val.compareTo(BigDecimal.ZERO) < 0 || val.compareTo(BigDecimal.valueOf(255)) > 0) {\n+            logger.debug(\"invalid network ID {} for {}\", val, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid network ID\");\n+            return;\n+        } else {\n+            networkId = val.byteValue();\n+        }\n+\n+        final BigDecimal cfgUnitId = (BigDecimal) getConfig().get(Constants.CONFIGURATION_UNIT_ID);\n+        if (cfgUnitId == null) {\n+            logger.debug(\"Unit ID is not set in {}\", getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing unit ID\");\n+            return;\n+        }\n+        unitId = cfgUnitId.intValue();\n+        if (unitId < 1 || unitId > 250) {\n+            logger.debug(\"Unit ID ({}) out of range for {}\", cfgUnitId, getThing().getUID());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"invalid unit ID\");\n+            return;\n+        }\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+        bridgeStatusChanged(bridge.getStatusInfo());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(final ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"DEV {}: Controller status is {}\", unitId, bridgeStatusInfo.getStatus());\n+\n+        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, Constants.OFFLINE_CTLR_OFFLINE);\n+            return;\n+        }\n+\n+        logger.debug(\"DEV {}: Controller is ONLINE. Starting device initialisation.\", unitId);\n+\n+        final Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"DEV {}: bridge is null!\", unitId);\n+            return;\n+        }\n+        final PIMHandler bridgeHandler = (PIMHandler) bridge.getHandler();\n+        if (bridgeHandler == null) {\n+            logger.debug(\"DEV {}: bridge handler is null!\", unitId);\n+            return;\n+        }\n+        updateDeviceStatus(bridgeHandler);\n+        pingDevice();\n+    }\n+\n+    @Override\n+    public void handleCommand(final ChannelUID channelUID, final Command cmd) {\n+        final PIMHandler pimHandler = getPIMHandler();\n+        if (pimHandler == null) {\n+            logger.info(\"DEV {}: received cmd {} but no bridge handler\", unitId, cmd);\n+            return;\n+        }\n+\n+        final MessageBuilder message;\n+        if (cmd == OnOffType.ON) {\n+            message = MessageBuilder.forCommand(ACTIVATE);\n+        } else if (cmd == OnOffType.OFF) {\n+            message = MessageBuilder.forCommand(DEACTIVATE);\n+        } else if (cmd instanceof PercentType) {\n+            message = MessageBuilder.forCommand(GOTO).args(((PercentType) cmd).byteValue());\n+        } else if (cmd == RefreshType.REFRESH) {\n+            refreshDeviceState();\n+            return;\n+        } else {\n+            logger.info(\"channel {}: unsupported cmd {}\", channelUID, cmd);\n+            return;\n+        }\n+\n+        message.network(networkId).destination(getUnitId());\n+        pimHandler.sendPacket(message).thenAccept(this::updateStatus);\n+    }\n+\n+    public void onMessageReceived(final UPBMessage msg) {\n+        updateStatus(ThingStatus.ONLINE);\n+        if (msg.getControlWord().isLink()) {\n+            handleLinkMessage(msg);\n+        } else {\n+            handleDirectMessage(msg);\n+        }\n+    }\n+\n+    private void handleDirectMessage(final UPBMessage msg) {\n+        final State state;\n+        switch (msg.getCommand()) {\n+            case ACTIVATE:\n+                state = OnOffType.ON;\n+                break;\n+\n+            case DEACTIVATE:\n+                state = OnOffType.OFF;\n+                break;\n+\n+            case GOTO:\n+                if (msg.getArguments().length == 0) {\n+                    logger.info(\"DEV {}: malformed GOTO cmd\", unitId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2MTE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/VirtualThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1MDoyN1rOHQ-JiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1MDoyN1rOHQ-JiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1NzUxMw==", "bodyText": "See above. Logging to info. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487557513", "createdAt": "2020-09-13T17:50:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/java/org/openhab/binding/upb/handler/VirtualThingHandler.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.upb.handler;\n+\n+import static org.openhab.binding.upb.internal.message.Command.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.upb.Constants;\n+import org.openhab.binding.upb.internal.message.MessageBuilder;\n+import org.openhab.binding.upb.internal.message.UPBMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Thing handler for a virtual device.\n+ *\n+ * @author Marcus Better - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class VirtualThingHandler extends UPBThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(VirtualThingHandler.class);\n+\n+    public VirtualThingHandler(final Thing device, final @Nullable Byte defaultNetworkId) {\n+        super(device, defaultNetworkId);\n+    }\n+\n+    @Override\n+    protected void pingDevice() {\n+        // always succeeds for virtual device\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void handleCommand(final ChannelUID channelUID, final Command cmd) {\n+        final PIMHandler pimHandler = getPIMHandler();\n+        if (pimHandler == null) {\n+            logger.info(\"DEV {}: received cmd {} but no bridge handler\", unitId, cmd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2ODMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/channels.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1OTozMlrOHQ-M1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1OTozMlrOHQ-M1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODM1Ng==", "bodyText": "There's a built in Channel type system.brightness you could use. See https://www.openhab.org/docs/developer/bindings/thing-xml.html#system-state-channel-types", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487558356", "createdAt": "2020-09-13T17:59:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,41 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"upb\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"link\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Scene</label>\n+\t\t<description>Selected scene</description>\n+\t\t<state min=\"1\" max=\"250\" step=\"1\" readOnly=\"false\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"scene-selection\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Scene Selection Events</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"ACTIVATED\">activated</option>\n+\t\t\t\t<option value=\"DEACTIVATED\">deactivated</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"linkId\" type=\"integer\" min=\"1\" max=\"250\" required=\"true\">\n+\t\t\t\t<label>Link ID</label>\n+\t\t\t\t<description>The link ID or scene number that this channel corresponds to</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"dimmer\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Brightness</label>\n+\t\t<category>DimmableLight</category>\n+\t</channel-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2OTg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/virtual.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowMToyM1rOHQ-NlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowMToyM1rOHQ-NlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODU0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tIt does not correspond to\n          \n          \n            \n            \t\t\tany physical device on the network.</description>\n          \n          \n            \n            \t\t\tIt does not correspond to any physical device on the network.</description>", "url": "https://github.com/openhab/openhab-addons/pull/6742#discussion_r487558549", "createdAt": "2020-09-13T18:01:23Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.upb/src/main/resources/ESH-INF/thing/virtual.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"upb\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"virtual\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"serial-pim\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Virtual UPB Device</label>\n+\t\t<description>This pseudo-device is useful for switching scenes and receiving scene updates.\n+\t\t\tIt does not correspond to\n+\t\t\tany physical device on the network.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f2ebb6e62145c8f284fd38a75398632c8b014ae"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1144, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}