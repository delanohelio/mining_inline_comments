{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMzI3MTM1", "number": 7518, "title": "[hue] Refactored state handling and fix polling after command", "bodyText": "Complete refactoring of state handling inside bridge handler to light and sensor handlers, for alternative to PR #7493 fix for issue #7039\nOpen points:\n\nThink polling jobs can be started at initialize of bridge handler and stopped on dispose, because while refactoring I noticed that the lists of light and senor listeners will be never empty because of registered discovery service\nIn light and sensor handler there are several checks for IDs (marked with TODOs) which I think they are obsolete now, because bridge only notifies the single handler now.\nDidn't check the tests right now", "createdAt": "2020-05-01T22:38:49Z", "url": "https://github.com/openhab/openhab-addons/pull/7518", "merged": true, "mergeCommit": {"oid": "5bec14c542665c249af7ace8a0c08206b3e8cb46"}, "closed": true, "closedAt": "2020-05-29T17:17:53Z", "author": {"login": "DerOetzi"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdTjNAAFqTQwNDUxNTczNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmFrTtAFqTQyMTEzODgzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTE1NzM2", "url": "https://github.com/openhab/openhab-addons/pull/7518#pullrequestreview-404515736", "createdAt": "2020-05-02T09:58:48Z", "commit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTo1ODo0OFrOGPiA2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxNjoxNVrOGPiHtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTA5Nw==", "bodyText": "Already done above", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939097", "createdAt": "2020-05-02T09:58:48Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n-                if (lastSensorStateCopy.containsKey(sensorId)) {\n-                    final FullSensor lastFullSensor = lastSensorStateCopy.remove(sensorId);\n-                    final Map<String, Object> lastFullSensorState = lastFullSensor.getState();\n-                    lastSensorStates.put(sensorId, sensor);\n-                    if (!lastFullSensorState.equals(sensor.getState())) {\n-                        logger.debug(\"Status update for Hue sensor '{}' detected: {}\", sensorId, sensor.getState());\n-                        notifySensorStatusListeners(sensor, STATE_CHANGED);\n-                    }\n-                } else {\n-                    lastSensorStates.put(sensorId, sensor);\n+                lastSensorStateCopy.remove(sensorId);\n+\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener == null) {\n                     logger.debug(\"Hue sensor '{}' added.\", sensorId);\n-                    notifySensorStatusListeners(sensor, STATE_ADDED);\n \n+                    if (discovery != null) {\n+                        discovery.onSensorAdded(hueBridge, sensor);\n+                    }\n+\n+                    lastSensorStates.put(sensorId, sensor);\n+                } else {\n+                    lastSensorStateCopy.remove(sensorId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTI5NA==", "bodyText": "If you clear all the states, you will loose the previous state in case it is not changed by the thing handler.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939294", "createdAt": "2020-05-02T10:00:33Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTMxMQ==", "bodyText": "If you clear all the states, you will loose the previous state in case it is not accepted by the thing handler.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939311", "createdAt": "2020-05-02T10:00:48Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n-                if (lastSensorStateCopy.containsKey(sensorId)) {\n-                    final FullSensor lastFullSensor = lastSensorStateCopy.remove(sensorId);\n-                    final Map<String, Object> lastFullSensorState = lastFullSensor.getState();\n-                    lastSensorStates.put(sensorId, sensor);\n-                    if (!lastFullSensorState.equals(sensor.getState())) {\n-                        logger.debug(\"Status update for Hue sensor '{}' detected: {}\", sensorId, sensor.getState());\n-                        notifySensorStatusListeners(sensor, STATE_CHANGED);\n-                    }\n-                } else {\n-                    lastSensorStates.put(sensorId, sensor);\n+                lastSensorStateCopy.remove(sensorId);\n+\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener == null) {\n                     logger.debug(\"Hue sensor '{}' added.\", sensorId);\n-                    notifySensorStatusListeners(sensor, STATE_ADDED);\n \n+                    if (discovery != null) {\n+                        discovery.onSensorAdded(hueBridge, sensor);\n+                    }\n+\n+                    lastSensorStates.put(sensorId, sensor);\n+                } else {\n+                    lastSensorStateCopy.remove(sensorId);\n+                    if (sensorStatusListener.onSensorStateChanged(hueBridge, sensor)) {\n+                        lastSensorStates.put(sensorId, sensor);\n+                    }\n                 }\n             }\n \n             // Check for removed sensors\n-            for (Entry<String, FullSensor> fullSensorEntry : lastSensorStateCopy.entrySet()) {\n-                lastSensorStates.remove(fullSensorEntry.getKey());\n-                logger.debug(\"Hue sensor '{}' removed.\", fullSensorEntry.getKey());\n-                for (SensorStatusListener sensorStatusListener : sensorStatusListeners) {\n+            lastSensorStateCopy.forEach((sensorId, sensor) -> {\n+                logger.debug(\"Hue sensor '{}' removed.\", sensorId);\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener != null) {\n                     try {\n-                        sensorStatusListener.onSensorRemoved(hueBridge, fullSensorEntry.getValue());\n+                        sensorStatusListener.onSensorRemoved(hueBridge, sensor);\n                     } catch (Exception e) {\n                         logger.error(\"An exception occurred while calling the Sensor Listeners\", e);\n                     }\n                 }\n-            }\n+\n+                if (discovery != null) {\n+                    discovery.onSensorRemoved(hueBridge, sensor);\n+                }\n+            });\n         }\n     };\n \n     private final Runnable lightPollingRunnable = new PollingRunnable() {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullLight> lastLightStateCopy = new HashMap<>(lastLightStates);\n+            lastLightStates.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTgzMg==", "bodyText": "Please keep the different states (added, removed and changed) for each kind of listener, without assuming what methods will be used by each listener.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939832", "createdAt": "2020-05-02T10:05:21Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTg0MA==", "bodyText": "Please keep the different states (added, removed and changed) for each kind of listener, without assuming what methods will be used by each listener.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939840", "createdAt": "2020-05-02T10:05:33Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -224,35 +230,41 @@ protected void doConnectedRun() throws IOException, ApiException {\n                 lights = hueBridge.getFullConfig().getLights();\n             }\n \n+            final LightStatusListener discovery = discoveryListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIwOA==", "bodyText": "sensorStatusListeners", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940208", "createdAt": "2020-05-02T10:09:17Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener == null) {\n+            discoveryListener = listener;\n+            startLightPolling();\n+            startSensorPolling();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean unregisterDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener != null) {\n+            discoveryListener = null;\n+            if (lightStatusListeners.isEmpty()) {\n+                stopLightPolling();\n+            }\n+\n+            if (sensorStatusListeners.isEmpty()) {\n+                stopSensorPolling();\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     @Override\n     public boolean registerLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.add(lightStatusListener);\n-        if (result && hueBridge != null) {\n-            // start light polling only if a light handler has been registered\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.put(lightId, lightStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startLightPolling();\n-            // inform the listener initially about all lights and their states\n-            for (FullLight light : lastLightStates.values()) {\n+            final FullLight light = lastLightStates.get(lightId);\n+            if (light != null) {\n                 lightStatusListener.onLightAdded(hueBridge, light);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.remove(lightStatusListener);\n-        if (result) {\n-            // stop stop light polling\n-            if (lightStatusListeners.isEmpty()) {\n-                stopLightPolling();\n-            }\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.remove(lightId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean registerSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.add(sensorStatusListener);\n-        if (result && hueBridge != null) {\n-            // start sensor polling only if a sensor handler has been registered\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.put(sensorId, sensorStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startSensorPolling();\n-            // inform the listener initially about all sensors and their states\n-            for (FullSensor sensor : lastSensorStates.values()) {\n+            final FullSensor sensor = lastSensorStates.get(sensorId);\n+            if (sensor != null) {\n                 sensorStatusListener.onSensorAdded(hueBridge, sensor);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.remove(sensorStatusListener);\n-        if (result) {\n-            // stop sensor polling\n-            if (sensorStatusListeners.isEmpty()) {\n-                stopSensorPolling();\n-            }\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.remove(sensorId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIzNw==", "bodyText": "stopSensorPolling", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940237", "createdAt": "2020-05-02T10:09:30Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener == null) {\n+            discoveryListener = listener;\n+            startLightPolling();\n+            startSensorPolling();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean unregisterDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener != null) {\n+            discoveryListener = null;\n+            if (lightStatusListeners.isEmpty()) {\n+                stopLightPolling();\n+            }\n+\n+            if (sensorStatusListeners.isEmpty()) {\n+                stopSensorPolling();\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     @Override\n     public boolean registerLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.add(lightStatusListener);\n-        if (result && hueBridge != null) {\n-            // start light polling only if a light handler has been registered\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.put(lightId, lightStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startLightPolling();\n-            // inform the listener initially about all lights and their states\n-            for (FullLight light : lastLightStates.values()) {\n+            final FullLight light = lastLightStates.get(lightId);\n+            if (light != null) {\n                 lightStatusListener.onLightAdded(hueBridge, light);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.remove(lightStatusListener);\n-        if (result) {\n-            // stop stop light polling\n-            if (lightStatusListeners.isEmpty()) {\n-                stopLightPolling();\n-            }\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.remove(lightId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean registerSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.add(sensorStatusListener);\n-        if (result && hueBridge != null) {\n-            // start sensor polling only if a sensor handler has been registered\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.put(sensorId, sensorStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startSensorPolling();\n-            // inform the listener initially about all sensors and their states\n-            for (FullSensor sensor : lastSensorStates.values()) {\n+            final FullSensor sensor = lastSensorStates.get(sensorId);\n+            if (sensor != null) {\n                 sensorStatusListener.onSensorAdded(hueBridge, sensor);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.remove(sensorStatusListener);\n-        if (result) {\n-            // stop sensor polling\n-            if (sensorStatusListeners.isEmpty()) {\n-                stopSensorPolling();\n-            }\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.remove(sensorId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 344}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDM0Nw==", "bodyText": "Light and sensor states have to be pushed to the discovery listener. This was done before your changes.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940347", "createdAt": "2020-05-02T10:10:44Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUwMA==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940500", "createdAt": "2020-05-02T10:12:18Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -440,15 +443,28 @@ private StateUpdate createBrightnessStateUpdate(int currentBrightness, int newBr\n     }\n \n     @Override\n-    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n+        // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUxOA==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940518", "createdAt": "2020-05-02T10:12:40Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUyNw==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940527", "createdAt": "2020-05-02T10:12:47Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n         }\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUzMg==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940532", "createdAt": "2020-05-02T10:12:54Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n         }\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onLightAdded(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU2Ng==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940566", "createdAt": "2020-05-02T10:13:20Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -227,15 +224,23 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n     }\n \n     @Override\n-    public void onSensorStateChanged(@Nullable HueBridge bridge, FullSensor sensor) {\n+    public boolean onSensorStateChanged(@Nullable HueBridge bridge, FullSensor sensor) {\n         logger.trace(\"onSensorStateChanged() was called\");\n \n+        // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4Mw==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940583", "createdAt": "2020-05-02T10:13:32Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n         }\n     }\n \n     @Override\n     public void onSensorAdded(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4OQ==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940589", "createdAt": "2020-05-02T10:13:36Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDYwNA==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940604", "createdAt": "2020-05-02T10:13:52Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDg1Mg==", "bodyText": "Why not lastFullSensor ?", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940852", "createdAt": "2020-05-02T10:16:15Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -212,7 +209,7 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n                 return;\n             }\n \n-            FullSensor sensor = getSensor();\n+            FullSensor sensor = hueBridge.getSensorById(sensorId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e380c428bdbfe60e421506493a7d2e2900dae75", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/2e380c428bdbfe60e421506493a7d2e2900dae75", "committedDate": "2020-05-02T15:42:40Z", "message": "[hue] Push states to discovery service on registration\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}, "afterCommit": {"oid": "38c256aa7e7d9cb8f8515327ad4a42116947b08c", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/38c256aa7e7d9cb8f8515327ad4a42116947b08c", "committedDate": "2020-05-02T17:10:31Z", "message": "[hue] Push states to discovery service on registration\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "473ecee7d1cd90c89edb793a2438aa3cbb873b0d", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/473ecee7d1cd90c89edb793a2438aa3cbb873b0d", "committedDate": "2020-05-02T18:18:19Z", "message": "[hue] Prepare for merge\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}, "afterCommit": {"oid": "8d733e82d82f00d0d1d95a9ae82f259ed0da15b0", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/8d733e82d82f00d0d1d95a9ae82f259ed0da15b0", "committedDate": "2020-05-02T18:33:57Z", "message": "[hue] Prepare for merge\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "800381be998e8afc093f9884f58a13be153d6e31", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/800381be998e8afc093f9884f58a13be153d6e31", "committedDate": "2020-05-02T21:26:25Z", "message": "[hue] bypass rewrite\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}, "afterCommit": {"oid": "d167d68027c05142a90296928d99427c478ed265", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/d167d68027c05142a90296928d99427c478ed265", "committedDate": "2020-05-03T17:55:16Z", "message": "[hue] Rebased group change\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a43d7a3a5325799226ab0e853da5716061e6ce68", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/a43d7a3a5325799226ab0e853da5716061e6ce68", "committedDate": "2020-05-04T13:18:40Z", "message": "[hue] Fixed itest Discovery Service\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}, "afterCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/64ad3e34f81d0e0c9b704e015cc79d82afd4eae7", "committedDate": "2020-05-05T11:02:13Z", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzU1NjMz", "url": "https://github.com/openhab/openhab-addons/pull/7518#pullrequestreview-408755633", "createdAt": "2020-05-10T15:28:30Z", "commit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNToyODozMFrOGTFJGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNToyODozMFrOGTFJGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA==", "bodyText": "Why not use the ThingUID instead of device is (String) as key? This way we can think about a even greater refactoring and combine all different listener interfaces into one single StatusListener interface. Is that possible?\nAnother idea which came to my mind was to improve registration of the listeners by using BridgeHandler#childHandlerInitialized method. This way the framework takes care of whole initialization process of bridge and things in the correct order and we can completely remove the logic from the Hue binding.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r422660378", "createdAt": "2020-05-10T15:28:30Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -84,24 +83,20 @@\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n+    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n \n-    private static enum StatusType {\n-        ADDED,\n-        REMOVED,\n-        GONE,\n-        CHANGED\n-    }\n+    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n+    private @Nullable HueLightDiscoveryService discoveryService;\n+    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/64ad3e34f81d0e0c9b704e015cc79d82afd4eae7", "committedDate": "2020-05-05T11:02:13Z", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}, "afterCommit": {"oid": "15824ff9ef8445909589b578f39cc62138a0e2e1", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/15824ff9ef8445909589b578f39cc62138a0e2e1", "committedDate": "2020-05-12T13:24:02Z", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15824ff9ef8445909589b578f39cc62138a0e2e1", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/15824ff9ef8445909589b578f39cc62138a0e2e1", "committedDate": "2020-05-12T13:24:02Z", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}, "afterCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/5304327dcdc6d7735f85a2ad878335489e2d223e", "committedDate": "2020-05-27T19:07:41Z", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTQyODk0", "url": "https://github.com/openhab/openhab-addons/pull/7518#pullrequestreview-419542894", "createdAt": "2020-05-27T19:27:13Z", "commit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyNzoxM1rOGbaDQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDowNToyOFrOGbbP3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MTU1NA==", "bodyText": "Just to handle potential null values\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (lastState == null || !lastState.getState().equals(group.getState())) {\n          \n          \n            \n                    if (lastState == null || !Objects.equals(lastState.getState(), group.getState())) {", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r431391554", "createdAt": "2020-05-27T19:27:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java", "diffHunk": "@@ -315,14 +317,18 @@ public void channelLinked(ChannelUID channelUID) {\n     }\n \n     @Override\n-    public void onGroupStateChanged(@Nullable HueBridge bridge, FullGroup group) {\n+    public boolean onGroupStateChanged(@Nullable HueBridge bridge, FullGroup group) {\n         logger.trace(\"onGroupStateChanged() was called for group {}\", group.getId());\n \n-        if (!group.getId().equals(groupId)) {\n-            logger.trace(\"Received state change for another handler's group ({}). Will be ignored.\", group.getId());\n-            return;\n+        final FullGroup lastState = lastFullGroup;\n+        if (lastState == null || !lastState.getState().equals(group.getState())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjgwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (lastState == null || !lastState.getState().equals(fullLight.getState())) {\n          \n          \n            \n                    if (lastState == null || !Objects.equals(lastState.getState(), fullLight.getState())) {", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r431392803", "createdAt": "2020-05-27T19:29:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -434,14 +437,33 @@ private StateUpdate createBrightnessStateUpdate(int currentBrightness, int newBr\n     }\n \n     @Override\n-    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public void setPollBypass(long bypassTime) {\n+        endBypassTime = System.currentTimeMillis() + bypassTime;\n+    }\n+\n+    @Override\n+    public void unsetPollBypass() {\n+        endBypassTime = 0L;\n+    }\n+\n+    @Override\n+    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n-        if (!fullLight.getId().equals(lightId)) {\n-            logger.trace(\"Received state change for another handler's light ({}). Will be ignored.\", fullLight.getId());\n-            return;\n+        if (System.currentTimeMillis() <= endBypassTime) {\n+            logger.debug(\"Bypass light update after command ({}).\", lightId);\n+            return false;\n         }\n \n+        final FullLight lastState = lastFullLight;\n+        if (lastState == null || !lastState.getState().equals(fullLight.getState())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMTE2Nw==", "bodyText": "orphan semicolon", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r431411167", "createdAt": "2020-05-27T20:05:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -401,21 +445,46 @@ public void updateGroupState(FullGroup group, StateUpdate stateUpdate) {\n         }\n     }\n \n-    private void handleStateUpdateException(FullLight light, StateUpdate stateUpdate, Throwable e) {\n+    private void setGroupPollBypass(FullGroup group, long bypassTime) {\n+        group.getLights().forEach((lightId) -> {\n+            final LightStatusListener listener = lightStatusListeners.get(lightId);\n+            if (listener != null) {\n+                listener.setPollBypass(bypassTime);\n+            }\n+        });\n+    }\n+\n+    private void unsetGroupPollBypass(FullGroup group) {\n+        group.getLights().forEach((lightId) -> {\n+            final LightStatusListener listener = lightStatusListeners.get(lightId);\n+            if (listener != null) {\n+                listener.unsetPollBypass();\n+                ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "originalPosition": 288}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4d90cf116d8a802e458d54a850bc1615916182e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/a4d90cf116d8a802e458d54a850bc1615916182e", "committedDate": "2020-05-29T09:21:10Z", "message": "[hue] Refactored state handling in LightHandler and fix for #7039\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa50f02b564a974fb8d4d13c23de9696feb5b41", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/6fa50f02b564a974fb8d4d13c23de9696feb5b41", "committedDate": "2020-05-29T09:21:10Z", "message": "[hue] Refactoring state handling bridge\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d91f4243027a93026d5655e4ec2b24665d209b3c", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/d91f4243027a93026d5655e4ec2b24665d209b3c", "committedDate": "2020-05-29T09:21:10Z", "message": "[hue] Refactored sensor state handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc3cc60dde1bdd468818d8cb44355118498fd49a", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/bc3cc60dde1bdd468818d8cb44355118498fd49a", "committedDate": "2020-05-29T09:21:10Z", "message": "[hue] Add sensor state to last state on discovery\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e772b17ec9a407cc90e6e9b5f20ef70eddbff65d", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/e772b17ec9a407cc90e6e9b5f20ef70eddbff65d", "committedDate": "2020-05-29T09:21:10Z", "message": "[hue] Refactored polling and state handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49e61276454144c53ff50c7a99c8e34c0a23686e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/49e61276454144c53ff50c7a99c8e34c0a23686e", "committedDate": "2020-05-29T09:21:10Z", "message": "[hue] Refactored discovery service and small fixes\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b6ea22ab1546cc0b0287b60be40342cc113a2a7", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/1b6ea22ab1546cc0b0287b60be40342cc113a2a7", "committedDate": "2020-05-29T09:21:10Z", "message": "[hue] Push states to discovery service on registration\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73a76dfc715fbb009745c2ca840a1deceeeece68", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/73a76dfc715fbb009745c2ca840a1deceeeece68", "committedDate": "2020-05-29T09:21:10Z", "message": "[hue] Small code optimization\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b984c87dec984e3c2f830f08479ce0383004eb24", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/b984c87dec984e3c2f830f08479ce0383004eb24", "committedDate": "2020-05-29T09:21:11Z", "message": "[hue] Small rename\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a566999ed636ce5b20dae244a4a4254aae6530", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/88a566999ed636ce5b20dae244a4a4254aae6530", "committedDate": "2020-05-29T09:21:11Z", "message": "[hue] Solving merge conflicts\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84c07d6cc4ebc6c2ce69ffdc393cd469f421bcea", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/84c07d6cc4ebc6c2ce69ffdc393cd469f421bcea", "committedDate": "2020-05-29T09:21:11Z", "message": "[hue] Prepare for merge\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9398cb7d87f2201329d251f56628705b9408ae1", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/e9398cb7d87f2201329d251f56628705b9408ae1", "committedDate": "2020-05-29T09:21:11Z", "message": "[hue] Small fixes after merge\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9ea2685a2aaaf03b339c7519065c4159af99b49", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/a9ea2685a2aaaf03b339c7519065c4159af99b49", "committedDate": "2020-05-29T09:21:11Z", "message": "[hue] bypass rewrite\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1290d7a45c5ba95e01679dabb7c8c9f20f4acd8c", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/1290d7a45c5ba95e01679dabb7c8c9f20f4acd8c", "committedDate": "2020-05-29T09:25:35Z", "message": "[hue] Rebased group change\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89becabccac2b79cb2cf78689090f3ca3789326b", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/89becabccac2b79cb2cf78689090f3ca3789326b", "committedDate": "2020-05-29T09:25:35Z", "message": "[hue] Revert unnecassary StateUpdate change\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cbc30bc1275100bbc5067b2c8b3d1f6613873d6", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/8cbc30bc1275100bbc5067b2c8b3d1f6613873d6", "committedDate": "2020-05-29T09:25:35Z", "message": "[hue] Group Bypass Update after command\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5fc343d86ced5017a5445680871f6fb4610a273", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/e5fc343d86ced5017a5445680871f6fb4610a273", "committedDate": "2020-05-29T09:25:35Z", "message": "[hue] Small refactoring and documentation\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "606e80b66e8a1c8f5c0e7489fd57545151afb254", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/606e80b66e8a1c8f5c0e7489fd57545151afb254", "committedDate": "2020-05-29T09:25:36Z", "message": "[hue] Fixed itest Discovery Service\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d873cae911264293c730681255214954fef246c3", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/d873cae911264293c730681255214954fef246c3", "committedDate": "2020-05-29T09:25:36Z", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74a6b04f34b6caee4d32eb2d891412f7ba190e0f", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/74a6b04f34b6caee4d32eb2d891412f7ba190e0f", "committedDate": "2020-05-29T09:25:36Z", "message": "[hue] Adressed review comments\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/5304327dcdc6d7735f85a2ad878335489e2d223e", "committedDate": "2020-05-27T19:07:41Z", "message": "[hue] rebased group async handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}, "afterCommit": {"oid": "74a6b04f34b6caee4d32eb2d891412f7ba190e0f", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/74a6b04f34b6caee4d32eb2d891412f7ba190e0f", "committedDate": "2020-05-29T09:25:36Z", "message": "[hue] Adressed review comments\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42460f28dc93209efb810b805a9ab95c90c49ae1", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/42460f28dc93209efb810b805a9ab95c90c49ae1", "committedDate": "2020-05-29T09:37:56Z", "message": "[hue] addressed mor review comments\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTM4ODM4", "url": "https://github.com/openhab/openhab-addons/pull/7518#pullrequestreview-421138838", "createdAt": "2020-05-29T17:12:02Z", "commit": {"oid": "42460f28dc93209efb810b805a9ab95c90c49ae1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 691, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}