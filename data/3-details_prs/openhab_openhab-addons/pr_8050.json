{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMzA5NzYy", "number": 8050, "title": "[automower] Initial contribution of the automower binding", "bodyText": "This new binding supports the following things:\n\nCreate a bridge using credentials for the automower api (user needs to register on the husqvarna website to get api keys,...)\nAuto discovery of automower robots registered for the specified user\nGetting information about each robot (thing) like: name, status,...\nSending commands to the robot like \"Pause\", \"Park until further notice\",...", "createdAt": "2020-06-30T21:36:56Z", "url": "https://github.com/openhab/openhab-addons/pull/8050", "merged": true, "mergeCommit": {"oid": "fcf695133a44dd1a64d1c8f53628386ad825c804"}, "closed": true, "closedAt": "2020-09-19T21:47:21Z", "author": {"login": "maxpg"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwvVTLgBqjM1MDM5MDk1NDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKhU8IgFqTQ5MjE1NzgzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a484a8f5f58e04da05c0a9157b017f4eb7c4da70", "author": {"user": {"login": "maxpg", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/a484a8f5f58e04da05c0a9157b017f4eb7c4da70", "committedDate": "2020-07-01T19:14:41Z", "message": "Added bundle to codeownders and openhab-addons/pom.xml"}, "afterCommit": {"oid": "fd66c47681acb91ed4aff4335b6641614d70591d", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/fd66c47681acb91ed4aff4335b6641614d70591d", "committedDate": "2020-07-01T19:22:00Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd66c47681acb91ed4aff4335b6641614d70591d", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/fd66c47681acb91ed4aff4335b6641614d70591d", "committedDate": "2020-07-01T19:22:00Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}, "afterCommit": {"oid": "08dace32b5c6b16f4a54993b3d988a34ce995474", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/08dace32b5c6b16f4a54993b3d988a34ce995474", "committedDate": "2020-07-01T19:25:15Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08dace32b5c6b16f4a54993b3d988a34ce995474", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/08dace32b5c6b16f4a54993b3d988a34ce995474", "committedDate": "2020-07-01T19:25:15Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}, "afterCommit": {"oid": "f3790bbf9bbfde1d07a45e45bc9681cafcf0fb09", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f3790bbf9bbfde1d07a45e45bc9681cafcf0fb09", "committedDate": "2020-07-01T19:30:41Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3790bbf9bbfde1d07a45e45bc9681cafcf0fb09", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f3790bbf9bbfde1d07a45e45bc9681cafcf0fb09", "committedDate": "2020-07-01T19:30:41Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}, "afterCommit": {"oid": "c56a179ca6e7f4639de8ac1dfa5466c04d5153d3", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/c56a179ca6e7f4639de8ac1dfa5466c04d5153d3", "committedDate": "2020-07-01T19:34:13Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e349aef52794af8b5153c6b986531cb62d6a2ac", "author": {"user": {"login": "maxpg", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/5e349aef52794af8b5153c6b986531cb62d6a2ac", "committedDate": "2020-07-02T04:41:30Z", "message": "Updated version to 2.5.7"}, "afterCommit": {"oid": "3471c08c69307eeedc32ae8f7536b91d9b65804e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/3471c08c69307eeedc32ae8f7536b91d9b65804e", "committedDate": "2020-07-02T04:45:01Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3471c08c69307eeedc32ae8f7536b91d9b65804e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/3471c08c69307eeedc32ae8f7536b91d9b65804e", "committedDate": "2020-07-02T04:45:01Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}, "afterCommit": {"oid": "004ab69282d5a029551504b628aa3afd7ae50e04", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/004ab69282d5a029551504b628aa3afd7ae50e04", "committedDate": "2020-07-02T04:45:43Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "004ab69282d5a029551504b628aa3afd7ae50e04", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/004ab69282d5a029551504b628aa3afd7ae50e04", "committedDate": "2020-07-02T04:45:43Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}, "afterCommit": {"oid": "182f7aeac4edd1da3f3e101dc6c56f86feee783c", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/182f7aeac4edd1da3f3e101dc6c56f86feee783c", "committedDate": "2020-07-02T04:54:52Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "182f7aeac4edd1da3f3e101dc6c56f86feee783c", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/182f7aeac4edd1da3f3e101dc6c56f86feee783c", "committedDate": "2020-07-02T04:54:52Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}, "afterCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/3b14293a303082555d98b6002f974458272ff139", "committedDate": "2020-07-02T05:05:57Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf68b3784a164304fc034497e802871dad9930e9", "author": {"user": {"login": "maxpg", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/bf68b3784a164304fc034497e802871dad9930e9", "committedDate": "2020-07-05T07:37:12Z", "message": "Snapshot build of the automower binding for testing"}, "afterCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/3b14293a303082555d98b6002f974458272ff139", "committedDate": "2020-07-02T05:05:57Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1OTQ4NzA2", "url": "https://github.com/openhab/openhab-addons/pull/8050#pullrequestreview-445948706", "createdAt": "2020-07-09T20:34:02Z", "commit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMDozNDowMlrOGvg0UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTo1Mzo0NVrOGvjHdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3MzkzNg==", "bodyText": "Above you mention \"single\" robot. Are there one or several robots per bridge?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452473936", "createdAt": "2020-07-09T20:34:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+bridge: The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+automower: A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3NDYxNQ==", "bodyText": "You could use backticks to highlight this as the Thing Type ID.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            bridge:\n          \n          \n            \n            `bridge`:", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452474615", "createdAt": "2020-07-09T20:35:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+bridge: The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+automower: A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically\n+\n+\n+## Thing Configuration\n+\n+bridge:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3NTI5Mw==", "bodyText": "Can you fix this?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452475293", "createdAt": "2020-07-09T20:36:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+bridge: The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+automower: A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically\n+\n+\n+## Thing Configuration\n+\n+bridge:\n+- appKey (mandatory): The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"\n+- userName (mandatory): The user name for which the application key has been issued\n+- password (mandatory): The password for the given user\n+- pollingInterval (optional): How often the available automowers should be queried in seconds. Default is 1h (3600s)\n+\n+automower:\n+- mowerId (mandatory): The Id of an automower as used by the Automower Connect Api to identify a mower. This is automatically filled when the thing is discovered\n+- pollingInterval (optional): How often the current automower state should be polled in seconds. Default is 5min (300s)\n+\n+Keep in mind that the status of the automowers should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed\n+\n+## Channels\n+\n+_Here you should provide information about available channel types, what their meaning is and how they can be used._\n+\n+_Note that it is planned to generate some part of this based on the XML files within ```src/main/resources/ESH-INF/thing``` of your binding._", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3NTk2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | battery  | Number | (readonly) A value between 0 and 100  |\n          \n          \n            \n            | battery  | Number | (readonly) The battery state of charge in percent  |", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452475969", "createdAt": "2020-07-09T20:38:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+bridge: The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+automower: A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically\n+\n+\n+## Thing Configuration\n+\n+bridge:\n+- appKey (mandatory): The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"\n+- userName (mandatory): The user name for which the application key has been issued\n+- password (mandatory): The password for the given user\n+- pollingInterval (optional): How often the available automowers should be queried in seconds. Default is 1h (3600s)\n+\n+automower:\n+- mowerId (mandatory): The Id of an automower as used by the Automower Connect Api to identify a mower. This is automatically filled when the thing is discovered\n+- pollingInterval (optional): How often the current automower state should be polled in seconds. Default is 5min (300s)\n+\n+Keep in mind that the status of the automowers should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed\n+\n+## Channels\n+\n+_Here you should provide information about available channel types, what their meaning is and how they can be used._\n+\n+_Note that it is planned to generate some part of this based on the XML files within ```src/main/resources/ESH-INF/thing``` of your binding._\n+\n+| channel  | type   | description                  |\n+|----------|--------|------------------------------|\n+| name  | String | (readonly) The name of the Automower  |\n+| mode  | String | (readonly) The current mode (MAIN_AREA, SECONDARY_AREA, HOME, DEMO, UNKNOWN)  |\n+| activity  | String | (readonly) The current activity (UNKNOWN, NOT_APPLICABLE, MOWING, GOING_HOME, CHARGING, LEAVING, PARKED_IN_CS, STOPPED_IN_GARDEN)  |\n+| state  | String | (readonly) The current state (UNKNOWN, NOT_APPLICABLE, PAUSED, IN_OPERATION, WAIT_UPDATING, WAIT_POWER_UP, RESTRICTED, OFF, STOPPED, ERROR, FATAL_ERROR, ERROR_AT_POWER_UP)  |\n+| last-update  | DateTime | (readonly) The time when the automower updated its states  |\n+| battery  | Number | (readonly) A value between 0 and 100  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3NzU1OQ==", "bodyText": "These Channels should better be Thing Actions, since they don't have any state. Then, you could use the duration as a parameter, too. See https://www.openhab.org/docs/developer/bindings/#actions-bound-to-a-thing", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452477559", "createdAt": "2020-07-09T20:41:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+bridge: The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+automower: A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically\n+\n+\n+## Thing Configuration\n+\n+bridge:\n+- appKey (mandatory): The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"\n+- userName (mandatory): The user name for which the application key has been issued\n+- password (mandatory): The password for the given user\n+- pollingInterval (optional): How often the available automowers should be queried in seconds. Default is 1h (3600s)\n+\n+automower:\n+- mowerId (mandatory): The Id of an automower as used by the Automower Connect Api to identify a mower. This is automatically filled when the thing is discovered\n+- pollingInterval (optional): How often the current automower state should be polled in seconds. Default is 5min (300s)\n+\n+Keep in mind that the status of the automowers should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed\n+\n+## Channels\n+\n+_Here you should provide information about available channel types, what their meaning is and how they can be used._\n+\n+_Note that it is planned to generate some part of this based on the XML files within ```src/main/resources/ESH-INF/thing``` of your binding._\n+\n+| channel  | type   | description                  |\n+|----------|--------|------------------------------|\n+| name  | String | (readonly) The name of the Automower  |\n+| mode  | String | (readonly) The current mode (MAIN_AREA, SECONDARY_AREA, HOME, DEMO, UNKNOWN)  |\n+| activity  | String | (readonly) The current activity (UNKNOWN, NOT_APPLICABLE, MOWING, GOING_HOME, CHARGING, LEAVING, PARKED_IN_CS, STOPPED_IN_GARDEN)  |\n+| state  | String | (readonly) The current state (UNKNOWN, NOT_APPLICABLE, PAUSED, IN_OPERATION, WAIT_UPDATING, WAIT_POWER_UP, RESTRICTED, OFF, STOPPED, ERROR, FATAL_ERROR, ERROR_AT_POWER_UP)  |\n+| last-update  | DateTime | (readonly) The time when the automower updated its states  |\n+| battery  | Number | (readonly) A value between 0 and 100  |\n+| error-code  | Number | (readonly) The current error code  |\n+| error-timestamp  | DateTime | (readonly) The timestamp when the current error occurred  |\n+| command  | String | A command that is sent to the automower. Supported commands: \"Start\", \"ResumeSchedule\", \"Pause\", \"Park\", \"ParkUntilNextSchedule\", \"ParkUntilFurtherNotice\". Be aware that \"Start\" and \"Park\" use the value of channel command-duration as the duration of the command   |\n+| command-duration  | String | The duration that should be used for commands sent to the automower. Only \"Start\" and \"Park\" commands support a duration  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3ODM1MQ==", "bodyText": "You could use a code block for the config files by adding three backticks to the start and end in a single line. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452478351", "createdAt": "2020-07-09T20:42:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+bridge: The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+automower: A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically\n+\n+\n+## Thing Configuration\n+\n+bridge:\n+- appKey (mandatory): The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"\n+- userName (mandatory): The user name for which the application key has been issued\n+- password (mandatory): The password for the given user\n+- pollingInterval (optional): How often the available automowers should be queried in seconds. Default is 1h (3600s)\n+\n+automower:\n+- mowerId (mandatory): The Id of an automower as used by the Automower Connect Api to identify a mower. This is automatically filled when the thing is discovered\n+- pollingInterval (optional): How often the current automower state should be polled in seconds. Default is 5min (300s)\n+\n+Keep in mind that the status of the automowers should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed\n+\n+## Channels\n+\n+_Here you should provide information about available channel types, what their meaning is and how they can be used._\n+\n+_Note that it is planned to generate some part of this based on the XML files within ```src/main/resources/ESH-INF/thing``` of your binding._\n+\n+| channel  | type   | description                  |\n+|----------|--------|------------------------------|\n+| name  | String | (readonly) The name of the Automower  |\n+| mode  | String | (readonly) The current mode (MAIN_AREA, SECONDARY_AREA, HOME, DEMO, UNKNOWN)  |\n+| activity  | String | (readonly) The current activity (UNKNOWN, NOT_APPLICABLE, MOWING, GOING_HOME, CHARGING, LEAVING, PARKED_IN_CS, STOPPED_IN_GARDEN)  |\n+| state  | String | (readonly) The current state (UNKNOWN, NOT_APPLICABLE, PAUSED, IN_OPERATION, WAIT_UPDATING, WAIT_POWER_UP, RESTRICTED, OFF, STOPPED, ERROR, FATAL_ERROR, ERROR_AT_POWER_UP)  |\n+| last-update  | DateTime | (readonly) The time when the automower updated its states  |\n+| battery  | Number | (readonly) A value between 0 and 100  |\n+| error-code  | Number | (readonly) The current error code  |\n+| error-timestamp  | DateTime | (readonly) The timestamp when the current error occurred  |\n+| command  | String | A command that is sent to the automower. Supported commands: \"Start\", \"ResumeSchedule\", \"Pause\", \"Park\", \"ParkUntilNextSchedule\", \"ParkUntilFurtherNotice\". Be aware that \"Start\" and \"Park\" use the value of channel command-duration as the duration of the command   |\n+| command-duration  | String | The duration that should be used for commands sent to the automower. Only \"Start\" and \"Park\" commands support a duration  |\n+| command-response  | String | The response received when the last command was sent to the automower  |\n+\n+## Full Example\n+\n+### automower.thing\n+\n+Bridge automower:bridge:mybridge [ appKey=\"<your_private_application_key>\", userName=\"<your_username>\", password=\"<your_password>\" ] {\n+\tThing automower myAutomower [ mowerId=\"<your_id_received_from_discovery>\", pollingInterval=3600] {\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ3ODgzMA==", "bodyText": "Can you add a sitemap example?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452478830", "createdAt": "2020-07-09T20:43:49Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+bridge: The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+automower: A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically\n+\n+\n+## Thing Configuration\n+\n+bridge:\n+- appKey (mandatory): The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"\n+- userName (mandatory): The user name for which the application key has been issued\n+- password (mandatory): The password for the given user\n+- pollingInterval (optional): How often the available automowers should be queried in seconds. Default is 1h (3600s)\n+\n+automower:\n+- mowerId (mandatory): The Id of an automower as used by the Automower Connect Api to identify a mower. This is automatically filled when the thing is discovered\n+- pollingInterval (optional): How often the current automower state should be polled in seconds. Default is 5min (300s)\n+\n+Keep in mind that the status of the automowers should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed\n+\n+## Channels\n+\n+_Here you should provide information about available channel types, what their meaning is and how they can be used._\n+\n+_Note that it is planned to generate some part of this based on the XML files within ```src/main/resources/ESH-INF/thing``` of your binding._\n+\n+| channel  | type   | description                  |\n+|----------|--------|------------------------------|\n+| name  | String | (readonly) The name of the Automower  |\n+| mode  | String | (readonly) The current mode (MAIN_AREA, SECONDARY_AREA, HOME, DEMO, UNKNOWN)  |\n+| activity  | String | (readonly) The current activity (UNKNOWN, NOT_APPLICABLE, MOWING, GOING_HOME, CHARGING, LEAVING, PARKED_IN_CS, STOPPED_IN_GARDEN)  |\n+| state  | String | (readonly) The current state (UNKNOWN, NOT_APPLICABLE, PAUSED, IN_OPERATION, WAIT_UPDATING, WAIT_POWER_UP, RESTRICTED, OFF, STOPPED, ERROR, FATAL_ERROR, ERROR_AT_POWER_UP)  |\n+| last-update  | DateTime | (readonly) The time when the automower updated its states  |\n+| battery  | Number | (readonly) A value between 0 and 100  |\n+| error-code  | Number | (readonly) The current error code  |\n+| error-timestamp  | DateTime | (readonly) The timestamp when the current error occurred  |\n+| command  | String | A command that is sent to the automower. Supported commands: \"Start\", \"ResumeSchedule\", \"Pause\", \"Park\", \"ParkUntilNextSchedule\", \"ParkUntilFurtherNotice\". Be aware that \"Start\" and \"Park\" use the value of channel command-duration as the duration of the command   |\n+| command-duration  | String | The duration that should be used for commands sent to the automower. Only \"Start\" and \"Park\" commands support a duration  |\n+| command-response  | String | The response received when the last command was sent to the automower  |\n+\n+## Full Example\n+\n+### automower.thing\n+\n+Bridge automower:bridge:mybridge [ appKey=\"<your_private_application_key>\", userName=\"<your_username>\", password=\"<your_password>\" ] {\n+\tThing automower myAutomower [ mowerId=\"<your_id_received_from_discovery>\", pollingInterval=3600] {\n+    }\n+}\n+\n+\n+### automower.items\n+\n+String Automower_Name               \"Name\"                   { channel=\"automower:automower:mybridge:myAutomower:name\" }\n+String Automower_Mode               \"Mode\"                   { channel=\"automower:automower:mybridge:myAutomower:mode\" }\n+String Automower_Activity           \"Activity\"         \t     { channel=\"automower:automower:mybridge:myAutomower:activity\" }\n+String Automower_State              \"State\"            \t     { channel=\"automower:automower:mybridge:myAutomower:state\" }\n+DateTime Automower_Last_Update      \"Last Update\"    \t     { channel=\"automower:automower:mybridge:myAutomower:last-update\" }\n+Number Automower_Battery            \"Battery\"                { channel=\"automower:automower:mybridge:myAutomower:battery\" }\n+Number Automower_Error_Code         \"Error Code\"             { channel=\"automower:automower:mybridge:myAutomower:error-code\" }\n+DateTime Automower_Error_Time       \"Error Time\"             { channel=\"automower:automower:mybridge:myAutomower:error-timestamp\" }\n+\n+\n+String Automower_Command            \"Command\"          \t     { channel=\"automower:automower:mybridge:myAutomower:command\" }\n+Number Automower_Command_Duration   \"Command Duration\"       { channel=\"automower:automower:mybridge:myAutomower:command-duration\" }\n+String Automower_Command_Response   \"Command Response\"       { channel=\"automower:automower:mybridge:myAutomower:command-response\" }\n+\n+### automower.sitemap\n+\n+TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4MTAxMg==", "bodyText": "You could store authResponse to a local variable and check that for null to remove the suppression.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452481012", "createdAt": "2020-07-09T20:48:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridge.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.automower.internal.rest.api.authentication.AuthenticationApi;\n+import org.openhab.binding.automower.internal.rest.api.authentication.dto.PostOAuth2Response;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.AutomowerConnectApi;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommand;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandAttributes;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+/**\n+ * The {@link AutomowerBridge} allows the communication to the various Husqvarna rest apis like the\n+ * AutomowerConnectApi or the AuthenticationApi\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridge {\n+\n+    private final String appKey;\n+    private final String userName;\n+    private final String password;\n+\n+    private @Nullable PostOAuth2Response authResponse;\n+    private final AutomowerConnectApi automowerApi;\n+    private final AuthenticationApi authApi;\n+\n+    public AutomowerBridge(String appKey, String userName, String password, HttpClient httpClient,\n+            ScheduledExecutorService scheduler) {\n+        this.appKey = appKey;\n+        this.userName = userName;\n+        this.password = password;\n+\n+        this.automowerApi = new AutomowerConnectApi(httpClient);\n+        this.authApi = new AuthenticationApi(httpClient);\n+    }\n+\n+    private PostOAuth2Response authenticate() throws AutomowerCommunicationException {\n+        PostOAuth2Response result = authResponse;\n+        if (result == null) {\n+            result = authApi.loginOAuth2(appKey, userName, password);\n+            authResponse = result;\n+        }\n+        return result;\n+    }\n+\n+    private PostOAuth2Response refreshAuthentication() throws AutomowerCommunicationException {\n+        if (authResponse == null) {\n+            throw new AutomowerCommunicationException(\"Unable to refresh authentication. Initial authentication has not been performed\");\n+        } else {\n+            @SuppressWarnings(\"null\")\n+            PostOAuth2Response result = authApi.loginWithRefreshToken(appKey, authResponse.getRefresh_token());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDI2Nw==", "bodyText": "The default mentioned in the readme is 1h.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452484267", "createdAt": "2020-07-09T20:54:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDYwNw==", "bodyText": "Inner classes don't need to be annotated with NonNullByDefault.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452484607", "createdAt": "2020-07-09T20:55:16Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTI0MQ==", "bodyText": "Logging to info should be used rarely. This could be debug.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452485241", "createdAt": "2020-07-09T20:56:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTgwNg==", "bodyText": "Do you log the stack trace by intention? Would logging the message suffice?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.warn(\"Unable to fetch automowers\", e);\n          \n          \n            \n                            logger.warn(\"Unable to fetch automowers: {}\", e.getMessage());", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452485806", "createdAt": "2020-07-09T20:57:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjA1Mw==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452486053", "createdAt": "2020-07-09T20:57:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NjExOA==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452486118", "createdAt": "2020-07-09T20:58:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4Njg3Ng==", "bodyText": "After the thing status is set to unknown, the framework starts to work with this Thing: handleCommand() and dispose() can be invoked (concurrently). You might want to move it to the end of the method.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452486876", "createdAt": "2020-07-09T20:59:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NzAyNg==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452487026", "createdAt": "2020-07-09T20:59:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NzEwMw==", "bodyText": "No harm in canceling a task that is already cancelled. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452487103", "createdAt": "2020-07-09T21:00:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4ODE3Ng==", "bodyText": "You can eliminate the compiler warning by assigning the field to a local variable. See above.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452488176", "createdAt": "2020-07-09T21:02:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = bridgeConfiguration.getPollingInterval();\n+            }\n+            automowerBridgePollingJob = scheduler.scheduleWithFixedDelay(\n+                    new AutomowerBridgePollingRunnable(this, bridge), 1, automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob != null && !automowerBridgePollingJob.isCancelled()) {\n+            automowerBridgePollingJob.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4ODY3MA==", "bodyText": "Catching Exception catches also all RuntimeExceptions. Better specify the concrete type.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452488670", "createdAt": "2020-07-09T21:03:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = bridgeConfiguration.getPollingInterval();\n+            }\n+            automowerBridgePollingJob = scheduler.scheduleWithFixedDelay(\n+                    new AutomowerBridgePollingRunnable(this, bridge), 1, automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob != null && !automowerBridgePollingJob.isCancelled()) {\n+            automowerBridgePollingJob.cancel(true);\n+            automowerBridgePollingJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+    }\n+\n+    public AutomowerBridge getAutomowerBridge() {\n+        return bridge;\n+    }\n+\n+    public Optional<MowerListResult> getAutomowers() {\n+        try {\n+            return Optional.of(bridge.getAutomowers());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4OTI4Mg==", "bodyText": "Please add the NonNullByDefault annotation.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452489282", "createdAt": "2020-07-09T21:04:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.discovery;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_AUTOMOWER;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+\n+/**\n+ * The {@link AutomowerDiscoveryService} is responsible for discovering new mowers available for the\n+ * configured app key.\n+ * \n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class AutomowerDiscoveryService extends AbstractDiscoveryService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4OTc1OA==", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (registeredMowers.isPresent()) {\n          \n          \n            \n            \n          \n          \n            \n                        for (Mower mower : registeredMowers.get().getData()) {\n          \n          \n            \n                    registeredMowers.ifPresent(mowers -> {\n          \n          \n            \n                        for (Mower mower : mowers.getData()) {", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452489758", "createdAt": "2020-07-09T21:05:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/discovery/AutomowerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.discovery;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_AUTOMOWER;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+\n+/**\n+ * The {@link AutomowerDiscoveryService} is responsible for discovering new mowers available for the\n+ * configured app key.\n+ * \n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class AutomowerDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final AutomowerBridgeHandler bridgeHandler;\n+\n+    public AutomowerDiscoveryService(AutomowerBridgeHandler bridgeHandler) {\n+        super(Collections.singleton(THING_TYPE_AUTOMOWER), 10, false);\n+        this.bridgeHandler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        Optional<MowerListResult> registeredMowers = bridgeHandler.getAutomowers();\n+        if (registeredMowers.isPresent()) {\n+\n+            for (Mower mower : registeredMowers.get().getData()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5MDk5Nw==", "bodyText": "See above and below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } catch (InterruptedException | TimeoutException | ExecutionException e) {", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452490997", "createdAt": "2020-07-09T21:08:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.authentication;\n+\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.Fields;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.authentication.dto.PostOAuth2Response;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Gives access to the Husqvarna authentication api\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AuthenticationApi extends HusqvarnaApi {\n+\n+    public AuthenticationApi(HttpClient httpClient) {\n+        super(httpClient);\n+    }\n+\n+    @Override\n+    public String getBaseUrl() {\n+        return \"https://api.authentication.husqvarnagroup.dev/v1\";\n+    }\n+\n+    public PostOAuth2Response loginOAuth2(String appKey, String username, String password)\n+            throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/oauth2/token\");\n+        request.method(HttpMethod.POST);\n+\n+        Fields fields = new Fields();\n+        fields.put(\"grant_type\", \"password\");\n+        fields.put(\"client_id\", appKey);\n+        fields.put(\"username\", username);\n+        fields.put(\"password\", password);\n+\n+        request.content(new FormContentProvider(fields));\n+\n+        ContentResponse response;\n+\n+        try {\n+            response = request.send();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5Mjk4Mw==", "bodyText": "Can you specify the SerializedName annotation and use camel case instead?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String access_token;\n          \n          \n            \n                private String accessToken;", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452492983", "createdAt": "2020-07-09T21:12:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/dto/PostOAuth2Response.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.authentication.dto;\n+\n+/**\n+ * Authentication response\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class PostOAuth2Response {\n+    private String access_token;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NTA1Ng==", "bodyText": "It's good practice to append the unit to the field name e.g. commandDurationMin", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452495056", "createdAt": "2020-07-09T21:16:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NjMwNQ==", "bodyText": "Can you put the static final fields together?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452496305", "createdAt": "2020-07-09T21:19:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NjQ1Mg==", "bodyText": "See above.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452496452", "createdAt": "2020-07-09T21:19:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NzExMQ==", "bodyText": "The default mentioned in the readme is 5min.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452497111", "createdAt": "2020-07-09T21:21:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5ODQ1Mw==", "bodyText": "Is this used anywhere?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452498453", "createdAt": "2020-07-09T21:24:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDAxNw==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452500017", "createdAt": "2020-07-09T21:27:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDcwOA==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452500708", "createdAt": "2020-07-09T21:28:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDgwMQ==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452500801", "createdAt": "2020-07-09T21:29:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMDkyMQ==", "bodyText": "See above and below: Canceling and null check", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452500921", "createdAt": "2020-07-09T21:29:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMTkwMg==", "bodyText": "mower cannot be null at this point. You could remove the null check.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n          \n          \n            \n                            && mower.getAttributes().getMetadata().isConnected()) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n          \n          \n            \n                            && mower.getAttributes().getMetadata().isConnected();", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452501902", "createdAt": "2020-07-09T21:31:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMjM5NA==", "bodyText": "getAutomowerBridge() can return null. Better add a null check. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452502394", "createdAt": "2020-07-09T21:32:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMjY5MQ==", "bodyText": "See above: logging stack trace", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452502691", "createdAt": "2020-07-09T21:33:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);\n+\n+                if (isValidResult(mower)) {\n+                    initializeProperties(mower);\n+\n+                    updateChannelState(mower);\n+\n+                    if (isConnected(mower)) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-mower-not-connected-to-cloud\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/comm-error-query-mower-failed\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}\", id, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzU1MA==", "bodyText": "Is there a reason why you feed the result back into a Channel instead of logging it?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452503550", "createdAt": "2020-07-09T21:35:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);\n+\n+                if (isValidResult(mower)) {\n+                    initializeProperties(mower);\n+\n+                    updateChannelState(mower);\n+\n+                    if (isConnected(mower)) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-mower-not-connected-to-cloud\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/comm-error-query-mower-failed\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}\", id, e);\n+            }\n+        }\n+    }\n+\n+    private synchronized void sendAutomowerCommand(Command command) {\n+        String id = automowerId.get();\n+        try {\n+            if (getAutomowerBridge().sendAutomowerCommand(id, command.toString(), commandDuration.get())) {\n+                updateState(CHANNEL_COMMAND_RESPONSE,\n+                        new StringType(\"Successfully sent command \" + command.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzY4NQ==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452503685", "createdAt": "2020-07-09T21:35:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);\n+\n+                if (isValidResult(mower)) {\n+                    initializeProperties(mower);\n+\n+                    updateChannelState(mower);\n+\n+                    if (isConnected(mower)) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-mower-not-connected-to-cloud\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/comm-error-query-mower-failed\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}\", id, e);\n+            }\n+        }\n+    }\n+\n+    private synchronized void sendAutomowerCommand(Command command) {\n+        String id = automowerId.get();\n+        try {\n+            if (getAutomowerBridge().sendAutomowerCommand(id, command.toString(), commandDuration.get())) {\n+                updateState(CHANNEL_COMMAND_RESPONSE,\n+                        new StringType(\"Successfully sent command \" + command.toString()));\n+            } else {\n+                updateState(CHANNEL_COMMAND_RESPONSE, new StringType(\"Unable to send command \" + command.toString()));\n+            }\n+        } catch (AutomowerCommunicationException e) {\n+            updateState(CHANNEL_COMMAND_RESPONSE,\n+                    new StringType(\"Unable to send command \" + command.toString() + \": \" + e.getMessage()));\n+\n+            logger.warn(\"Unable to send command to automower: {}\", id, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwMzc5MQ==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452503791", "createdAt": "2020-07-09T21:35:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = config.getPollingInterval();\n+            }\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null && !automowerPollingJob.isCancelled()) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        if (mower != null && mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTime > maxQueryFrequencyNanos) {\n+            lastQueryTime = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                Mower mower = getAutomowerBridge().getAutomowerStatus(id);\n+\n+                if (isValidResult(mower)) {\n+                    initializeProperties(mower);\n+\n+                    updateChannelState(mower);\n+\n+                    if (isConnected(mower)) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-mower-not-connected-to-cloud\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/comm-error-query-mower-failed\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}\", id, e);\n+            }\n+        }\n+    }\n+\n+    private synchronized void sendAutomowerCommand(Command command) {\n+        String id = automowerId.get();\n+        try {\n+            if (getAutomowerBridge().sendAutomowerCommand(id, command.toString(), commandDuration.get())) {\n+                updateState(CHANNEL_COMMAND_RESPONSE,\n+                        new StringType(\"Successfully sent command \" + command.toString()));\n+            } else {\n+                updateState(CHANNEL_COMMAND_RESPONSE, new StringType(\"Unable to send command \" + command.toString()));\n+            }\n+        } catch (AutomowerCommunicationException e) {\n+            updateState(CHANNEL_COMMAND_RESPONSE,\n+                    new StringType(\"Unable to send command \" + command.toString() + \": \" + e.getMessage()));\n+\n+            logger.warn(\"Unable to send command to automower: {}\", id, e);\n+        }\n+\n+        updateAutomowerState();\n+    }\n+\n+    private void updateChannelState(Mower mower) {\n+        if (isValidResult(mower)) {\n+            /*\n+             * if (info.getError() != null) {\n+             * updateErrorInfo(info.getError());\n+             * refreshLastErrorInfo();\n+             * } else {\n+             * clearErrorInfo();\n+             * }\n+             */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNDU1Nw==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452504557", "createdAt": "2020-07-09T21:37:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/i18n/automower.properties", "diffHunk": "@@ -0,0 +1,46 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNDczMg==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452504732", "createdAt": "2020-07-09T21:37:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/i18n/automower.properties", "diffHunk": "@@ -0,0 +1,46 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content\n+# binding\n+binding.automower.name = Automower\n+binding.automower.description = This binding allows to interact with Husqvarna Automower robots\n+\n+\n+# automower parameters    \n+thing-type.config.automower.automower.mowerId.label = ID\n+thing-type.config.automower.automower.mowerName.label = Name\n+thing-type.config.automower.automower.mowerModel.label = Model\n+thing-type.config.automower.automower.mowerId.mowerSerialNumber = Serial Number\n+thing-type.config.automower.automower.connected.label = Connected\n+thing-type.config.automower.automower.timestamp.label = Last State Update\n+thing-type.config.automower.automower.batteryPct.label = Battery Percentage\n+\n+\n+# thing type config description\n+thing-type.config.automower.sample.config1.label = <Your localized config parameter label>\n+thing-type.config.automower.sample.config1.description = <Your localized config parameter description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNTc5Ng==", "bodyText": "You might want to add the default value.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452505796", "createdAt": "2020-07-09T21:40:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/i18n/automower_de.properties", "diffHunk": "@@ -0,0 +1,28 @@\n+binding.automower.name = Automower Binding\n+binding.automower.description = Das Automower Binding erlaubt die Interaktion mit Husqvarna Automower M\ufffdhrobotern mit Automower Connect Unterst\ufffdtzung.\n+\n+thing-type.automower.bridge.label = Automower Connect Bridge\n+thing-type.automower.bridge.description = Erlaubt die Kommunikation mit der Husqvarna Automower Connect API\n+\n+thing-type.config.automower.bridge.appKey.label = Application Key\n+thing-type.config.automower.bridge.appKey.description = Der Application Key wird f\ufffdr die Kommunication mit der Automower Connect API ben\ufffdtigt. Um diesen zu erhalten muss eine Anwendung auf der Husqvarna Website registriert werden. Diese Anwendung muss mit der \"Authentication API\" und der \"Automower Connect API\" verkn\ufffdpft werden.\n+\n+thing-type.config.automower.bridge.userName.label = Benutzername\n+thing-type.config.automower.bridge.userName.description = Der Benutzername f\ufffdr den der Application Key ausgestellt wurde.\n+\n+thing-type.config.automower.bridge.password.label = Passwort\n+thing-type.config.automower.bridge.password.description = Das Passwort f\ufffdr den angegebenen Benutzer.\n+\n+thing-type.config.automower.bridge.pollingInterval.label = Polling Intervall\n+thing-type.config.automower.bridge.pollingInterval.description = Das Intervall in dem die Verbindung mit dem Automower Connect API \ufffdberpr\ufffdft werden soll", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNjE2MQ==", "bodyText": "The unit is defined via the XML file and displayed separately in the UI. So, it can be removed here.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452506161", "createdAt": "2020-07-09T21:41:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/i18n/automower_de.properties", "diffHunk": "@@ -0,0 +1,28 @@\n+binding.automower.name = Automower Binding\n+binding.automower.description = Das Automower Binding erlaubt die Interaktion mit Husqvarna Automower M\ufffdhrobotern mit Automower Connect Unterst\ufffdtzung.\n+\n+thing-type.automower.bridge.label = Automower Connect Bridge\n+thing-type.automower.bridge.description = Erlaubt die Kommunikation mit der Husqvarna Automower Connect API\n+\n+thing-type.config.automower.bridge.appKey.label = Application Key\n+thing-type.config.automower.bridge.appKey.description = Der Application Key wird f\ufffdr die Kommunication mit der Automower Connect API ben\ufffdtigt. Um diesen zu erhalten muss eine Anwendung auf der Husqvarna Website registriert werden. Diese Anwendung muss mit der \"Authentication API\" und der \"Automower Connect API\" verkn\ufffdpft werden.\n+\n+thing-type.config.automower.bridge.userName.label = Benutzername\n+thing-type.config.automower.bridge.userName.description = Der Benutzername f\ufffdr den der Application Key ausgestellt wurde.\n+\n+thing-type.config.automower.bridge.password.label = Passwort\n+thing-type.config.automower.bridge.password.description = Das Passwort f\ufffdr den angegebenen Benutzer.\n+\n+thing-type.config.automower.bridge.pollingInterval.label = Polling Intervall\n+thing-type.config.automower.bridge.pollingInterval.description = Das Intervall in dem die Verbindung mit dem Automower Connect API \ufffdberpr\ufffdft werden soll\n+\n+\n+thing-type.automower.automower.label = Automower\n+thing-type.automower.automower.description = Ein Husqvarna Automower\n+\n+thing-type.config.automower.automower.mowerId.label = Automower Id\n+thing-type.config.automower.automower.mowerId.label = Die interne ID des Automowers die von der Automower Connect API benutzt wird um einen Automower zu identifizieren\n+\n+thing-type.config.automower.automower.pollingInterval.label = Polling Intervall\n+thing-type.config.automower.automower.pollingInterval.label = Das Intervall in dem der Status des Automowers abgefragt werden soll (in Sekunden). Der Standardwert ist 300s (5min) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNjM2Nw==", "bodyText": "Words in labels should be capitalized. See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452506367", "createdAt": "2020-07-09T21:42:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,193 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"automower\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Automower Bridge Thing Type -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>Automower Connect Bridge</label>\n+\t\t<description>The bridge to communicate with the Automower Connect API</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"appKey\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Application Key</label>\n+\t\t\t\t<description>The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User name</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNjY1NA==", "bodyText": "You could add <context>password</context> to hide the password in the UI.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452506654", "createdAt": "2020-07-09T21:42:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,193 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"automower\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Automower Bridge Thing Type -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>Automower Connect Bridge</label>\n+\t\t<description>The bridge to communicate with the Automower Connect API</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"appKey\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Application Key</label>\n+\t\t\t\t<description>The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User name</label>\n+\t\t\t\t<description>The user name for which the application key has been issued</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNjg1Ng==", "bodyText": "You might want to add the unit, min/max values and <default>3600</default>.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\">\n          \n          \n            \n            \t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\" unit=\"s\" min=\"10\">", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452506856", "createdAt": "2020-07-09T21:43:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,193 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"automower\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Automower Bridge Thing Type -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>Automower Connect Bridge</label>\n+\t\t<description>The bridge to communicate with the Automower Connect API</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"appKey\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Application Key</label>\n+\t\t\t\t<description>The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User name</label>\n+\t\t\t\t<description>The user name for which the application key has been issued</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>The password for the given user</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNzM1OA==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452507358", "createdAt": "2020-07-09T21:44:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,193 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"automower\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Automower Bridge Thing Type -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>Automower Connect Bridge</label>\n+\t\t<description>The bridge to communicate with the Automower Connect API</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"appKey\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Application Key</label>\n+\t\t\t\t<description>The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User name</label>\n+\t\t\t\t<description>The user name for which the application key has been issued</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>The password for the given user</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Polling Interval</label>\n+\t\t\t\t<description>How often the available automowers should be queried in seconds. Default is 1h (3600s)</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</bridge-type>\n+\n+\t<!-- Automower Thing Type -->\n+\t<thing-type id=\"automower\">\n+\t\t<label>Automower</label>\n+\t\t<description>An automatic lawn mower</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"name\" typeId=\"nameType\" />\n+\t\t\t<channel id=\"mode\" typeId=\"modeType\" />\n+\t\t\t<channel id=\"activity\" typeId=\"activityType\" />\n+\t\t\t<channel id=\"state\" typeId=\"stateType\" />\n+\t\t\t<channel id=\"last-update\" typeId=\"lastUpdateType\" />\n+\t\t\t<channel id=\"battery\" typeId=\"batteryType\" />\n+\t\t\t<channel id=\"error-code\" typeId=\"errorCodeType\" />\n+\t\t\t<channel id=\"error-timestamp\" typeId=\"errorTimestampType\" />\n+\n+\t\t\t<channel id=\"command\" typeId=\"commandType\" />\n+\t\t\t<channel id=\"command-duration\" typeId=\"commandDurationType\" />\n+\t\t\t<channel id=\"command-response\" typeId=\"commandResponseType\" />\n+\t\t</channels>\n+\n+\t\t<properties>\n+\t\t\t<property name=\"mowerId\">N/A</property>\n+\t\t\t<property name=\"mowerName\">N/A</property>\n+\t\t\t<property name=\"mowerModel\">N/A</property>\n+\t\t\t<property name=\"mowerSerialNumber\">N/A</property>\n+\t\t</properties>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"mowerId\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Automower Id</label>\n+\t\t\t\t<description>The Id of an automower as used by the Automower Connect Api to identify a mower</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwODEzMw==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452508133", "createdAt": "2020-07-09T21:45:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,193 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"automower\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Automower Bridge Thing Type -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>Automower Connect Bridge</label>\n+\t\t<description>The bridge to communicate with the Automower Connect API</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"appKey\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Application Key</label>\n+\t\t\t\t<description>The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User name</label>\n+\t\t\t\t<description>The user name for which the application key has been issued</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>The password for the given user</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Polling Interval</label>\n+\t\t\t\t<description>How often the available automowers should be queried in seconds. Default is 1h (3600s)</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</bridge-type>\n+\n+\t<!-- Automower Thing Type -->\n+\t<thing-type id=\"automower\">\n+\t\t<label>Automower</label>\n+\t\t<description>An automatic lawn mower</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"name\" typeId=\"nameType\" />\n+\t\t\t<channel id=\"mode\" typeId=\"modeType\" />\n+\t\t\t<channel id=\"activity\" typeId=\"activityType\" />\n+\t\t\t<channel id=\"state\" typeId=\"stateType\" />\n+\t\t\t<channel id=\"last-update\" typeId=\"lastUpdateType\" />\n+\t\t\t<channel id=\"battery\" typeId=\"batteryType\" />\n+\t\t\t<channel id=\"error-code\" typeId=\"errorCodeType\" />\n+\t\t\t<channel id=\"error-timestamp\" typeId=\"errorTimestampType\" />\n+\n+\t\t\t<channel id=\"command\" typeId=\"commandType\" />\n+\t\t\t<channel id=\"command-duration\" typeId=\"commandDurationType\" />\n+\t\t\t<channel id=\"command-response\" typeId=\"commandResponseType\" />\n+\t\t</channels>\n+\n+\t\t<properties>\n+\t\t\t<property name=\"mowerId\">N/A</property>\n+\t\t\t<property name=\"mowerName\">N/A</property>\n+\t\t\t<property name=\"mowerModel\">N/A</property>\n+\t\t\t<property name=\"mowerSerialNumber\">N/A</property>\n+\t\t</properties>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"mowerId\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Automower Id</label>\n+\t\t\t\t<description>The Id of an automower as used by the Automower Connect Api to identify a mower</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Polling Interval</label>\n+\t\t\t\t<description>How often the current automower state should be polled in seconds. Default is 5min (300s)</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<!-- Sample Channel Type -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452511375", "createdAt": "2020-07-09T21:53:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTYwNQ==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r452511605", "createdAt": "2020-07-09T21:53:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTEzNzE0", "url": "https://github.com/openhab/openhab-addons/pull/8050#pullrequestreview-451113714", "createdAt": "2020-07-19T09:12:22Z", "commit": {"oid": "84942d411a6d7df8f5935f6b9a9e594205c173ab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwOToxMjoyMlrOGzt9JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwOTo0OTo0MFrOGzuK5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4MzQ5Mw==", "bodyText": "These could be trigger Channels, since they don't have a state, but send events when an error raised.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r456883493", "createdAt": "2020-07-19T09:12:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,123 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+`bridge:` The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+\n+`automower:` A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically\n+\n+\n+## Thing Configuration\n+\n+`bridge:`\n+\n+- appKey (mandatory): The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"\n+- userName (mandatory): The user name for which the application key has been issued\n+- password (mandatory): The password for the given user\n+- pollingInterval (optional): How often the bridge state should be queried in seconds. Default is 1h (3600s)\n+\n+Keep in mind that the status of the bridge should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed. With the default value of 1h this would mean ~720 requests per month for the bridge state\n+\n+`automower:`\n+\n+- mowerId (mandatory): The Id of an automower as used by the Automower Connect Api to identify a mower. This is automatically filled when the thing is discovered\n+- pollingInterval (optional): How often the current automower state should be polled in seconds. Default is 10min (600s)\n+\n+Keep in mind that the status of the automowers should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed. With the default value of 10min this would mean ~4300 requests per month per automower\n+\n+## Channels\n+\n+\n+| channel  | type   | description                  |\n+|----------|--------|------------------------------|\n+| name  | String | (readonly) The name of the Automower  |\n+| mode  | String | (readonly) The current mode (MAIN_AREA, SECONDARY_AREA, HOME, DEMO, UNKNOWN)  |\n+| activity  | String | (readonly) The current activity (UNKNOWN, NOT_APPLICABLE, MOWING, GOING_HOME, CHARGING, LEAVING, PARKED_IN_CS, STOPPED_IN_GARDEN)  |\n+| state  | String | (readonly) The current state (UNKNOWN, NOT_APPLICABLE, PAUSED, IN_OPERATION, WAIT_UPDATING, WAIT_POWER_UP, RESTRICTED, OFF, STOPPED, ERROR, FATAL_ERROR, ERROR_AT_POWER_UP)  |\n+| last-update  | DateTime | (readonly) The time when the automower updated its states  |\n+| battery  | Number | (readonly) The battery state of charge in percent  |\n+| error-code  | Number | (readonly) The current error code  |\n+| error-timestamp  | DateTime | (readonly) The timestamp when the current error occurred  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84942d411a6d7df8f5935f6b9a9e594205c173ab"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NDA5Nw==", "bodyText": "Can you add the workaround for the bug discussed in #8116?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r456884097", "createdAt": "2020-07-19T09:18:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/AutomowerActions.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.actions;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.automower.internal.things.AutomowerCommand;\n+import org.openhab.binding.automower.internal.things.AutomowerHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@ThingActionsScope(name = \"automower\")\n+@NonNullByDefault\n+public class AutomowerActions implements ThingActions {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerActions.class);\n+    private @Nullable AutomowerHandler handler;\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        this.handler = (AutomowerHandler) handler;\n+    }\n+\n+    @Override\n+    public @Nullable AutomowerHandler getThingHandler() {\n+        return handler;\n+    }\n+\n+    @RuleAction(label = \"@text/action-start-label\", description = \"@text/action-start-desc\")\n+    public void start(\n+            @ActionInput(name = \"duration\", label = \"@text/action-input-duration-label\", description = \"@text/action-input-duration-desc\") int durationMin) {\n+        AutomowerHandler automowerHandler = handler;\n+        if (automowerHandler == null) {\n+            logger.warn(\"Automower Action service ThingHandler is null!\");\n+        } else {\n+            automowerHandler.sendAutomowerCommand(AutomowerCommand.START, durationMin);\n+        }\n+    }\n+\n+    public static void start(@Nullable ThingActions actions, int durationMin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84942d411a6d7df8f5935f6b9a9e594205c173ab"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NjcyOA==", "bodyText": "Logging to info should be used rarely. This could be debug.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r456886728", "createdAt": "2020-07-19T09:46:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ=="}, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg4NzAxMw==", "bodyText": "This will also catch RuntimeExceptions. Better specify the concrete execeptions. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        } catch (InterruptedException | TimeoutException | ExecutionException e) {", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r456887013", "createdAt": "2020-07-19T09:49:40Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect;\n+\n+import org.apache.commons.httpclient.HttpStatus;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Allows access to the AutomowerConnectApi\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerConnectApi extends HusqvarnaApi {\n+\n+    public AutomowerConnectApi(HttpClient httpClient) {\n+        super(httpClient);\n+    }\n+\n+    @Override\n+    public String getBaseUrl() {\n+        return \"https://api.amc.husqvarna.dev/v1\";\n+    }\n+\n+    public MowerListResult getMowers(String appKey, String token) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers\");\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84942d411a6d7df8f5935f6b9a9e594205c173ab"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzYzNDg2", "url": "https://github.com/openhab/openhab-addons/pull/8050#pullrequestreview-457763486", "createdAt": "2020-07-29T18:02:54Z", "commit": {"oid": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowMjo1NFrOG5D-OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODoyNDoyNlrOG5EvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NzA5Ng==", "bodyText": "Can you make this @Nullable?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462487096", "createdAt": "2020-07-29T18:02:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NzU1NA==", "bodyText": "Can you change it or comment on this?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462487554", "createdAt": "2020-07-29T18:03:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(2);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    @NonNullByDefault\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.info(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers\", e);\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing automower bridge handler.\");\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN);\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                // bridge.setTimeout(5000);\n+\n+                startAutomowerBridgePolling(bridge);\n+            }\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        if (automowerBridgePollingJob == null || automowerBridgePollingJob.isCancelled()) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTM3NQ=="}, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4ODY2Mw==", "bodyText": "Do you log the stack trace by intention?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462488663", "createdAt": "2020-07-29T18:05:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+\n+    private @NonNullByDefault({}) AutomowerBridge bridge;\n+    private @NonNullByDefault({}) AutomowerBridgeConfiguration bridgeConfiguration;\n+\n+    private final HttpClient httpClient;\n+\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);\n+            bridge = null;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        bridgeConfiguration = getConfigAs(AutomowerBridgeConfiguration.class);\n+\n+        final String appKey = bridgeConfiguration.getAppKey();\n+        final String userName = bridgeConfiguration.getUserName();\n+        final String password = bridgeConfiguration.getPassword();\n+        if (appKey == null || appKey.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-app-key\");\n+        } else if (userName == null || userName.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-username\");\n+        } else if (password == null || password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"@text/conf-error-no-password\");\n+        } else {\n+            if (bridge == null) {\n+                bridge = new AutomowerBridge(appKey, userName, password, httpClient, scheduler);\n+                startAutomowerBridgePolling(bridge);\n+            }\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void startAutomowerBridgePolling(AutomowerBridge bridge) {\n+        ScheduledFuture<?> currentPollingJob = automowerBridgePollingJob;\n+        if (currentPollingJob == null) {\n+            if (bridgeConfiguration.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);\n+            } else {\n+                automowerPollingIntervalS = bridgeConfiguration.getPollingInterval();\n+            }\n+            automowerBridgePollingJob = scheduler.scheduleWithFixedDelay(\n+                    new AutomowerBridgePollingRunnable(this, bridge), 1, automowerPollingIntervalS, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerBridgePolling(AutomowerBridge bridge) {\n+        ScheduledFuture<?> currentPollingJob = automowerBridgePollingJob;\n+        if (currentPollingJob != null) {\n+            currentPollingJob.cancel(true);\n+            automowerBridgePollingJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    public AutomowerBridge getAutomowerBridge() {\n+        return bridge;\n+    }\n+\n+    public Optional<MowerListResult> getAutomowers() {\n+        try {\n+            return Optional.of(bridge.getAutomowers());\n+        } catch (AutomowerCommunicationException e) {\n+            logger.debug(\"Bridge cannot get list of available automowers\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTcwNw==", "bodyText": "Did you encounter a case where the HTTP client is not running?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462489707", "createdAt": "2020-07-29T18:07:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Base class for the Husqvarna apis\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class HusqvarnaApi {\n+\n+    private final HttpClient httpClient;\n+    protected final Gson gson;\n+\n+    protected HusqvarnaApi(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+\n+        GsonBuilder gsonBuilder = new GsonBuilder();\n+        gson = gsonBuilder.create();\n+    }\n+\n+    protected abstract String getBaseUrl();\n+\n+    protected HttpClient getHttpClient() throws AutomowerCommunicationException {\n+        if (!httpClient.isRunning()) {\n+            try {\n+                httpClient.start();\n+            } catch (Exception e) {\n+                throw new AutomowerCommunicationException(\"Exception while trying to start http client\", e);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MTY2NA==", "bodyText": "Can you change it? E.g. lastQueryTimeMs", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462491664", "createdAt": "2020-07-29T18:10:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ5NjQ1Mg=="}, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5Mjc5OA==", "bodyText": "Can you change it? Logging to info should be used rarely. This could be debug.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462492798", "createdAt": "2020-07-29T18:12:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.text.DateFormat;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    private static final String NO_ID = \"NO_ID\";\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+\n+    private @Nullable AutomowerConfiguration config;\n+\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private AtomicLong commandDuration = new AtomicLong(60); // 60min default\n+    private long lastQueryTime = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long automowerPollingIntervalS = TimeUnit.HOURS.toSeconds(1);\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    DateFormat df = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG,\n+            new Locale(System.getProperty(\"user.language\")));\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+\n+        }\n+\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        } else {\n+            sendCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void sendCommand(ChannelUID channelUID, Command command) {\n+        switch (channelUID.getId()) {\n+            case CHANNEL_COMMAND_DURATION:\n+                if (command instanceof DecimalType) {\n+                    commandDuration.set(((DecimalType) command).longValue());\n+                    updateState(CHANNEL_COMMAND_DURATION, new DecimalType(commandDuration.get()));\n+                }\n+                break;\n+\n+            case CHANNEL_COMMAND:\n+                if (command instanceof StringType) {\n+                    sendAutomowerCommand(command);\n+                } else {\n+                    logger.debug(\"Received command of type {} but StringType is expected.\",\n+                            command.getClass().getName());\n+                }\n+                break;\n+\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            config = getConfigAs(AutomowerConfiguration.class);\n+\n+            final String configMowerId = config.getMowerId();\n+            if (configMowerId != null) {\n+                automowerId.set(configMowerId);\n+\n+                // bridgeHandler.registerLightStatusListener(this);\n+                startAutomowerPolling();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            }\n+\n+        } else {\n+\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Handler disposed.\");\n+        if (!automowerId.get().equals(NO_ID)) {\n+            // bridgeHandler.unregisterLightStatusListener(this);\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling() {\n+        if (automowerPollingJob == null || automowerPollingJob.isCancelled()) {\n+            if (config.getPollingInterval() < 1) {\n+                logger.info(\"No valid polling interval specified. Using default value: {}s\", automowerPollingIntervalS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMTYwNQ=="}, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5Mzg4NQ==", "bodyText": "This field is never read.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462493885", "createdAt": "2020-07-29T18:14:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+\n+    private @Nullable AutomowerConfiguration config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5NTU2OA==", "bodyText": "Are you going to remove it?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462495568", "createdAt": "2020-07-29T18:17:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/i18n/automower.properties", "diffHunk": "@@ -0,0 +1,46 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content\n+# binding\n+binding.automower.name = Automower\n+binding.automower.description = This binding allows to interact with Husqvarna Automower robots\n+\n+\n+# automower parameters    \n+thing-type.config.automower.automower.mowerId.label = ID\n+thing-type.config.automower.automower.mowerName.label = Name\n+thing-type.config.automower.automower.mowerModel.label = Model\n+thing-type.config.automower.automower.mowerId.mowerSerialNumber = Serial Number\n+thing-type.config.automower.automower.connected.label = Connected\n+thing-type.config.automower.automower.timestamp.label = Last State Update\n+thing-type.config.automower.automower.batteryPct.label = Battery Percentage\n+\n+\n+# thing type config description\n+thing-type.config.automower.sample.config1.label = <Your localized config parameter label>\n+thing-type.config.automower.sample.config1.description = <Your localized config parameter description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNDczMg=="}, "originalCommit": {"oid": "3b14293a303082555d98b6002f974458272ff139"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5ODYxNw==", "bodyText": "You could reference the bridge type here, to eliminate the checkstyle warning.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462498617", "createdAt": "2020-07-29T18:22:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,163 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"automower\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Automower Bridge Thing Type -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>Automower Connect Bridge</label>\n+\t\t<description>The bridge to communicate with the Automower Connect API</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"appKey\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Application Key</label>\n+\t\t\t\t<description>The Application Key is required to communication with the Automower Connect Api. It can be obtained by\n+\t\t\t\t\tregistering an Application on the Husqvarna Website. This application also needs to be connected to the\n+\t\t\t\t\t\"Authentication API\" and the \"Automower Connect API\"</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>The user name for which the application key has been issued</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>Password</context>\n+\t\t\t\t<description>The password for the given user</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Polling Interval</label>\n+\t\t\t\t<default>3600</default>\n+\t\t\t\t<description>How often the available automowers should be queried in seconds</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</bridge-type>\n+\n+\t<!-- Automower Thing Type -->\n+\t<thing-type id=\"automower\">\n+\t\t<label>Automower</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTY4NA==", "bodyText": "Please add the @NonnullByDefault annotation.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462499684", "createdAt": "2020-07-29T18:24:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/actions/IAutomowerActions.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.actions;\n+\n+/**\n+ * Actions that can be executed for an automower\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public interface IAutomowerActions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a87ebbfcc7f4c38923f43aaac0d554112d65bd5"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTE3MTE3", "url": "https://github.com/openhab/openhab-addons/pull/8050#pullrequestreview-457917117", "createdAt": "2020-07-29T21:38:51Z", "commit": {"oid": "dfe079491133704addb653e14296cbd797d2bc72"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTozODo1MVrOG5LLRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTo0MzowMFrOG5LSzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNTEyNQ==", "bodyText": "This throws declaration can be removed, then.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462605125", "createdAt": "2020-07-29T21:38:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/HusqvarnaApi.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Base class for the Husqvarna apis\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class HusqvarnaApi {\n+\n+    private final HttpClient httpClient;\n+    protected final Gson gson;\n+\n+    protected HusqvarnaApi(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+\n+        GsonBuilder gsonBuilder = new GsonBuilder();\n+        gson = gsonBuilder.create();\n+    }\n+\n+    protected abstract String getBaseUrl();\n+\n+    protected HttpClient getHttpClient() throws AutomowerCommunicationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe079491133704addb653e14296cbd797d2bc72"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNTkyMQ==", "bodyText": "Can you handle the serializable compiler warnings in the exception classes?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462605921", "createdAt": "2020-07-29T21:40:23Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/exceptions/AutomowerCommunicationException.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.exceptions;\n+\n+import java.io.IOException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * An exception that occurred while communicating with an automower or an automower bridge\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerCommunicationException extends IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe079491133704addb653e14296cbd797d2bc72"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwNzA1Mg==", "bodyText": "bridge should be stored to a local variable before doing the null check. That fixes the compiler error.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r462607052", "createdAt": "2020-07-29T21:43:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+\n+    private @Nullable AutomowerBridge bridge;\n+    private final HttpClient httpClient;\n+\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (bridge != null) {\n+            stopAutomowerBridgePolling(bridge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe079491133704addb653e14296cbd797d2bc72"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTcwODU5", "url": "https://github.com/openhab/openhab-addons/pull/8050#pullrequestreview-459570859", "createdAt": "2020-08-01T10:59:55Z", "commit": {"oid": "412933faee7635dcd90bcaff827e3203ddcdc9a1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMDo1OTo1NlrOG6dT-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMDo1OTo1NlrOG6dT-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MDg0Mg==", "bodyText": "You might want to set bridge to null.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r463950842", "createdAt": "2020-08-01T10:59:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -86,9 +86,10 @@ public AutomowerBridgeHandler(Bridge bridge, HttpClient httpClient) {\n \n     @Override\n     public void dispose() {\n-        if (bridge != null) {\n-            stopAutomowerBridgePolling(bridge);\n-            bridge = null;\n+        AutomowerBridge currentBridge = bridge;\n+        if (currentBridge != null) {\n+            stopAutomowerBridgePolling(currentBridge);\n+            currentBridge = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412933faee7635dcd90bcaff827e3203ddcdc9a1"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjA1OTI5", "url": "https://github.com/openhab/openhab-addons/pull/8050#pullrequestreview-459605929", "createdAt": "2020-08-01T21:51:07Z", "commit": {"oid": "737bf26d6e3f8bcf0c270ab21f9543864a7af615"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "737bf26d6e3f8bcf0c270ab21f9543864a7af615", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/737bf26d6e3f8bcf0c270ab21f9543864a7af615", "committedDate": "2020-08-01T21:34:05Z", "message": "Fixed resetting of bridge and fixed compiler error\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}, "afterCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "committedDate": "2020-08-04T18:58:00Z", "message": "Rebase to latest 2.5.x (2.5.8) + Fixed new build warnings (usage of some apache http constant file + conversion from epoch millis to DateTimeType)\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDI1MDM1", "url": "https://github.com/openhab/openhab-addons/pull/8050#pullrequestreview-479025035", "createdAt": "2020-08-31T22:59:31Z", "commit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjo1OTozMVrOHKMrRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzoyMzowNFrOHKNizg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NTQ5Mg==", "bodyText": "Please put each sentence on its own line.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Keep in mind that the status of the bridge should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed. With the default value of 1h this would mean ~720 requests per month for the bridge state\n          \n          \n            \n            Keep in mind that the status of the bridge should not be queried too often.\n          \n          \n            \n            According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed.\n          \n          \n            \n            With the default value of 1h this would mean ~720 requests per month for the bridge state\n          \n      \n    \n    \n  \n\nPlease make the same changes to this Readme elsewhere where appropriate.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480455492", "createdAt": "2020-08-31T22:59:31Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,123 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+`bridge:` The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+\n+`automower:` A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically\n+\n+\n+## Thing Configuration\n+\n+`bridge:`\n+\n+- appKey (mandatory): The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"\n+- userName (mandatory): The user name for which the application key has been issued\n+- password (mandatory): The password for the given user\n+- pollingInterval (optional): How often the bridge state should be queried in seconds. Default is 1h (3600s)\n+\n+Keep in mind that the status of the bridge should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed. With the default value of 1h this would mean ~720 requests per month for the bridge state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NTY5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>2.5.8-SNAPSHOT</version>\n          \n          \n            \n                <version>2.5.9-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480455693", "createdAt": "2020-08-31T22:59:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.automower/pom.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>2.5.8-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2MjU5NQ==", "bodyText": "Is this class used?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480462595", "createdAt": "2020-08-31T23:10:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/dto/Calendar.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect.dto;\n+\n+/**\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class Calendar {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2Mzc2Nw==", "bodyText": "Same question.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480463767", "createdAt": "2020-08-31T23:12:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/dto/Planner.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect.dto;\n+\n+/**\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public class Planner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2NTE3NA==", "bodyText": "Instead of a nested class, could you just make AutomowerPollingRunnable a lambda instead?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480465174", "createdAt": "2020-08-31T23:14:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.MINUTES.toSeconds(10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private long lastQueryTimeMs = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(AutomowerActions.class);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            AutomowerConfiguration currentConfig = getConfigAs(AutomowerConfiguration.class);\n+            final String configMowerId = currentConfig.getMowerId();\n+            final Integer pollingIntervalS = currentConfig.getPollingInterval();\n+\n+            if (configMowerId == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            } else if (pollingIntervalS != null && pollingIntervalS < 1) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-invalid-polling-interval\");\n+            } else {\n+                automowerId.set(configMowerId);\n+                startAutomowerPolling(pollingIntervalS);\n+            }\n+\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (!automowerId.get().equals(NO_ID)) {\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling(@Nullable Integer pollingIntervalS) {\n+        if (automowerPollingJob == null) {\n+            final long pollingIntervalToUse = pollingIntervalS == null ? DEFAULT_POLLING_INTERVAL_S : pollingIntervalS;\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2ODgxNQ==", "bodyText": "If this number is supposed to be a percentage then you should change this a Number:Dimensionless and then use QuantityType and percentage units.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480468815", "createdAt": "2020-08-31T23:20:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"automower\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Automower Bridge Thing Type -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>Automower Connect Bridge</label>\n+\t\t<description>The bridge to communicate with the Automower Connect API</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"appKey\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Application Key</label>\n+\t\t\t\t<description>The Application Key is required to communication with the Automower Connect Api. It can be obtained by\n+\t\t\t\t\tregistering an Application on the Husqvarna Website. This application also needs to be connected to the\n+\t\t\t\t\t\"Authentication API\" and the \"Automower Connect API\"</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>The user name for which the application key has been issued</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>Password</context>\n+\t\t\t\t<description>The password for the given user</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Polling Interval</label>\n+\t\t\t\t<default>3600</default>\n+\t\t\t\t<description>How often the available automowers should be queried in seconds</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</bridge-type>\n+\n+\t<!-- Automower Thing Type -->\n+\t<thing-type id=\"automower\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bridge\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Automower</label>\n+\t\t<description>An automatic lawn mower</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"name\" typeId=\"nameType\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"modeType\"/>\n+\t\t\t<channel id=\"activity\" typeId=\"activityType\"/>\n+\t\t\t<channel id=\"state\" typeId=\"stateType\"/>\n+\t\t\t<channel id=\"last-update\" typeId=\"lastUpdateType\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"batteryType\"/>\n+\t\t\t<channel id=\"error-code\" typeId=\"errorCodeType\"/>\n+\t\t\t<channel id=\"error-timestamp\" typeId=\"errorTimestampType\"/>\n+\t\t</channels>\n+\n+\t\t<properties>\n+\t\t\t<property name=\"mowerId\">N/A</property>\n+\t\t\t<property name=\"mowerName\">N/A</property>\n+\t\t\t<property name=\"mowerModel\">N/A</property>\n+\t\t\t<property name=\"mowerSerialNumber\">N/A</property>\n+\t\t</properties>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"mowerId\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Automower Id</label>\n+\t\t\t\t<description>The Id of an automower as used by the Automower Connect Api to identify a mower</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Polling Interval</label>\n+\t\t\t\t<default>600</default>\n+\t\t\t\t<description>How often the current automower state should be polled in seconds</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"nameType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Automower Name</label>\n+\t\t<description>The channel providing the automower name</description>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"modeType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Mode</label>\n+\t\t<description>The current mode</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"MAIN_AREA\">Main Area</option>\n+\t\t\t\t<option value=\"SECONDARY_AREA\">Secondary Area</option>\n+\t\t\t\t<option value=\"HOME\">Home</option>\n+\t\t\t\t<option value=\"DEMO\">Demo</option>\n+\t\t\t\t<option value=\"UNKNOWN\">Unknown</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"activityType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Activity</label>\n+\t\t<description>The current activity</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"UNKNOWN\">Unknown</option>\n+\t\t\t\t<option value=\"NOT_APPLICABLE\">N/A</option>\n+\t\t\t\t<option value=\"MOWING\">Mowing</option>\n+\t\t\t\t<option value=\"GOING_HOME\">Returning to charging station</option>\n+\t\t\t\t<option value=\"CHARGING\">Charging</option>\n+\t\t\t\t<option value=\"LEAVING\">Leaving charging station</option>\n+\t\t\t\t<option value=\"PARKED_IN_CS\">Parked in charging station</option>\n+\t\t\t\t<option value=\"STOPPED_IN_GARDEN\">Stopped in garden</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"stateType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>State</label>\n+\t\t<description>The current state</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"UNKNOWN\">Unknown</option>\n+\t\t\t\t<option value=\"NOT_APPLICABLE\">N/A</option>\n+\t\t\t\t<option value=\"PAUSED\">Paused by user</option>\n+\t\t\t\t<option value=\"IN_OPERATION\">Working</option>\n+\t\t\t\t<option value=\"WAIT_UPDATING\">Downloading new firmware</option>\n+\t\t\t\t<option value=\"WAIT_POWER_UP\">Booting mower</option>\n+\t\t\t\t<option value=\"RESTRICTED\">Waiting</option>\n+\t\t\t\t<option value=\"OFF\">Off</option>\n+\t\t\t\t<option value=\"STOPPED\">Stopped- Manual intervention required</option>\n+\t\t\t\t<option value=\"ERROR\">Error</option>\n+\t\t\t\t<option value=\"FATAL_ERROR\">Fatal error</option>\n+\t\t\t\t<option value=\"ERROR_AT_POWER_UP\">Boot error</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"lastUpdateType\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Last Update</label>\n+\t\t<description></description>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"batteryType\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2OTcxMA==", "bodyText": "This is only updated during initialization, why do you need it to be atomic?", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480469710", "createdAt": "2020-08-31T23:23:04Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.MINUTES.toSeconds(10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NTA0MDIy", "url": "https://github.com/openhab/openhab-addons/pull/8050#pullrequestreview-475504022", "createdAt": "2020-08-26T13:45:48Z", "commit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzo0NzowN1rOHHM5ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNzozNzoyOVrOHKpWsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxMzQzOA==", "bodyText": "Can you format the table. You can use: http://markdowntable.com/", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477313438", "createdAt": "2020-08-26T13:47:07Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/README.md", "diffHunk": "@@ -0,0 +1,123 @@\n+# Automower Binding\n+\n+This binding communicates to the Husqvarna Automower Connect API in order to send commands and query the state of Husqvarna Automower robots.\n+\n+## Supported Things\n+\n+`bridge:` The bridge needs to be configured with credentials and an application key that allows communicating with the Automower Connect Api\n+\n+`automower:` A single Husqvarna Automower robot\n+\n+Basically all Husqvarna Automower models with \"Automower Connect\" support should be supported. It was tested only with a Husqvarna Automower 450X\n+\n+\n+## Discovery\n+\n+Once the bridge is created and configured, registered automowers will be discovered automatically\n+\n+\n+## Thing Configuration\n+\n+`bridge:`\n+\n+- appKey (mandatory): The Application Key is required to communication with the Automower Connect Api. It can be obtained by registering an Application on the Husqvarna Website. This application also needs to be connected to the \"Authentication API\" and the \"Automower Connect API\"\n+- userName (mandatory): The user name for which the application key has been issued\n+- password (mandatory): The password for the given user\n+- pollingInterval (optional): How often the bridge state should be queried in seconds. Default is 1h (3600s)\n+\n+Keep in mind that the status of the bridge should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed. With the default value of 1h this would mean ~720 requests per month for the bridge state\n+\n+`automower:`\n+\n+- mowerId (mandatory): The Id of an automower as used by the Automower Connect Api to identify a mower. This is automatically filled when the thing is discovered\n+- pollingInterval (optional): How often the current automower state should be polled in seconds. Default is 10min (600s)\n+\n+Keep in mind that the status of the automowers should not be queried too often. According to the Husqvarna documentation not more than 10000 requests per month and application key are allowed. With the default value of 10min this would mean ~4300 requests per month per automower\n+\n+## Channels\n+\n+\n+| channel  | type   | description                  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNTAwNg==", "bodyText": "Indentation.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477315006", "createdAt": "2020-08-26T13:49:05Z", "author": {"login": "Hilbrand"}, "path": "bundles/pom.xml", "diffHunk": "@@ -48,6 +48,7 @@\n     <module>org.openhab.binding.astro</module>\n     <module>org.openhab.binding.atlona</module>\n     <module>org.openhab.binding.autelis</module>\n+\t<module>org.openhab.binding.automower</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNTU3MA==", "bodyText": "Either add description text or leave out empty elements.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477315570", "createdAt": "2020-08-26T13:49:44Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"automower\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Automower Bridge Thing Type -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>Automower Connect Bridge</label>\n+\t\t<description>The bridge to communicate with the Automower Connect API</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"appKey\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Application Key</label>\n+\t\t\t\t<description>The Application Key is required to communication with the Automower Connect Api. It can be obtained by\n+\t\t\t\t\tregistering an Application on the Husqvarna Website. This application also needs to be connected to the\n+\t\t\t\t\t\"Authentication API\" and the \"Automower Connect API\"</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>The user name for which the application key has been issued</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>Password</context>\n+\t\t\t\t<description>The password for the given user</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Polling Interval</label>\n+\t\t\t\t<default>3600</default>\n+\t\t\t\t<description>How often the available automowers should be queried in seconds</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</bridge-type>\n+\n+\t<!-- Automower Thing Type -->\n+\t<thing-type id=\"automower\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bridge\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Automower</label>\n+\t\t<description>An automatic lawn mower</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"name\" typeId=\"nameType\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"modeType\"/>\n+\t\t\t<channel id=\"activity\" typeId=\"activityType\"/>\n+\t\t\t<channel id=\"state\" typeId=\"stateType\"/>\n+\t\t\t<channel id=\"last-update\" typeId=\"lastUpdateType\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"batteryType\"/>\n+\t\t\t<channel id=\"error-code\" typeId=\"errorCodeType\"/>\n+\t\t\t<channel id=\"error-timestamp\" typeId=\"errorTimestampType\"/>\n+\t\t</channels>\n+\n+\t\t<properties>\n+\t\t\t<property name=\"mowerId\">N/A</property>\n+\t\t\t<property name=\"mowerName\">N/A</property>\n+\t\t\t<property name=\"mowerModel\">N/A</property>\n+\t\t\t<property name=\"mowerSerialNumber\">N/A</property>\n+\t\t</properties>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"mowerId\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Automower Id</label>\n+\t\t\t\t<description>The Id of an automower as used by the Automower Connect Api to identify a mower</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Polling Interval</label>\n+\t\t\t\t<default>600</default>\n+\t\t\t\t<description>How often the current automower state should be polled in seconds</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"nameType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Automower Name</label>\n+\t\t<description>The channel providing the automower name</description>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"modeType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Mode</label>\n+\t\t<description>The current mode</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"MAIN_AREA\">Main Area</option>\n+\t\t\t\t<option value=\"SECONDARY_AREA\">Secondary Area</option>\n+\t\t\t\t<option value=\"HOME\">Home</option>\n+\t\t\t\t<option value=\"DEMO\">Demo</option>\n+\t\t\t\t<option value=\"UNKNOWN\">Unknown</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"activityType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Activity</label>\n+\t\t<description>The current activity</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"UNKNOWN\">Unknown</option>\n+\t\t\t\t<option value=\"NOT_APPLICABLE\">N/A</option>\n+\t\t\t\t<option value=\"MOWING\">Mowing</option>\n+\t\t\t\t<option value=\"GOING_HOME\">Returning to charging station</option>\n+\t\t\t\t<option value=\"CHARGING\">Charging</option>\n+\t\t\t\t<option value=\"LEAVING\">Leaving charging station</option>\n+\t\t\t\t<option value=\"PARKED_IN_CS\">Parked in charging station</option>\n+\t\t\t\t<option value=\"STOPPED_IN_GARDEN\">Stopped in garden</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"stateType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>State</label>\n+\t\t<description>The current state</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"UNKNOWN\">Unknown</option>\n+\t\t\t\t<option value=\"NOT_APPLICABLE\">N/A</option>\n+\t\t\t\t<option value=\"PAUSED\">Paused by user</option>\n+\t\t\t\t<option value=\"IN_OPERATION\">Working</option>\n+\t\t\t\t<option value=\"WAIT_UPDATING\">Downloading new firmware</option>\n+\t\t\t\t<option value=\"WAIT_POWER_UP\">Booting mower</option>\n+\t\t\t\t<option value=\"RESTRICTED\">Waiting</option>\n+\t\t\t\t<option value=\"OFF\">Off</option>\n+\t\t\t\t<option value=\"STOPPED\">Stopped- Manual intervention required</option>\n+\t\t\t\t<option value=\"ERROR\">Error</option>\n+\t\t\t\t<option value=\"FATAL_ERROR\">Fatal error</option>\n+\t\t\t\t<option value=\"ERROR_AT_POWER_UP\">Boot error</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"lastUpdateType\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Last Update</label>\n+\t\t<description></description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNzAzNQ==", "bodyText": "command param duplicated in JavaDoc", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477317035", "createdAt": "2020-08-26T13:51:40Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.MINUTES.toSeconds(10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private long lastQueryTimeMs = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(AutomowerActions.class);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            AutomowerConfiguration currentConfig = getConfigAs(AutomowerConfiguration.class);\n+            final String configMowerId = currentConfig.getMowerId();\n+            final Integer pollingIntervalS = currentConfig.getPollingInterval();\n+\n+            if (configMowerId == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            } else if (pollingIntervalS != null && pollingIntervalS < 1) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-invalid-polling-interval\");\n+            } else {\n+                automowerId.set(configMowerId);\n+                startAutomowerPolling(pollingIntervalS);\n+            }\n+\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (!automowerId.get().equals(NO_ID)) {\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling(@Nullable Integer pollingIntervalS) {\n+        if (automowerPollingJob == null) {\n+            final long pollingIntervalToUse = pollingIntervalS == null ? DEFAULT_POLLING_INTERVAL_S : pollingIntervalS;\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    pollingIntervalToUse, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected();\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTimeMs > maxQueryFrequencyNanos) {\n+            lastQueryTimeMs = System.nanoTime();\n+            String id = automowerId.get();\n+            try {\n+                AutomowerBridge automowerBridge = getAutomowerBridge();\n+                if (automowerBridge != null) {\n+                    Mower mower = automowerBridge.getAutomowerStatus(id);\n+\n+                    if (isValidResult(mower)) {\n+                        initializeProperties(mower);\n+\n+                        updateChannelState(mower);\n+\n+                        if (isConnected(mower)) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        } else {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"@text/comm-error-mower-not-connected-to-cloud\");\n+                        }\n+                    } else {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"@text/comm-error-query-mower-failed\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"@text/conf-error-no-bridge\");\n+                }\n+            } catch (AutomowerCommunicationException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mower-failed\");\n+                logger.warn(\"Unable to query automower status for:  {}. Error: {}\", id, e.getMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Sends a command to the automower with the default duration of 60min\n+     *\n+     * @param command The command that should be sent. Valid values are: \"Start\", \"ResumeSchedule\", \"Pause\", \"Park\",\n+     *            \"ParkUntilNextSchedule\", \"ParkUntilFurtherNotice\"\n+     *\n+     * @param command", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMDMzNw==", "bodyText": "We have a class org.eclipse.smarthome.core.cache.ExpiringCache that is generally used for these kind of use cases. So you don't have to do the time calculation yourself.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477320337", "createdAt": "2020-08-26T13:55:41Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.*;\n+\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.automower.internal.AutomowerBindingConstants;\n+import org.openhab.binding.automower.internal.actions.AutomowerActions;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridge;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.Mower;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerHandler extends BaseThingHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_AUTOMOWER);\n+    private static final String NO_ID = \"NO_ID\";\n+    private static final long DEFAULT_COMMAND_DURATION_MIN = 60;\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.MINUTES.toSeconds(10);\n+\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerHandler.class);\n+    private AtomicReference<String> automowerId = new AtomicReference<String>(NO_ID);\n+    private long lastQueryTimeMs = 0L;\n+\n+    private @Nullable ScheduledFuture<?> automowerPollingJob;\n+    private long maxQueryFrequencyNanos = TimeUnit.MINUTES.toNanos(1);\n+\n+    public AutomowerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    class AutomowerPollingRunnable implements Runnable {\n+\n+        @Override\n+        public void run() {\n+            Bridge bridge = getBridge();\n+            if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+                updateAutomowerState();\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshChannels(channelUID);\n+        }\n+    }\n+\n+    private void refreshChannels(ChannelUID channelUID) {\n+        updateAutomowerState();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(AutomowerActions.class);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            AutomowerConfiguration currentConfig = getConfigAs(AutomowerConfiguration.class);\n+            final String configMowerId = currentConfig.getMowerId();\n+            final Integer pollingIntervalS = currentConfig.getPollingInterval();\n+\n+            if (configMowerId == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-no-mower-id\");\n+            } else if (pollingIntervalS != null && pollingIntervalS < 1) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"@text/conf-error-invalid-polling-interval\");\n+            } else {\n+                automowerId.set(configMowerId);\n+                startAutomowerPolling(pollingIntervalS);\n+            }\n+\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED);\n+        }\n+    }\n+\n+    @Nullable\n+    private AutomowerBridge getAutomowerBridge() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            ThingHandler handler = bridge.getHandler();\n+            if (handler instanceof AutomowerBridgeHandler) {\n+                AutomowerBridgeHandler bridgeHandler = (AutomowerBridgeHandler) handler;\n+                return bridgeHandler.getAutomowerBridge();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (!automowerId.get().equals(NO_ID)) {\n+            stopAutomowerPolling();\n+            automowerId.set(NO_ID);\n+        }\n+    }\n+\n+    private void startAutomowerPolling(@Nullable Integer pollingIntervalS) {\n+        if (automowerPollingJob == null) {\n+            final long pollingIntervalToUse = pollingIntervalS == null ? DEFAULT_POLLING_INTERVAL_S : pollingIntervalS;\n+            automowerPollingJob = scheduler.scheduleWithFixedDelay(new AutomowerPollingRunnable(), 1,\n+                    pollingIntervalToUse, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void stopAutomowerPolling() {\n+        if (automowerPollingJob != null) {\n+            automowerPollingJob.cancel(true);\n+            automowerPollingJob = null;\n+        }\n+    }\n+\n+    private boolean isValidResult(Mower mower) {\n+        return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getBattery() != null && mower.getAttributes().getSystem() != null;\n+    }\n+\n+    private boolean isConnected(Mower mower) {\n+        return mower.getAttributes() != null && mower.getAttributes().getMetadata() != null\n+                && mower.getAttributes().getMetadata().isConnected();\n+    }\n+\n+    private synchronized void updateAutomowerState() {\n+        if (System.nanoTime() - lastQueryTimeMs > maxQueryFrequencyNanos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMDgxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public String mowerId;\n          \n          \n            \n                public @Nullable String mowerId;", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477320815", "createdAt": "2020-08-26T13:56:17Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerConfiguration.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link AutomowerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerConfiguration {\n+\n+    @Nullable\n+    public String mowerId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMyMTA3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                private String command;\n          \n          \n            \n            \n          \n          \n            \n                private final String command;", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r477321075", "createdAt": "2020-08-26T13:56:36Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/things/AutomowerCommand.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.things;\n+\n+/**\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+public enum AutomowerCommand {\n+\n+    START(\"Start\"),\n+    RESUME_SCHEDULE(\"ResumeSchedule\"),\n+    PAUSE(\"Pause\"),\n+    PARK(\"Park\"),\n+    PARK_UNTIL_NEXT_SCHEDULE(\"ParkUntilNextSchedule\"),\n+    PARK_UNTIL_FURTHER_NOTICE(\"ParkUntilFurtherNotice\");\n+\n+    private String command;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3Mjc5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .flatMap(i -> i).collect(Collectors.toSet()));\n          \n          \n            \n                        .flatMap(Function.identity()).collect(Collectors.toSet()));", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r478272797", "createdAt": "2020-08-27T09:11:49Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal;\n+\n+import java.util.Collections;\n+import java.util.Hashtable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.discovery.AutomowerDiscoveryService;\n+import org.openhab.binding.automower.internal.things.AutomowerHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link AutomowerHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.automower\", service = ThingHandlerFactory.class)\n+public class AutomowerHandlerFactory extends BaseThingHandlerFactory {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(AutomowerBridgeHandler.SUPPORTED_THING_TYPES.stream(), AutomowerHandler.SUPPORTED_THING_TYPES.stream())\n+            .flatMap(i -> i).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MzcwMg==", "bodyText": "Please inject the factory in the constructor:\n@Activate\npublic AutomowerHandlerFactory(@Reference HttpClientFactory httpClientFactory) {\n...\n\nThis allows you to make httpClient also a final field.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r478273702", "createdAt": "2020-08-27T09:13:26Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal;\n+\n+import java.util.Collections;\n+import java.util.Hashtable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.discovery.AutomowerDiscoveryService;\n+import org.openhab.binding.automower.internal.things.AutomowerHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link AutomowerHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.automower\", service = ThingHandlerFactory.class)\n+public class AutomowerHandlerFactory extends BaseThingHandlerFactory {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(AutomowerBridgeHandler.SUPPORTED_THING_TYPES.stream(), AutomowerHandler.SUPPORTED_THING_TYPES.stream())\n+            .flatMap(i -> i).collect(Collectors.toSet()));\n+\n+    protected @NonNullByDefault({}) HttpClient httpClient;\n+    private @Nullable ServiceRegistration<?> automowerDiscoveryServiceRegistration;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        if (AutomowerBridgeHandler.SUPPORTED_THING_TYPES.contains(thing.getThingTypeUID())) {\n+            AutomowerBridgeHandler handler = new AutomowerBridgeHandler((Bridge) thing, httpClient);\n+            registerAutomowerDiscoveryService(handler);\n+            return handler;\n+        }\n+\n+        if (AutomowerHandler.SUPPORTED_THING_TYPES.contains(thing.getThingTypeUID())) {\n+            return new AutomowerHandler(thing);\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof AutomowerBridgeHandler) {\n+            if (automowerDiscoveryServiceRegistration != null) {\n+                // remove discovery service, if bridge handler is removed\n+                automowerDiscoveryServiceRegistration.unregister();\n+            }\n+        }\n+    }\n+\n+    private void registerAutomowerDiscoveryService(AutomowerBridgeHandler handler) {\n+        AutomowerDiscoveryService discoveryService = new AutomowerDiscoveryService(handler);\n+        this.automowerDiscoveryServiceRegistration = bundleContext.registerService(DiscoveryService.class.getName(),\n+                discoveryService, new Hashtable<>());\n+    }\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        this.httpClient = httpClientFactory.getCommonHttpClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkwNTYwMQ==", "bodyText": "Please implement the registration of the discovery service as a ThingHandlerService. I've a pr on the documentation that explains how to implement it. This is a link to the preview documentation: https://deploy-preview-1262--openhab-docs-preview.netlify.app/docs/developer/bindings/#discovery-that-is-bound-to-a-thing", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480905601", "createdAt": "2020-09-01T07:13:29Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/AutomowerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal;\n+\n+import java.util.Collections;\n+import java.util.Hashtable;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.automower.internal.bridge.AutomowerBridgeHandler;\n+import org.openhab.binding.automower.internal.discovery.AutomowerDiscoveryService;\n+import org.openhab.binding.automower.internal.things.AutomowerHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link AutomowerHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.automower\", service = ThingHandlerFactory.class)\n+public class AutomowerHandlerFactory extends BaseThingHandlerFactory {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(AutomowerBridgeHandler.SUPPORTED_THING_TYPES.stream(), AutomowerHandler.SUPPORTED_THING_TYPES.stream())\n+            .flatMap(i -> i).collect(Collectors.toSet()));\n+\n+    protected @NonNullByDefault({}) HttpClient httpClient;\n+    private @Nullable ServiceRegistration<?> automowerDiscoveryServiceRegistration;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        if (AutomowerBridgeHandler.SUPPORTED_THING_TYPES.contains(thing.getThingTypeUID())) {\n+            AutomowerBridgeHandler handler = new AutomowerBridgeHandler((Bridge) thing, httpClient);\n+            registerAutomowerDiscoveryService(handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxNTQzMg==", "bodyText": "You can put this in a separate method (except for the content call here) and then call that method from the 3 other methods to make the code simpler.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480915432", "createdAt": "2020-09-01T07:25:38Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Allows access to the AutomowerConnectApi\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerConnectApi extends HusqvarnaApi {\n+\n+    public AutomowerConnectApi(HttpClient httpClient) {\n+        super(httpClient);\n+    }\n+\n+    @Override\n+    public String getBaseUrl() {\n+        return \"https://api.amc.husqvarna.dev/v1\";\n+    }\n+\n+    public MowerListResult getMowers(String appKey, String token) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers\");\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        return parseResponse(response, MowerListResult.class);\n+    }\n+\n+    public MowerResult getMower(String appKey, String token, String mowerId) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers/\" + mowerId);\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        return parseResponse(response, MowerResult.class);\n+    }\n+\n+    public void sendCommand(String appKey, String token, String id, MowerCommandRequest command)\n+            throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers/\" + id + \"/actions\");\n+        request.method(HttpMethod.POST);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        request.content(new StringContentProvider(gson.toJson(command)));\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        checkForError(response, response.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxNjMyMg==", "bodyText": "You need to add a timeout to the request. This can be set in the method I described in the other comment so you don't have to set it only in 1 place.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480916322", "createdAt": "2020-09-01T07:26:43Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/automowerconnect/AutomowerConnectApi.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.automowerconnect;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerCommandRequest;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Allows access to the AutomowerConnectApi\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerConnectApi extends HusqvarnaApi {\n+\n+    public AutomowerConnectApi(HttpClient httpClient) {\n+        super(httpClient);\n+    }\n+\n+    @Override\n+    public String getBaseUrl() {\n+        return \"https://api.amc.husqvarna.dev/v1\";\n+    }\n+\n+    public MowerListResult getMowers(String appKey, String token) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers\");\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        return parseResponse(response, MowerListResult.class);\n+    }\n+\n+    public MowerResult getMower(String appKey, String token, String mowerId) throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers/\" + mowerId);\n+        request.method(HttpMethod.GET);\n+\n+        request.header(\"Authorization-Provider\", \"husqvarna\");\n+        request.header(\"Authorization\", \"Bearer \" + token);\n+        request.header(\"X-Api-Key\", appKey);\n+        request.header(\"Content-Type\", \"application/vnd.api+json\");\n+\n+        ContentResponse response;\n+        try {\n+            response = request.send();\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            throw new AutomowerCommunicationException(e);\n+        }\n+\n+        return parseResponse(response, MowerResult.class);\n+    }\n+\n+    public void sendCommand(String appKey, String token, String id, MowerCommandRequest command)\n+            throws AutomowerCommunicationException {\n+        final Request request = getHttpClient().newRequest(getBaseUrl() + \"/mowers/\" + id + \"/actions\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkxOTAwMQ==", "bodyText": "This looks like a OAuth2 authentication process. Although I miss the callback part. Where normally the service authenticated calls back on a specific url. But that doesn't seem to be done here.\nIn openHAB we have a service for handling OAuth2 authentication. You can get the service via OAuthFactory. See for example the Spotify binding for how that works. It also persists the refresh key and access key. This means you don't have to implement your own. Can you have a look at it. We would prefer if you use it if this is a OAuth2 compatible process.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480919001", "createdAt": "2020-09-01T07:29:58Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/rest/api/authentication/AuthenticationApi.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.rest.api.authentication;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.FormContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.util.Fields;\n+import org.openhab.binding.automower.internal.rest.api.HusqvarnaApi;\n+import org.openhab.binding.automower.internal.rest.api.authentication.dto.PostOAuth2Response;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.openhab.binding.automower.internal.rest.exceptions.UnauthorizedException;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Gives access to the Husqvarna authentication api\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AuthenticationApi extends HusqvarnaApi {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkyMDY4Ng==", "bodyText": "You can simple make this with a method in this class and call the method as this::poller in the scheduleWithFixedDelay call. (overlaps a bit with the other comment about making it a lambda)", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480920686", "createdAt": "2020-09-01T07:31:53Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.automower/src/main/java/org/openhab/binding/automower/internal/bridge/AutomowerBridgeHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.automower.internal.bridge;\n+\n+import static org.openhab.binding.automower.internal.AutomowerBindingConstants.THING_TYPE_BRIDGE;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.automower.internal.rest.api.automowerconnect.dto.MowerListResult;\n+import org.openhab.binding.automower.internal.rest.exceptions.AutomowerCommunicationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AutomowerBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Markus Pfleger - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AutomowerBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AutomowerBridgeHandler.class);\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n+    private static final long DEFAULT_POLLING_INTERVAL_S = TimeUnit.HOURS.toSeconds(1);\n+\n+    private @Nullable ScheduledFuture<?> automowerBridgePollingJob;\n+\n+    private @Nullable AutomowerBridge bridge;\n+    private final HttpClient httpClient;\n+\n+    private static class AutomowerBridgePollingRunnable implements Runnable {\n+        private final Logger logger = LoggerFactory.getLogger(AutomowerBridgePollingRunnable.class);\n+\n+        private final AutomowerBridgeHandler handler;\n+        private final AutomowerBridge bridge;\n+\n+        private AutomowerBridgePollingRunnable(AutomowerBridgeHandler handler, AutomowerBridge bridge) {\n+            this.handler = handler;\n+            this.bridge = bridge;\n+        }\n+\n+        @Override\n+        public void run() {\n+            MowerListResult automowers;\n+            try {\n+                automowers = bridge.getAutomowers();\n+                handler.updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Found {} automowers\", automowers.getData().size());\n+            } catch (AutomowerCommunicationException e) {\n+                handler.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"@text/comm-error-query-mowers-failed\");\n+                logger.warn(\"Unable to fetch automowers: {}\", e.getMessage());\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDkyNTM2MA==", "bodyText": "Indentation.", "url": "https://github.com/openhab/openhab-addons/pull/8050#discussion_r480925360", "createdAt": "2020-09-01T07:37:29Z", "author": {"login": "Hilbrand"}, "path": "bom/openhab-addons/pom.xml", "diffHunk": "@@ -68,6 +68,11 @@\n       <groupId>org.openhab.addons.bundles</groupId>\n       <artifactId>org.openhab.binding.autelis</artifactId>\n       <version>${project.version}</version>\n+    </dependency>\n+\t<dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b0d9152a773b0abd47a4e13292c5bf433c3263b", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/7b0d9152a773b0abd47a4e13292c5bf433c3263b", "committedDate": "2020-09-13T18:40:06Z", "message": "Initial contribution of the automower binding\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c00464f6da73dc573830e99ab963e2c3ea00ae7", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/9c00464f6da73dc573830e99ab963e2c3ea00ae7", "committedDate": "2020-09-13T18:40:07Z", "message": "Applied feedback from fwolter\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf00f7b3885746302018dd1c92733e014a9a5c91", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/bf00f7b3885746302018dd1c92733e014a9a5c91", "committedDate": "2020-09-13T18:40:07Z", "message": "Added missing file of last commit\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bd7c24831be3f439c4afb067ec8e33d8bd1456c", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/4bd7c24831be3f439c4afb067ec8e33d8bd1456c", "committedDate": "2020-09-13T18:40:07Z", "message": "Applied feedback of PR\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e143f433611145142bc4e91dadf6331cb185e467", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/e143f433611145142bc4e91dadf6331cb185e467", "committedDate": "2020-09-13T18:40:07Z", "message": "Added feedback from PR\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06a8bea3c0d30c44b1e6b7a38d4426ed0c7aa59e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/06a8bea3c0d30c44b1e6b7a38d4426ed0c7aa59e", "committedDate": "2020-09-13T18:40:08Z", "message": "Fixed bug in AutomowerActions (invokeMethodOf) + applied latest feedback\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8e276349c40fa1e1a42b2093e960486bc497c9b", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/c8e276349c40fa1e1a42b2093e960486bc497c9b", "committedDate": "2020-09-13T18:40:08Z", "message": "Fixed resetting of bridge and fixed compiler error\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3f3da78d62d6abc004d0ebf81cd5b43ff573813", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f3f3da78d62d6abc004d0ebf81cd5b43ff573813", "committedDate": "2020-09-13T18:40:08Z", "message": "Rebase to latest 2.5.x (2.5.8) + Fixed new build warnings (usage of some apache http constant file + conversion from epoch millis to DateTimeType)\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/a551e342a81d945cdf2a7cb2e0e509d954aec1ff", "committedDate": "2020-08-04T18:58:00Z", "message": "Rebase to latest 2.5.x (2.5.8) + Fixed new build warnings (usage of some apache http constant file + conversion from epoch millis to DateTimeType)\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}, "afterCommit": {"oid": "f3f3da78d62d6abc004d0ebf81cd5b43ff573813", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f3f3da78d62d6abc004d0ebf81cd5b43ff573813", "committedDate": "2020-09-13T18:40:08Z", "message": "Rebase to latest 2.5.x (2.5.8) + Fixed new build warnings (usage of some apache http constant file + conversion from epoch millis to DateTimeType)\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8147b8396a98f2d408b4a41c89667edaee744177", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/8147b8396a98f2d408b4a41c89667edaee744177", "committedDate": "2020-09-19T19:23:56Z", "message": "Applied latest feedback from pull request\n\nSigned-off-by: Markus Pfleger <pfleger_markus@gmx.at>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTU3ODMy", "url": "https://github.com/openhab/openhab-addons/pull/8050#pullrequestreview-492157832", "createdAt": "2020-09-19T21:46:13Z", "commit": {"oid": "8147b8396a98f2d408b4a41c89667edaee744177"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 81, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}