{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5Mzc5NjQ0", "number": 9181, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDozNlrOE-w2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozOToxOFrOFA58_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjQ3NDQ2OnYy", "diffSide": "LEFT", "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDozNlrOH8GCPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozNDoyNlrOH9jtMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTQ4NQ==", "bodyText": "Hmm this will now raise unchecked exception when bridge is offline e.g due to configuration error? When bridge is having configuration error, the slave id is not available.\nPerhaps the configuration error of bridge is the only situation when these methods can fail?\nShould it set thing to offline with BRIDGE_OFFLINE instead of raising unchecked exception to framework?", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r532775485", "createdAt": "2020-11-30T17:34:36Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -59,9 +58,27 @@ public BaseModbusThingHandler(Thing thing) {\n     public void initialize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1301b7db9c9fecb46d69d71cdfc0d7ac524b65cd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzNzYwMA==", "bodyText": "I see no other chance to prevent the Thing from being initialized. Setting the Thing status has no effect as it will be overwritten by any updateStatus() in initialize() of the \"user\" class. Do you have a suggestion?", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r533637600", "createdAt": "2020-12-01T18:40:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -59,9 +58,27 @@ public BaseModbusThingHandler(Thing thing) {\n     public void initialize() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTQ4NQ=="}, "originalCommit": {"oid": "1301b7db9c9fecb46d69d71cdfc0d7ac524b65cd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMTIzMg==", "bodyText": "Good point...\nI looked at some examples from the code base\n\nAbstractModbusEndpointThingHandler parent class sets thing OFFLINE. initialize not implemented in child class\nBeaconBluetoothHandler (in bluetooth) parent class sets thing OFFLINE. Child class (RuuviTagHandler) has check\n\n        if (getThing().getStatus() != ThingStatus.OFFLINE) {\n            heartbeatFuture = scheduler.scheduleWithFixedDelay(this::heartbeat, 0, HEARTBEAT_TIMEOUT_MINUTES,\n                    TimeUnit.MINUTES);\n\nI there might be race condition here... Ist getThing().getStatus() update instantaneous?\n\nIT100BridgeHandler extends DSCAlarmBaseBridgeHandler super initialize is called conditionally when config is otherwise OK.\n\nDo we typically expect to override the initialize method in child class?", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r533931232", "createdAt": "2020-12-02T06:45:23Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -59,9 +58,27 @@ public BaseModbusThingHandler(Thing thing) {\n     public void initialize() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTQ4NQ=="}, "originalCommit": {"oid": "1301b7db9c9fecb46d69d71cdfc0d7ac524b65cd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxMDE5Mw==", "bodyText": "It's always good to have a second pair of eyes. The examples inspired me to come up with a slightly other solution.\nThe BaseModbusThingHandler got a new abstract method modbusInitialize(), which is only called, when the Modbus Bridge is configured correctly. That way the Thing can be set to offline in a normal way. Also, the user doesn't need to call super.initialize() anymore, which was error-prone. So, the boolean flag could be dropped, too. I made the initialize() method final to prevent the user from overriding it wrongly.", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r534310193", "createdAt": "2020-12-02T16:34:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -59,9 +58,27 @@ public BaseModbusThingHandler(Thing thing) {\n     public void initialize() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTQ4NQ=="}, "originalCommit": {"oid": "1301b7db9c9fecb46d69d71cdfc0d7ac524b65cd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjQ4OTMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozODoxMFrOH8GLaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozODoxMFrOH8GLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NzgzMg==", "bodyText": "Consider renaming the method as it no longer returns endpoint", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r532777832", "createdAt": "2020-11-30T17:38:10Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -164,6 +172,16 @@ public ModbusSlaveEndpoint getEndpoint() {\n      * @return the {@link ModbusCommunicationInterface}\n      */\n     private ModbusCommunicationInterface getModbus() {\n+        ModbusCommunicationInterface communicationInterface = getEndpoint().getCommunicationInterface();\n+\n+        if (communicationInterface == null) {\n+            throw new IllegalStateException(\"Failed to retrieve Modbus communication interface\");\n+        } else {\n+            return communicationInterface;\n+        }\n+    }\n+\n+    private ModbusEndpointThingHandler getEndpoint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1301b7db9c9fecb46d69d71cdfc0d7ac524b65cd"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDkxNDc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozMzo0NFrOH_a3HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODozNDozN1rOH_dD1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MjQyOQ==", "bodyText": "I don't think this is true?", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r536262429", "createdAt": "2020-12-04T17:33:44Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -43,23 +42,53 @@\n public abstract class BaseModbusThingHandler extends BaseThingHandler {\n     private List<PollTask> periodicPollers = Collections.synchronizedList(new ArrayList<>());\n     private List<Future<?>> oneTimePollers = Collections.synchronizedList(new ArrayList<>());\n-    private volatile boolean initialized;\n \n     public BaseModbusThingHandler(Thing thing) {\n         super(thing);\n     }\n \n     /**\n-     * This method must be invoked in the base class' initialize() method before any other initialization is done.\n-     * It will throw an unchecked exception if the {@link ModbusCommunicationInterface} is not accessible (fail-fast).\n-     * This prevents any further initialization of the Thing. The framework will set the ThingStatus to\n-     * HANDLER_INITIALIZING_ERROR and display the exception's message.\n+     * This method is called when the Thing is being initialized, but only if the Modbus Bridge is configured correctly.\n+     * The code that normally goes into `BaseThingHandler.initialize()` like configuration reading and validation goes\n+     * here.\n      */\n+    public abstract void modbusInitialize();\n+\n     @Override\n-    public void initialize() {\n-        getModbus();\n+    final public void initialize() {\n+        try {\n+            // check if the Bridge is configured correctly (fail-fast)\n+            getModbus();\n+            getBridgeHandler().getSlaveId();\n+\n+            modbusInitialize();\n+        } catch (EndpointNotInitializedException | IllegalStateException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Modbus initialization failed: \" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Get Slave ID, also called as unit id, represented by the thing\n+     *\n+     * @return slave id represented by this thing handler\n+     * @throws EndpointNotInitializedException in case the initialization is not complete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce1efe17f635d74e64645568771e06e371c361ed"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5ODQ1Mw==", "bodyText": "You're right. I removed it.", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r536298453", "createdAt": "2020-12-04T18:34:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -43,23 +42,53 @@\n public abstract class BaseModbusThingHandler extends BaseThingHandler {\n     private List<PollTask> periodicPollers = Collections.synchronizedList(new ArrayList<>());\n     private List<Future<?>> oneTimePollers = Collections.synchronizedList(new ArrayList<>());\n-    private volatile boolean initialized;\n \n     public BaseModbusThingHandler(Thing thing) {\n         super(thing);\n     }\n \n     /**\n-     * This method must be invoked in the base class' initialize() method before any other initialization is done.\n-     * It will throw an unchecked exception if the {@link ModbusCommunicationInterface} is not accessible (fail-fast).\n-     * This prevents any further initialization of the Thing. The framework will set the ThingStatus to\n-     * HANDLER_INITIALIZING_ERROR and display the exception's message.\n+     * This method is called when the Thing is being initialized, but only if the Modbus Bridge is configured correctly.\n+     * The code that normally goes into `BaseThingHandler.initialize()` like configuration reading and validation goes\n+     * here.\n      */\n+    public abstract void modbusInitialize();\n+\n     @Override\n-    public void initialize() {\n-        getModbus();\n+    final public void initialize() {\n+        try {\n+            // check if the Bridge is configured correctly (fail-fast)\n+            getModbus();\n+            getBridgeHandler().getSlaveId();\n+\n+            modbusInitialize();\n+        } catch (EndpointNotInitializedException | IllegalStateException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Modbus initialization failed: \" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Get Slave ID, also called as unit id, represented by the thing\n+     *\n+     * @return slave id represented by this thing handler\n+     * @throws EndpointNotInitializedException in case the initialization is not complete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MjQyOQ=="}, "originalCommit": {"oid": "ce1efe17f635d74e64645568771e06e371c361ed"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDkyMjk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozNTo0NFrOH_a73A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODozNjozN1rOH_dH-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MzY0NA==", "bodyText": "BRIDGE_OFFLINE would be more correct for cases when bridge is offline? It would direct the user to look at the bridge error message.\nAre there any other reasons we expect the initialization to fail?", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r536263644", "createdAt": "2020-12-04T17:35:44Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -43,23 +42,53 @@\n public abstract class BaseModbusThingHandler extends BaseThingHandler {\n     private List<PollTask> periodicPollers = Collections.synchronizedList(new ArrayList<>());\n     private List<Future<?>> oneTimePollers = Collections.synchronizedList(new ArrayList<>());\n-    private volatile boolean initialized;\n \n     public BaseModbusThingHandler(Thing thing) {\n         super(thing);\n     }\n \n     /**\n-     * This method must be invoked in the base class' initialize() method before any other initialization is done.\n-     * It will throw an unchecked exception if the {@link ModbusCommunicationInterface} is not accessible (fail-fast).\n-     * This prevents any further initialization of the Thing. The framework will set the ThingStatus to\n-     * HANDLER_INITIALIZING_ERROR and display the exception's message.\n+     * This method is called when the Thing is being initialized, but only if the Modbus Bridge is configured correctly.\n+     * The code that normally goes into `BaseThingHandler.initialize()` like configuration reading and validation goes\n+     * here.\n      */\n+    public abstract void modbusInitialize();\n+\n     @Override\n-    public void initialize() {\n-        getModbus();\n+    final public void initialize() {\n+        try {\n+            // check if the Bridge is configured correctly (fail-fast)\n+            getModbus();\n+            getBridgeHandler().getSlaveId();\n+\n+            modbusInitialize();\n+        } catch (EndpointNotInitializedException | IllegalStateException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce1efe17f635d74e64645568771e06e371c361ed"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5OTUxMg==", "bodyText": "I saw there's a ThingStatusDetail.BRIDGE_UNINITIALIZED. I think that would fit even better. I moved the invocation of the abstract method out of the try-block, that only a Bridge error could lead to a BRIDGE_UNINITIALIZED.", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r536299512", "createdAt": "2020-12-04T18:36:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -43,23 +42,53 @@\n public abstract class BaseModbusThingHandler extends BaseThingHandler {\n     private List<PollTask> periodicPollers = Collections.synchronizedList(new ArrayList<>());\n     private List<Future<?>> oneTimePollers = Collections.synchronizedList(new ArrayList<>());\n-    private volatile boolean initialized;\n \n     public BaseModbusThingHandler(Thing thing) {\n         super(thing);\n     }\n \n     /**\n-     * This method must be invoked in the base class' initialize() method before any other initialization is done.\n-     * It will throw an unchecked exception if the {@link ModbusCommunicationInterface} is not accessible (fail-fast).\n-     * This prevents any further initialization of the Thing. The framework will set the ThingStatus to\n-     * HANDLER_INITIALIZING_ERROR and display the exception's message.\n+     * This method is called when the Thing is being initialized, but only if the Modbus Bridge is configured correctly.\n+     * The code that normally goes into `BaseThingHandler.initialize()` like configuration reading and validation goes\n+     * here.\n      */\n+    public abstract void modbusInitialize();\n+\n     @Override\n-    public void initialize() {\n-        getModbus();\n+    final public void initialize() {\n+        try {\n+            // check if the Bridge is configured correctly (fail-fast)\n+            getModbus();\n+            getBridgeHandler().getSlaveId();\n+\n+            modbusInitialize();\n+        } catch (EndpointNotInitializedException | IllegalStateException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2MzY0NA=="}, "originalCommit": {"oid": "ce1efe17f635d74e64645568771e06e371c361ed"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDkzODIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzozOToxOFrOH_bEhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODozNzoyMlrOH_dJhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2NTg2MA==", "bodyText": "According to javadoc, null communication interface is returned when initialization is incomplete == bridge is not online.\nBy failing fast (check bridge status) we can offer better error message to user?", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r536265860", "createdAt": "2020-12-04T17:39:18Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -164,6 +178,16 @@ public ModbusSlaveEndpoint getEndpoint() {\n      * @return the {@link ModbusCommunicationInterface}\n      */\n     private ModbusCommunicationInterface getModbus() {\n+        ModbusCommunicationInterface communicationInterface = getBridgeHandler().getCommunicationInterface();\n+\n+        if (communicationInterface == null) {\n+            throw new IllegalStateException(\"Failed to retrieve Modbus communication interface\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce1efe17f635d74e64645568771e06e371c361ed"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5OTkxMQ==", "bodyText": "I reworked all error messages to achieve easier debugging for the user.", "url": "https://github.com/openhab/openhab-addons/pull/9181#discussion_r536299911", "createdAt": "2020-12-04T18:37:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -164,6 +178,16 @@ public ModbusSlaveEndpoint getEndpoint() {\n      * @return the {@link ModbusCommunicationInterface}\n      */\n     private ModbusCommunicationInterface getModbus() {\n+        ModbusCommunicationInterface communicationInterface = getBridgeHandler().getCommunicationInterface();\n+\n+        if (communicationInterface == null) {\n+            throw new IllegalStateException(\"Failed to retrieve Modbus communication interface\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2NTg2MA=="}, "originalCommit": {"oid": "ce1efe17f635d74e64645568771e06e371c361ed"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3757, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}