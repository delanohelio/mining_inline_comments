{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODcwNDAx", "number": 7222, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzowODoyM1rODrbqfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzowMjozNVrODsQDZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODY4NjA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzowODoyM1rOF7xuKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODozMjoyOFrOF8U7Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNDkzOQ==", "bodyText": "If these aren't supposed to be mutable you should return a Collections.emptyList() instead.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398224939", "createdAt": "2020-03-25T23:08:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "diffHunk": "@@ -25,102 +28,111 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public class MiIoBasicChannel {\n \n     @SerializedName(\"property\")\n     @Expose\n-    private String property;\n+    private @Nullable String property;\n     @SerializedName(\"friendlyName\")\n     @Expose\n-    private String friendlyName;\n+    private @Nullable String friendlyName;\n     @SerializedName(\"channel\")\n     @Expose\n-    private String channel;\n+    private @Nullable String channel;\n     @SerializedName(\"channelType\")\n     @Expose\n-    private String channelType;\n+    private @Nullable String channelType;\n     @SerializedName(\"type\")\n     @Expose\n-    private String type;\n+    private @Nullable String type;\n     @SerializedName(\"refresh\")\n     @Expose\n-    private Boolean refresh;\n+    private @Nullable Boolean refresh;\n     @SerializedName(\"transformation\")\n     @Expose\n-    private String transfortmation;\n+    private @Nullable String transfortmation;\n     @SerializedName(\"ChannelGroup\")\n     @Expose\n-    private String channelGroup;\n+    private @Nullable String channelGroup;\n     @SerializedName(\"actions\")\n     @Expose\n-    private List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n+    private @Nullable List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n \n     public String getProperty() {\n-        return property;\n+        final String property = this.property;\n+        return (property != null) ? property : \"\";\n     }\n \n     public void setProperty(String property) {\n         this.property = property;\n     }\n \n     public String getFriendlyName() {\n-        return type == null || friendlyName.isEmpty() ? channel : friendlyName;\n+        final String fn = friendlyName;\n+        return (fn == null || type == null || fn.isEmpty()) ? getChannel() : fn;\n     }\n \n     public void setFriendlyName(String friendlyName) {\n         this.friendlyName = friendlyName;\n     }\n \n     public String getChannel() {\n-        return channel;\n+        final @Nullable String channel = this.channel;\n+        return channel != null ? channel : \"\";\n     }\n \n     public void setChannel(String channel) {\n         this.channel = channel;\n     }\n \n     public String getChannelType() {\n-        return channelType == null || channelType.isEmpty() ? BINDING_ID + \":\" + channel\n-                : (channelType.startsWith(\"system\") ? channelType : BINDING_ID + \":\" + channelType);\n+        final @Nullable String ct = channelType;\n+        return ct == null || ct.isEmpty() ? BINDING_ID + \":\" + channel\n+                : (ct.startsWith(\"system\") ? ct : BINDING_ID + \":\" + ct);\n     }\n \n     public void setChannelType(String channelType) {\n         this.channelType = channelType;\n     }\n \n     public String getType() {\n-        return type == null ? \"\" : type;\n+        final @Nullable String type = this.type;\n+        return type != null ? type : \"\";\n     }\n \n     public void setType(String type) {\n         this.type = type;\n     }\n \n     public Boolean getRefresh() {\n-        return refresh && !property.isEmpty();\n+        final @Nullable Boolean rf = refresh;\n+        return rf != null && rf.booleanValue() && !getProperty().isEmpty();\n     }\n \n     public void setRefresh(Boolean refresh) {\n         this.refresh = refresh;\n     }\n \n     public String getChannelGroup() {\n-        return channelGroup;\n+        final @Nullable String channelGroup = this.channelGroup;\n+        return channelGroup != null ? channelGroup : \"\";\n     }\n \n     public void setChannelGroup(String channelGroup) {\n         this.channelGroup = channelGroup;\n     }\n \n     public List<MiIoDeviceAction> getActions() {\n-        return miIoDeviceActions;\n+        final @Nullable List<MiIoDeviceAction> miIoDeviceActions = this.miIoDeviceActions;\n+        return (miIoDeviceActions != null) ? miIoDeviceActions : new ArrayList<MiIoDeviceAction>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMTc1MQ==", "bodyText": "thanks.. changed it.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398801751", "createdAt": "2020-03-26T18:32:28Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "diffHunk": "@@ -25,102 +28,111 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public class MiIoBasicChannel {\n \n     @SerializedName(\"property\")\n     @Expose\n-    private String property;\n+    private @Nullable String property;\n     @SerializedName(\"friendlyName\")\n     @Expose\n-    private String friendlyName;\n+    private @Nullable String friendlyName;\n     @SerializedName(\"channel\")\n     @Expose\n-    private String channel;\n+    private @Nullable String channel;\n     @SerializedName(\"channelType\")\n     @Expose\n-    private String channelType;\n+    private @Nullable String channelType;\n     @SerializedName(\"type\")\n     @Expose\n-    private String type;\n+    private @Nullable String type;\n     @SerializedName(\"refresh\")\n     @Expose\n-    private Boolean refresh;\n+    private @Nullable Boolean refresh;\n     @SerializedName(\"transformation\")\n     @Expose\n-    private String transfortmation;\n+    private @Nullable String transfortmation;\n     @SerializedName(\"ChannelGroup\")\n     @Expose\n-    private String channelGroup;\n+    private @Nullable String channelGroup;\n     @SerializedName(\"actions\")\n     @Expose\n-    private List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n+    private @Nullable List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n \n     public String getProperty() {\n-        return property;\n+        final String property = this.property;\n+        return (property != null) ? property : \"\";\n     }\n \n     public void setProperty(String property) {\n         this.property = property;\n     }\n \n     public String getFriendlyName() {\n-        return type == null || friendlyName.isEmpty() ? channel : friendlyName;\n+        final String fn = friendlyName;\n+        return (fn == null || type == null || fn.isEmpty()) ? getChannel() : fn;\n     }\n \n     public void setFriendlyName(String friendlyName) {\n         this.friendlyName = friendlyName;\n     }\n \n     public String getChannel() {\n-        return channel;\n+        final @Nullable String channel = this.channel;\n+        return channel != null ? channel : \"\";\n     }\n \n     public void setChannel(String channel) {\n         this.channel = channel;\n     }\n \n     public String getChannelType() {\n-        return channelType == null || channelType.isEmpty() ? BINDING_ID + \":\" + channel\n-                : (channelType.startsWith(\"system\") ? channelType : BINDING_ID + \":\" + channelType);\n+        final @Nullable String ct = channelType;\n+        return ct == null || ct.isEmpty() ? BINDING_ID + \":\" + channel\n+                : (ct.startsWith(\"system\") ? ct : BINDING_ID + \":\" + ct);\n     }\n \n     public void setChannelType(String channelType) {\n         this.channelType = channelType;\n     }\n \n     public String getType() {\n-        return type == null ? \"\" : type;\n+        final @Nullable String type = this.type;\n+        return type != null ? type : \"\";\n     }\n \n     public void setType(String type) {\n         this.type = type;\n     }\n \n     public Boolean getRefresh() {\n-        return refresh && !property.isEmpty();\n+        final @Nullable Boolean rf = refresh;\n+        return rf != null && rf.booleanValue() && !getProperty().isEmpty();\n     }\n \n     public void setRefresh(Boolean refresh) {\n         this.refresh = refresh;\n     }\n \n     public String getChannelGroup() {\n-        return channelGroup;\n+        final @Nullable String channelGroup = this.channelGroup;\n+        return channelGroup != null ? channelGroup : \"\";\n     }\n \n     public void setChannelGroup(String channelGroup) {\n         this.channelGroup = channelGroup;\n     }\n \n     public List<MiIoDeviceAction> getActions() {\n-        return miIoDeviceActions;\n+        final @Nullable List<MiIoDeviceAction> miIoDeviceActions = this.miIoDeviceActions;\n+        return (miIoDeviceActions != null) ? miIoDeviceActions : new ArrayList<MiIoDeviceAction>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNDkzOQ=="}, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODY4OTg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoDatabaseWatchService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzowOTo1NVrOF7xwaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODozMzowMFrOF8U8nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTUxMw==", "bodyText": "This Gson instance should be reused, but I guess you can do that in another PR.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398225513", "createdAt": "2020-03-25T23:09:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoDatabaseWatchService.java", "diffHunk": "@@ -109,14 +112,11 @@ private void populateDatabase() {\n         for (URL db : urlEntries) {\n             logger.trace(\"Adding devices for db file: {}\", db);\n             try {\n-                @Nullable\n                 JsonObject deviceMapping = Utils.convertFileToJSON(db);\n-                if (deviceMapping != null) {\n-                    Gson gson = new GsonBuilder().serializeNulls().create();\n-                    MiIoBasicDevice devdb = gson.fromJson(deviceMapping, MiIoBasicDevice.class);\n-                    for (String id : devdb.getDevice().getId()) {\n-                        workingDatabaseList.put(id, db);\n-                    }\n+                Gson gson = new GsonBuilder().serializeNulls().create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjA3Ng==", "bodyText": "Thanks, moved it so it is reused indeed.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398802076", "createdAt": "2020-03-26T18:33:00Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoDatabaseWatchService.java", "diffHunk": "@@ -109,14 +112,11 @@ private void populateDatabase() {\n         for (URL db : urlEntries) {\n             logger.trace(\"Adding devices for db file: {}\", db);\n             try {\n-                @Nullable\n                 JsonObject deviceMapping = Utils.convertFileToJSON(db);\n-                if (deviceMapping != null) {\n-                    Gson gson = new GsonBuilder().serializeNulls().create();\n-                    MiIoBasicDevice devdb = gson.fromJson(deviceMapping, MiIoBasicDevice.class);\n-                    for (String id : devdb.getDevice().getId()) {\n-                        workingDatabaseList.put(id, db);\n-                    }\n+                Gson gson = new GsonBuilder().serializeNulls().create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTUxMw=="}, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODY5MDYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/discovery/MiIoDiscovery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoxMDoyM1rOF7xw8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODozMzoyNlrOF8U9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTY1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(() -> discover(), 0, SEARCH_INTERVAL,\n          \n          \n            \n                        this.miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(this::discover, 0, SEARCH_INTERVAL,", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398225650", "createdAt": "2020-03-25T23:10:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/discovery/MiIoDiscovery.java", "diffHunk": "@@ -71,36 +74,44 @@ public MiIoDiscovery() throws IllegalArgumentException {\n     @Override\n     protected void startBackgroundDiscovery() {\n         logger.debug(\"Start Xiaomi Mi IO background discovery\");\n+        final @Nullable ScheduledFuture<?> miIoDiscoveryJob = this.miIoDiscoveryJob;\n         if (miIoDiscoveryJob == null || miIoDiscoveryJob.isCancelled()) {\n-            miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(() -> discover(), 0, SEARCH_INTERVAL, TimeUnit.SECONDS);\n+            this.miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(() -> discover(), 0, SEARCH_INTERVAL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMjMzMA==", "bodyText": "thanks. updated it to your suggestion", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398802330", "createdAt": "2020-03-26T18:33:26Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/discovery/MiIoDiscovery.java", "diffHunk": "@@ -71,36 +74,44 @@ public MiIoDiscovery() throws IllegalArgumentException {\n     @Override\n     protected void startBackgroundDiscovery() {\n         logger.debug(\"Start Xiaomi Mi IO background discovery\");\n+        final @Nullable ScheduledFuture<?> miIoDiscoveryJob = this.miIoDiscoveryJob;\n         if (miIoDiscoveryJob == null || miIoDiscoveryJob.isCancelled()) {\n-            miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(() -> discover(), 0, SEARCH_INTERVAL, TimeUnit.SECONDS);\n+            this.miIoDiscoveryJob = scheduler.scheduleWithFixedDelay(() -> discover(), 0, SEARCH_INTERVAL,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTY1MA=="}, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODcwMTIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoxNToyNFrOF7x3ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODozNTowNFrOF8VBtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNzMwMA==", "bodyText": "I don't think you should grab the configuration until the handler is initialized, especially since configurations can change.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398227300", "createdAt": "2020-03-25T23:15:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -58,32 +58,34 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public abstract class MiIoAbstractHandler extends BaseThingHandler implements MiIoMessageListener {\n     protected static final int MAX_QUEUE = 5;\n \n-    protected ScheduledFuture<?> pollingJob;\n+    protected @Nullable ScheduledFuture<?> pollingJob;\n     protected MiIoBindingConfiguration configuration;\n     protected MiIoDevices miDevice = MiIoDevices.UNKNOWN;\n     protected boolean isIdentified;\n \n     protected JsonParser parser;\n-    protected byte[] token;\n+    protected byte[] token = new byte[0];\n \n-    protected MiIoAsyncCommunication miioCom;\n+    protected @Nullable MiIoAsyncCommunication miioCom;\n     protected int lastId;\n \n     protected Map<Integer, String> cmds = new ConcurrentHashMap<Integer, String>();\n-    protected ExpiringCache<String> network;\n+    protected @Nullable ExpiringCache<String> network;\n     protected static final long CACHE_EXPIRY = TimeUnit.SECONDS.toMillis(5);\n     protected static final long CACHE_EXPIRY_NETWORK = TimeUnit.SECONDS.toMillis(60);\n \n     private final Logger logger = LoggerFactory.getLogger(MiIoAbstractHandler.class);\n     protected MiIoDatabaseWatchService miIoDatabaseWatchService;\n \n-    @NonNullByDefault\n-    public MiIoAbstractHandler(Thing thing) {\n+    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService) {\n         super(thing);\n         parser = new JsonParser();\n+        this.miIoDatabaseWatchService = miIoDatabaseWatchService;\n+        this.configuration = getConfigAs(MiIoBindingConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMzM4Mg==", "bodyText": "ok, makes sense. removed it", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398803382", "createdAt": "2020-03-26T18:35:04Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -58,32 +58,34 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public abstract class MiIoAbstractHandler extends BaseThingHandler implements MiIoMessageListener {\n     protected static final int MAX_QUEUE = 5;\n \n-    protected ScheduledFuture<?> pollingJob;\n+    protected @Nullable ScheduledFuture<?> pollingJob;\n     protected MiIoBindingConfiguration configuration;\n     protected MiIoDevices miDevice = MiIoDevices.UNKNOWN;\n     protected boolean isIdentified;\n \n     protected JsonParser parser;\n-    protected byte[] token;\n+    protected byte[] token = new byte[0];\n \n-    protected MiIoAsyncCommunication miioCom;\n+    protected @Nullable MiIoAsyncCommunication miioCom;\n     protected int lastId;\n \n     protected Map<Integer, String> cmds = new ConcurrentHashMap<Integer, String>();\n-    protected ExpiringCache<String> network;\n+    protected @Nullable ExpiringCache<String> network;\n     protected static final long CACHE_EXPIRY = TimeUnit.SECONDS.toMillis(5);\n     protected static final long CACHE_EXPIRY_NETWORK = TimeUnit.SECONDS.toMillis(60);\n \n     private final Logger logger = LoggerFactory.getLogger(MiIoAbstractHandler.class);\n     protected MiIoDatabaseWatchService miIoDatabaseWatchService;\n \n-    @NonNullByDefault\n-    public MiIoAbstractHandler(Thing thing) {\n+    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService) {\n         super(thing);\n         parser = new JsonParser();\n+        this.miIoDatabaseWatchService = miIoDatabaseWatchService;\n+        this.configuration = getConfigAs(MiIoBindingConfiguration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNzMwMA=="}, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODcwOTg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoxOTowOVrOF7x8bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODozNTo0MVrOF8VDSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODU5MQ==", "bodyText": "fanLevel?", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398228591", "createdAt": "2020-03-25T23:19:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -139,7 +201,8 @@ private boolean updateVacuumStatus(JsonObject statusData) {\n         int fanLevel = statusData.get(\"fan_power\").getAsInt();\n         updateState(CHANNEL_FAN_POWER, new DecimalType(fanLevel));\n         updateState(CHANNEL_FAN_CONTROL, new DecimalType(FanModeType.getType(fanLevel).getId()));\n-        updateState(CHANNEL_IN_CLEANING, new DecimalType(statusData.get(\"in_cleaning\").getAsBigDecimal()));\n+        inCleaning = statusData.get(\"in_cleaning\").getAsInt();\n+        updateState(CHANNEL_IN_CLEANING, new DecimalType(fanLevel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwMzc4NQ==", "bodyText": ":-) good catch... was doing bit trail & error testing.. seems I did not change this one back.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398803785", "createdAt": "2020-03-26T18:35:41Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -139,7 +201,8 @@ private boolean updateVacuumStatus(JsonObject statusData) {\n         int fanLevel = statusData.get(\"fan_power\").getAsInt();\n         updateState(CHANNEL_FAN_POWER, new DecimalType(fanLevel));\n         updateState(CHANNEL_FAN_CONTROL, new DecimalType(FanModeType.getType(fanLevel).getId()));\n-        updateState(CHANNEL_IN_CLEANING, new DecimalType(statusData.get(\"in_cleaning\").getAsBigDecimal()));\n+        inCleaning = statusData.get(\"in_cleaning\").getAsInt();\n+        updateState(CHANNEL_IN_CLEANING, new DecimalType(fanLevel));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODU5MQ=="}, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODcxMjUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/transport/MiIoAsyncCommunication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoyMDoyN1rOF7x-Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODozNjoyNFrOF8VE5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTAwMw==", "bodyText": "You can reuse threads like this?", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398229003", "createdAt": "2020-03-25T23:20:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/transport/MiIoAsyncCommunication.java", "diffHunk": "@@ -191,19 +195,22 @@ MiIoSendCommand sendMiIoSendCommand(MiIoSendCommand miIoSendCommand) {\n     }\n \n     public synchronized void startReceiver() {\n+        MessageSenderThread senderThread = this.senderThread;\n         if (senderThread == null) {\n             senderThread = new MessageSenderThread();\n         }\n         if (!senderThread.isAlive()) {\n             senderThread.start();\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNDE5OA==", "bodyText": "Not 100% sure. I changed it to be sure.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398804198", "createdAt": "2020-03-26T18:36:24Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/transport/MiIoAsyncCommunication.java", "diffHunk": "@@ -191,19 +195,22 @@ MiIoSendCommand sendMiIoSendCommand(MiIoSendCommand miIoSendCommand) {\n     }\n \n     public synchronized void startReceiver() {\n+        MessageSenderThread senderThread = this.senderThread;\n         if (senderThread == null) {\n             senderThread = new MessageSenderThread();\n         }\n         if (!senderThread.isAlive()) {\n             senderThread.start();\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTAwMw=="}, "originalCommit": {"oid": "103a726088723bd3424021e42884767ee0d8ad35"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjgwMTU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDozODozMVrOF8ZfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoyMTowMlrOF9Dd3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3NjU4NQ==", "bodyText": "too many conditional operators and \":\" mixed with :. Can you make this more readable?", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398876585", "createdAt": "2020-03-26T20:38:31Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "diffHunk": "@@ -25,102 +29,111 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public class MiIoBasicChannel {\n \n     @SerializedName(\"property\")\n     @Expose\n-    private String property;\n+    private @Nullable String property;\n     @SerializedName(\"friendlyName\")\n     @Expose\n-    private String friendlyName;\n+    private @Nullable String friendlyName;\n     @SerializedName(\"channel\")\n     @Expose\n-    private String channel;\n+    private @Nullable String channel;\n     @SerializedName(\"channelType\")\n     @Expose\n-    private String channelType;\n+    private @Nullable String channelType;\n     @SerializedName(\"type\")\n     @Expose\n-    private String type;\n+    private @Nullable String type;\n     @SerializedName(\"refresh\")\n     @Expose\n-    private Boolean refresh;\n+    private @Nullable Boolean refresh;\n     @SerializedName(\"transformation\")\n     @Expose\n-    private String transfortmation;\n+    private @Nullable String transfortmation;\n     @SerializedName(\"ChannelGroup\")\n     @Expose\n-    private String channelGroup;\n+    private @Nullable String channelGroup;\n     @SerializedName(\"actions\")\n     @Expose\n-    private List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n+    private @Nullable List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n \n     public String getProperty() {\n-        return property;\n+        final String property = this.property;\n+        return (property != null) ? property : \"\";\n     }\n \n     public void setProperty(String property) {\n         this.property = property;\n     }\n \n     public String getFriendlyName() {\n-        return type == null || friendlyName.isEmpty() ? channel : friendlyName;\n+        final String fn = friendlyName;\n+        return (fn == null || type == null || fn.isEmpty()) ? getChannel() : fn;\n     }\n \n     public void setFriendlyName(String friendlyName) {\n         this.friendlyName = friendlyName;\n     }\n \n     public String getChannel() {\n-        return channel;\n+        final @Nullable String channel = this.channel;\n+        return channel != null ? channel : \"\";\n     }\n \n     public void setChannel(String channel) {\n         this.channel = channel;\n     }\n \n     public String getChannelType() {\n-        return channelType == null || channelType.isEmpty() ? BINDING_ID + \":\" + channel\n-                : (channelType.startsWith(\"system\") ? channelType : BINDING_ID + \":\" + channelType);\n+        final @Nullable String ct = channelType;\n+        return ct == null || ct.isEmpty() ? BINDING_ID + \":\" + channel\n+                : (ct.startsWith(\"system\") ? ct : BINDING_ID + \":\" + ct);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NDI1Mw==", "bodyText": "I improved this now. I think it is more clear", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399564253", "createdAt": "2020-03-27T22:21:02Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "diffHunk": "@@ -25,102 +29,111 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public class MiIoBasicChannel {\n \n     @SerializedName(\"property\")\n     @Expose\n-    private String property;\n+    private @Nullable String property;\n     @SerializedName(\"friendlyName\")\n     @Expose\n-    private String friendlyName;\n+    private @Nullable String friendlyName;\n     @SerializedName(\"channel\")\n     @Expose\n-    private String channel;\n+    private @Nullable String channel;\n     @SerializedName(\"channelType\")\n     @Expose\n-    private String channelType;\n+    private @Nullable String channelType;\n     @SerializedName(\"type\")\n     @Expose\n-    private String type;\n+    private @Nullable String type;\n     @SerializedName(\"refresh\")\n     @Expose\n-    private Boolean refresh;\n+    private @Nullable Boolean refresh;\n     @SerializedName(\"transformation\")\n     @Expose\n-    private String transfortmation;\n+    private @Nullable String transfortmation;\n     @SerializedName(\"ChannelGroup\")\n     @Expose\n-    private String channelGroup;\n+    private @Nullable String channelGroup;\n     @SerializedName(\"actions\")\n     @Expose\n-    private List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n+    private @Nullable List<MiIoDeviceAction> miIoDeviceActions = new ArrayList<MiIoDeviceAction>();\n \n     public String getProperty() {\n-        return property;\n+        final String property = this.property;\n+        return (property != null) ? property : \"\";\n     }\n \n     public void setProperty(String property) {\n         this.property = property;\n     }\n \n     public String getFriendlyName() {\n-        return type == null || friendlyName.isEmpty() ? channel : friendlyName;\n+        final String fn = friendlyName;\n+        return (fn == null || type == null || fn.isEmpty()) ? getChannel() : fn;\n     }\n \n     public void setFriendlyName(String friendlyName) {\n         this.friendlyName = friendlyName;\n     }\n \n     public String getChannel() {\n-        return channel;\n+        final @Nullable String channel = this.channel;\n+        return channel != null ? channel : \"\";\n     }\n \n     public void setChannel(String channel) {\n         this.channel = channel;\n     }\n \n     public String getChannelType() {\n-        return channelType == null || channelType.isEmpty() ? BINDING_ID + \":\" + channel\n-                : (channelType.startsWith(\"system\") ? channelType : BINDING_ID + \":\" + channelType);\n+        final @Nullable String ct = channelType;\n+        return ct == null || ct.isEmpty() ? BINDING_ID + \":\" + channel\n+                : (ct.startsWith(\"system\") ? ct : BINDING_ID + \":\" + ct);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3NjU4NQ=="}, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjgyMDg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0NDowM1rOF8Zrig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo0Nzo1NFrOF8_uTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3OTYyNg==", "bodyText": "Why can't this be created in the constructor? That way you can make the network field non-null and final.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398879626", "createdAt": "2020-03-26T20:44:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -335,9 +336,11 @@ protected boolean initializeData() {\n \n     /**\n      * Prepares the ExpiringCache for network data\n+     *\n+     * @return\n      */\n-    protected void initalizeNetworkCache() {\n-        network = new ExpiringCache<String>(CACHE_EXPIRY_NETWORK, () -> {\n+    protected ExpiringCache<String> initalizeNetworkCache() {\n+        final ExpiringCache<String> network = new ExpiringCache<String>(CACHE_EXPIRY_NETWORK, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwMjkyNw==", "bodyText": "yes, that's a good way to solve it. Done.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399502927", "createdAt": "2020-03-27T19:47:54Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -335,9 +336,11 @@ protected boolean initializeData() {\n \n     /**\n      * Prepares the ExpiringCache for network data\n+     *\n+     * @return\n      */\n-    protected void initalizeNetworkCache() {\n-        network = new ExpiringCache<String>(CACHE_EXPIRY_NETWORK, () -> {\n+    protected ExpiringCache<String> initalizeNetworkCache() {\n+        final ExpiringCache<String> network = new ExpiringCache<String>(CACHE_EXPIRY_NETWORK, () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3OTYyNg=="}, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjgzNjkwOnYy", "diffSide": "LEFT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/transport/MiIoAsyncCommunication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0ODozNVrOF8Z1Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0ODozNVrOF8Z1Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjExOQ==", "bodyText": "If you create a new thread isn't it still supposed to be started here? right now you are starting the thread in the constructor (and elsewhere maybe, I didn't check too thoroughly).", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398882119", "createdAt": "2020-03-26T20:48:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/transport/MiIoAsyncCommunication.java", "diffHunk": "@@ -191,12 +195,11 @@ MiIoSendCommand sendMiIoSendCommand(MiIoSendCommand miIoSendCommand) {\n     }\n \n     public synchronized void startReceiver() {\n-        if (senderThread == null) {\n+        MessageSenderThread senderThread = this.senderThread;\n+        if (senderThread == null || !senderThread.isAlive()) {\n             senderThread = new MessageSenderThread();\n         }\n-        if (!senderThread.isAlive()) {\n-            senderThread.start();\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mjg0MTUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0OTo1MVrOF8Z4Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDowMzozM1rOF9ALCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mjg0Ng==", "bodyText": "looks like a good place to use a switch statement.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398882846", "createdAt": "2020-03-26T20:49:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -394,36 +413,39 @@ private void updatePropsFromJsonObject(MiIoSendCommand response) {\n \n     private void updateChannel(@Nullable MiIoBasicChannel basicChannel, String param, JsonElement value) {\n         JsonElement val = value;\n-        if (basicChannel != null) {\n-            if (basicChannel.getTransfortmation() != null) {\n-                JsonElement transformed = Conversions.execute(basicChannel.getTransfortmation(), val);\n-                logger.debug(\"Transformed with '{}': {} {} -> {} \", basicChannel.getTransfortmation(),\n-                        basicChannel.getFriendlyName(), val, transformed);\n-                val = transformed;\n+        if (basicChannel == null) {\n+            logger.debug(\"Channel not found for {}\", param);\n+            return;\n+        }\n+        final String transformation = basicChannel.getTransfortmation();\n+        if (transformation != null) {\n+            JsonElement transformed = Conversions.execute(transformation, val);\n+            logger.debug(\"Transformed with '{}': {} {} -> {} \", transformation, basicChannel.getFriendlyName(), val,\n+                    transformed);\n+            val = transformed;\n+        }\n+        try {\n+            if (basicChannel.getType().equals(\"Number\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxMDI4Mg==", "bodyText": "yes, that makes the code cleaner... done", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399510282", "createdAt": "2020-03-27T20:03:33Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -394,36 +413,39 @@ private void updatePropsFromJsonObject(MiIoSendCommand response) {\n \n     private void updateChannel(@Nullable MiIoBasicChannel basicChannel, String param, JsonElement value) {\n         JsonElement val = value;\n-        if (basicChannel != null) {\n-            if (basicChannel.getTransfortmation() != null) {\n-                JsonElement transformed = Conversions.execute(basicChannel.getTransfortmation(), val);\n-                logger.debug(\"Transformed with '{}': {} {} -> {} \", basicChannel.getTransfortmation(),\n-                        basicChannel.getFriendlyName(), val, transformed);\n-                val = transformed;\n+        if (basicChannel == null) {\n+            logger.debug(\"Channel not found for {}\", param);\n+            return;\n+        }\n+        final String transformation = basicChannel.getTransfortmation();\n+        if (transformation != null) {\n+            JsonElement transformed = Conversions.execute(transformation, val);\n+            logger.debug(\"Transformed with '{}': {} {} -> {} \", transformation, basicChannel.getFriendlyName(), val,\n+                    transformed);\n+            val = transformed;\n+        }\n+        try {\n+            if (basicChannel.getType().equals(\"Number\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mjg0Ng=="}, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mjg0Njk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo1MTozOFrOF8Z7ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDozMjo0NFrOF9A9vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mzc0Nw==", "bodyText": "Why return here?", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398883747", "createdAt": "2020-03-26T20:51:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -191,11 +194,17 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n \n     @Override\n     protected synchronized void updateData() {\n+        final MiIoBindingConfiguration configuration = getConfigAs(MiIoBindingConfiguration.class);\n         logger.debug(\"Periodic update for '{}' ({})\", getThing().getUID().toString(), getThing().getThingTypeUID());\n+        final MiIoAsyncCommunication miioCom = this.miioCom;\n         try {\n             if (!hasConnection() || skipUpdate()) {\n                 return;\n             }\n+            if (miioCom == null) {\n+                initializeData();\n+                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyMzI2Mw==", "bodyText": "yes, indeed not needed. Fixed", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399523263", "createdAt": "2020-03-27T20:32:44Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -191,11 +194,17 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n \n     @Override\n     protected synchronized void updateData() {\n+        final MiIoBindingConfiguration configuration = getConfigAs(MiIoBindingConfiguration.class);\n         logger.debug(\"Periodic update for '{}' ({})\", getThing().getUID().toString(), getThing().getThingTypeUID());\n+        final MiIoAsyncCommunication miioCom = this.miioCom;\n         try {\n             if (!hasConnection() || skipUpdate()) {\n                 return;\n             }\n+            if (miioCom == null) {\n+                initializeData();\n+                return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mzc0Nw=="}, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mjg1MDkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo1Mjo0NVrOF8Z-Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDo0ODoxNFrOF9BYMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NDM1OA==", "bodyText": "Any specific exceptions you are trying to catch? If so please list them instead of catching a generic exception.", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r398884358", "createdAt": "2020-03-26T20:52:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -394,36 +413,39 @@ private void updatePropsFromJsonObject(MiIoSendCommand response) {\n \n     private void updateChannel(@Nullable MiIoBasicChannel basicChannel, String param, JsonElement value) {\n         JsonElement val = value;\n-        if (basicChannel != null) {\n-            if (basicChannel.getTransfortmation() != null) {\n-                JsonElement transformed = Conversions.execute(basicChannel.getTransfortmation(), val);\n-                logger.debug(\"Transformed with '{}': {} {} -> {} \", basicChannel.getTransfortmation(),\n-                        basicChannel.getFriendlyName(), val, transformed);\n-                val = transformed;\n+        if (basicChannel == null) {\n+            logger.debug(\"Channel not found for {}\", param);\n+            return;\n+        }\n+        final String transformation = basicChannel.getTransfortmation();\n+        if (transformation != null) {\n+            JsonElement transformed = Conversions.execute(transformation, val);\n+            logger.debug(\"Transformed with '{}': {} {} -> {} \", transformation, basicChannel.getFriendlyName(), val,\n+                    transformed);\n+            val = transformed;\n+        }\n+        try {\n+            if (basicChannel.getType().equals(\"Number\")) {\n+                updateState(basicChannel.getChannel(), new DecimalType(val.getAsBigDecimal()));\n             }\n-            try {\n-                if (basicChannel.getType().equals(\"Number\")) {\n-                    updateState(basicChannel.getChannel(), new DecimalType(val.getAsBigDecimal()));\n-                }\n-                if (basicChannel.getType().equals(\"String\")) {\n-                    updateState(basicChannel.getChannel(), new StringType(val.getAsString()));\n-                }\n-                if (basicChannel.getType().equals(\"Switch\")) {\n-                    updateState(basicChannel.getChannel(), val.getAsString().toLowerCase().equals(\"on\")\n-                            || val.getAsString().toLowerCase().equals(\"true\") ? OnOffType.ON : OnOffType.OFF);\n-                }\n-                if (basicChannel.getType().equals(\"Color\")) {\n-                    Color rgb = new Color(val.getAsInt());\n-                    HSBType hsb = HSBType.fromRGB(rgb.getRed(), rgb.getGreen(), rgb.getBlue());\n-                    updateState(basicChannel.getChannel(), hsb);\n-                }\n-            } catch (Exception e) {\n-                logger.debug(\"Error updating {} property {} with '{}' : {}: {}\", getThing().getUID(),\n-                        basicChannel.getChannel(), val, e.getClass().getCanonicalName(), e.getMessage());\n-                logger.trace(\"Property update error detail:\", e);\n+            if (basicChannel.getType().equals(\"String\")) {\n+                updateState(basicChannel.getChannel(), new StringType(val.getAsString()));\n             }\n-        } else {\n-            logger.debug(\"Channel not found for {}\", param);\n+            if (basicChannel.getType().equals(\"Switch\")) {\n+                updateState(basicChannel.getChannel(),\n+                        val.getAsString().toLowerCase().equals(\"on\") || val.getAsString().toLowerCase().equals(\"true\")\n+                                ? OnOffType.ON\n+                                : OnOffType.OFF);\n+            }\n+            if (basicChannel.getType().equals(\"Color\")) {\n+                Color rgb = new Color(val.getAsInt());\n+                HSBType hsb = HSBType.fromRGB(rgb.getRed(), rgb.getGreen(), rgb.getBlue());\n+                updateState(basicChannel.getChannel(), hsb);\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyNjcyNw==", "bodyText": "There were various updating issues (e.g. conversion issues, colors not updating ell etc)\nThere should be no particular errors cuurently known to happen here", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399526727", "createdAt": "2020-03-27T20:40:45Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -394,36 +413,39 @@ private void updatePropsFromJsonObject(MiIoSendCommand response) {\n \n     private void updateChannel(@Nullable MiIoBasicChannel basicChannel, String param, JsonElement value) {\n         JsonElement val = value;\n-        if (basicChannel != null) {\n-            if (basicChannel.getTransfortmation() != null) {\n-                JsonElement transformed = Conversions.execute(basicChannel.getTransfortmation(), val);\n-                logger.debug(\"Transformed with '{}': {} {} -> {} \", basicChannel.getTransfortmation(),\n-                        basicChannel.getFriendlyName(), val, transformed);\n-                val = transformed;\n+        if (basicChannel == null) {\n+            logger.debug(\"Channel not found for {}\", param);\n+            return;\n+        }\n+        final String transformation = basicChannel.getTransfortmation();\n+        if (transformation != null) {\n+            JsonElement transformed = Conversions.execute(transformation, val);\n+            logger.debug(\"Transformed with '{}': {} {} -> {} \", transformation, basicChannel.getFriendlyName(), val,\n+                    transformed);\n+            val = transformed;\n+        }\n+        try {\n+            if (basicChannel.getType().equals(\"Number\")) {\n+                updateState(basicChannel.getChannel(), new DecimalType(val.getAsBigDecimal()));\n             }\n-            try {\n-                if (basicChannel.getType().equals(\"Number\")) {\n-                    updateState(basicChannel.getChannel(), new DecimalType(val.getAsBigDecimal()));\n-                }\n-                if (basicChannel.getType().equals(\"String\")) {\n-                    updateState(basicChannel.getChannel(), new StringType(val.getAsString()));\n-                }\n-                if (basicChannel.getType().equals(\"Switch\")) {\n-                    updateState(basicChannel.getChannel(), val.getAsString().toLowerCase().equals(\"on\")\n-                            || val.getAsString().toLowerCase().equals(\"true\") ? OnOffType.ON : OnOffType.OFF);\n-                }\n-                if (basicChannel.getType().equals(\"Color\")) {\n-                    Color rgb = new Color(val.getAsInt());\n-                    HSBType hsb = HSBType.fromRGB(rgb.getRed(), rgb.getGreen(), rgb.getBlue());\n-                    updateState(basicChannel.getChannel(), hsb);\n-                }\n-            } catch (Exception e) {\n-                logger.debug(\"Error updating {} property {} with '{}' : {}: {}\", getThing().getUID(),\n-                        basicChannel.getChannel(), val, e.getClass().getCanonicalName(), e.getMessage());\n-                logger.trace(\"Property update error detail:\", e);\n+            if (basicChannel.getType().equals(\"String\")) {\n+                updateState(basicChannel.getChannel(), new StringType(val.getAsString()));\n             }\n-        } else {\n-            logger.debug(\"Channel not found for {}\", param);\n+            if (basicChannel.getType().equals(\"Switch\")) {\n+                updateState(basicChannel.getChannel(),\n+                        val.getAsString().toLowerCase().equals(\"on\") || val.getAsString().toLowerCase().equals(\"true\")\n+                                ? OnOffType.ON\n+                                : OnOffType.OFF);\n+            }\n+            if (basicChannel.getType().equals(\"Color\")) {\n+                Color rgb = new Color(val.getAsInt());\n+                HSBType hsb = HSBType.fromRGB(rgb.getRed(), rgb.getGreen(), rgb.getBlue());\n+                updateState(basicChannel.getChannel(), hsb);\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NDM1OA=="}, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzMDAzNQ==", "bodyText": "leave as is for now then", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399530035", "createdAt": "2020-03-27T20:48:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -394,36 +413,39 @@ private void updatePropsFromJsonObject(MiIoSendCommand response) {\n \n     private void updateChannel(@Nullable MiIoBasicChannel basicChannel, String param, JsonElement value) {\n         JsonElement val = value;\n-        if (basicChannel != null) {\n-            if (basicChannel.getTransfortmation() != null) {\n-                JsonElement transformed = Conversions.execute(basicChannel.getTransfortmation(), val);\n-                logger.debug(\"Transformed with '{}': {} {} -> {} \", basicChannel.getTransfortmation(),\n-                        basicChannel.getFriendlyName(), val, transformed);\n-                val = transformed;\n+        if (basicChannel == null) {\n+            logger.debug(\"Channel not found for {}\", param);\n+            return;\n+        }\n+        final String transformation = basicChannel.getTransfortmation();\n+        if (transformation != null) {\n+            JsonElement transformed = Conversions.execute(transformation, val);\n+            logger.debug(\"Transformed with '{}': {} {} -> {} \", transformation, basicChannel.getFriendlyName(), val,\n+                    transformed);\n+            val = transformed;\n+        }\n+        try {\n+            if (basicChannel.getType().equals(\"Number\")) {\n+                updateState(basicChannel.getChannel(), new DecimalType(val.getAsBigDecimal()));\n             }\n-            try {\n-                if (basicChannel.getType().equals(\"Number\")) {\n-                    updateState(basicChannel.getChannel(), new DecimalType(val.getAsBigDecimal()));\n-                }\n-                if (basicChannel.getType().equals(\"String\")) {\n-                    updateState(basicChannel.getChannel(), new StringType(val.getAsString()));\n-                }\n-                if (basicChannel.getType().equals(\"Switch\")) {\n-                    updateState(basicChannel.getChannel(), val.getAsString().toLowerCase().equals(\"on\")\n-                            || val.getAsString().toLowerCase().equals(\"true\") ? OnOffType.ON : OnOffType.OFF);\n-                }\n-                if (basicChannel.getType().equals(\"Color\")) {\n-                    Color rgb = new Color(val.getAsInt());\n-                    HSBType hsb = HSBType.fromRGB(rgb.getRed(), rgb.getGreen(), rgb.getBlue());\n-                    updateState(basicChannel.getChannel(), hsb);\n-                }\n-            } catch (Exception e) {\n-                logger.debug(\"Error updating {} property {} with '{}' : {}: {}\", getThing().getUID(),\n-                        basicChannel.getChannel(), val, e.getClass().getCanonicalName(), e.getMessage());\n-                logger.trace(\"Property update error detail:\", e);\n+            if (basicChannel.getType().equals(\"String\")) {\n+                updateState(basicChannel.getChannel(), new StringType(val.getAsString()));\n             }\n-        } else {\n-            logger.debug(\"Channel not found for {}\", param);\n+            if (basicChannel.getType().equals(\"Switch\")) {\n+                updateState(basicChannel.getChannel(),\n+                        val.getAsString().toLowerCase().equals(\"on\") || val.getAsString().toLowerCase().equals(\"true\")\n+                                ? OnOffType.ON\n+                                : OnOffType.OFF);\n+            }\n+            if (basicChannel.getType().equals(\"Color\")) {\n+                Color rgb = new Color(val.getAsInt());\n+                HSBType hsb = HSBType.fromRGB(rgb.getRed(), rgb.getGreen(), rgb.getBlue());\n+                updateState(basicChannel.getChannel(), hsb);\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NDM1OA=="}, "originalCommit": {"oid": "472f897316c6118ba66edced6744c16abd93fdb8"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzI2OTUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzowMjozNVrOF9EKQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNTo1OTo0MlrOF9HKyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3NTYxNg==", "bodyText": "Why was this made a field?", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399575616", "createdAt": "2020-03-27T23:02:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -51,19 +52,63 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public class MiIoVacuumHandler extends MiIoAbstractHandler {\n     private final Logger logger = LoggerFactory.getLogger(MiIoVacuumHandler.class);\n-\n     private ExpiringCache<String> status;\n     private ExpiringCache<String> consumables;\n     private ExpiringCache<String> dnd;\n     private ExpiringCache<String> history;\n-    private String lastHistoryId;\n+    private String lastHistoryId = \"\";\n+    private int inCleaning;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e07fb0bf49be07f399490ef0176418caf67fda9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNDkwNQ==", "bodyText": "Indeed... Not really for this PR... For the next one...\nI extracted these changes from the upcoming big pr to separate these many cleanup changes from the real functionality changes.\nhttps://community.openhab.org/t/xiaomi-robot-vacuum-binding/31317/1277", "url": "https://github.com/openhab/openhab-addons/pull/7222#discussion_r399624905", "createdAt": "2020-03-28T05:59:42Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -51,19 +52,63 @@\n  *\n  * @author Marcel Verpaalen - Initial contribution\n  */\n+@NonNullByDefault\n public class MiIoVacuumHandler extends MiIoAbstractHandler {\n     private final Logger logger = LoggerFactory.getLogger(MiIoVacuumHandler.class);\n-\n     private ExpiringCache<String> status;\n     private ExpiringCache<String> consumables;\n     private ExpiringCache<String> dnd;\n     private ExpiringCache<String> history;\n-    private String lastHistoryId;\n+    private String lastHistoryId = \"\";\n+    private int inCleaning;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3NTYxNg=="}, "originalCommit": {"oid": "4e07fb0bf49be07f399490ef0176418caf67fda9"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 748, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}