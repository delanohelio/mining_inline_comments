{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MDAyNTkz", "number": 7298, "reviewThreads": {"totalCount": 67, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1MDo0MFrODwgWQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNjoxNToxMFrODxEYug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTg4MjI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1MDo0MFrOGDjI-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNDozNFrOGEDldA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NDY0OA==", "bodyText": "Please use a new line for each sentence. That makes reviewing later changes a lot easier.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406374648", "createdAt": "2020-04-09T17:50:40Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjIyOA==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406906228", "createdAt": "2020-04-10T19:24:34Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NDY0OA=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTg4Mzc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1MTowOVrOGDjJ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNToyMFrOGEDmYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NDg5OQ==", "bodyText": "If there is a default, it's not required.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406374899", "createdAt": "2020-04-09T17:51:09Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+\r\n+## Thing Configuration\r\n+\r\n+### Bridge\r\n+\r\n+| Property | Default | Required | Description                                                                          |\r\n+| -------- | :-----: | :------: | ------------------------------------------------------------------------------------ |\r\n+| refresh  |   30    |   yes    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjQ2Nw==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406906467", "createdAt": "2020-04-10T19:25:20Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+\r\n+## Thing Configuration\r\n+\r\n+### Bridge\r\n+\r\n+| Property | Default | Required | Description                                                                          |\r\n+| -------- | :-----: | :------: | ------------------------------------------------------------------------------------ |\r\n+| refresh  |   30    |   yes    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NDg5OQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTg4NDYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1MToyNVrOGDjKgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNTo0NVrOGEDnBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTA0Mg==", "bodyText": "Add names of bridge and thing here", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406375042", "createdAt": "2020-04-09T17:51:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjYyOA==", "bodyText": "Please check my fix! Not sure whether I got you correct!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406906628", "createdAt": "2020-04-10T19:25:45Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTA0Mg=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTg4OTcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1Mjo1N1rOGDjNtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNjowMFrOGEDnSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTg2Mw==", "bodyText": "remove", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406375863", "createdAt": "2020-04-09T17:52:57Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+\r\n+## Thing Configuration\r\n+\r\n+### Bridge\r\n+\r\n+| Property | Default | Required | Description                                                                          |\r\n+| -------- | :-----: | :------: | ------------------------------------------------------------------------------------ |\r\n+| refresh  |   30    |   yes    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\r\n+\r\n+### Region\r\n+\r\n+| Property | Default | Required | Description                                                                                              |\r\n+| -------- | :-----: | :------: | -------------------------------------------------------------------------------------------------------- |\r\n+| regionID |    -    |   yes    | In PaperUI just select the region you want to display data for. For files-configuration see table below. |\r\n+\r\n+#### Manual region or partregion selection ####\r\n+\r\n+The region ID is the partregion_id or if there is no partregion the region_id from this [json](https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json) of DWD. You can refer to the following table.\r\n+\r\n+| regionID | Region                         | Partregion                                         |\r\n+| -------- | ------------------------------ | -------------------------------------------------- |\r\n+| 11       | Schleswig-Holstein und Hamburg | Inseln und Marschen                                |\r\n+| 12       | Schleswig-Holstein und Hamburg | Geest, Schleswig-Holstein und Hamburg              |\r\n+| 20       | Mecklenburg-Vorpommern         | -                                                  |\r\n+| 31       | Niedersachsen und Bremen       | Westl. Niedersachsen/Bremen                        |\r\n+| 32       | Niedersachsen und Bremen       | \u00d6stl. Niedersachsen                                |\r\n+| 41       | Nordrhein-Westfalen            | Rhein.-Westf\u00e4l. Tiefland                           |\r\n+| 42       | Nordrhein-Westfalen            | Ostwestfalen                                       |\r\n+| 43       | Nordrhein-Westfalen            | Mittelgebirge NRW                                  |\r\n+| 50       | Brandenburg und Berlin         | -                                                  |\r\n+| 61       | Sachsen-Anhalt                 | Tiefland Sachsen-Anhalt                            |\r\n+| 62       | Sachsen-Anhalt                 | Harz                                               |\r\n+| 71       | Th\u00fcringen                      | Tiefland Th\u00fcringen                                 |\r\n+| 72       | Th\u00fcringen                      | Mittelgebirge Th\u00fcringen                            |\r\n+| 81       | Sachsen                        | Tiefland Sachsen                                   |\r\n+| 82       | Sachsen                        | Mittelgebirge Sachsen                              |\r\n+| 91       | Hessen                         | Nordhessen und hess. Mittelgebirge                 |\r\n+| 92       | Hessen                         | Rhein-Main                                         |\r\n+| 101      | Rheinland-Pfalz und Saarland   | Rhein, Pfalz, Nahe und Mosel                       |\r\n+| 102      | Rheinland-Pfalz und Saarland   | Mittelgebirgsbereich Rheinland-Pfalz               |\r\n+| 103      | Rheinland-Pfalz und Saarland   | Saarland                                           |\r\n+| 111      | Baden-W\u00fcrttemberg              | Oberrhein und unteres Neckartal                    |\r\n+| 112      | Baden-W\u00fcrttemberg              | Hohenlohe/mittlerer Neckar/Oberschwaben            |\r\n+| 113      | Baden-W\u00fcrttemberg              | Mittelgebirge Baden-W\u00fcrttemberg                    |\r\n+| 121      | Bayern                         | Allg\u00e4u/Oberbayern/Bay. Wald                        |\r\n+| 122      | Bayern                         | Donauniederungen                                   |\r\n+| 123      | Bayern                         | Bayern n. der Donau, o. Bayr. Wald, o. Mainfranken |\r\n+| 124      | Bayern                         | Mainfranken                                        |\r\n+\r\n+## Channels\r\n+\r\n+For each of the eight pollen types reported by DWD the region thing has three channels for today, tomorrow and the day after tomorrow.\r\n+\r\n+| channels             | pollen type | german name |\r\n+| -------------------- | ----------- | ----------- |\r\n+| alder#today          | alder       | Erle        |\r\n+| alder#tomorrow       |             |             |\r\n+| alder#dayafter_to    |             |             |\r\n+| ambrosia#today       | ambrosia    | Ambrosia    |\r\n+| ambrosia#tomorrow    |             |             |\r\n+| ambrosia#dayafter_to |             |             |\r\n+| ash#today            | ash-tree    | Esche       |\r\n+| ash#tomorrow         |             |             |\r\n+| ash#dayafter_to      |             |             |\r\n+| birch#today          | birch       | Birke       |\r\n+| birch#tomorrow       |             |             |\r\n+| birch#dayafter_to    |             |             |\r\n+| grasses#today        | grasses     | Gr\u00e4ser      |\r\n+| grasses#tomorrow     |             |             |\r\n+| grasses#dayafter_to  |             |             |\r\n+| hazel#today          | hazel       | Hasel       |\r\n+| hazel#tomorrow       |             |             |\r\n+| hazel#dayafter_to    |             |             |\r\n+| mugwort#today        | mugwort     | Beifu\u00df      |\r\n+| mugwort#tomorrow     |             |             |\r\n+| mugwort#dayafter_to  |             |             |\r\n+| rye#today            | rye         | Roggen      |\r\n+| rye#tomorrow         |             |             |\r\n+| rye#dayafter_to      |             |             |\r\n+\r\n+There are the following possible string values:\r\n+\r\n+| value | description                 |\r\n+| ----- | --------------------------- |\r\n+| -1    | not specified               |\r\n+| 0     | no pollen pollution         |\r\n+| 0-1   | no to low pollen count      |\r\n+| 1     | low pollen count            |\r\n+| 1-2   | low to medium pollen count  |\r\n+| 2     | medium pollen count         |\r\n+| 2-3   | medium to high pollen count |\r\n+| 3     | high pollen count           |\r\n+\r\n+| channel             | description                                               |\r\n+| ------------------- | --------------------------------------------------------- |\r\n+| updates#refreshed   | Hold the time of the bridge's last refresh                |\r\n+| updates#last_update | The time when data was last updated by DWD                |\r\n+| updates#next_update | The time when data will be updated next by DWD            |\r\n+| updates#updated     | Triggers event \"REFRESHED\" when data was refreshed by DWD |\r\n+\r\n+## Full Example\r\n+\r\n+### Things file for region \"Brandenburg und Berlin\" and partregion \"Bayern - Mainfranken\" ###\r\n+\r\n+```\r\n+Bridge dwdpollenflug:bridge:dwd \"DWD pollen count Bridge\" [refresh=\"15\"] {\r\n+    Thing region region50 \"DWD pollen count region\" @ \"APIS\" [regionID=\"50\"]\r\n+    Thing region partregion124 \"DWD pollen count partregion\" @ \"APIS\" [regionID=\"124\"]\r\n+}\r\n+```\r\n+\r\n+### Items example for region \"Brandenburg und Berlin\" and pollen type ash-tree ###\r\n+\r\n+```\r\n+...\r\n+\r\n+String pollenTodayEsche\r\n+    \"Esche [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#today\"}\r\n+\r\n+String pollenTomorrowEsche\r\n+    \"Esche morgen [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#tomorrow\"}\r\n+\r\n+String pollenDayAfterTomorrowEsche\r\n+    \"Esche \u00fcbermorgen [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#dayafter_to\"}\r\n+\r\n+...\r\n+```\r\n+\r\n+### Transform map file pollen.map ###\r\n+\r\n+```\r\n+0=keine (0)\r\n+0-1=keine bis gering (0-1)\r\n+1=gering (1)\r\n+1-2=gering bis mittel (1-2)\r\n+2=mittel (2)\r\n+2-3=mittel bis hoch (2-3)\r\n+3=hoch (3)\r\n+-1=keine Daten\r\n+-=keine Daten\r\n+NULL=keine Daten\r\n+```\r\n+\r\n+### Sitemap example for region \"Brandenburg und Berlin\" and pollen type ash-tree ###\r\n+\r\n+```\r\n+Text label=\"Pollenflugindex\" {\r\n+    ...\r\n+ \r\n+    Frame {\r\n+        Text item=pollenTodayEsche\r\n+            valuecolor=[==\"3\"=\"#f00014\",\r\n+                        ==\"2-3\"=\"#f00014\",\r\n+                        ==\"2\"=\"#ff9900\",\r\n+                        ==\"1-2\"=\"#ff9900\",\r\n+                        ==\"1\"=\"#ffff00\",\r\n+                        ==\"0-1\"=\"#00c83c\"] {\r\n+            Frame {\r\n+                Text item=pollenTodayEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"] \r\n+\r\n+                Text item=pollenTomorrowEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"]\r\n+\r\n+                Text item=pollenDayAfterTomorrowEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"]\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    ...\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDY0NA==", "bodyText": "Why should I remove this whole section?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406810644", "createdAt": "2020-04-10T15:32:21Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+\r\n+## Thing Configuration\r\n+\r\n+### Bridge\r\n+\r\n+| Property | Default | Required | Description                                                                          |\r\n+| -------- | :-----: | :------: | ------------------------------------------------------------------------------------ |\r\n+| refresh  |   30    |   yes    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\r\n+\r\n+### Region\r\n+\r\n+| Property | Default | Required | Description                                                                                              |\r\n+| -------- | :-----: | :------: | -------------------------------------------------------------------------------------------------------- |\r\n+| regionID |    -    |   yes    | In PaperUI just select the region you want to display data for. For files-configuration see table below. |\r\n+\r\n+#### Manual region or partregion selection ####\r\n+\r\n+The region ID is the partregion_id or if there is no partregion the region_id from this [json](https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json) of DWD. You can refer to the following table.\r\n+\r\n+| regionID | Region                         | Partregion                                         |\r\n+| -------- | ------------------------------ | -------------------------------------------------- |\r\n+| 11       | Schleswig-Holstein und Hamburg | Inseln und Marschen                                |\r\n+| 12       | Schleswig-Holstein und Hamburg | Geest, Schleswig-Holstein und Hamburg              |\r\n+| 20       | Mecklenburg-Vorpommern         | -                                                  |\r\n+| 31       | Niedersachsen und Bremen       | Westl. Niedersachsen/Bremen                        |\r\n+| 32       | Niedersachsen und Bremen       | \u00d6stl. Niedersachsen                                |\r\n+| 41       | Nordrhein-Westfalen            | Rhein.-Westf\u00e4l. Tiefland                           |\r\n+| 42       | Nordrhein-Westfalen            | Ostwestfalen                                       |\r\n+| 43       | Nordrhein-Westfalen            | Mittelgebirge NRW                                  |\r\n+| 50       | Brandenburg und Berlin         | -                                                  |\r\n+| 61       | Sachsen-Anhalt                 | Tiefland Sachsen-Anhalt                            |\r\n+| 62       | Sachsen-Anhalt                 | Harz                                               |\r\n+| 71       | Th\u00fcringen                      | Tiefland Th\u00fcringen                                 |\r\n+| 72       | Th\u00fcringen                      | Mittelgebirge Th\u00fcringen                            |\r\n+| 81       | Sachsen                        | Tiefland Sachsen                                   |\r\n+| 82       | Sachsen                        | Mittelgebirge Sachsen                              |\r\n+| 91       | Hessen                         | Nordhessen und hess. Mittelgebirge                 |\r\n+| 92       | Hessen                         | Rhein-Main                                         |\r\n+| 101      | Rheinland-Pfalz und Saarland   | Rhein, Pfalz, Nahe und Mosel                       |\r\n+| 102      | Rheinland-Pfalz und Saarland   | Mittelgebirgsbereich Rheinland-Pfalz               |\r\n+| 103      | Rheinland-Pfalz und Saarland   | Saarland                                           |\r\n+| 111      | Baden-W\u00fcrttemberg              | Oberrhein und unteres Neckartal                    |\r\n+| 112      | Baden-W\u00fcrttemberg              | Hohenlohe/mittlerer Neckar/Oberschwaben            |\r\n+| 113      | Baden-W\u00fcrttemberg              | Mittelgebirge Baden-W\u00fcrttemberg                    |\r\n+| 121      | Bayern                         | Allg\u00e4u/Oberbayern/Bay. Wald                        |\r\n+| 122      | Bayern                         | Donauniederungen                                   |\r\n+| 123      | Bayern                         | Bayern n. der Donau, o. Bayr. Wald, o. Mainfranken |\r\n+| 124      | Bayern                         | Mainfranken                                        |\r\n+\r\n+## Channels\r\n+\r\n+For each of the eight pollen types reported by DWD the region thing has three channels for today, tomorrow and the day after tomorrow.\r\n+\r\n+| channels             | pollen type | german name |\r\n+| -------------------- | ----------- | ----------- |\r\n+| alder#today          | alder       | Erle        |\r\n+| alder#tomorrow       |             |             |\r\n+| alder#dayafter_to    |             |             |\r\n+| ambrosia#today       | ambrosia    | Ambrosia    |\r\n+| ambrosia#tomorrow    |             |             |\r\n+| ambrosia#dayafter_to |             |             |\r\n+| ash#today            | ash-tree    | Esche       |\r\n+| ash#tomorrow         |             |             |\r\n+| ash#dayafter_to      |             |             |\r\n+| birch#today          | birch       | Birke       |\r\n+| birch#tomorrow       |             |             |\r\n+| birch#dayafter_to    |             |             |\r\n+| grasses#today        | grasses     | Gr\u00e4ser      |\r\n+| grasses#tomorrow     |             |             |\r\n+| grasses#dayafter_to  |             |             |\r\n+| hazel#today          | hazel       | Hasel       |\r\n+| hazel#tomorrow       |             |             |\r\n+| hazel#dayafter_to    |             |             |\r\n+| mugwort#today        | mugwort     | Beifu\u00df      |\r\n+| mugwort#tomorrow     |             |             |\r\n+| mugwort#dayafter_to  |             |             |\r\n+| rye#today            | rye         | Roggen      |\r\n+| rye#tomorrow         |             |             |\r\n+| rye#dayafter_to      |             |             |\r\n+\r\n+There are the following possible string values:\r\n+\r\n+| value | description                 |\r\n+| ----- | --------------------------- |\r\n+| -1    | not specified               |\r\n+| 0     | no pollen pollution         |\r\n+| 0-1   | no to low pollen count      |\r\n+| 1     | low pollen count            |\r\n+| 1-2   | low to medium pollen count  |\r\n+| 2     | medium pollen count         |\r\n+| 2-3   | medium to high pollen count |\r\n+| 3     | high pollen count           |\r\n+\r\n+| channel             | description                                               |\r\n+| ------------------- | --------------------------------------------------------- |\r\n+| updates#refreshed   | Hold the time of the bridge's last refresh                |\r\n+| updates#last_update | The time when data was last updated by DWD                |\r\n+| updates#next_update | The time when data will be updated next by DWD            |\r\n+| updates#updated     | Triggers event \"REFRESHED\" when data was refreshed by DWD |\r\n+\r\n+## Full Example\r\n+\r\n+### Things file for region \"Brandenburg und Berlin\" and partregion \"Bayern - Mainfranken\" ###\r\n+\r\n+```\r\n+Bridge dwdpollenflug:bridge:dwd \"DWD pollen count Bridge\" [refresh=\"15\"] {\r\n+    Thing region region50 \"DWD pollen count region\" @ \"APIS\" [regionID=\"50\"]\r\n+    Thing region partregion124 \"DWD pollen count partregion\" @ \"APIS\" [regionID=\"124\"]\r\n+}\r\n+```\r\n+\r\n+### Items example for region \"Brandenburg und Berlin\" and pollen type ash-tree ###\r\n+\r\n+```\r\n+...\r\n+\r\n+String pollenTodayEsche\r\n+    \"Esche [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#today\"}\r\n+\r\n+String pollenTomorrowEsche\r\n+    \"Esche morgen [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#tomorrow\"}\r\n+\r\n+String pollenDayAfterTomorrowEsche\r\n+    \"Esche \u00fcbermorgen [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#dayafter_to\"}\r\n+\r\n+...\r\n+```\r\n+\r\n+### Transform map file pollen.map ###\r\n+\r\n+```\r\n+0=keine (0)\r\n+0-1=keine bis gering (0-1)\r\n+1=gering (1)\r\n+1-2=gering bis mittel (1-2)\r\n+2=mittel (2)\r\n+2-3=mittel bis hoch (2-3)\r\n+3=hoch (3)\r\n+-1=keine Daten\r\n+-=keine Daten\r\n+NULL=keine Daten\r\n+```\r\n+\r\n+### Sitemap example for region \"Brandenburg und Berlin\" and pollen type ash-tree ###\r\n+\r\n+```\r\n+Text label=\"Pollenflugindex\" {\r\n+    ...\r\n+ \r\n+    Frame {\r\n+        Text item=pollenTodayEsche\r\n+            valuecolor=[==\"3\"=\"#f00014\",\r\n+                        ==\"2-3\"=\"#f00014\",\r\n+                        ==\"2\"=\"#ff9900\",\r\n+                        ==\"1-2\"=\"#ff9900\",\r\n+                        ==\"1\"=\"#ffff00\",\r\n+                        ==\"0-1\"=\"#00c83c\"] {\r\n+            Frame {\r\n+                Text item=pollenTodayEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"] \r\n+\r\n+                Text item=pollenTomorrowEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"]\r\n+\r\n+                Text item=pollenDayAfterTomorrowEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"]\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    ...\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTg2Mw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1Mzc3Ng==", "bodyText": "Only the ...", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406853776", "createdAt": "2020-04-10T17:14:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+\r\n+## Thing Configuration\r\n+\r\n+### Bridge\r\n+\r\n+| Property | Default | Required | Description                                                                          |\r\n+| -------- | :-----: | :------: | ------------------------------------------------------------------------------------ |\r\n+| refresh  |   30    |   yes    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\r\n+\r\n+### Region\r\n+\r\n+| Property | Default | Required | Description                                                                                              |\r\n+| -------- | :-----: | :------: | -------------------------------------------------------------------------------------------------------- |\r\n+| regionID |    -    |   yes    | In PaperUI just select the region you want to display data for. For files-configuration see table below. |\r\n+\r\n+#### Manual region or partregion selection ####\r\n+\r\n+The region ID is the partregion_id or if there is no partregion the region_id from this [json](https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json) of DWD. You can refer to the following table.\r\n+\r\n+| regionID | Region                         | Partregion                                         |\r\n+| -------- | ------------------------------ | -------------------------------------------------- |\r\n+| 11       | Schleswig-Holstein und Hamburg | Inseln und Marschen                                |\r\n+| 12       | Schleswig-Holstein und Hamburg | Geest, Schleswig-Holstein und Hamburg              |\r\n+| 20       | Mecklenburg-Vorpommern         | -                                                  |\r\n+| 31       | Niedersachsen und Bremen       | Westl. Niedersachsen/Bremen                        |\r\n+| 32       | Niedersachsen und Bremen       | \u00d6stl. Niedersachsen                                |\r\n+| 41       | Nordrhein-Westfalen            | Rhein.-Westf\u00e4l. Tiefland                           |\r\n+| 42       | Nordrhein-Westfalen            | Ostwestfalen                                       |\r\n+| 43       | Nordrhein-Westfalen            | Mittelgebirge NRW                                  |\r\n+| 50       | Brandenburg und Berlin         | -                                                  |\r\n+| 61       | Sachsen-Anhalt                 | Tiefland Sachsen-Anhalt                            |\r\n+| 62       | Sachsen-Anhalt                 | Harz                                               |\r\n+| 71       | Th\u00fcringen                      | Tiefland Th\u00fcringen                                 |\r\n+| 72       | Th\u00fcringen                      | Mittelgebirge Th\u00fcringen                            |\r\n+| 81       | Sachsen                        | Tiefland Sachsen                                   |\r\n+| 82       | Sachsen                        | Mittelgebirge Sachsen                              |\r\n+| 91       | Hessen                         | Nordhessen und hess. Mittelgebirge                 |\r\n+| 92       | Hessen                         | Rhein-Main                                         |\r\n+| 101      | Rheinland-Pfalz und Saarland   | Rhein, Pfalz, Nahe und Mosel                       |\r\n+| 102      | Rheinland-Pfalz und Saarland   | Mittelgebirgsbereich Rheinland-Pfalz               |\r\n+| 103      | Rheinland-Pfalz und Saarland   | Saarland                                           |\r\n+| 111      | Baden-W\u00fcrttemberg              | Oberrhein und unteres Neckartal                    |\r\n+| 112      | Baden-W\u00fcrttemberg              | Hohenlohe/mittlerer Neckar/Oberschwaben            |\r\n+| 113      | Baden-W\u00fcrttemberg              | Mittelgebirge Baden-W\u00fcrttemberg                    |\r\n+| 121      | Bayern                         | Allg\u00e4u/Oberbayern/Bay. Wald                        |\r\n+| 122      | Bayern                         | Donauniederungen                                   |\r\n+| 123      | Bayern                         | Bayern n. der Donau, o. Bayr. Wald, o. Mainfranken |\r\n+| 124      | Bayern                         | Mainfranken                                        |\r\n+\r\n+## Channels\r\n+\r\n+For each of the eight pollen types reported by DWD the region thing has three channels for today, tomorrow and the day after tomorrow.\r\n+\r\n+| channels             | pollen type | german name |\r\n+| -------------------- | ----------- | ----------- |\r\n+| alder#today          | alder       | Erle        |\r\n+| alder#tomorrow       |             |             |\r\n+| alder#dayafter_to    |             |             |\r\n+| ambrosia#today       | ambrosia    | Ambrosia    |\r\n+| ambrosia#tomorrow    |             |             |\r\n+| ambrosia#dayafter_to |             |             |\r\n+| ash#today            | ash-tree    | Esche       |\r\n+| ash#tomorrow         |             |             |\r\n+| ash#dayafter_to      |             |             |\r\n+| birch#today          | birch       | Birke       |\r\n+| birch#tomorrow       |             |             |\r\n+| birch#dayafter_to    |             |             |\r\n+| grasses#today        | grasses     | Gr\u00e4ser      |\r\n+| grasses#tomorrow     |             |             |\r\n+| grasses#dayafter_to  |             |             |\r\n+| hazel#today          | hazel       | Hasel       |\r\n+| hazel#tomorrow       |             |             |\r\n+| hazel#dayafter_to    |             |             |\r\n+| mugwort#today        | mugwort     | Beifu\u00df      |\r\n+| mugwort#tomorrow     |             |             |\r\n+| mugwort#dayafter_to  |             |             |\r\n+| rye#today            | rye         | Roggen      |\r\n+| rye#tomorrow         |             |             |\r\n+| rye#dayafter_to      |             |             |\r\n+\r\n+There are the following possible string values:\r\n+\r\n+| value | description                 |\r\n+| ----- | --------------------------- |\r\n+| -1    | not specified               |\r\n+| 0     | no pollen pollution         |\r\n+| 0-1   | no to low pollen count      |\r\n+| 1     | low pollen count            |\r\n+| 1-2   | low to medium pollen count  |\r\n+| 2     | medium pollen count         |\r\n+| 2-3   | medium to high pollen count |\r\n+| 3     | high pollen count           |\r\n+\r\n+| channel             | description                                               |\r\n+| ------------------- | --------------------------------------------------------- |\r\n+| updates#refreshed   | Hold the time of the bridge's last refresh                |\r\n+| updates#last_update | The time when data was last updated by DWD                |\r\n+| updates#next_update | The time when data will be updated next by DWD            |\r\n+| updates#updated     | Triggers event \"REFRESHED\" when data was refreshed by DWD |\r\n+\r\n+## Full Example\r\n+\r\n+### Things file for region \"Brandenburg und Berlin\" and partregion \"Bayern - Mainfranken\" ###\r\n+\r\n+```\r\n+Bridge dwdpollenflug:bridge:dwd \"DWD pollen count Bridge\" [refresh=\"15\"] {\r\n+    Thing region region50 \"DWD pollen count region\" @ \"APIS\" [regionID=\"50\"]\r\n+    Thing region partregion124 \"DWD pollen count partregion\" @ \"APIS\" [regionID=\"124\"]\r\n+}\r\n+```\r\n+\r\n+### Items example for region \"Brandenburg und Berlin\" and pollen type ash-tree ###\r\n+\r\n+```\r\n+...\r\n+\r\n+String pollenTodayEsche\r\n+    \"Esche [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#today\"}\r\n+\r\n+String pollenTomorrowEsche\r\n+    \"Esche morgen [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#tomorrow\"}\r\n+\r\n+String pollenDayAfterTomorrowEsche\r\n+    \"Esche \u00fcbermorgen [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#dayafter_to\"}\r\n+\r\n+...\r\n+```\r\n+\r\n+### Transform map file pollen.map ###\r\n+\r\n+```\r\n+0=keine (0)\r\n+0-1=keine bis gering (0-1)\r\n+1=gering (1)\r\n+1-2=gering bis mittel (1-2)\r\n+2=mittel (2)\r\n+2-3=mittel bis hoch (2-3)\r\n+3=hoch (3)\r\n+-1=keine Daten\r\n+-=keine Daten\r\n+NULL=keine Daten\r\n+```\r\n+\r\n+### Sitemap example for region \"Brandenburg und Berlin\" and pollen type ash-tree ###\r\n+\r\n+```\r\n+Text label=\"Pollenflugindex\" {\r\n+    ...\r\n+ \r\n+    Frame {\r\n+        Text item=pollenTodayEsche\r\n+            valuecolor=[==\"3\"=\"#f00014\",\r\n+                        ==\"2-3\"=\"#f00014\",\r\n+                        ==\"2\"=\"#ff9900\",\r\n+                        ==\"1-2\"=\"#ff9900\",\r\n+                        ==\"1\"=\"#ffff00\",\r\n+                        ==\"0-1\"=\"#00c83c\"] {\r\n+            Frame {\r\n+                Text item=pollenTodayEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"] \r\n+\r\n+                Text item=pollenTomorrowEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"]\r\n+\r\n+                Text item=pollenDayAfterTomorrowEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"]\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    ...\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTg2Mw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjY5Nw==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406906697", "createdAt": "2020-04-10T19:26:00Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,201 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+\r\n+## Thing Configuration\r\n+\r\n+### Bridge\r\n+\r\n+| Property | Default | Required | Description                                                                          |\r\n+| -------- | :-----: | :------: | ------------------------------------------------------------------------------------ |\r\n+| refresh  |   30    |   yes    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\r\n+\r\n+### Region\r\n+\r\n+| Property | Default | Required | Description                                                                                              |\r\n+| -------- | :-----: | :------: | -------------------------------------------------------------------------------------------------------- |\r\n+| regionID |    -    |   yes    | In PaperUI just select the region you want to display data for. For files-configuration see table below. |\r\n+\r\n+#### Manual region or partregion selection ####\r\n+\r\n+The region ID is the partregion_id or if there is no partregion the region_id from this [json](https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json) of DWD. You can refer to the following table.\r\n+\r\n+| regionID | Region                         | Partregion                                         |\r\n+| -------- | ------------------------------ | -------------------------------------------------- |\r\n+| 11       | Schleswig-Holstein und Hamburg | Inseln und Marschen                                |\r\n+| 12       | Schleswig-Holstein und Hamburg | Geest, Schleswig-Holstein und Hamburg              |\r\n+| 20       | Mecklenburg-Vorpommern         | -                                                  |\r\n+| 31       | Niedersachsen und Bremen       | Westl. Niedersachsen/Bremen                        |\r\n+| 32       | Niedersachsen und Bremen       | \u00d6stl. Niedersachsen                                |\r\n+| 41       | Nordrhein-Westfalen            | Rhein.-Westf\u00e4l. Tiefland                           |\r\n+| 42       | Nordrhein-Westfalen            | Ostwestfalen                                       |\r\n+| 43       | Nordrhein-Westfalen            | Mittelgebirge NRW                                  |\r\n+| 50       | Brandenburg und Berlin         | -                                                  |\r\n+| 61       | Sachsen-Anhalt                 | Tiefland Sachsen-Anhalt                            |\r\n+| 62       | Sachsen-Anhalt                 | Harz                                               |\r\n+| 71       | Th\u00fcringen                      | Tiefland Th\u00fcringen                                 |\r\n+| 72       | Th\u00fcringen                      | Mittelgebirge Th\u00fcringen                            |\r\n+| 81       | Sachsen                        | Tiefland Sachsen                                   |\r\n+| 82       | Sachsen                        | Mittelgebirge Sachsen                              |\r\n+| 91       | Hessen                         | Nordhessen und hess. Mittelgebirge                 |\r\n+| 92       | Hessen                         | Rhein-Main                                         |\r\n+| 101      | Rheinland-Pfalz und Saarland   | Rhein, Pfalz, Nahe und Mosel                       |\r\n+| 102      | Rheinland-Pfalz und Saarland   | Mittelgebirgsbereich Rheinland-Pfalz               |\r\n+| 103      | Rheinland-Pfalz und Saarland   | Saarland                                           |\r\n+| 111      | Baden-W\u00fcrttemberg              | Oberrhein und unteres Neckartal                    |\r\n+| 112      | Baden-W\u00fcrttemberg              | Hohenlohe/mittlerer Neckar/Oberschwaben            |\r\n+| 113      | Baden-W\u00fcrttemberg              | Mittelgebirge Baden-W\u00fcrttemberg                    |\r\n+| 121      | Bayern                         | Allg\u00e4u/Oberbayern/Bay. Wald                        |\r\n+| 122      | Bayern                         | Donauniederungen                                   |\r\n+| 123      | Bayern                         | Bayern n. der Donau, o. Bayr. Wald, o. Mainfranken |\r\n+| 124      | Bayern                         | Mainfranken                                        |\r\n+\r\n+## Channels\r\n+\r\n+For each of the eight pollen types reported by DWD the region thing has three channels for today, tomorrow and the day after tomorrow.\r\n+\r\n+| channels             | pollen type | german name |\r\n+| -------------------- | ----------- | ----------- |\r\n+| alder#today          | alder       | Erle        |\r\n+| alder#tomorrow       |             |             |\r\n+| alder#dayafter_to    |             |             |\r\n+| ambrosia#today       | ambrosia    | Ambrosia    |\r\n+| ambrosia#tomorrow    |             |             |\r\n+| ambrosia#dayafter_to |             |             |\r\n+| ash#today            | ash-tree    | Esche       |\r\n+| ash#tomorrow         |             |             |\r\n+| ash#dayafter_to      |             |             |\r\n+| birch#today          | birch       | Birke       |\r\n+| birch#tomorrow       |             |             |\r\n+| birch#dayafter_to    |             |             |\r\n+| grasses#today        | grasses     | Gr\u00e4ser      |\r\n+| grasses#tomorrow     |             |             |\r\n+| grasses#dayafter_to  |             |             |\r\n+| hazel#today          | hazel       | Hasel       |\r\n+| hazel#tomorrow       |             |             |\r\n+| hazel#dayafter_to    |             |             |\r\n+| mugwort#today        | mugwort     | Beifu\u00df      |\r\n+| mugwort#tomorrow     |             |             |\r\n+| mugwort#dayafter_to  |             |             |\r\n+| rye#today            | rye         | Roggen      |\r\n+| rye#tomorrow         |             |             |\r\n+| rye#dayafter_to      |             |             |\r\n+\r\n+There are the following possible string values:\r\n+\r\n+| value | description                 |\r\n+| ----- | --------------------------- |\r\n+| -1    | not specified               |\r\n+| 0     | no pollen pollution         |\r\n+| 0-1   | no to low pollen count      |\r\n+| 1     | low pollen count            |\r\n+| 1-2   | low to medium pollen count  |\r\n+| 2     | medium pollen count         |\r\n+| 2-3   | medium to high pollen count |\r\n+| 3     | high pollen count           |\r\n+\r\n+| channel             | description                                               |\r\n+| ------------------- | --------------------------------------------------------- |\r\n+| updates#refreshed   | Hold the time of the bridge's last refresh                |\r\n+| updates#last_update | The time when data was last updated by DWD                |\r\n+| updates#next_update | The time when data will be updated next by DWD            |\r\n+| updates#updated     | Triggers event \"REFRESHED\" when data was refreshed by DWD |\r\n+\r\n+## Full Example\r\n+\r\n+### Things file for region \"Brandenburg und Berlin\" and partregion \"Bayern - Mainfranken\" ###\r\n+\r\n+```\r\n+Bridge dwdpollenflug:bridge:dwd \"DWD pollen count Bridge\" [refresh=\"15\"] {\r\n+    Thing region region50 \"DWD pollen count region\" @ \"APIS\" [regionID=\"50\"]\r\n+    Thing region partregion124 \"DWD pollen count partregion\" @ \"APIS\" [regionID=\"124\"]\r\n+}\r\n+```\r\n+\r\n+### Items example for region \"Brandenburg und Berlin\" and pollen type ash-tree ###\r\n+\r\n+```\r\n+...\r\n+\r\n+String pollenTodayEsche\r\n+    \"Esche [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#today\"}\r\n+\r\n+String pollenTomorrowEsche\r\n+    \"Esche morgen [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#tomorrow\"}\r\n+\r\n+String pollenDayAfterTomorrowEsche\r\n+    \"Esche \u00fcbermorgen [MAP(pollen.map):%s]\"\r\n+    {channel=\"dwdpollenflug:region:dwd:region50:ash#dayafter_to\"}\r\n+\r\n+...\r\n+```\r\n+\r\n+### Transform map file pollen.map ###\r\n+\r\n+```\r\n+0=keine (0)\r\n+0-1=keine bis gering (0-1)\r\n+1=gering (1)\r\n+1-2=gering bis mittel (1-2)\r\n+2=mittel (2)\r\n+2-3=mittel bis hoch (2-3)\r\n+3=hoch (3)\r\n+-1=keine Daten\r\n+-=keine Daten\r\n+NULL=keine Daten\r\n+```\r\n+\r\n+### Sitemap example for region \"Brandenburg und Berlin\" and pollen type ash-tree ###\r\n+\r\n+```\r\n+Text label=\"Pollenflugindex\" {\r\n+    ...\r\n+ \r\n+    Frame {\r\n+        Text item=pollenTodayEsche\r\n+            valuecolor=[==\"3\"=\"#f00014\",\r\n+                        ==\"2-3\"=\"#f00014\",\r\n+                        ==\"2\"=\"#ff9900\",\r\n+                        ==\"1-2\"=\"#ff9900\",\r\n+                        ==\"1\"=\"#ffff00\",\r\n+                        ==\"0-1\"=\"#00c83c\"] {\r\n+            Frame {\r\n+                Text item=pollenTodayEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"] \r\n+\r\n+                Text item=pollenTomorrowEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"]\r\n+\r\n+                Text item=pollenDayAfterTomorrowEsche\r\n+                    valuecolor=[==\"3\"=\"#f00014\",\r\n+                                ==\"2-3\"=\"#f00014\",\r\n+                                ==\"2\"=\"#ff9900\",\r\n+                                ==\"1-2\"=\"#ff9900\",\r\n+                                ==\"1\"=\"#ffff00\",\r\n+                                ==\"0-1\"=\"#00c83c\"]\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    ...\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTg2Mw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkwNzUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1Nzo1M1rOGDjZKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNjowOVrOGEDneA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODc5Mw==", "bodyText": "You can store the HttpClient instead of the factory.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406378793", "createdAt": "2020-04-09T17:57:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.Stream;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\r\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugBridgeHandler;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugRegionHandler;\r\n+import org.osgi.service.component.annotations.Activate;\r\n+import org.osgi.service.component.annotations.Component;\r\n+import org.osgi.service.component.annotations.Reference;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugHandlerFactory} is responsible for creating things and thing\r\n+ * handlers.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+@Component(configurationPid = \"binding.dwdpollenflug\", service = ThingHandlerFactory.class)\r\n+public class DWDPollenflugHandlerFactory extends BaseThingHandlerFactory {\r\n+\r\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\r\n+            .unmodifiableSet(Stream.of(THING_TYPE_BRIDGE, THING_TYPE_REGION).collect(Collectors.toSet()));\r\n+\r\n+    private final HttpClientFactory httpClientFactory;\r\n+\r\n+    @Activate\r\n+    public DWDPollenflugHandlerFactory(final @Reference HttpClientFactory httpClientFactory) {\r\n+        this.httpClientFactory = httpClientFactory;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjc0NA==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406906744", "createdAt": "2020-04-10T19:26:09Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.Stream;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\r\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugBridgeHandler;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugRegionHandler;\r\n+import org.osgi.service.component.annotations.Activate;\r\n+import org.osgi.service.component.annotations.Component;\r\n+import org.osgi.service.component.annotations.Reference;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugHandlerFactory} is responsible for creating things and thing\r\n+ * handlers.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+@Component(configurationPid = \"binding.dwdpollenflug\", service = ThingHandlerFactory.class)\r\n+public class DWDPollenflugHandlerFactory extends BaseThingHandlerFactory {\r\n+\r\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\r\n+            .unmodifiableSet(Stream.of(THING_TYPE_BRIDGE, THING_TYPE_REGION).collect(Collectors.toSet()));\r\n+\r\n+    private final HttpClientFactory httpClientFactory;\r\n+\r\n+    @Activate\r\n+    public DWDPollenflugHandlerFactory(final @Reference HttpClientFactory httpClientFactory) {\r\n+        this.httpClientFactory = httpClientFactory;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODc5Mw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkwOTM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollingException.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1ODoyN1rOGDjaVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1OTozNVrOGEEVeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTA5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class DWDPollingException extends RuntimeException {\n          \n          \n            \n            public class DWDPollingException extends Exception {\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nusing checked exceptions is safer", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406379095", "createdAt": "2020-04-09T17:58:27Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollingException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+\r\n+/**\r\n+ * The {@link DWDPollingException} class is the exception for all polling errors.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollingException extends RuntimeException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjgzMw==", "bodyText": "Will have a look later.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406906833", "createdAt": "2020-04-10T19:26:26Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollingException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+\r\n+/**\r\n+ * The {@link DWDPollingException} class is the exception for all polling errors.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollingException extends RuntimeException {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTA5NQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxODUyMQ==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406918521", "createdAt": "2020-04-10T19:59:35Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollingException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+\r\n+/**\r\n+ * The {@link DWDPollingException} class is the exception for all polling errors.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollingException extends RuntimeException {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTA5NQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkxMzQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugBridgeConfiguration.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1OToyOFrOGDjc3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MDozN1rOGED7ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTc0MA==", "bodyText": "since there is a default, add it here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int refresh;\n          \n          \n            \n                public int refresh = 30;\n          \n      \n    \n    \n  \n\nand no need for a getter, just use public fields in configuration and DTO", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406379740", "createdAt": "2020-04-09T17:59:28Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.config;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugBridgeHandler;\r\n+\r\n+/**\r\n+ * Configuration for the {@link DWDPollenflugBridgeHandler}\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeConfiguration {\r\n+    private int refresh;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMDc4MQ==", "bodyText": "But in Java logic this is not the same, a private field is although settable from outside the class if I want to prevent this I think this should be a private with a getter.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406830781", "createdAt": "2020-04-10T16:19:20Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.config;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugBridgeHandler;\r\n+\r\n+/**\r\n+ * Configuration for the {@link DWDPollenflugBridgeHandler}\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeConfiguration {\r\n+    private int refresh;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTc0MA=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NDYzNA==", "bodyText": "True, but who should do that in a private member of a class? The configuration is not available outside of the handler.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406854634", "createdAt": "2020-04-10T17:16:09Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.config;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugBridgeHandler;\r\n+\r\n+/**\r\n+ * Configuration for the {@link DWDPollenflugBridgeHandler}\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeConfiguration {\r\n+    private int refresh;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTc0MA=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTg0NQ==", "bodyText": "Changed! Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406911845", "createdAt": "2020-04-10T19:40:37Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.config;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugBridgeHandler;\r\n+\r\n+/**\r\n+ * Configuration for the {@link DWDPollenflugBridgeHandler}\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeConfiguration {\r\n+    private int refresh;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTc0MA=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkxNDg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugRegionConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1OTo1NlrOGDjd0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MDo0M1rOGED7iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTk4Nw==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406379987", "createdAt": "2020-04-09T17:59:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugRegionConfiguration.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.config;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+\r\n+/**\r\n+ * Configuration for the {@link DWDPollenflugRegionHandler}\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionConfiguration {\r\n+    private int regionID;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTg4MQ==", "bodyText": "Changed! Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406911881", "createdAt": "2020-04-10T19:40:43Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugRegionConfiguration.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.config;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+\r\n+/**\r\n+ * Configuration for the {@link DWDPollenflugRegionHandler}\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionConfiguration {\r\n+    private int regionID;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTk4Nw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTk1MjgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoxMToxMVrOGDj1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzo1MDo1NlrOGENXSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NjA2Ng==", "bodyText": "regions = json.getRegions().stream().collect(Collectors.toMap(DWDRegion::getRegionId, r -> r);\n\nand remove the initialization above", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406386066", "createdAt": "2020-04-09T18:11:11Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3OTM0OA==", "bodyText": "This is suggestion seems not to be correct because there is no mapping from DWDRegionJSON to DWDRegion object done on it", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406879348", "createdAt": "2020-04-10T18:15:46Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NjA2Ng=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjQ0Mg==", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066442", "createdAt": "2020-04-11T13:50:56Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NjA2Ng=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTk5NDczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoyMjo0M1rOGDkPgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzo1MToyMVrOGENXYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ==", "bodyText": "In general I like short methods amd modularization. But I think this is overkill.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void parseChannels(DWDPollenflugJSON json) {\n          \n          \n            \n                    createChannel(CHANNEL_REFRESHED, created);\n          \n          \n            \n                    createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\n          \n          \n            \n                    createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private void createChannel(String subchannel, @Nullable Date date) {\n          \n          \n            \n                    final String channelName = CHANNEL_UPDATES + \"#\" + subchannel;\n          \n          \n            \n                    if (date == null) {\n          \n          \n            \n                        channels.put(channelName, UnDefType.NULL);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        ZonedDateTime zoned = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\n          \n          \n            \n                        channels.put(channelName, new DateTimeType(zoned));\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                        channels.put(CHANNEL_UPDATES + \"#\" + CHANNEL_REFRESHED, \n          \n          \n            \n                            created == null ? UndefType.NULL : new DateTimeType(ZonedDateTime.ofInstant(created.toInstant(), ZoneId.systemDefault()));\n          \n          \n            \n                        channels.put(CHANNEL_UPDATES + \"#\" + CHANNEL_NEXT_UPDATE, \n          \n          \n            \n                            nextUpdate == null ? UndefType.NULL : new DateTimeType(ZonedDateTime.ofInstant(nexrUpdate.toInstant(), ZoneId.systemDefault()));\n          \n          \n            \n                        channels.put(CHANNEL_UPDATES + \"#\" + CHANNEL_LAST_UPDATE, lastUpdate == null ? UndefType.NULL : new DateTimeType(ZonedDateTime.ofInstant(lastUpdate.toInstant(), ZoneId.systemDefault()));\n          \n      \n    \n    \n  \n\nin the constrcutor is perfectly fine", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406392705", "createdAt": "2020-04-09T18:22:43Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        parseChannels(json);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+\r\n+        map.put(PROPERTY_NAME, json.getName());\r\n+        map.put(PROPERTY_SENDER, json.getSender());\r\n+        map.put(PROPERTY_REFRESHED, FORMATTER.format(created));\r\n+\r\n+        if (nextUpdate != null) {\r\n+            map.put(PROPERTY_NEXT_UPDATE, FORMATTER.format(nextUpdate));\r\n+        }\r\n+\r\n+        if (lastUpdate != null) {\r\n+            map.put(PROPERTY_LAST_UPDATE, FORMATTER.format(lastUpdate));\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    public Map<String, String> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    private void parseChannels(DWDPollenflugJSON json) {\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private void createChannel(String subchannel, @Nullable Date date) {\r\n+        final String channelName = CHANNEL_UPDATES + \"#\" + subchannel;\r\n+        if (date == null) {\r\n+            channels.put(channelName, UnDefType.NULL);\r\n+        } else {\r\n+            ZonedDateTime zoned = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\r\n+            channels.put(channelName, new DateTimeType(zoned));\r\n+        }\r\n+    }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4MDcyNQ==", "bodyText": "You're right the parseChannels is a bit overkill ;) but I think the createChannel can be left there because the channel name, the null check and the date conversion is three times is in my opinion complex enough redudant code.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406880725", "createdAt": "2020-04-10T18:18:58Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        parseChannels(json);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+\r\n+        map.put(PROPERTY_NAME, json.getName());\r\n+        map.put(PROPERTY_SENDER, json.getSender());\r\n+        map.put(PROPERTY_REFRESHED, FORMATTER.format(created));\r\n+\r\n+        if (nextUpdate != null) {\r\n+            map.put(PROPERTY_NEXT_UPDATE, FORMATTER.format(nextUpdate));\r\n+        }\r\n+\r\n+        if (lastUpdate != null) {\r\n+            map.put(PROPERTY_LAST_UPDATE, FORMATTER.format(lastUpdate));\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    public Map<String, String> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    private void parseChannels(DWDPollenflugJSON json) {\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private void createChannel(String subchannel, @Nullable Date date) {\r\n+        final String channelName = CHANNEL_UPDATES + \"#\" + subchannel;\r\n+        if (date == null) {\r\n+            channels.put(channelName, UnDefType.NULL);\r\n+        } else {\r\n+            ZonedDateTime zoned = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\r\n+            channels.put(channelName, new DateTimeType(zoned));\r\n+        }\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzYxNg==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406907616", "createdAt": "2020-04-10T19:28:33Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        parseChannels(json);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+\r\n+        map.put(PROPERTY_NAME, json.getName());\r\n+        map.put(PROPERTY_SENDER, json.getSender());\r\n+        map.put(PROPERTY_REFRESHED, FORMATTER.format(created));\r\n+\r\n+        if (nextUpdate != null) {\r\n+            map.put(PROPERTY_NEXT_UPDATE, FORMATTER.format(nextUpdate));\r\n+        }\r\n+\r\n+        if (lastUpdate != null) {\r\n+            map.put(PROPERTY_LAST_UPDATE, FORMATTER.format(lastUpdate));\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    public Map<String, String> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    private void parseChannels(DWDPollenflugJSON json) {\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private void createChannel(String subchannel, @Nullable Date date) {\r\n+        final String channelName = CHANNEL_UPDATES + \"#\" + subchannel;\r\n+        if (date == null) {\r\n+            channels.put(channelName, UnDefType.NULL);\r\n+        } else {\r\n+            ZonedDateTime zoned = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\r\n+            channels.put(channelName, new DateTimeType(zoned));\r\n+        }\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NjYxOQ==", "bodyText": "Changed NP-handling in DTOs, so I changed it now.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407046619", "createdAt": "2020-04-11T10:26:36Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        parseChannels(json);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+\r\n+        map.put(PROPERTY_NAME, json.getName());\r\n+        map.put(PROPERTY_SENDER, json.getSender());\r\n+        map.put(PROPERTY_REFRESHED, FORMATTER.format(created));\r\n+\r\n+        if (nextUpdate != null) {\r\n+            map.put(PROPERTY_NEXT_UPDATE, FORMATTER.format(nextUpdate));\r\n+        }\r\n+\r\n+        if (lastUpdate != null) {\r\n+            map.put(PROPERTY_LAST_UPDATE, FORMATTER.format(lastUpdate));\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    public Map<String, String> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    private void parseChannels(DWDPollenflugJSON json) {\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private void createChannel(String subchannel, @Nullable Date date) {\r\n+        final String channelName = CHANNEL_UPDATES + \"#\" + subchannel;\r\n+        if (date == null) {\r\n+            channels.put(channelName, UnDefType.NULL);\r\n+        } else {\r\n+            ZonedDateTime zoned = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\r\n+            channels.put(channelName, new DateTimeType(zoned));\r\n+        }\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjQ2NQ==", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066465", "createdAt": "2020-04-11T13:51:21Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        parseChannels(json);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+\r\n+        map.put(PROPERTY_NAME, json.getName());\r\n+        map.put(PROPERTY_SENDER, json.getSender());\r\n+        map.put(PROPERTY_REFRESHED, FORMATTER.format(created));\r\n+\r\n+        if (nextUpdate != null) {\r\n+            map.put(PROPERTY_NEXT_UPDATE, FORMATTER.format(nextUpdate));\r\n+        }\r\n+\r\n+        if (lastUpdate != null) {\r\n+            map.put(PROPERTY_LAST_UPDATE, FORMATTER.format(lastUpdate));\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    public Map<String, String> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    private void parseChannels(DWDPollenflugJSON json) {\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private void createChannel(String subchannel, @Nullable Date date) {\r\n+        final String channelName = CHANNEL_UPDATES + \"#\" + subchannel;\r\n+        if (date == null) {\r\n+            channels.put(channelName, UnDefType.NULL);\r\n+        } else {\r\n+            ZonedDateTime zoned = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\r\n+            channels.put(channelName, new DateTimeType(zoned));\r\n+        }\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDYwOTEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo0MDowMVrOGD8Vkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyODo0MlrOGEDrGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4NzQ3NQ==", "bodyText": "better use a more meaningful name (e.g. DATE_FORMATTER). If you don't need the pattern for something else, you can add it directly here.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406787475", "createdAt": "2020-04-10T14:40:01Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final String DATE_PATTERN = \"yyyy-MM-dd HH:mm\";\r\n+\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzY3Mg==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406907672", "createdAt": "2020-04-10T19:28:42Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final String DATE_PATTERN = \"yyyy-MM-dd HH:mm\";\r\n+\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4NzQ3NQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY0MjgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1MjoxOVrOGD8qgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzo1MTo1NlrOGENXnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (final Entry<String, DWDPollentypeJSON> entry : pollen.entrySet()) {\n          \n          \n            \n                        final String pollentype = CHANNELS_POLLEN_MAP.get(entry.getKey());\n          \n          \n            \n                        final DWDPollentypeJSON jsonType = entry.getValue();\n          \n          \n            \n                        createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\n          \n          \n            \n                        createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\n          \n          \n            \n                        createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\n          \n          \n            \n                    final String channelName = pollentype + \"#\" + subchannel;\n          \n          \n            \n                    if (value == null) {\n          \n          \n            \n                        value = \"-1\";\n          \n          \n            \n                    }\n          \n          \n            \n                    channels.put(channelName, new StringType(value));\n          \n          \n            \n                }\n          \n          \n            \n                    pollen.forEach((k, v) -> {\n          \n          \n            \n                        final String pollentype = CHANNELS_POLLEN_MAP.get(k);\n          \n          \n            \n            \n          \n          \n            \n                        channels.put(pollentype + \"#\" + CHANNEL_TODAY, v.today == null ? \"-1\" : new StringType(v.today));\n          \n          \n            \n                        channels.put(pollentype + \"#\" + CHANNEL_TOMORROW, v.tomorrow == null ? \"-1\" : new StringType(v.tomorrow));\n          \n          \n            \n                        channels.put(pollentype + \"#\" + CHANNEL_DAYAFTER_TO, v.dayafterTomorrow == null ? \"-1\" : new StringType(v.dayafterTomorrow));\n          \n          \n            \n                    });\n          \n          \n            \n                }", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406792835", "createdAt": "2020-04-10T14:52:19Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        map.put(PROPERTY_REGION_ID, Integer.toString(regionID));\r\n+\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        for (final Entry<String, DWDPollentypeJSON> entry : pollen.entrySet()) {\r\n+            final String pollentype = CHANNELS_POLLEN_MAP.get(entry.getKey());\r\n+            final DWDPollentypeJSON jsonType = entry.getValue();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        }\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r\n+        final String channelName = pollentype + \"#\" + subchannel;\r\n+        if (value == null) {\r\n+            value = \"-1\";\r\n+        }\r\n+        channels.put(channelName, new StringType(value));\r\n+    }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MDM4MQ==", "bodyText": "I'm a fan of clean code with no redundancy like the creation of the channel name and the null check. So I would prefer to leave it seperated in createdChannel function but the forEach is easier to read so will take this part", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406840381", "createdAt": "2020-04-10T16:42:31Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        map.put(PROPERTY_REGION_ID, Integer.toString(regionID));\r\n+\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        for (final Entry<String, DWDPollentypeJSON> entry : pollen.entrySet()) {\r\n+            final String pollentype = CHANNELS_POLLEN_MAP.get(entry.getKey());\r\n+            final DWDPollentypeJSON jsonType = entry.getValue();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        }\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r\n+        final String channelName = pollentype + \"#\" + subchannel;\r\n+        if (value == null) {\r\n+            value = \"-1\";\r\n+        }\r\n+        channels.put(channelName, new StringType(value));\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzc4MQ==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406907781", "createdAt": "2020-04-10T19:28:55Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        map.put(PROPERTY_REGION_ID, Integer.toString(regionID));\r\n+\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        for (final Entry<String, DWDPollentypeJSON> entry : pollen.entrySet()) {\r\n+            final String pollentype = CHANNELS_POLLEN_MAP.get(entry.getKey());\r\n+            final DWDPollentypeJSON jsonType = entry.getValue();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        }\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r\n+        final String channelName = pollentype + \"#\" + subchannel;\r\n+        if (value == null) {\r\n+            value = \"-1\";\r\n+        }\r\n+        channels.put(channelName, new StringType(value));\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Njc2OA==", "bodyText": "Changed NP-handling, so changed like you suggested now", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407046768", "createdAt": "2020-04-11T10:28:22Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        map.put(PROPERTY_REGION_ID, Integer.toString(regionID));\r\n+\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        for (final Entry<String, DWDPollentypeJSON> entry : pollen.entrySet()) {\r\n+            final String pollentype = CHANNELS_POLLEN_MAP.get(entry.getKey());\r\n+            final DWDPollentypeJSON jsonType = entry.getValue();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        }\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r\n+        final String channelName = pollentype + \"#\" + subchannel;\r\n+        if (value == null) {\r\n+            value = \"-1\";\r\n+        }\r\n+        channels.put(channelName, new StringType(value));\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjUyNA==", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066524", "createdAt": "2020-04-11T13:51:56Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        map.put(PROPERTY_REGION_ID, Integer.toString(regionID));\r\n+\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        for (final Entry<String, DWDPollentypeJSON> entry : pollen.entrySet()) {\r\n+            final String pollentype = CHANNELS_POLLEN_MAP.get(entry.getKey());\r\n+            final DWDPollentypeJSON jsonType = entry.getValue();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        }\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r\n+        final String channelName = pollentype + \"#\" + subchannel;\r\n+        if (value == null) {\r\n+            value = \"-1\";\r\n+        }\r\n+        channels.put(channelName, new StringType(value));\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY0NjM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1MzozM1rOGD8syw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyOTowNFrOGEDrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzQxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\n          \n          \n            \n                private DWDPollenflugBridgeConfiguration bridgeConfig;\n          \n      \n    \n    \n  \n\nThere is an agreement not to use @NonNullByDefault({}) for the config.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406793419", "createdAt": "2020-04-10T14:53:33Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4MTk3Mw==", "bodyText": "What pattern should be used there? Initialize with a new empty constructor?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406881973", "createdAt": "2020-04-10T18:21:58Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzQxOQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzgzOQ==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406907839", "createdAt": "2020-04-10T19:29:04Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzQxOQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY0OTcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1NDozMVrOGD8uug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoyMzozOVrOGECJcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzkxNA==", "bodyText": "since this is only one value, I would suggest to remove the check method and do the check right here", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406793914", "createdAt": "2020-04-10T14:54:31Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4MjY3NA==", "bodyText": "In my opinion that is a logic that belongs to the object that should be validate.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406882674", "createdAt": "2020-04-10T18:23:39Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzkxNA=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY1MDQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1NDo0N1rOGD8vKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDoxMzoxMlrOGEUGjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDAyNw==", "bodyText": "maybe add the reason of the error as third parameter", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406794027", "createdAt": "2020-04-10T14:54:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NjkwMg==", "bodyText": "What additional information can be parsed  there except that the configuration is not valid?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407046902", "createdAt": "2020-04-11T10:29:28Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDAyNw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTQzOQ==", "bodyText": "If you check it here, you could determine what went wrong (agreed, you only have one parameter ATM) and set something like updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"refreshTime needs to be above 15\");", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407091439", "createdAt": "2020-04-11T17:50:09Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDAyNw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3Njg0NQ==", "bodyText": "Added error description", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407176845", "createdAt": "2020-04-12T10:13:12Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDAyNw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY1ODA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1NzoxOFrOGD8zrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyOTozOVrOGEDskA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (pollingJob == null || pollingJob.isCancelled()) {\n          \n          \n            \n                    final ScheduledFuture<?> localPollingJob = this.pollingJob;\n          \n          \n            \n                    if (localPollingJob == null || localPollingJob.isCancelled()) {\n          \n      \n    \n    \n  \n\nbetter use a final local variable here", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406795182", "createdAt": "2020-04-10T14:57:18Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzNDc1MQ==", "bodyText": "What is the advantage of this?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406834751", "createdAt": "2020-04-10T16:28:49Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTE4Mg=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzA1NQ==", "bodyText": "The advantage is more below, where you access the field a second time after the null check. There is no guarantee that the field is still non-null (the compiler should show a warning). This can be avoided by local variables as nothing outside can change it.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406857055", "createdAt": "2020-04-10T17:22:02Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTE4Mg=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODA0OA==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908048", "createdAt": "2020-04-10T19:29:39Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTE4Mg=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY1ODQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1NzozMlrOGD8z-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyOTo0NVrOGEDsuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTI1Nw==", "bodyText": "see above, use a final local variable", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406795257", "createdAt": "2020-04-10T14:57:32Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODA5MQ==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908091", "createdAt": "2020-04-10T19:29:45Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTI1Nw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY1OTgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDo1ODowMVrOGD800Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDozMDowMlrOGEMLMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTQ3Mw==", "bodyText": "and set the class member to null here", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406795473", "createdAt": "2020-04-10T14:58:01Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            pollingJob.cancel(true);\r\n+            pollingJob = null;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Njk2Mw==", "bodyText": "I think there is no change, if I got you right?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407046963", "createdAt": "2020-04-11T10:30:02Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            pollingJob.cancel(true);\r\n+            pollingJob = null;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTQ3Mw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY3MDcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugPolling.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTowMTo1OFrOGD87kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMDowMlrOGEDtIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzIwMw==", "bodyText": "I would suggest to remove this class and integrate it into the bridge handler. You can then re-name run() to something like poll and reference that with this::poll when you schedule the polling. The callback can be removed and you can call thing status updates directly.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406797203", "createdAt": "2020-04-10T15:01:58Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugPolling.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.SocketTimeoutException;\r\n+import java.net.URI;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugPolling} polls data from DWD\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugPolling implements Runnable {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODE5Mg==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908192", "createdAt": "2020-04-10T19:30:02Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugPolling.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.SocketTimeoutException;\r\n+import java.net.URI;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugPolling} polls data from DWD\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugPolling implements Runnable {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzIwMw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY3MTQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTowMjoyMVrOGD88IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMDowN1rOGEDtOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzM0NQ==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406797345", "createdAt": "2020-04-10T15:02:21Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODIxNg==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908216", "createdAt": "2020-04-10T19:30:07Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzM0NQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY3MjM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTowMjo0MFrOGD88pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMDoxNlrOGEDtZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzQ3OQ==", "bodyText": "better do not cache the bridge handler but get it if you need it.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406797479", "createdAt": "2020-04-10T15:02:40Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r\n+\r\n+    private @Nullable DWDPollenflugBridgeHandler bridgeHandler;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODI2MA==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908260", "createdAt": "2020-04-10T19:30:16Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r\n+\r\n+    private @Nullable DWDPollenflugBridgeHandler bridgeHandler;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzQ3OQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY3NDAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTowMzoyMVrOGD89sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoyNDozM1rOGECK6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5Nzc0Nw==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406797747", "createdAt": "2020-04-10T15:03:21Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r\n+\r\n+    private @Nullable DWDPollenflugBridgeHandler bridgeHandler;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4MzA1MA==", "bodyText": "see above too", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406883050", "createdAt": "2020-04-10T18:24:33Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r\n+\r\n+    private @Nullable DWDPollenflugBridgeHandler bridgeHandler;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5Nzc0Nw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY3NzA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTowNDoxOVrOGD8_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMDozMVrOGEDtuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5ODIxOQ==", "bodyText": "what do you try to achieve here?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406798219", "createdAt": "2020-04-10T15:04:19Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            pollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4ODU5OA==", "bodyText": "I thought I had some kind of cycle when updating the properties of thing. But retested it now and can't reproduce. :D", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406888598", "createdAt": "2020-04-10T18:38:02Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            pollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5ODIxOQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODM0NA==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908344", "createdAt": "2020-04-10T19:30:31Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            pollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5ODIxOQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY4NDUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTowNjo1OVrOGD9EDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMDo0MFrOGEDt5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5OTM3Mg==", "bodyText": "no need to check isLinked, it's a very expensive call. Let the framework take care of that.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406799372", "createdAt": "2020-04-10T15:06:59Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r\n+\r\n+    private @Nullable DWDPollenflugBridgeHandler bridgeHandler;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        if (bridgeHandler == null) {\r\n+            Bridge bridge = getBridge();\r\n+            if (bridge == null) {\r\n+                return null;\r\n+            }\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                bridgeHandler.registerRegionListener(this);\r\n+            } else {\r\n+                return null;\r\n+            }\r\n+        }\r\n+\r\n+        return bridgeHandler;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            handler.unregisterRegionListener(this);\r\n+            bridgeHandler = null;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {\r\n+        if (!ignoreConfigurationUpdate) {\r\n+            super.handleConfigurationUpdate(configurationParameters);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void notifyOnUpdate(DWDPollenflug pollenflug) {\r\n+        DWDRegion region = pollenflug.getRegion(thingConfig.getRegionID());\r\n+        if (region == null) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Region not found\");\r\n+            return;\r\n+        }\r\n+\r\n+        updateStatus(ThingStatus.ONLINE);\r\n+\r\n+        ignoreConfigurationUpdate = true;\r\n+        updateProperties(region.getProperties());\r\n+        ignoreConfigurationUpdate = false;\r\n+\r\n+        updateChannels(region.getChannels());\r\n+\r\n+        updateChannels(pollenflug.getChannels());\r\n+\r\n+        if (lastUpdate == null || !lastUpdate.equals(pollenflug.getLastUpdate())) {\r\n+            triggerChannel(CHANNEL_UPDATES + \"#\" + CHANNEL_UPDATED, TRIGGER_REFRESHED);\r\n+            lastUpdate = pollenflug.getLastUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    private void updateChannels(Map<String, State> channels) {\r\n+        for (Entry<String, State> entry : channels.entrySet()) {\r\n+            String channelID = entry.getKey();\r\n+            if (isLinked(channelID)) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODM4OQ==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908389", "createdAt": "2020-04-10T19:30:40Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r\n+\r\n+    private @Nullable DWDPollenflugBridgeHandler bridgeHandler;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        if (bridgeHandler == null) {\r\n+            Bridge bridge = getBridge();\r\n+            if (bridge == null) {\r\n+                return null;\r\n+            }\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                bridgeHandler.registerRegionListener(this);\r\n+            } else {\r\n+                return null;\r\n+            }\r\n+        }\r\n+\r\n+        return bridgeHandler;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            handler.unregisterRegionListener(this);\r\n+            bridgeHandler = null;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {\r\n+        if (!ignoreConfigurationUpdate) {\r\n+            super.handleConfigurationUpdate(configurationParameters);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void notifyOnUpdate(DWDPollenflug pollenflug) {\r\n+        DWDRegion region = pollenflug.getRegion(thingConfig.getRegionID());\r\n+        if (region == null) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Region not found\");\r\n+            return;\r\n+        }\r\n+\r\n+        updateStatus(ThingStatus.ONLINE);\r\n+\r\n+        ignoreConfigurationUpdate = true;\r\n+        updateProperties(region.getProperties());\r\n+        ignoreConfigurationUpdate = false;\r\n+\r\n+        updateChannels(region.getChannels());\r\n+\r\n+        updateChannels(pollenflug.getChannels());\r\n+\r\n+        if (lastUpdate == null || !lastUpdate.equals(pollenflug.getLastUpdate())) {\r\n+            triggerChannel(CHANNEL_UPDATES + \"#\" + CHANNEL_UPDATED, TRIGGER_REFRESHED);\r\n+            lastUpdate = pollenflug.getLastUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    private void updateChannels(Map<String, State> channels) {\r\n+        for (Entry<String, State> entry : channels.entrySet()) {\r\n+            String channelID = entry.getKey();\r\n+            if (isLinked(channelID)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5OTM3Mg=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY4OTc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTowODo1MFrOGD9HKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMToxMVrOGEDuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMDE2OQ==", "bodyText": "I don't think these are properties but should be channels as they change quite often.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406800169", "createdAt": "2020-04-10T15:08:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<bridge-type id=\"bridge\">\r\n+\t\t<label>DWD Pollen count index - Bridge</label>\r\n+\t\t<description>Bridge for accessing pollen count index data of the DWD</description>\r\n+\t\t\t\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"sender\"/>\r\n+\t\t\t<property name=\"name\"/>\r\n+\t\t\t<property name=\"refreshed\"/>\r\n+\t\t\t<property name=\"next_update\"/>\r\n+\t\t\t<property name=\"last_update\"/>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODU1MQ==", "bodyText": "Moved to channels", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908551", "createdAt": "2020-04-10T19:31:11Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<bridge-type id=\"bridge\">\r\n+\t\t<label>DWD Pollen count index - Bridge</label>\r\n+\t\t<description>Bridge for accessing pollen count index data of the DWD</description>\r\n+\t\t\t\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"sender\"/>\r\n+\t\t\t<property name=\"name\"/>\r\n+\t\t\t<property name=\"refreshed\"/>\r\n+\t\t\t<property name=\"next_update\"/>\r\n+\t\t\t<property name=\"last_update\"/>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMDE2OQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY5MjM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTowOTo0MlrOGD9IrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzozNDozNVrOGEA5ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMDU1Ng==", "bodyText": "I think the labels shpould be localized, too.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406800556", "createdAt": "2020-04-10T15:09:42Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "diffHunk": "@@ -0,0 +1,162 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"region\">\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"bridge\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\t\r\n+\t\t<label>DWD Pollen count index - Region</label>\r\n+\t\t<description>Pollen count index for a region or partregion</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"alder\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Alder</label>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODk0Ng==", "bodyText": "I think I already do this in i18n file?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406858946", "createdAt": "2020-04-10T17:26:46Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "diffHunk": "@@ -0,0 +1,162 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"region\">\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"bridge\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\t\r\n+\t\t<label>DWD Pollen count index - Region</label>\r\n+\t\t<description>Pollen count index for a region or partregion</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"alder\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Alder</label>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMDU1Ng=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2MjI3NQ==", "bodyText": "My fault.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406862275", "createdAt": "2020-04-10T17:34:35Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "diffHunk": "@@ -0,0 +1,162 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"region\">\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"bridge\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\t\r\n+\t\t<label>DWD Pollen count index - Region</label>\r\n+\t\t<description>Pollen count index for a region or partregion</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"alder\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Alder</label>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMDU1Ng=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY5NTExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToxMDo0MFrOGD9KVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDowNTo1M1rOGEUDhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMDk4Mg==", "bodyText": "I don't think you should add these properties, they just reflect the configuration.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406800982", "createdAt": "2020-04-10T15:10:40Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "diffHunk": "@@ -0,0 +1,162 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"region\">\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"bridge\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\t\r\n+\t\t<label>DWD Pollen count index - Region</label>\r\n+\t\t<description>Pollen count index for a region or partregion</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"alder\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Alder</label>\r\n+\t\t\t\t<description>Information for alder</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ambrosia\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ambrosia</label>\r\n+\t\t\t\t<description>Information for ambrosia</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ash\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ash tree</label>\r\n+\t\t\t\t<description>Information for ash tree</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"birch\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Birch</label>\r\n+\t\t\t\t<description>Information for birch</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"grasses\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Grasses</label>\r\n+\t\t\t\t<description>Information for grasses</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"hazel\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Hazel</label>\r\n+\t\t\t\t<description>Information for hazel</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"mugwort\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Mugwort</label>\r\n+\t\t\t\t<description>Information for mugwort</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"rye\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Rye</label>\r\n+\t\t\t\t<description>Information for rye</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"region_id\"/>\r\n+\t\t\t<property name=\"region_name\"/>\r\n+\t\t\t<property name=\"partregion_name\"/>\r\n+\t\t</properties>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwOTMxNQ==", "bodyText": "I removed region_id! The region_name and partregion_name I want to leave there for control reasons for those who use text-configuration, whether the correct region is loaded.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406909315", "createdAt": "2020-04-10T19:33:19Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "diffHunk": "@@ -0,0 +1,162 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"region\">\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"bridge\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\t\r\n+\t\t<label>DWD Pollen count index - Region</label>\r\n+\t\t<description>Pollen count index for a region or partregion</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"alder\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Alder</label>\r\n+\t\t\t\t<description>Information for alder</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ambrosia\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ambrosia</label>\r\n+\t\t\t\t<description>Information for ambrosia</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ash\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ash tree</label>\r\n+\t\t\t\t<description>Information for ash tree</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"birch\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Birch</label>\r\n+\t\t\t\t<description>Information for birch</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"grasses\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Grasses</label>\r\n+\t\t\t\t<description>Information for grasses</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"hazel\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Hazel</label>\r\n+\t\t\t\t<description>Information for hazel</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"mugwort\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Mugwort</label>\r\n+\t\t\t\t<description>Information for mugwort</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"rye\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Rye</label>\r\n+\t\t\t\t<description>Information for rye</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"region_id\"/>\r\n+\t\t\t<property name=\"region_name\"/>\r\n+\t\t\t<property name=\"partregion_name\"/>\r\n+\t\t</properties>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMDk4Mg=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NjA2OQ==", "bodyText": "Do you agree leaving region_name and partregion_name as properties?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407176069", "createdAt": "2020-04-12T10:05:53Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "diffHunk": "@@ -0,0 +1,162 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"region\">\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"bridge\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\t\r\n+\t\t<label>DWD Pollen count index - Region</label>\r\n+\t\t<description>Pollen count index for a region or partregion</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"alder\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Alder</label>\r\n+\t\t\t\t<description>Information for alder</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ambrosia\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ambrosia</label>\r\n+\t\t\t\t<description>Information for ambrosia</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ash\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ash tree</label>\r\n+\t\t\t\t<description>Information for ash tree</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"birch\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Birch</label>\r\n+\t\t\t\t<description>Information for birch</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"grasses\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Grasses</label>\r\n+\t\t\t\t<description>Information for grasses</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"hazel\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Hazel</label>\r\n+\t\t\t\t<description>Information for hazel</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"mugwort\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Mugwort</label>\r\n+\t\t\t\t<description>Information for mugwort</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"rye\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Rye</label>\r\n+\t\t\t\t<description>Information for rye</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"region_id\"/>\r\n+\t\t\t<property name=\"region_name\"/>\r\n+\t\t\t<property name=\"partregion_name\"/>\r\n+\t\t</properties>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMDk4Mg=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDY5NzQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToxMTo0M1rOGD9L0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozMzo1MVrOGEDyUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMTM2MQ==", "bodyText": "If these values are available on the bridge, there is no need to add them to each thing", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406801361", "createdAt": "2020-04-10T15:11:43Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "diffHunk": "@@ -0,0 +1,162 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"region\">\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"bridge\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\t\r\n+\t\t<label>DWD Pollen count index - Region</label>\r\n+\t\t<description>Pollen count index for a region or partregion</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"alder\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Alder</label>\r\n+\t\t\t\t<description>Information for alder</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ambrosia\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ambrosia</label>\r\n+\t\t\t\t<description>Information for ambrosia</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ash\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ash tree</label>\r\n+\t\t\t\t<description>Information for ash tree</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"birch\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Birch</label>\r\n+\t\t\t\t<description>Information for birch</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"grasses\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Grasses</label>\r\n+\t\t\t\t<description>Information for grasses</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"hazel\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Hazel</label>\r\n+\t\t\t\t<description>Information for hazel</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"mugwort\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Mugwort</label>\r\n+\t\t\t\t<description>Information for mugwort</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"rye\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Rye</label>\r\n+\t\t\t\t<description>Information for rye</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"region_id\"/>\r\n+\t\t\t<property name=\"region_name\"/>\r\n+\t\t\t<property name=\"partregion_name\"/>\r\n+\t\t</properties>\r\n+\t\t\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"regionID\" type=\"integer\" required=\"true\">\r\n+\t\t\t\t<label>Region</label>\r\n+\t\t\t\t<description>The partregion or region that should be reported.</description>\r\n+\t\t\t\t<options>\r\n+\t\t\t\t\t<option value=\"11\">Inseln und Marschen</option>\r\n+\t\t\t\t\t<option value=\"12\">Geest, Schleswig-Holstein und Hamburg</option>\r\n+\t\t\t\t\t<option value=\"20\">Mecklenburg-Vorpommern</option>\r\n+\t\t\t\t\t<option value=\"31\">Westl. Niedersachsen/Bremen</option>\r\n+\t\t\t\t\t<option value=\"32\">\u00d6stl. Niedersachsen</option>\r\n+\t\t\t\t\t<option value=\"41\">Rhein.-Westf\u00e4l. Tiefland</option>\r\n+\t\t\t\t\t<option value=\"42\">Ostwestfalen</option>\r\n+\t\t\t\t\t<option value=\"43\">Mittelgebirge NRW</option>\r\n+\t\t\t\t\t<option value=\"50\">Brandenburg und Berlin</option>\r\n+\t\t\t\t\t<option value=\"61\">Tiefland Sachsen-Anhalt</option>\r\n+\t\t\t\t\t<option value=\"62\">Harz</option>\r\n+\t\t\t\t\t<option value=\"71\">Tiefland Th\u00fcringen</option>\r\n+\t\t\t\t\t<option value=\"72\">Mittelgebirge Th\u00fcringen</option>\r\n+\t\t\t\t\t<option value=\"81\">Tiefland Sachsen</option>\r\n+\t\t\t\t\t<option value=\"82\">Mittelgebirge Sachsen</option>\r\n+\t\t\t\t\t<option value=\"91\">Nordhessen und hess. Mittelgebirge</option>\r\n+\t\t\t\t\t<option value=\"92\">Rhein-Main</option>\r\n+\t\t\t\t\t<option value=\"101\">Rhein, Pfalz, Nahe und Mosel</option>\r\n+\t\t\t\t\t<option value=\"102\">Mittelgebirgsbereich Rheinland-Pfalz</option>\r\n+\t\t\t\t\t<option value=\"103\">Saarland</option>\r\n+\t\t\t\t\t<option value=\"111\">Oberrhein und unteres Neckartal</option>\r\n+\t\t\t\t\t<option value=\"112\">Hohenlohe/mittlerer Neckar/Oberschwaben</option>\r\n+\t\t\t\t\t<option value=\"113\">Mittelgebirge Baden-W\u00fcrttemberg</option>\r\n+\t\t\t\t\t<option value=\"121\">Allg\u00e4u/Oberbayern/Bay. Wald</option>\r\n+\t\t\t\t\t<option value=\"122\">Donauniederungen</option>\r\n+\t\t\t\t\t<option value=\"123\">Bayern n. der Donau, o. Bayr. Wald, o. Mainfranken</option>\r\n+\t\t\t\t\t<option value=\"124\">Mainfranken</option>\r\n+\t\t\t\t</options>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t</thing-type>\r\n+\t\r\n+\t<channel-group-type id=\"pollentype\">\r\n+\t\t<label>Pollen type group</label>\r\n+\t\t<description>For each pollen type there are three channels for today, tomorrow and day after tomorrow</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"today\" typeId=\"today\" />\r\n+\t\t\t<channel id=\"tomorrow\" typeId=\"tomorrow\" />\r\n+\t\t\t<channel id=\"dayafter_to\" typeId=\"dayafter_to\" />\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-type id=\"today\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Today</label>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"tomorrow\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Tomorrow</label>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"dayafter_to\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Day after tomorrow</label>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-group-type id=\"updates\">\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwOTUyMg==", "bodyText": "Moved to bridge instead of properties (see above)", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406909522", "createdAt": "2020-04-10T19:33:51Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/region.xml", "diffHunk": "@@ -0,0 +1,162 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"region\">\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"bridge\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\t\r\n+\t\t<label>DWD Pollen count index - Region</label>\r\n+\t\t<description>Pollen count index for a region or partregion</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"alder\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Alder</label>\r\n+\t\t\t\t<description>Information for alder</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ambrosia\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ambrosia</label>\r\n+\t\t\t\t<description>Information for ambrosia</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"ash\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Ash tree</label>\r\n+\t\t\t\t<description>Information for ash tree</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"birch\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Birch</label>\r\n+\t\t\t\t<description>Information for birch</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"grasses\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Grasses</label>\r\n+\t\t\t\t<description>Information for grasses</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"hazel\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Hazel</label>\r\n+\t\t\t\t<description>Information for hazel</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"mugwort\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Mugwort</label>\r\n+\t\t\t\t<description>Information for mugwort</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"rye\" typeId=\"pollentype\">\r\n+\t\t\t\t<label>Rye</label>\r\n+\t\t\t\t<description>Information for rye</description>\r\n+\t\t\t</channel-group>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"region_id\"/>\r\n+\t\t\t<property name=\"region_name\"/>\r\n+\t\t\t<property name=\"partregion_name\"/>\r\n+\t\t</properties>\r\n+\t\t\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"regionID\" type=\"integer\" required=\"true\">\r\n+\t\t\t\t<label>Region</label>\r\n+\t\t\t\t<description>The partregion or region that should be reported.</description>\r\n+\t\t\t\t<options>\r\n+\t\t\t\t\t<option value=\"11\">Inseln und Marschen</option>\r\n+\t\t\t\t\t<option value=\"12\">Geest, Schleswig-Holstein und Hamburg</option>\r\n+\t\t\t\t\t<option value=\"20\">Mecklenburg-Vorpommern</option>\r\n+\t\t\t\t\t<option value=\"31\">Westl. Niedersachsen/Bremen</option>\r\n+\t\t\t\t\t<option value=\"32\">\u00d6stl. Niedersachsen</option>\r\n+\t\t\t\t\t<option value=\"41\">Rhein.-Westf\u00e4l. Tiefland</option>\r\n+\t\t\t\t\t<option value=\"42\">Ostwestfalen</option>\r\n+\t\t\t\t\t<option value=\"43\">Mittelgebirge NRW</option>\r\n+\t\t\t\t\t<option value=\"50\">Brandenburg und Berlin</option>\r\n+\t\t\t\t\t<option value=\"61\">Tiefland Sachsen-Anhalt</option>\r\n+\t\t\t\t\t<option value=\"62\">Harz</option>\r\n+\t\t\t\t\t<option value=\"71\">Tiefland Th\u00fcringen</option>\r\n+\t\t\t\t\t<option value=\"72\">Mittelgebirge Th\u00fcringen</option>\r\n+\t\t\t\t\t<option value=\"81\">Tiefland Sachsen</option>\r\n+\t\t\t\t\t<option value=\"82\">Mittelgebirge Sachsen</option>\r\n+\t\t\t\t\t<option value=\"91\">Nordhessen und hess. Mittelgebirge</option>\r\n+\t\t\t\t\t<option value=\"92\">Rhein-Main</option>\r\n+\t\t\t\t\t<option value=\"101\">Rhein, Pfalz, Nahe und Mosel</option>\r\n+\t\t\t\t\t<option value=\"102\">Mittelgebirgsbereich Rheinland-Pfalz</option>\r\n+\t\t\t\t\t<option value=\"103\">Saarland</option>\r\n+\t\t\t\t\t<option value=\"111\">Oberrhein und unteres Neckartal</option>\r\n+\t\t\t\t\t<option value=\"112\">Hohenlohe/mittlerer Neckar/Oberschwaben</option>\r\n+\t\t\t\t\t<option value=\"113\">Mittelgebirge Baden-W\u00fcrttemberg</option>\r\n+\t\t\t\t\t<option value=\"121\">Allg\u00e4u/Oberbayern/Bay. Wald</option>\r\n+\t\t\t\t\t<option value=\"122\">Donauniederungen</option>\r\n+\t\t\t\t\t<option value=\"123\">Bayern n. der Donau, o. Bayr. Wald, o. Mainfranken</option>\r\n+\t\t\t\t\t<option value=\"124\">Mainfranken</option>\r\n+\t\t\t\t</options>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t</thing-type>\r\n+\t\r\n+\t<channel-group-type id=\"pollentype\">\r\n+\t\t<label>Pollen type group</label>\r\n+\t\t<description>For each pollen type there are three channels for today, tomorrow and day after tomorrow</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"today\" typeId=\"today\" />\r\n+\t\t\t<channel id=\"tomorrow\" typeId=\"tomorrow\" />\r\n+\t\t\t<channel id=\"dayafter_to\" typeId=\"dayafter_to\" />\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-type id=\"today\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Today</label>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"tomorrow\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Tomorrow</label>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"dayafter_to\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Day after tomorrow</label>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-group-type id=\"updates\">\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMTM2MQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDcwMDQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToxMjo0MlrOGD9NqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozNDowMlrOGEDyqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMTgzMw==", "bodyText": "Please do not use a constant for an empty string. Just use \"\" where needed.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406801833", "createdAt": "2020-04-10T15:12:42Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final String DATE_PATTERN = \"yyyy-MM-dd HH:mm\";\r\n+\r\n+    public static final String EMPTY = \"\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwOTYxMA==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406909610", "createdAt": "2020-04-10T19:34:02Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final String DATE_PATTERN = \"yyyy-MM-dd HH:mm\";\r\n+\r\n+    public static final String EMPTY = \"\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMTgzMw=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDcwOTg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNToxNToyNFrOGD9SyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozNDoxM1rOGEDy7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMzE0NQ==", "bodyText": "What do you think about making this an enum?\npublic enum Pollen {\n    AMBROSIA(\"ambrosia\"),\n    BEIFUSS(\"mugwort),\n    ...\n\n    String pollen;\n\n    public Pollen(String pollen) {\n        this.pollen = pollen;\n    }\n}", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406803145", "createdAt": "2020-04-10T15:15:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final String DATE_PATTERN = \"yyyy-MM-dd HH:mm\";\r\n+\r\n+    public static final String EMPTY = \"\";\r\n+\r\n+    public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\r\n+\r\n+    public static final long SECONDS_PER_MINUTE = 60;\r\n+\r\n+    private static final String BINDING_ID = \"dwdpollenflug\";\r\n+\r\n+    // bridge\r\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"bridge\");\r\n+\r\n+    // List of all Thing Type UIDs\r\n+    public static final ThingTypeUID THING_TYPE_REGION = new ThingTypeUID(BINDING_ID, \"region\");\r\n+\r\n+    // Region channels Mapping\r\n+    public static final Map<String, String> CHANNELS_POLLEN_MAP = initChannelMap();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwOTY3Nw==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406909677", "createdAt": "2020-04-10T19:34:13Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final String DATE_PATTERN = \"yyyy-MM-dd HH:mm\";\r\n+\r\n+    public static final String EMPTY = \"\";\r\n+\r\n+    public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\r\n+\r\n+    public static final long SECONDS_PER_MINUTE = 60;\r\n+\r\n+    private static final String BINDING_ID = \"dwdpollenflug\";\r\n+\r\n+    // bridge\r\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"bridge\");\r\n+\r\n+    // List of all Thing Type UIDs\r\n+    public static final ThingTypeUID THING_TYPE_REGION = new ThingTypeUID(BINDING_ID, \"region\");\r\n+\r\n+    // Region channels Mapping\r\n+    public static final Map<String, String> CHANNELS_POLLEN_MAP = initChannelMap();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMzE0NQ=="}, "originalCommit": {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTg4MjU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzo0MDo1N1rOGEIYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzo1MzowNFrOGENX9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDcxMA==", "bodyText": "why is this synchronized?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406984710", "createdAt": "2020-04-10T23:40:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTQwMA==", "bodyText": "Removed. think it was an old try I forgot to remove", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039400", "createdAt": "2020-04-11T09:09:40Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDcxMA=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjYxNA==", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066614", "createdAt": "2020-04-11T13:53:04Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDcxMA=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTg4MzMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzo0MTozM1rOGEIYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjo0MToyOVrOGEQkHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDgxNA==", "bodyText": "How would this return a null? In fact, unmodifiableMap throws an NPE if you give it a null map.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406984814", "createdAt": "2020-04-10T23:41:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n+\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    private @Nullable Map<String, String> legend;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegionJSON> regions;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public @Nullable Set<DWDRegionJSON> getRegions() {\r\n+        return regions;\r\n+    }\r\n+\r\n+    public @Nullable Date getNextUpdate() {\r\n+        return parseDate(nextUpdate);\r\n+    }\r\n+\r\n+    public @Nullable Date getLastUpdate() {\r\n+        return parseDate(lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized @Nullable Date parseDate(@Nullable String date) {\r\n+        try {\r\n+            if (date == null) {\r\n+                return null;\r\n+            }\r\n+\r\n+            return FORMATTER.parse(date.replace(\"Uhr\", \"\").trim());\r\n+        } catch (ParseException e) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    public @Nullable Map<String, String> getLegend() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTQ0Mw==", "bodyText": "Please check my fix!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039443", "createdAt": "2020-04-11T09:10:05Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n+\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    private @Nullable Map<String, String> legend;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegionJSON> regions;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public @Nullable Set<DWDRegionJSON> getRegions() {\r\n+        return regions;\r\n+    }\r\n+\r\n+    public @Nullable Date getNextUpdate() {\r\n+        return parseDate(nextUpdate);\r\n+    }\r\n+\r\n+    public @Nullable Date getLastUpdate() {\r\n+        return parseDate(lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized @Nullable Date parseDate(@Nullable String date) {\r\n+        try {\r\n+            if (date == null) {\r\n+                return null;\r\n+            }\r\n+\r\n+            return FORMATTER.parse(date.replace(\"Uhr\", \"\").trim());\r\n+        } catch (ParseException e) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    public @Nullable Map<String, String> getLegend() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDgxNA=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExODg3Ng==", "bodyText": "Not relevant anymore, because of refactoring of DTOs", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407118876", "createdAt": "2020-04-11T22:41:29Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n+\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    private @Nullable Map<String, String> legend;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegionJSON> regions;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public @Nullable Set<DWDRegionJSON> getRegions() {\r\n+        return regions;\r\n+    }\r\n+\r\n+    public @Nullable Date getNextUpdate() {\r\n+        return parseDate(nextUpdate);\r\n+    }\r\n+\r\n+    public @Nullable Date getLastUpdate() {\r\n+        return parseDate(lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized @Nullable Date parseDate(@Nullable String date) {\r\n+        try {\r\n+            if (date == null) {\r\n+                return null;\r\n+            }\r\n+\r\n+            return FORMATTER.parse(date.replace(\"Uhr\", \"\").trim());\r\n+        } catch (ParseException e) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    public @Nullable Map<String, String> getLegend() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDgxNA=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTg4Nzk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzo0NTowM1rOGEIa-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzo1MzoyNFrOGENYGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTQ2NA==", "bodyText": "SimpleDateFormat is not thread safe, so either create a new one before you use it or make sure that it can't be accessed by two threads at once, like so:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private synchronized @Nullable Date parseDate(@Nullable String date) {\n          \n          \n            \n                private static synchronized @Nullable Date parseDate(@Nullable String date) {", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406985464", "createdAt": "2020-04-10T23:45:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n+\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    private @Nullable Map<String, String> legend;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegionJSON> regions;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public @Nullable Set<DWDRegionJSON> getRegions() {\r\n+        return regions;\r\n+    }\r\n+\r\n+    public @Nullable Date getNextUpdate() {\r\n+        return parseDate(nextUpdate);\r\n+    }\r\n+\r\n+    public @Nullable Date getLastUpdate() {\r\n+        return parseDate(lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized @Nullable Date parseDate(@Nullable String date) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTQ5NQ==", "bodyText": "Please check my fix.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039495", "createdAt": "2020-04-11T09:10:45Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n+\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    private @Nullable Map<String, String> legend;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegionJSON> regions;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public @Nullable Set<DWDRegionJSON> getRegions() {\r\n+        return regions;\r\n+    }\r\n+\r\n+    public @Nullable Date getNextUpdate() {\r\n+        return parseDate(nextUpdate);\r\n+    }\r\n+\r\n+    public @Nullable Date getLastUpdate() {\r\n+        return parseDate(lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized @Nullable Date parseDate(@Nullable String date) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTQ2NA=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjY1MQ==", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066651", "createdAt": "2020-04-11T13:53:24Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n+\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    private @Nullable Map<String, String> legend;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegionJSON> regions;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public @Nullable Set<DWDRegionJSON> getRegions() {\r\n+        return regions;\r\n+    }\r\n+\r\n+    public @Nullable Date getNextUpdate() {\r\n+        return parseDate(nextUpdate);\r\n+    }\r\n+\r\n+    public @Nullable Date getLastUpdate() {\r\n+        return parseDate(lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized @Nullable Date parseDate(@Nullable String date) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTQ2NA=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTg5NDg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzo1MDozOVrOGEIezw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzo0MzoyM1rOGEO11Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjQ0Nw==", "bodyText": "regionID is nullable so you run the risk of a NPE by trying to convert it to a primitive.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406986447", "createdAt": "2020-04-10T23:50:39Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTUzMw==", "bodyText": "Please check my fix.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039533", "createdAt": "2020-04-11T09:11:07Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjQ0Nw=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDY0NQ==", "bodyText": "Refactored DTO so this is not relevant anymore", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090645", "createdAt": "2020-04-11T17:43:23Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjQ0Nw=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkwMzAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzo1NzoyNVrOGEIjew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzo1Mzo1MlrOGENYYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NzY0Mw==", "bodyText": "Please use camelcase\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\n          \n          \n            \n                private void createChannel(final String pollenType, final String subchannel, @Nullable String value) {", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406987643", "createdAt": "2020-04-10T23:57:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        pollen.forEach((k, jsonType) -> {\r\n+            final String pollentype = DWDPollenflugPollen.valueOf(k.toUpperCase()).getChannelName();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        });\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTU1Mw==", "bodyText": "Please check my fix.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039553", "createdAt": "2020-04-11T09:11:29Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        pollen.forEach((k, jsonType) -> {\r\n+            final String pollentype = DWDPollenflugPollen.valueOf(k.toUpperCase()).getChannelName();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        });\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NzY0Mw=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjcyMg==", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066722", "createdAt": "2020-04-11T13:53:52Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        pollen.forEach((k, jsonType) -> {\r\n+            final String pollentype = DWDPollenflugPollen.valueOf(k.toUpperCase()).getChannelName();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        });\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NzY0Mw=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkwNjU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDowMDoxNFrOGEIlfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOToxMTo1MlrOGELubA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODE1Ng==", "bodyText": "You should handle RefreshType at least", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406988156", "createdAt": "2020-04-11T00:00:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, e) -> {\r\n+            if (pollenflug == null) {\r\n+                if (e == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflugJSON pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflugJSON.class);\r\n+                        f.complete(new DWDPollenflug(pollenflugJSON));\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        if (result && regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        pollenflug = newState;\r\n+        if (newState != null) {\r\n+            updateProperties(newState.getProperties());\r\n+\r\n+            newState.getChannels().forEach((channelID, value) -> {\r\n+                logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+                updateState(channelID, value);\r\n+            });\r\n+\r\n+            for (DWDPollenflugRegionListener regionListener : regionListeners) {\r\n+                regionListener.notifyOnUpdate(newState);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTU5Ng==", "bodyText": "Please check my fix", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039596", "createdAt": "2020-04-11T09:11:52Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, e) -> {\r\n+            if (pollenflug == null) {\r\n+                if (e == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflugJSON pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflugJSON.class);\r\n+                        f.complete(new DWDPollenflug(pollenflugJSON));\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        if (result && regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        pollenflug = newState;\r\n+        if (newState != null) {\r\n+            updateProperties(newState.getProperties());\r\n+\r\n+            newState.getChannels().forEach((channelID, value) -> {\r\n+                logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+                updateState(channelID, value);\r\n+            });\r\n+\r\n+            for (DWDPollenflugRegionListener regionListener : regionListeners) {\r\n+                regionListener.notifyOnUpdate(newState);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODE1Ng=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkxOTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoxMjo0MlrOGEItBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMzo1NDoyM1rOGENYrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MDA4Nw==", "bodyText": "Why is this needed if users can just trigger on changes to the \"Update Time\" channel?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406990087", "createdAt": "2020-04-11T00:12:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<bridge-type id=\"bridge\">\r\n+\t\t<label>DWD Pollen count index - Bridge</label>\r\n+\t\t<description>Bridge for accessing pollen count index data of the DWD</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"sender\"/>\r\n+\t\t\t<property name=\"name\"/>\r\n+\t\t</properties>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"min\" min=\"15\">\r\n+\t\t\t\t<default>30</default>\r\n+\t\t\t\t<label>Refresh in Minutes</label>\r\n+\t\t\t\t<description>Time between two API requests in minutes. Minimum 15 minutes.</description>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</bridge-type>\r\n+\t\r\n+\t<channel-group-type id=\"updates\">\r\n+\t\t<label>Updates</label>\r\n+\t\t<description>Information about data state</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"refreshed\" typeId=\"update\">\r\n+\t\t\t\t<label>Bridge refreshed</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"last_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Last update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"next_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Next update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"updated\" typeId=\"updated\" />\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-type id=\"update\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Update time</label>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"updated\">\r\n+\t\t<kind>trigger</kind>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNjUxNw==", "bodyText": "I thought about use case like: don't need to link a item to the refresh channel because I don't want to display anywhere but just want to trigger a rule on refresh", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407036517", "createdAt": "2020-04-11T08:38:12Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<bridge-type id=\"bridge\">\r\n+\t\t<label>DWD Pollen count index - Bridge</label>\r\n+\t\t<description>Bridge for accessing pollen count index data of the DWD</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"sender\"/>\r\n+\t\t\t<property name=\"name\"/>\r\n+\t\t</properties>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"min\" min=\"15\">\r\n+\t\t\t\t<default>30</default>\r\n+\t\t\t\t<label>Refresh in Minutes</label>\r\n+\t\t\t\t<description>Time between two API requests in minutes. Minimum 15 minutes.</description>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</bridge-type>\r\n+\t\r\n+\t<channel-group-type id=\"updates\">\r\n+\t\t<label>Updates</label>\r\n+\t\t<description>Information about data state</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"refreshed\" typeId=\"update\">\r\n+\t\t\t\t<label>Bridge refreshed</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"last_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Last update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"next_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Next update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"updated\" typeId=\"updated\" />\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-type id=\"update\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Update time</label>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"updated\">\r\n+\t\t<kind>trigger</kind>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MDA4Nw=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2Njc5OQ==", "bodyText": "Removed trigger channel!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066799", "createdAt": "2020-04-11T13:54:23Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<bridge-type id=\"bridge\">\r\n+\t\t<label>DWD Pollen count index - Bridge</label>\r\n+\t\t<description>Bridge for accessing pollen count index data of the DWD</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"sender\"/>\r\n+\t\t\t<property name=\"name\"/>\r\n+\t\t</properties>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"min\" min=\"15\">\r\n+\t\t\t\t<default>30</default>\r\n+\t\t\t\t<label>Refresh in Minutes</label>\r\n+\t\t\t\t<description>Time between two API requests in minutes. Minimum 15 minutes.</description>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</bridge-type>\r\n+\t\r\n+\t<channel-group-type id=\"updates\">\r\n+\t\t<label>Updates</label>\r\n+\t\t<description>Information about data state</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"refreshed\" typeId=\"update\">\r\n+\t\t\t\t<label>Bridge refreshed</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"last_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Last update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"next_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Next update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"updated\" typeId=\"updated\" />\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-type id=\"update\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Update time</label>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"updated\">\r\n+\t\t<kind>trigger</kind>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MDA4Nw=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkyMDE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoxMzowMlrOGEItOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzo0NDoxOVrOGEO2UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MDEzOQ==", "bodyText": "The first letter of every word in a label should be capitalized.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Update time</label>\n          \n          \n            \n            \t\t<label>Update Time</label>\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nPlease update elsewhere as appropriate.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406990139", "createdAt": "2020-04-11T00:13:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<bridge-type id=\"bridge\">\r\n+\t\t<label>DWD Pollen count index - Bridge</label>\r\n+\t\t<description>Bridge for accessing pollen count index data of the DWD</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"sender\"/>\r\n+\t\t\t<property name=\"name\"/>\r\n+\t\t</properties>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"min\" min=\"15\">\r\n+\t\t\t\t<default>30</default>\r\n+\t\t\t\t<label>Refresh in Minutes</label>\r\n+\t\t\t\t<description>Time between two API requests in minutes. Minimum 15 minutes.</description>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</bridge-type>\r\n+\t\r\n+\t<channel-group-type id=\"updates\">\r\n+\t\t<label>Updates</label>\r\n+\t\t<description>Information about data state</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"refreshed\" typeId=\"update\">\r\n+\t\t\t\t<label>Bridge refreshed</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"last_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Last update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"next_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Next update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"updated\" typeId=\"updated\" />\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-type id=\"update\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Update time</label>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNjg2MA==", "bodyText": "Is this an OpenHAB convention? Should I although do it like \"Refresh In Minutes\" or like \"Refresh in Minutes\". And should it be the same in translation file?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407036860", "createdAt": "2020-04-11T08:41:58Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<bridge-type id=\"bridge\">\r\n+\t\t<label>DWD Pollen count index - Bridge</label>\r\n+\t\t<description>Bridge for accessing pollen count index data of the DWD</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"sender\"/>\r\n+\t\t\t<property name=\"name\"/>\r\n+\t\t</properties>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"min\" min=\"15\">\r\n+\t\t\t\t<default>30</default>\r\n+\t\t\t\t<label>Refresh in Minutes</label>\r\n+\t\t\t\t<description>Time between two API requests in minutes. Minimum 15 minutes.</description>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</bridge-type>\r\n+\t\r\n+\t<channel-group-type id=\"updates\">\r\n+\t\t<label>Updates</label>\r\n+\t\t<description>Information about data state</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"refreshed\" typeId=\"update\">\r\n+\t\t\t\t<label>Bridge refreshed</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"last_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Last update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"next_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Next update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"updated\" typeId=\"updated\" />\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-type id=\"update\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Update time</label>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MDEzOQ=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NzM1OA==", "bodyText": "Using upper-case letters as first letters in labels is an openHAB convention, yes. This also applies to translations. Please do not use something like \"In Minutes\". If the unit is set in the description, the UI should properly display the unit.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407087358", "createdAt": "2020-04-11T17:12:41Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<bridge-type id=\"bridge\">\r\n+\t\t<label>DWD Pollen count index - Bridge</label>\r\n+\t\t<description>Bridge for accessing pollen count index data of the DWD</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"sender\"/>\r\n+\t\t\t<property name=\"name\"/>\r\n+\t\t</properties>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"min\" min=\"15\">\r\n+\t\t\t\t<default>30</default>\r\n+\t\t\t\t<label>Refresh in Minutes</label>\r\n+\t\t\t\t<description>Time between two API requests in minutes. Minimum 15 minutes.</description>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</bridge-type>\r\n+\t\r\n+\t<channel-group-type id=\"updates\">\r\n+\t\t<label>Updates</label>\r\n+\t\t<description>Information about data state</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"refreshed\" typeId=\"update\">\r\n+\t\t\t\t<label>Bridge refreshed</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"last_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Last update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"next_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Next update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"updated\" typeId=\"updated\" />\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-type id=\"update\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Update time</label>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MDEzOQ=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDc2OQ==", "bodyText": "Fixed all labels to upper case and removed in Minutes", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090769", "createdAt": "2020-04-11T17:44:19Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"dwdpollenflug\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<bridge-type id=\"bridge\">\r\n+\t\t<label>DWD Pollen count index - Bridge</label>\r\n+\t\t<description>Bridge for accessing pollen count index data of the DWD</description>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"updates\" typeId=\"updates\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<properties>\r\n+\t\t\t<property name=\"sender\"/>\r\n+\t\t\t<property name=\"name\"/>\r\n+\t\t</properties>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" unit=\"min\" min=\"15\">\r\n+\t\t\t\t<default>30</default>\r\n+\t\t\t\t<label>Refresh in Minutes</label>\r\n+\t\t\t\t<description>Time between two API requests in minutes. Minimum 15 minutes.</description>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</bridge-type>\r\n+\t\r\n+\t<channel-group-type id=\"updates\">\r\n+\t\t<label>Updates</label>\r\n+\t\t<description>Information about data state</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"refreshed\" typeId=\"update\">\r\n+\t\t\t\t<label>Bridge refreshed</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"last_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Last update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"next_update\" typeId=\"update\">\r\n+\t\t\t\t<label>Next update from DWD</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"updated\" typeId=\"updated\" />\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-type id=\"update\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Update time</label>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MDEzOQ=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkyODU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoxOTo1M1rOGEIxrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOToxMjoxNFrOGELujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTI3Nw==", "bodyText": "You at least handle a RefreshType command", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406991277", "createdAt": "2020-04-11T00:19:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNzYyNQ==", "bodyText": "Just for my understanding of this, when ist RefreshType command triggered?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407037625", "createdAt": "2020-04-11T08:50:06Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTI3Nw=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTYzMQ==", "bodyText": "Please check my fix", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039631", "createdAt": "2020-04-11T09:12:14Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTI3Nw=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkzMjk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoyMzo1NFrOGEIz_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOToxMjozM1rOGELupA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTg3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ScheduledFuture<?> localPollingJob = this.pollingJob;\n          \n          \n            \n                    if (localPollingJob == null || localPollingJob.isCancelled()) {\n          \n          \n            \n                    final ScheduledFuture<?> localPollingJob = this.pollingJob;\n          \n          \n            \n                    final DWDPollenflug pollenflug = this.pollenflug;\n          \n          \n            \n                    if (localPollingJob == null || localPollingJob.isCancelled()) {", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406991871", "createdAt": "2020-04-11T00:23:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTY1Mg==", "bodyText": "please check my fix.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039652", "createdAt": "2020-04-11T09:12:33Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTg3MQ=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTkzMzgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDoyNDozN1rOGEI0dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOToxMjo1NVrOGELuzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTk5MQ==", "bodyText": "Instead of 'e', please give the variable a name that at least gives a hint as to what the datatype is.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406991991", "createdAt": "2020-04-11T00:24:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, e) -> {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTY5NQ==", "bodyText": "Please check my fix.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039695", "createdAt": "2020-04-11T09:12:55Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, e) -> {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTk5MQ=="}, "originalCommit": {"oid": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjcxMzA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzoxNToxM1rOGEOqBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjo0MzoxNVrOGEQkqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NzYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This binding supports a bridge thing (dwdpollenflug), which polls the dataset for Germany in an adjustable interval. \n          \n          \n            \n            This binding supports a bridge thing (`dwdpollenflug`), which polls the dataset for Germany in an adjustable interval.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407087622", "createdAt": "2020-04-11T17:15:13Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -1,21 +1,23 @@\n # DWDPollenflug Binding\r\n \r\n-The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. \r\n+This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n \r\n https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n \r\n \r\n ## Supported Things\r\n \r\n-This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+This binding supports a bridge thing (dwdpollenflug), which polls the dataset for Germany in an adjustable interval. \r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDA5NA==", "bodyText": "Added", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104094", "createdAt": "2020-04-11T19:53:14Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -1,21 +1,23 @@\n # DWDPollenflug Binding\r\n \r\n-The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. \r\n+This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n \r\n https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n \r\n \r\n ## Supported Things\r\n \r\n-This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+This binding supports a bridge thing (dwdpollenflug), which polls the dataset for Germany in an adjustable interval. \r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NzYyMg=="}, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExOTAxNg==", "bodyText": "I noticed a mistake the bridge thing is called bridge. Fixed this as well", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407119016", "createdAt": "2020-04-11T22:43:15Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -1,21 +1,23 @@\n # DWDPollenflug Binding\r\n \r\n-The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. \r\n+This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n \r\n https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n \r\n \r\n ## Supported Things\r\n \r\n-This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+This binding supports a bridge thing (dwdpollenflug), which polls the dataset for Germany in an adjustable interval. \r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NzYyMg=="}, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjcxMzE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzoxNToyOVrOGEOqGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1MzoyNVrOGEPqZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NzY0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            And it supports a region thing (region), representing the data for all pollen types of a region or partregion.\n          \n          \n            \n            And it supports a region thing (`region`), representing the data for all pollen types of a region or partregion.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407087641", "createdAt": "2020-04-11T17:15:29Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -1,21 +1,23 @@\n # DWDPollenflug Binding\r\n \r\n-The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. \r\n+This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n \r\n https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n \r\n \r\n ## Supported Things\r\n \r\n-This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+This binding supports a bridge thing (dwdpollenflug), which polls the dataset for Germany in an adjustable interval. \r\n+And it supports a region thing (region), representing the data for all pollen types of a region or partregion.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDEwMg==", "bodyText": "Added", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104102", "createdAt": "2020-04-11T19:53:25Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -1,21 +1,23 @@\n # DWDPollenflug Binding\r\n \r\n-The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. \r\n+This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n \r\n https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n \r\n \r\n ## Supported Things\r\n \r\n-This binding supports a bridge thing, which polls the dataset for Germany in an adjustable interval. And it supports a region thing, representing the data for all pollen types of a region or partregion.\r\n+This binding supports a bridge thing (dwdpollenflug), which polls the dataset for Germany in an adjustable interval. \r\n+And it supports a region thing (region), representing the data for all pollen types of a region or partregion.\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NzY0MQ=="}, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjcxNzc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzoyMDo0MVrOGEOsUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwODoyNDo1NFrOGETY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\n          \n          \n            \n                                bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\n          \n          \n            \n                        pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\n          \n          \n            \n                                bridgeConfig.refresh, TimeUnit.MINUTES);", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407088210", "createdAt": "2020-04-11T17:20:41Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -89,43 +111,78 @@ public void dispose() {\n     }\r\n \r\n     public void startPolling() {\r\n-        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n             logger.debug(\"Start polling.\");\r\n-            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n-                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NjIxOA==", "bodyText": "This change would require changes to the INITIAL_DELAY constant as well", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407096218", "createdAt": "2020-04-11T18:35:39Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -89,43 +111,78 @@ public void dispose() {\n     }\r\n \r\n     public void startPolling() {\r\n-        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n             logger.debug(\"Start polling.\");\r\n-            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n-                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NzE5NQ==", "bodyText": "When I see it right, the scheduleWithFixedDelay takes only long parameters. So if I change to your suggestion the first polling will start only 1 Minute after binding has been loaded?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407097195", "createdAt": "2020-04-11T18:45:12Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -89,43 +111,78 @@ public void dispose() {\n     }\r\n \r\n     public void startPolling() {\r\n-        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n             logger.debug(\"Start polling.\");\r\n-            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n-                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDIxMQ==", "bodyText": "I think I will not change this, because i want to start polling right after binding loaded", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104211", "createdAt": "2020-04-11T19:54:23Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -89,43 +111,78 @@ public void dispose() {\n     }\r\n \r\n     public void startPolling() {\r\n-        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n             logger.debug(\"Start polling.\");\r\n-            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n-                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExOTI2OQ==", "bodyText": "I have refactored this not using SECONDS_PER_MINUTE constant anymore but\nTimeUnit.MINUTES.toSeconds(bridgeConfig.refresh)\nI like this option more then calculating it on my own. What do you thing. Pleas check!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407119269", "createdAt": "2020-04-11T22:46:22Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -89,43 +111,78 @@ public void dispose() {\n     }\r\n \r\n     public void startPolling() {\r\n-        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n             logger.debug(\"Start polling.\");\r\n-            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n-                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1OTYxNw==", "bodyText": "Agreed, that's better. The question is: why do you wnat the one second delay at all? I think there is no need and you can just set it to zero (and use TimeUnit.MINUTES then.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407159617", "createdAt": "2020-04-12T07:30:37Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -89,43 +111,78 @@ public void dispose() {\n     }\r\n \r\n     public void startPolling() {\r\n-        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n             logger.debug(\"Start polling.\");\r\n-            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n-                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NTE1Nw==", "bodyText": "OMG! Just ignore the stupid guy, who didn't see the wood for the trees and check his fix.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407165157", "createdAt": "2020-04-12T08:24:54Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -89,43 +111,78 @@ public void dispose() {\n     }\r\n \r\n     public void startPolling() {\r\n-        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n             logger.debug(\"Start polling.\");\r\n-            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n-                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, "originalCommit": {"oid": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjczNDMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzo0MDoxOVrOGEO0XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1NDo0MFrOGEPq7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDI2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | refresh  |   30    |    no    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\n          \n          \n            \n            | `refresh`  |   30    |    no    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nWe usually add back-ticks around keywords (channels, parameters, things) so they get a special mark-up in the documentation and are clearly visible.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090268", "createdAt": "2020-04-11T17:40:19Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. \r\n+This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing (dwdpollenflug), which polls the dataset for Germany in an adjustable interval. \r\n+And it supports a region thing (region), representing the data for all pollen types of a region or partregion.\r\n+\r\n+## Thing Configuration\r\n+\r\n+### Bridge\r\n+\r\n+| Property | Default | Required | Description                                                                          |\r\n+| -------- | :-----: | :------: | ------------------------------------------------------------------------------------ |\r\n+| refresh  |   30    |    no    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDIzOQ==", "bodyText": "Added on all channels", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104239", "createdAt": "2020-04-11T19:54:40Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/README.md", "diffHunk": "@@ -0,0 +1,198 @@\n+# DWDPollenflug Binding\r\n+\r\n+The \"Deutsche Wetterdienst\" (DWD) reports the current pollen count index for Germany on a daily base and a forecast for tomorrow and the day after tomorrow. \r\n+This binding allows you to retrieve this data for your region or partregion. You can find a map of the data here: \r\n+\r\n+https://isabel.dwd.de/DE/leistungen/gefahrenindizespollen/gefahrenindexpollen.html\r\n+\r\n+\r\n+## Supported Things\r\n+\r\n+This binding supports a bridge thing (dwdpollenflug), which polls the dataset for Germany in an adjustable interval. \r\n+And it supports a region thing (region), representing the data for all pollen types of a region or partregion.\r\n+\r\n+## Thing Configuration\r\n+\r\n+### Bridge\r\n+\r\n+| Property | Default | Required | Description                                                                          |\r\n+| -------- | :-----: | :------: | ------------------------------------------------------------------------------------ |\r\n+| refresh  |   30    |    no    | Define the interval for polling the data from DWD in minutes. Minimum is 15 minutes. |\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDI2OA=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjczNTMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzo0MTozNVrOGEO04g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOToyMDozM1rOGEPdsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDQwMg==", "bodyText": "You can remove that and use the the correct TimeUnit directly in the scheduler", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090402", "createdAt": "2020-04-11T17:41:35Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\r\n+\r\n+    public static final long SECONDS_PER_MINUTE = 60;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMDg1MA==", "bodyText": "See comment above.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407100850", "createdAt": "2020-04-11T19:20:33Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\r\n+\r\n+    public static final long SECONDS_PER_MINUTE = 60;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDQwMg=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjczNTk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzo0MjowM1rOGEO1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1NjoxMlrOGEPrhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDQ3OA==", "bodyText": "Why not just set that to 1?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\n          \n          \n            \n                public static final long INITIAL_DELAY = 1; // in seconds", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090478", "createdAt": "2020-04-11T17:42:03Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDM4OQ==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104389", "createdAt": "2020-04-11T19:56:12Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDQ3OA=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjczNzk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzo0Mzo1MlrOGEO2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1Njo0MlrOGEPrpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDcxMA==", "bodyText": "You don't get channels here. Rename to something like getChannelStateMap or something like that (also applies below).", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090710", "createdAt": "2020-04-11T17:43:52Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegion> regions;\r\n+\r\n+    public Map<String, String> getProperties() {\r\n+        Map<String, String> map = new HashMap<>();\r\n+\r\n+        map.put(PROPERTY_NAME, name);\r\n+        map.put(PROPERTY_SENDER, sender);\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    public Map<String, State> getChannels() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDQyMQ==", "bodyText": "Changed to getChannelsStateMap", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104421", "createdAt": "2020-04-11T19:56:42Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegion> regions;\r\n+\r\n+    public Map<String, String> getProperties() {\r\n+        Map<String, String> map = new HashMap<>();\r\n+\r\n+        map.put(PROPERTY_NAME, name);\r\n+        map.put(PROPERTY_SENDER, sender);\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    public Map<String, State> getChannels() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDcxMA=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc0MTM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzo0Nzo1MFrOGEO3tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwOTo1Nzo0OVrOGEUADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw==", "bodyText": "In case of errors, a listener could register twice and would then also receive the update twice. WDYT about changing that to a Set? A thread-safe implementation would be ConcurrentHashMap.newKeySet();", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407091127", "createdAt": "2020-04-11T17:47:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDc0MA==", "bodyText": "I'm not so familiar with Thread-Safe Sets. Can you maybe give me are more detailed example, or a binding I can have a look?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104740", "createdAt": "2020-04-11T19:59:48Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MTU2Mw==", "bodyText": "Thread-safe implementations can be achived by synchronized collections (i.e. Collections.synchronizedCollection(...). This makes sure that the methods of the collection (like add, remove, get, ...) can only be accessed by one thread at a time, so it is made sure that the same element is never modified by two threads concurrently. The downside is that the whole collection is locked and all othe treads have to wait for the first operazion to complete.\nThe second option is that you use the collections from java.util.concurrent, e.g. the CopyOnWriteList you used. This locks only parts of the collections, so that other parts of the collection can still be accessed by other threads. There is no Set implementation in this package, but the ConcurrentHashMap provides one, so you can use ConcurrentHashMap.newKeySet() instead of new ConcurrentHashMap<>() which does not exist.\nMy second point is that using a Set better fits your use-case than a List. A List can contain duplicates (so if you call add several times with the same object, it gets added several times). Each time you iterate over that list, your listener will get called multiple times. Another (more important issue): Calling remove will only remove the first element that matches, the duplicates stay in the list. The next time you iterate over the list, one the duplicates are called, even if they should have been removed.\nThis can be avoided with a Set, because a Set only allows distinct objects. If you add the same object a second time, the first one is replaced instead of adding a duplicate. You can even check with the return value (true if a new element, false if a replaced element) if something strange happened and log a warning in registerListener. The same holds true for unregister, if you call remove and the return-value is false, you tried to remove a listener that was not part of the listener collection.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407161563", "createdAt": "2020-04-12T07:50:22Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NzcwMQ==", "bodyText": "Ok I changed now. I had a closer look on it and want to ask:\nWouldn't it be a better pattern not to get the bridge handler inside the region handler and call register and unregister there, but overwrite childHandlerInitialized and childHandlerDisposed in the bridge handler?", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407167701", "createdAt": "2020-04-12T08:48:49Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MDQzOA==", "bodyText": "That's probably also possible. But I think we have two patterns so far in openHAB: registering listeners from the thing to the bridge or (in some cases) the bridge iterating over all things. This would be a third one and I guess there is not much benefit in introducing that.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407170438", "createdAt": "2020-04-12T09:14:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTE4MQ==", "bodyText": "I changed it anyway, Please check again!", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175181", "createdAt": "2020-04-12T09:57:49Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc1Mzc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODowMTo1OVrOGEO9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDowMDo0MlrOGEPtMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjYzNw==", "bodyText": "can be private", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407092637", "createdAt": "2020-04-11T18:01:59Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDgxNw==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104817", "createdAt": "2020-04-11T20:00:42Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjYzNw=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc1Mzg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODowMjowN1rOGEO9qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDowMDo1MVrOGEPtPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjY0OA==", "bodyText": "can be private", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407092648", "createdAt": "2020-04-11T18:02:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDgyOQ==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104829", "createdAt": "2020-04-11T20:00:51Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjY0OA=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc1MzkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODowMjoxOFrOGEO9sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDowMToyMVrOGEPtVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjY1OA==", "bodyText": "can be private", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407092658", "createdAt": "2020-04-11T18:02:18Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDg1NA==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104854", "createdAt": "2020-04-11T20:01:21Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjY1OA=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc1NDYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODowMzoxMlrOGEO-BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDowNDoyOVrOGEPujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5Mjc0MQ==", "bodyText": "I'm not to happy with these synchronized methods.\nMy feeling would be to skip the whole synchronization and start/stop the polling in initialize/dispose independently of the existence of listeners. We are talking about one HTTP request (and some processing) at max every 15 minutes. IMO easier code is worth that (then having a thread-safe collection for the listeners would be sufficient). If you want to further reduce the load, you could check if listeners is empty each time poll is called, then it's one check only.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407092741", "createdAt": "2020-04-11T18:03:12Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTE2Ng==", "bodyText": "Changed I always polling for the whole bridge lifetime, which is more correct anyway for the need of bridge channels although getting updated", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407105166", "createdAt": "2020-04-11T20:04:29Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5Mjc0MQ=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc2NDczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoxNDo0M1rOGEPC0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1NDo1NFrOGEPrEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5Mzk2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (DWDPollenflugRegionListener regionListener : regionListeners) {\n          \n          \n            \n                            regionListener.notifyOnUpdate(newState);\n          \n          \n            \n                        }\n          \n          \n            \n                        regionListeners.forEach(listener -> listener.notifyOnUpdate(newState));", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407093969", "createdAt": "2020-04-11T18:14:43Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        if (result && regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        pollenflug = newState;\r\n+        if (newState != null) {\r\n+            updateProperties(newState.getProperties());\r\n+\r\n+            newState.getChannels().forEach((channelID, value) -> {\r\n+                logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+                updateState(channelID, value);\r\n+            });\r\n+\r\n+            for (DWDPollenflugRegionListener regionListener : regionListeners) {\r\n+                regionListener.notifyOnUpdate(newState);\r\n+            }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDI3Mg==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104272", "createdAt": "2020-04-11T19:54:54Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        if (result && regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        pollenflug = newState;\r\n+        if (newState != null) {\r\n+            updateProperties(newState.getProperties());\r\n+\r\n+            newState.getChannels().forEach((channelID, value) -> {\r\n+                logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+                updateState(channelID, value);\r\n+            });\r\n+\r\n+            for (DWDPollenflugRegionListener regionListener : regionListeners) {\r\n+                regionListener.notifyOnUpdate(newState);\r\n+            }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5Mzk2OQ=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc2NTg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoxNTo1MFrOGEPDXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1NTowNlrOGEPrLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDExMA==", "bodyText": "rename to getBridgeHandler or something like that", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407094110", "createdAt": "2020-04-11T18:15:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDMwMQ==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104301", "createdAt": "2020-04-11T19:55:06Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDExMA=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc2NzIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoxNzozOVrOGEPEAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1NToxN1rOGEPrQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDI3Mw==", "bodyText": "Not needed. A REFRESH command should be sent when a channel is linked.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407094273", "createdAt": "2020-04-11T18:17:39Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            refresh();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDMyMA==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104320", "createdAt": "2020-04-11T19:55:17Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            refresh();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDI3Mw=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc3NDgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoyNTo1M1rOGEPHow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1NTozMVrOGEPrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NTIwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    region.getChannels().forEach((channelID, value) -> {\n          \n          \n            \n                        logger.debug(\"Updating channel {} to {}\", channelID, value);\n          \n          \n            \n                        updateState(channelID, value);\n          \n          \n            \n                    });\n          \n          \n            \n                    region.getChannels().forEach(this::updateState);\n          \n      \n    \n    \n  \n\nitem-state-changes are logged by default, so if the channel is linked, this will be already logged.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407095203", "createdAt": "2020-04-11T18:25:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            refresh();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        refresh();\r\n+    }\r\n+\r\n+    private void refresh() {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void notifyOnUpdate(DWDPollenflug pollenflug) {\r\n+        DWDRegion region = pollenflug.getRegion(thingConfig.regionID);\r\n+        if (region == null) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Region not found\");\r\n+            return;\r\n+        }\r\n+\r\n+        updateStatus(ThingStatus.ONLINE);\r\n+\r\n+        updateProperties(region.getProperties());\r\n+\r\n+        region.getChannels().forEach((channelID, value) -> {\r\n+            logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+            updateState(channelID, value);\r\n+        });\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDMzMg==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104332", "createdAt": "2020-04-11T19:55:31Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            refresh();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        refresh();\r\n+    }\r\n+\r\n+    private void refresh() {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void notifyOnUpdate(DWDPollenflug pollenflug) {\r\n+        DWDRegion region = pollenflug.getRegion(thingConfig.regionID);\r\n+        if (region == null) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Region not found\");\r\n+            return;\r\n+        }\r\n+\r\n+        updateStatus(ThingStatus.ONLINE);\r\n+\r\n+        updateProperties(region.getProperties());\r\n+\r\n+        region.getChannels().forEach((channelID, value) -> {\r\n+            logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+            updateState(channelID, value);\r\n+        });\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NTIwMw=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjc3OTEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODozMToyM1rOGEPJxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1NTo0NVrOGEPrZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NTc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        newState.getChannels().forEach((channelID, value) -> {\n          \n          \n            \n                            logger.debug(\"Updating channel {} to {}\", channelID, value);\n          \n          \n            \n                            updateState(channelID, value);\n          \n          \n            \n                        });\n          \n          \n            \n                        newState.getChannels().forEach(this::updateState);\n          \n      \n    \n    \n  \n\nsee other comment", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407095751", "createdAt": "2020-04-11T18:31:23Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        if (result && regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        pollenflug = newState;\r\n+        if (newState != null) {\r\n+            updateProperties(newState.getProperties());\r\n+\r\n+            newState.getChannels().forEach((channelID, value) -> {\r\n+                logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+                updateState(channelID, value);\r\n+            });\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDM1OQ==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104359", "createdAt": "2020-04-11T19:55:45Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        if (result && regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        pollenflug = newState;\r\n+        if (newState != null) {\r\n+            updateProperties(newState.getProperties());\r\n+\r\n+            newState.getChannels().forEach((channelID, value) -> {\r\n+                logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+                updateState(channelID, value);\r\n+            });\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NTc1MQ=="}, "originalCommit": {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzQwOTUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwOToyMjoyNlrOGETwrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDowMDoyNVrOGEUBPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MTI0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @author Johannes DerOetzi Ott - Initial contribution\n          \n          \n            \n             * @author Johannes Ott - Initial contribution\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nalso in other files", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407171245", "createdAt": "2020-04-12T09:22:26Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTQ4Ng==", "bodyText": "Changed in all files", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175486", "createdAt": "2020-04-12T10:00:25Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MTI0NQ=="}, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzQxNjI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwOTozMDowMlrOGETz4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDowMDo1OFrOGEUBdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjA2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\n          \n          \n            \n                    logger.debug(\"Register region listener\");\n          \n          \n            \n                    boolean result = regionListeners.add(regionListener);\n          \n          \n            \n                    if (result) {\n          \n          \n            \n                        startPolling();\n          \n          \n            \n                    }\n          \n          \n            \n                    return result;\n          \n          \n            \n                }\n          \n          \n            \n                public void registerRegionListener(DWDPollenflugRegionListener regionListener) {\n          \n          \n            \n                    if (!regionListeners.add(regionListener)) {\n          \n          \n            \n                        logger.warn(\"Tried to add listener {} but it was already present. This is probably an error.\", regionListener);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nYou don't use the return value in the hting handler, so method can be changed to void", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407172067", "createdAt": "2020-04-12T09:30:02Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionListener> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            poll();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTU0MA==", "bodyText": "Integrated warnings", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175540", "createdAt": "2020-04-12T10:00:58Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionListener> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            poll();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjA2Nw=="}, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzQxNzg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwOTozMjoxNFrOGET0ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDowMTowM1rOGEUBfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjI4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\n          \n          \n            \n                    logger.debug(\"Unregister region listener\");\n          \n          \n            \n                    boolean result = regionListeners.remove(regionListener);\n          \n          \n            \n                    return result;\n          \n          \n            \n                }\n          \n          \n            \n                public void unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\n          \n          \n            \n                    if (!regionListeners.remove(regionListener)) {\n          \n          \n            \n                        logger.warn(\"Tried to add listener {} but it was not registered. This is probably an error.\", regionListener);\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407172282", "createdAt": "2020-04-12T09:32:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionListener> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            poll();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        return result;\r\n+    }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTU1MA==", "bodyText": "Integrated warnings", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175550", "createdAt": "2020-04-12T10:01:03Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionListener> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            poll();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        return result;\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjI4Mg=="}, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzQxODYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwOTozMzowM1rOGET1Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDowMToxM1rOGEUBlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjM3NQ==", "bodyText": "remove synchronized, this is not needed anymore", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407172375", "createdAt": "2020-04-12T09:33:03Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionListener> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            poll();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTU3NA==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175574", "createdAt": "2020-04-12T10:01:13Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionListener> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            poll();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjM3NQ=="}, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzQyMTIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/binding/binding.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwOTozNDo1OVrOGET2RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDowMTozMVrOGEUBpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjY3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<author>Johannes DerOetzi Ott</author>\n          \n          \n            \n            \t<author>Johannes Ott</author>", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407172676", "createdAt": "2020-04-12T09:34:59Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<binding:binding id=\"dwdpollenflug\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\r\n+\r\n+\t<name>DWD Pollenflug Binding</name>\r\n+\t<description>This is the binding for DWDPollenflug.</description>\r\n+\t<author>Johannes DerOetzi Ott</author>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTU4OA==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175588", "createdAt": "2020-04-12T10:01:31Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/resources/ESH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<binding:binding id=\"dwdpollenflug\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\r\n+\r\n+\t<name>DWD Pollenflug Binding</name>\r\n+\t<description>This is the binding for DWDPollenflug.</description>\r\n+\t<author>Johannes DerOetzi Ott</author>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjY3Ng=="}, "originalCommit": {"oid": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzQ3OTE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDo0MzozNVrOGEUS8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNDoyNTo0MVrOGEV3Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDAxNw==", "bodyText": "no need to start polling, you already did that in initialize(), better only notify the recently added handler of the existing pollenflug (if non-null).", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407180017", "createdAt": "2020-04-12T10:43:35Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Refresh interval has to be at least 15 minutes.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void childHandlerInitialized(ThingHandler childHandler, Thing childThing) {\r\n+        if (childHandler instanceof DWDPollenflugRegionHandler) {\r\n+            logger.debug(\"Register region listener.\");\r\n+            if (regionListeners.add((DWDPollenflugRegionHandler) childHandler)) {\r\n+                startPolling();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a53317d1681096640a47b9677e13cd3f1a34a6"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNTYzOQ==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407205639", "createdAt": "2020-04-12T14:25:41Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Refresh interval has to be at least 15 minutes.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void childHandlerInitialized(ThingHandler childHandler, Thing childThing) {\r\n+        if (childHandler instanceof DWDPollenflugRegionHandler) {\r\n+            logger.debug(\"Register region listener.\");\r\n+            if (regionListeners.add((DWDPollenflugRegionHandler) childHandler)) {\r\n+                startPolling();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDAxNw=="}, "originalCommit": {"oid": "68a53317d1681096640a47b9677e13cd3f1a34a6"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzQ4NTY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDo1MToyOVrOGEUWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNDoyNTo1M1rOGEV3Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDg1Mw==", "bodyText": "I think you should move this part down to childHandlerInitialized. And then notify only the recently added child handler and not all child handlers.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407180853", "createdAt": "2020-04-12T10:51:29Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Refresh interval has to be at least 15 minutes.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a53317d1681096640a47b9677e13cd3f1a34a6"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNTY2Nw==", "bodyText": "Moved", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407205667", "createdAt": "2020-04-12T14:25:53Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Refresh interval has to be at least 15 minutes.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDg1Mw=="}, "originalCommit": {"oid": "68a53317d1681096640a47b9677e13cd3f1a34a6"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzQ4ODc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDo1NToyNlrOGEUX3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNDoyNjoxMFrOGEV3Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MTI3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void notifyOnUpdate(@Nullable DWDPollenflug newState) {\n          \n          \n            \n                    if (newState != null) {\n          \n          \n            \n                        pollenflug = newState;\n          \n          \n            \n                        updateProperties(newState.getProperties());\n          \n          \n            \n                        regionListeners.forEach(listener -> listener.notifyOnUpdate(newState));\n          \n          \n            \n                        newState.getChannelsStateMap().forEach(this::updateState);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                public void notifyOnUpdate(@Nullable DWDPollenflug pollenflug) {\n          \n          \n            \n                    if (pollenflug != null) {\n          \n          \n            \n                        this.pollenflug = pollenflug;\n          \n          \n            \n                        updateProperties(newState.getProperties());\n          \n          \n            \n                        regionListeners.forEach(listener -> listener.notifyOnUpdate(pollenflug));\n          \n          \n            \n                        pollenflug.getChannelsStateMap().forEach(this::updateState);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\na State is something different in openHAB, this may result in confusion.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407181279", "createdAt": "2020-04-12T10:55:26Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Refresh interval has to be at least 15 minutes.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void childHandlerInitialized(ThingHandler childHandler, Thing childThing) {\r\n+        if (childHandler instanceof DWDPollenflugRegionHandler) {\r\n+            logger.debug(\"Register region listener.\");\r\n+            if (regionListeners.add((DWDPollenflugRegionHandler) childHandler)) {\r\n+                startPolling();\r\n+            } else {\r\n+                logger.warn(\"Tried to add listener {} but it was already present. This is probably an error.\",\r\n+                        childHandler);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void childHandlerDisposed(ThingHandler childHandler, Thing childThing) {\r\n+        if (childHandler instanceof DWDPollenflugRegionHandler) {\r\n+            logger.debug(\"Unregister region listener.\");\r\n+            if (!regionListeners.remove((DWDPollenflugRegionHandler) childHandler)) {\r\n+                logger.warn(\"Tried to remove listener {} but it was not registered. This is probably an error.\",\r\n+                        childHandler);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        if (newState != null) {\r\n+            pollenflug = newState;\r\n+            updateProperties(newState.getProperties());\r\n+            regionListeners.forEach(listener -> listener.notifyOnUpdate(newState));\r\n+            newState.getChannelsStateMap().forEach(this::updateState);\r\n+        }\r\n+    }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a53317d1681096640a47b9677e13cd3f1a34a6"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNTcwMg==", "bodyText": "Renamed", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407205702", "createdAt": "2020-04-12T14:26:10Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Refresh interval has to be at least 15 minutes.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void childHandlerInitialized(ThingHandler childHandler, Thing childThing) {\r\n+        if (childHandler instanceof DWDPollenflugRegionHandler) {\r\n+            logger.debug(\"Register region listener.\");\r\n+            if (regionListeners.add((DWDPollenflugRegionHandler) childHandler)) {\r\n+                startPolling();\r\n+            } else {\r\n+                logger.warn(\"Tried to add listener {} but it was already present. This is probably an error.\",\r\n+                        childHandler);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void childHandlerDisposed(ThingHandler childHandler, Thing childThing) {\r\n+        if (childHandler instanceof DWDPollenflugRegionHandler) {\r\n+            logger.debug(\"Unregister region listener.\");\r\n+            if (!regionListeners.remove((DWDPollenflugRegionHandler) childHandler)) {\r\n+                logger.warn(\"Tried to remove listener {} but it was not registered. This is probably an error.\",\r\n+                        childHandler);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        if (newState != null) {\r\n+            pollenflug = newState;\r\n+            updateProperties(newState.getProperties());\r\n+            regionListeners.forEach(listener -> listener.notifyOnUpdate(newState));\r\n+            newState.getChannelsStateMap().forEach(this::updateState);\r\n+        }\r\n+    }\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MTI3OQ=="}, "originalCommit": {"oid": "68a53317d1681096640a47b9677e13cd3f1a34a6"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc4NjgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNjoxNToxMFrOGEWtqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNzoxOToxMlrOGEXMMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxOTYyNw==", "bodyText": "can you remove all the blank lines between these fields.\nAlso can you make sure to order the fields: static final ->final->the rest.", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407219627", "createdAt": "2020-04-12T16:15:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cecb32078e251d9a7e6a6cd6c7365fe16221ba4"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyNzQ0Mw==", "bodyText": "Removed and sorted", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407227443", "createdAt": "2020-04-12T17:19:12Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxOTYyNw=="}, "originalCommit": {"oid": "3cecb32078e251d9a7e6a6cd6c7365fe16221ba4"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 550, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}