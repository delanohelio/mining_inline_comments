{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMzI3MTM1", "number": 7518, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTo1ODo0OFrOD4pEug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDowNToyOFrOEAQc0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzE5ODAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTo1ODo0OFrOGPiA2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDo0MjowOVrOGPiPBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTA5Nw==", "bodyText": "Already done above", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939097", "createdAt": "2020-05-02T09:58:48Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n-                if (lastSensorStateCopy.containsKey(sensorId)) {\n-                    final FullSensor lastFullSensor = lastSensorStateCopy.remove(sensorId);\n-                    final Map<String, Object> lastFullSensorState = lastFullSensor.getState();\n-                    lastSensorStates.put(sensorId, sensor);\n-                    if (!lastFullSensorState.equals(sensor.getState())) {\n-                        logger.debug(\"Status update for Hue sensor '{}' detected: {}\", sensorId, sensor.getState());\n-                        notifySensorStatusListeners(sensor, STATE_CHANGED);\n-                    }\n-                } else {\n-                    lastSensorStates.put(sensorId, sensor);\n+                lastSensorStateCopy.remove(sensorId);\n+\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener == null) {\n                     logger.debug(\"Hue sensor '{}' added.\", sensorId);\n-                    notifySensorStatusListeners(sensor, STATE_ADDED);\n \n+                    if (discovery != null) {\n+                        discovery.onSensorAdded(hueBridge, sensor);\n+                    }\n+\n+                    lastSensorStates.put(sensorId, sensor);\n+                } else {\n+                    lastSensorStateCopy.remove(sensorId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MjcyNA==", "bodyText": "Was late this night ;) Already noticed this morning. ;)", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418942724", "createdAt": "2020-05-02T10:42:09Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n-                if (lastSensorStateCopy.containsKey(sensorId)) {\n-                    final FullSensor lastFullSensor = lastSensorStateCopy.remove(sensorId);\n-                    final Map<String, Object> lastFullSensorState = lastFullSensor.getState();\n-                    lastSensorStates.put(sensorId, sensor);\n-                    if (!lastFullSensorState.equals(sensor.getState())) {\n-                        logger.debug(\"Status update for Hue sensor '{}' detected: {}\", sensorId, sensor.getState());\n-                        notifySensorStatusListeners(sensor, STATE_CHANGED);\n-                    }\n-                } else {\n-                    lastSensorStates.put(sensorId, sensor);\n+                lastSensorStateCopy.remove(sensorId);\n+\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener == null) {\n                     logger.debug(\"Hue sensor '{}' added.\", sensorId);\n-                    notifySensorStatusListeners(sensor, STATE_ADDED);\n \n+                    if (discovery != null) {\n+                        discovery.onSensorAdded(hueBridge, sensor);\n+                    }\n+\n+                    lastSensorStates.put(sensorId, sensor);\n+                } else {\n+                    lastSensorStateCopy.remove(sensorId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTA5Nw=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzE5OTcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDowMDozM1rOGPiBng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDo0MjozMlrOGPiPJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTI5NA==", "bodyText": "If you clear all the states, you will loose the previous state in case it is not changed by the thing handler.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939294", "createdAt": "2020-05-02T10:00:33Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0Mjc1Ng==", "bodyText": "Changed this!", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418942756", "createdAt": "2020-05-02T10:42:32Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTI5NA=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzE5OTg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDowMDo0OFrOGPiBrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDo0Mjo0NVrOGPiPOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTMxMQ==", "bodyText": "If you clear all the states, you will loose the previous state in case it is not accepted by the thing handler.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939311", "createdAt": "2020-05-02T10:00:48Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n-                if (lastSensorStateCopy.containsKey(sensorId)) {\n-                    final FullSensor lastFullSensor = lastSensorStateCopy.remove(sensorId);\n-                    final Map<String, Object> lastFullSensorState = lastFullSensor.getState();\n-                    lastSensorStates.put(sensorId, sensor);\n-                    if (!lastFullSensorState.equals(sensor.getState())) {\n-                        logger.debug(\"Status update for Hue sensor '{}' detected: {}\", sensorId, sensor.getState());\n-                        notifySensorStatusListeners(sensor, STATE_CHANGED);\n-                    }\n-                } else {\n-                    lastSensorStates.put(sensorId, sensor);\n+                lastSensorStateCopy.remove(sensorId);\n+\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener == null) {\n                     logger.debug(\"Hue sensor '{}' added.\", sensorId);\n-                    notifySensorStatusListeners(sensor, STATE_ADDED);\n \n+                    if (discovery != null) {\n+                        discovery.onSensorAdded(hueBridge, sensor);\n+                    }\n+\n+                    lastSensorStates.put(sensorId, sensor);\n+                } else {\n+                    lastSensorStateCopy.remove(sensorId);\n+                    if (sensorStatusListener.onSensorStateChanged(hueBridge, sensor)) {\n+                        lastSensorStates.put(sensorId, sensor);\n+                    }\n                 }\n             }\n \n             // Check for removed sensors\n-            for (Entry<String, FullSensor> fullSensorEntry : lastSensorStateCopy.entrySet()) {\n-                lastSensorStates.remove(fullSensorEntry.getKey());\n-                logger.debug(\"Hue sensor '{}' removed.\", fullSensorEntry.getKey());\n-                for (SensorStatusListener sensorStatusListener : sensorStatusListeners) {\n+            lastSensorStateCopy.forEach((sensorId, sensor) -> {\n+                logger.debug(\"Hue sensor '{}' removed.\", sensorId);\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener != null) {\n                     try {\n-                        sensorStatusListener.onSensorRemoved(hueBridge, fullSensorEntry.getValue());\n+                        sensorStatusListener.onSensorRemoved(hueBridge, sensor);\n                     } catch (Exception e) {\n                         logger.error(\"An exception occurred while calling the Sensor Listeners\", e);\n                     }\n                 }\n-            }\n+\n+                if (discovery != null) {\n+                    discovery.onSensorRemoved(hueBridge, sensor);\n+                }\n+            });\n         }\n     };\n \n     private final Runnable lightPollingRunnable = new PollingRunnable() {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullLight> lastLightStateCopy = new HashMap<>(lastLightStates);\n+            lastLightStates.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0Mjc3OQ==", "bodyText": "Changed this!", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418942779", "createdAt": "2020-05-02T10:42:45Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;\n \n             for (final FullSensor sensor : hueBridge.getSensors()) {\n                 String sensorId = sensor.getId();\n-                if (lastSensorStateCopy.containsKey(sensorId)) {\n-                    final FullSensor lastFullSensor = lastSensorStateCopy.remove(sensorId);\n-                    final Map<String, Object> lastFullSensorState = lastFullSensor.getState();\n-                    lastSensorStates.put(sensorId, sensor);\n-                    if (!lastFullSensorState.equals(sensor.getState())) {\n-                        logger.debug(\"Status update for Hue sensor '{}' detected: {}\", sensorId, sensor.getState());\n-                        notifySensorStatusListeners(sensor, STATE_CHANGED);\n-                    }\n-                } else {\n-                    lastSensorStates.put(sensorId, sensor);\n+                lastSensorStateCopy.remove(sensorId);\n+\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener == null) {\n                     logger.debug(\"Hue sensor '{}' added.\", sensorId);\n-                    notifySensorStatusListeners(sensor, STATE_ADDED);\n \n+                    if (discovery != null) {\n+                        discovery.onSensorAdded(hueBridge, sensor);\n+                    }\n+\n+                    lastSensorStates.put(sensorId, sensor);\n+                } else {\n+                    lastSensorStateCopy.remove(sensorId);\n+                    if (sensorStatusListener.onSensorStateChanged(hueBridge, sensor)) {\n+                        lastSensorStates.put(sensorId, sensor);\n+                    }\n                 }\n             }\n \n             // Check for removed sensors\n-            for (Entry<String, FullSensor> fullSensorEntry : lastSensorStateCopy.entrySet()) {\n-                lastSensorStates.remove(fullSensorEntry.getKey());\n-                logger.debug(\"Hue sensor '{}' removed.\", fullSensorEntry.getKey());\n-                for (SensorStatusListener sensorStatusListener : sensorStatusListeners) {\n+            lastSensorStateCopy.forEach((sensorId, sensor) -> {\n+                logger.debug(\"Hue sensor '{}' removed.\", sensorId);\n+                final SensorStatusListener sensorStatusListener = sensorStatusListeners.get(sensorId);\n+                if (sensorStatusListener != null) {\n                     try {\n-                        sensorStatusListener.onSensorRemoved(hueBridge, fullSensorEntry.getValue());\n+                        sensorStatusListener.onSensorRemoved(hueBridge, sensor);\n                     } catch (Exception e) {\n                         logger.error(\"An exception occurred while calling the Sensor Listeners\", e);\n                     }\n                 }\n-            }\n+\n+                if (discovery != null) {\n+                    discovery.onSensorRemoved(hueBridge, sensor);\n+                }\n+            });\n         }\n     };\n \n     private final Runnable lightPollingRunnable = new PollingRunnable() {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullLight> lastLightStateCopy = new HashMap<>(lastLightStates);\n+            lastLightStates.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTMxMQ=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIwNDI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDowNToyMVrOGPiDuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzowNTowMlrOGPjF0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTgzMg==", "bodyText": "Please keep the different states (added, removed and changed) for each kind of listener, without assuming what methods will be used by each listener.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939832", "createdAt": "2020-05-02T10:05:21Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1Njc1NQ==", "bodyText": "I have done a refactoring of discovery service. Please have a look.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418956755", "createdAt": "2020-05-02T13:05:02Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -178,44 +173,55 @@ private boolean isReachable(String ipAddress) {\n         @Override\n         protected void doConnectedRun() throws IOException, ApiException {\n             Map<String, FullSensor> lastSensorStateCopy = new HashMap<>(lastSensorStates);\n+            lastSensorStates.clear();\n+\n+            final SensorStatusListener discovery = discoveryListener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTgzMg=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIwNDM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDowNTozM1rOGPiDwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzowNToxM1rOGPjF-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTg0MA==", "bodyText": "Please keep the different states (added, removed and changed) for each kind of listener, without assuming what methods will be used by each listener.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418939840", "createdAt": "2020-05-02T10:05:33Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -224,35 +230,41 @@ protected void doConnectedRun() throws IOException, ApiException {\n                 lights = hueBridge.getFullConfig().getLights();\n             }\n \n+            final LightStatusListener discovery = discoveryListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MDM0Mg==", "bodyText": "I'm already thinking about doing even more refactoring, because in my opinion the discovery service should not have the same Interface like light and sensor handler to make clear which events are really used by the single thing. The discovery service needs only add(Light|Sensor)Discovery and remove(Light|Sensor)Discovery.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418950342", "createdAt": "2020-05-02T12:02:15Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -224,35 +230,41 @@ protected void doConnectedRun() throws IOException, ApiException {\n                 lights = hueBridge.getFullConfig().getLights();\n             }\n \n+            final LightStatusListener discovery = discoveryListener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTg0MA=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MjQwNQ==", "bodyText": "Yes that is an option I was thinking of. Two different event listeners.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418952405", "createdAt": "2020-05-02T12:23:11Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -224,35 +230,41 @@ protected void doConnectedRun() throws IOException, ApiException {\n                 lights = hueBridge.getFullConfig().getLights();\n             }\n \n+            final LightStatusListener discovery = discoveryListener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTg0MA=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1Njc5Mg==", "bodyText": "I have done a refactoring of discovery service. Please have a look.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418956792", "createdAt": "2020-05-02T13:05:13Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -224,35 +230,41 @@ protected void doConnectedRun() throws IOException, ApiException {\n                 lights = hueBridge.getFullConfig().getLights();\n             }\n \n+            final LightStatusListener discovery = discoveryListener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzOTg0MA=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIwNzQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDowOToxN1rOGPiFMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzowODo1MlrOGPjHXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIwOA==", "bodyText": "sensorStatusListeners", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940208", "createdAt": "2020-05-02T10:09:17Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener == null) {\n+            discoveryListener = listener;\n+            startLightPolling();\n+            startSensorPolling();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean unregisterDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener != null) {\n+            discoveryListener = null;\n+            if (lightStatusListeners.isEmpty()) {\n+                stopLightPolling();\n+            }\n+\n+            if (sensorStatusListeners.isEmpty()) {\n+                stopSensorPolling();\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     @Override\n     public boolean registerLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.add(lightStatusListener);\n-        if (result && hueBridge != null) {\n-            // start light polling only if a light handler has been registered\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.put(lightId, lightStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startLightPolling();\n-            // inform the listener initially about all lights and their states\n-            for (FullLight light : lastLightStates.values()) {\n+            final FullLight light = lastLightStates.get(lightId);\n+            if (light != null) {\n                 lightStatusListener.onLightAdded(hueBridge, light);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.remove(lightStatusListener);\n-        if (result) {\n-            // stop stop light polling\n-            if (lightStatusListeners.isEmpty()) {\n-                stopLightPolling();\n-            }\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.remove(lightId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean registerSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.add(sensorStatusListener);\n-        if (result && hueBridge != null) {\n-            // start sensor polling only if a sensor handler has been registered\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.put(sensorId, sensorStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startSensorPolling();\n-            // inform the listener initially about all sensors and their states\n-            for (FullSensor sensor : lastSensorStates.values()) {\n+            final FullSensor sensor = lastSensorStates.get(sensorId);\n+            if (sensor != null) {\n                 sensorStatusListener.onSensorAdded(hueBridge, sensor);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.remove(sensorStatusListener);\n-        if (result) {\n-            // stop sensor polling\n-            if (sensorStatusListeners.isEmpty()) {\n-                stopSensorPolling();\n-            }\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.remove(sensorId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzE0OA==", "bodyText": "Moved start and stop polling. So not necessary anymore.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957148", "createdAt": "2020-05-02T13:08:52Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener == null) {\n+            discoveryListener = listener;\n+            startLightPolling();\n+            startSensorPolling();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean unregisterDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener != null) {\n+            discoveryListener = null;\n+            if (lightStatusListeners.isEmpty()) {\n+                stopLightPolling();\n+            }\n+\n+            if (sensorStatusListeners.isEmpty()) {\n+                stopSensorPolling();\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     @Override\n     public boolean registerLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.add(lightStatusListener);\n-        if (result && hueBridge != null) {\n-            // start light polling only if a light handler has been registered\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.put(lightId, lightStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startLightPolling();\n-            // inform the listener initially about all lights and their states\n-            for (FullLight light : lastLightStates.values()) {\n+            final FullLight light = lastLightStates.get(lightId);\n+            if (light != null) {\n                 lightStatusListener.onLightAdded(hueBridge, light);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.remove(lightStatusListener);\n-        if (result) {\n-            // stop stop light polling\n-            if (lightStatusListeners.isEmpty()) {\n-                stopLightPolling();\n-            }\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.remove(lightId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean registerSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.add(sensorStatusListener);\n-        if (result && hueBridge != null) {\n-            // start sensor polling only if a sensor handler has been registered\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.put(sensorId, sensorStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startSensorPolling();\n-            // inform the listener initially about all sensors and their states\n-            for (FullSensor sensor : lastSensorStates.values()) {\n+            final FullSensor sensor = lastSensorStates.get(sensorId);\n+            if (sensor != null) {\n                 sensorStatusListener.onSensorAdded(hueBridge, sensor);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.remove(sensorStatusListener);\n-        if (result) {\n-            // stop sensor polling\n-            if (sensorStatusListeners.isEmpty()) {\n-                stopSensorPolling();\n-            }\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.remove(sensorId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIwOA=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIwNzY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDowOTozMFrOGPiFTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzowOTowMFrOGPjHbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIzNw==", "bodyText": "stopSensorPolling", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940237", "createdAt": "2020-05-02T10:09:30Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener == null) {\n+            discoveryListener = listener;\n+            startLightPolling();\n+            startSensorPolling();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean unregisterDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener != null) {\n+            discoveryListener = null;\n+            if (lightStatusListeners.isEmpty()) {\n+                stopLightPolling();\n+            }\n+\n+            if (sensorStatusListeners.isEmpty()) {\n+                stopSensorPolling();\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     @Override\n     public boolean registerLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.add(lightStatusListener);\n-        if (result && hueBridge != null) {\n-            // start light polling only if a light handler has been registered\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.put(lightId, lightStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startLightPolling();\n-            // inform the listener initially about all lights and their states\n-            for (FullLight light : lastLightStates.values()) {\n+            final FullLight light = lastLightStates.get(lightId);\n+            if (light != null) {\n                 lightStatusListener.onLightAdded(hueBridge, light);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.remove(lightStatusListener);\n-        if (result) {\n-            // stop stop light polling\n-            if (lightStatusListeners.isEmpty()) {\n-                stopLightPolling();\n-            }\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.remove(lightId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean registerSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.add(sensorStatusListener);\n-        if (result && hueBridge != null) {\n-            // start sensor polling only if a sensor handler has been registered\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.put(sensorId, sensorStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startSensorPolling();\n-            // inform the listener initially about all sensors and their states\n-            for (FullSensor sensor : lastSensorStates.values()) {\n+            final FullSensor sensor = lastSensorStates.get(sensorId);\n+            if (sensor != null) {\n                 sensorStatusListener.onSensorAdded(hueBridge, sensor);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.remove(sensorStatusListener);\n-        if (result) {\n-            // stop sensor polling\n-            if (sensorStatusListeners.isEmpty()) {\n-                stopSensorPolling();\n-            }\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.remove(sensorId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 344}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzE2NQ==", "bodyText": "Moved start and stop polling. So not necessary anymore.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957165", "createdAt": "2020-05-02T13:09:00Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener == null) {\n+            discoveryListener = listener;\n+            startLightPolling();\n+            startSensorPolling();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean unregisterDiscoveryListener(HueLightDiscoveryService listener) {\n+        if (discoveryListener != null) {\n+            discoveryListener = null;\n+            if (lightStatusListeners.isEmpty()) {\n+                stopLightPolling();\n+            }\n+\n+            if (sensorStatusListeners.isEmpty()) {\n+                stopSensorPolling();\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n     @Override\n     public boolean registerLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.add(lightStatusListener);\n-        if (result && hueBridge != null) {\n-            // start light polling only if a light handler has been registered\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.put(lightId, lightStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startLightPolling();\n-            // inform the listener initially about all lights and their states\n-            for (FullLight light : lastLightStates.values()) {\n+            final FullLight light = lastLightStates.get(lightId);\n+            if (light != null) {\n                 lightStatusListener.onLightAdded(hueBridge, light);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterLightStatusListener(LightStatusListener lightStatusListener) {\n-        boolean result = lightStatusListeners.remove(lightStatusListener);\n-        if (result) {\n-            // stop stop light polling\n-            if (lightStatusListeners.isEmpty()) {\n-                stopLightPolling();\n-            }\n+        final String lightId = lightStatusListener.getLightId();\n+        if (lightStatusListeners.remove(lightId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean registerSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.add(sensorStatusListener);\n-        if (result && hueBridge != null) {\n-            // start sensor polling only if a sensor handler has been registered\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.put(sensorId, sensorStatusListener) != null) {\n+            return false;\n+        }\n+\n+        if (hueBridge != null) {\n             startSensorPolling();\n-            // inform the listener initially about all sensors and their states\n-            for (FullSensor sensor : lastSensorStates.values()) {\n+            final FullSensor sensor = lastSensorStates.get(sensorId);\n+            if (sensor != null) {\n                 sensorStatusListener.onSensorAdded(hueBridge, sensor);\n             }\n         }\n-        return result;\n+\n+        return true;\n     }\n \n     @Override\n     public boolean unregisterSensorStatusListener(SensorStatusListener sensorStatusListener) {\n-        boolean result = sensorStatusListeners.remove(sensorStatusListener);\n-        if (result) {\n-            // stop sensor polling\n-            if (sensorStatusListeners.isEmpty()) {\n-                stopSensorPolling();\n-            }\n+        final String sensorId = sensorStatusListener.getSensorId();\n+        if (sensorStatusListeners.remove(sensorId) == null) {\n+            return false;\n+        }\n+\n+        if (discoveryListener == null && lightStatusListeners.isEmpty()) {\n+            stopLightPolling();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDIzNw=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 344}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIwODU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxMDo0NFrOGPiFuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNTo0NTozNVrOGPkHfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDM0Nw==", "bodyText": "Light and sensor states have to be pushed to the discovery listener. This was done before your changes.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940347", "createdAt": "2020-05-02T10:10:44Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3MzU2NQ==", "bodyText": "Pushing again on registration. Please have a look.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418973565", "createdAt": "2020-05-02T15:45:35Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -591,56 +627,97 @@ private void handleExceptionWhileCreatingUser(Exception ex) {\n                 \"@text/offline.conf-error-creation-username\");\n     }\n \n+    public boolean registerDiscoveryListener(HueLightDiscoveryService listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDM0Nw=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIwOTg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxMjoxOFrOGPiGVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzowOTo0OVrOGPjHxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUwMA==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940500", "createdAt": "2020-05-02T10:12:18Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -440,15 +443,28 @@ private StateUpdate createBrightnessStateUpdate(int currentBrightness, int newBr\n     }\n \n     @Override\n-    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n+        // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzI1NQ==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957255", "createdAt": "2020-05-02T13:09:49Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -440,15 +443,28 @@ private StateUpdate createBrightnessStateUpdate(int currentBrightness, int newBr\n     }\n \n     @Override\n-    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n+        // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUwMA=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIwOTk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxMjo0MFrOGPiGZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzowOTo1M1rOGPjH0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUxOA==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940518", "createdAt": "2020-05-02T10:12:40Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzI2Nw==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957267", "createdAt": "2020-05-02T13:09:53Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUxOA=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIxMDA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxMjo0N1rOGPiGbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzowOTo1OVrOGPjH6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUyNw==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940527", "createdAt": "2020-05-02T10:12:47Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n         }\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzI4OA==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957288", "createdAt": "2020-05-02T13:09:59Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n         }\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUyNw=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIxMDExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxMjo1NFrOGPiGdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzoxMDowN1rOGPjH9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUzMg==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940532", "createdAt": "2020-05-02T10:12:54Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n         }\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onLightAdded(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzMwMA==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957300", "createdAt": "2020-05-02T13:10:07Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -493,36 +509,35 @@ public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight)\n             updateState(CHANNEL_ALERT, stringType);\n             scheduleAlertStateRestore(stringType);\n         }\n+\n+        return true;\n     }\n \n     @Override\n     public void channelLinked(ChannelUID channelUID) {\n-        HueClient handler = getHueClient();\n-        if (handler != null) {\n-            FullLight light = handler.getLightById(lightId);\n-            if (light != null) {\n-                onLightStateChanged(null, light);\n-            }\n+        final FullLight light = lastFullLight;\n+        if (light != null) {\n+            onLightStateChanged(null, light);\n         }\n     }\n \n     @Override\n     public void onLightRemoved(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.light-removed\");\n         }\n     }\n \n     @Override\n     public void onLightGone(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.light-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onLightAdded(@Nullable HueBridge bridge, FullLight light) {\n-        if (light.getId().equals(lightId)) {\n+        if (light.getId().equals(lightId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDUzMg=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIxMDQxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxMzoyMFrOGPiGlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzoxMDoxMlrOGPjH-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU2Ng==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940566", "createdAt": "2020-05-02T10:13:20Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -227,15 +224,23 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n     }\n \n     @Override\n-    public void onSensorStateChanged(@Nullable HueBridge bridge, FullSensor sensor) {\n+    public boolean onSensorStateChanged(@Nullable HueBridge bridge, FullSensor sensor) {\n         logger.trace(\"onSensorStateChanged() was called\");\n \n+        // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzMwNQ==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957305", "createdAt": "2020-05-02T13:10:12Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -227,15 +224,23 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n     }\n \n     @Override\n-    public void onSensorStateChanged(@Nullable HueBridge bridge, FullSensor sensor) {\n+    public boolean onSensorStateChanged(@Nullable HueBridge bridge, FullSensor sensor) {\n         logger.trace(\"onSensorStateChanged() was called\");\n \n+        // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU2Ng=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIxMDU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxMzozMlrOGPiGpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzoxMDoxOFrOGPjIBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4Mw==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940583", "createdAt": "2020-05-02T10:13:32Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n         }\n     }\n \n     @Override\n     public void onSensorAdded(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzMxOQ==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957319", "createdAt": "2020-05-02T13:10:18Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.conf-error-wrong-sensor-id\");\n         }\n     }\n \n     @Override\n     public void onSensorAdded(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4Mw=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIxMDYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxMzozNlrOGPiGrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzoxMDoyNVrOGPjIGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4OQ==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940589", "createdAt": "2020-05-02T10:13:36Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzMzNg==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957336", "createdAt": "2020-05-02T13:10:25Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"@text/offline.sensor-not-reachable\");\n         }\n     }\n \n     @Override\n     public void onSensorGone(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) {// TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDU4OQ=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIxMDczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxMzo1MlrOGPiGvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzoxMDozNFrOGPjIJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDYwNA==", "bodyText": "With your changes, this check becomes useless (it was useful before).", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940604", "createdAt": "2020-05-02T10:13:52Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzM0OA==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957348", "createdAt": "2020-05-02T13:10:34Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -327,22 +331,27 @@ public void channelLinked(ChannelUID channelUID) {\n \n     @Override\n     public void onSensorRemoved(@Nullable HueBridge bridge, FullSensor sensor) {\n-        if (sensor.getId().equals(sensorId)) {\n+        if (sensor.getId().equals(sensorId)) { // TODO Maybe this check is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDYwNA=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzIxMjgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMDoxNjoxNVrOGPiHtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzoxMTowM1rOGPjITg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDg1Mg==", "bodyText": "Why not lastFullSensor ?", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418940852", "createdAt": "2020-05-02T10:16:15Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -212,7 +209,7 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n                 return;\n             }\n \n-            FullSensor sensor = getSensor();\n+            FullSensor sensor = hueBridge.getSensorById(sensorId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1NzM5MA==", "bodyText": "That's a good question ;). Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r418957390", "createdAt": "2020-05-02T13:11:03Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueSensorHandler.java", "diffHunk": "@@ -212,7 +209,7 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n                 return;\n             }\n \n-            FullSensor sensor = getSensor();\n+            FullSensor sensor = hueBridge.getSensorById(sensorId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MDg1Mg=="}, "originalCommit": {"oid": "29fb62491417c189cce393042cbd97dc4e803e28"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTg0ODEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNToyODozMFrOGTFJGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0NToxM1rOGVroFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA==", "bodyText": "Why not use the ThingUID instead of device is (String) as key? This way we can think about a even greater refactoring and combine all different listener interfaces into one single StatusListener interface. Is that possible?\nAnother idea which came to my mind was to improve registration of the listeners by using BridgeHandler#childHandlerInitialized method. This way the framework takes care of whole initialization process of bridge and things in the correct order and we can completely remove the logic from the Hue binding.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r422660378", "createdAt": "2020-05-10T15:28:30Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -84,24 +83,20 @@\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n+    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n \n-    private static enum StatusType {\n-        ADDED,\n-        REMOVED,\n-        GONE,\n-        CHANGED\n-    }\n+    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n+    private @Nullable HueLightDiscoveryService discoveryService;\n+    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5Mzc3NA==", "bodyText": "I already thought about a Generic StatusListener interface. I can give this a try this evening. And one thing I although thought about is to move update(Light|Sensor|Group)State methods to the belonging things and reverse the logic so they get the hueBridge from inside. Because in my opinion this is mainly logic from inside.\n\nWhy not use the ThingUID instead of device is (String) as key?\n\nWhat is not clear to me is how the polling jobs can determine the right listener then? Do you have an example?", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r423493774", "createdAt": "2020-05-12T06:36:45Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -84,24 +83,20 @@\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n+    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n \n-    private static enum StatusType {\n-        ADDED,\n-        REMOVED,\n-        GONE,\n-        CHANGED\n-    }\n+    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n+    private @Nullable HueLightDiscoveryService discoveryService;\n+    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, "originalCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzczODAxNg==", "bodyText": "I thought about this again. And maybe we should do this on a new PR for two reasons:\nFirst this PR is mainly about fixing the polling issue after command, and I think this maybe intransparent to hide this huge refactoring behind.\nSecond this huge refactoring will surely take some time with all needed reviews and discussions. In my opinion we should bring this fix to next release first, before starting the process of refactoring.\nWhat do you think about this @cweitkamp?", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r423738016", "createdAt": "2020-05-12T13:36:07Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -84,24 +83,20 @@\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n+    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n \n-    private static enum StatusType {\n-        ADDED,\n-        REMOVED,\n-        GONE,\n-        CHANGED\n-    }\n+    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n+    private @Nullable HueLightDiscoveryService discoveryService;\n+    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, "originalCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0NjYxOA==", "bodyText": "What is not clear to me is how the polling jobs can determine the right listener then?\n\nYou probably have to change the related methods in the listener interfaces too. They can return the ThingUID as well.\n\nWhat do you think about this @cweitkamp?\n\nOf course. Feel free to create as much PRs as you like.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r424246618", "createdAt": "2020-05-13T08:01:33Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -84,24 +83,20 @@\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n+    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n \n-    private static enum StatusType {\n-        ADDED,\n-        REMOVED,\n-        GONE,\n-        CHANGED\n-    }\n+    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n+    private @Nullable HueLightDiscoveryService discoveryService;\n+    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, "originalCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NTMyNQ==", "bodyText": "You probably have to change the related methods in the listener interfaces too. They can return the ThingUID as well.\n\nThe registration of the listener is not my problem on this point. That's easy, like you suggested for example the LightListener can return the ThingUID instead of the lightID. But how can the light polling job inside the bridgeHandler find the correct LightThingHandler in the map.\nI don't see a problem when users use the ThingUID suggested by the system in their configuration like this\n0220 1 \"LED Livingroom\" @ \"Controls\" [ lightId=\"1\" ]\nIn this case the polling job can automatically  generate the ThingUID with the information it got from hardware and select the right listener from Map to update the state.\nBut if users use something like this in their configuration:\n0220 livingroomled \"LED Livingroom\" @ \"Controls\" [ lightId=\"1\" ]\nHow can pollingJob select in this case the correct listener from Map without iterate over all listeners again, because iteration is the thing I want to avoid with the map?", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r424485325", "createdAt": "2020-05-13T14:32:19Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -84,24 +83,20 @@\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n+    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n \n-    private static enum StatusType {\n-        ADDED,\n-        REMOVED,\n-        GONE,\n-        CHANGED\n-    }\n+    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n+    private @Nullable HueLightDiscoveryService discoveryService;\n+    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, "originalCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NjY3MA==", "bodyText": "Of course. Feel free to create as much PRs as you like.\n\nI know but can we finish this one first, so I can base further refactoring on the result of this PR.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r424486670", "createdAt": "2020-05-13T14:33:57Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -84,24 +83,20 @@\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n+    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n \n-    private static enum StatusType {\n-        ADDED,\n-        REMOVED,\n-        GONE,\n-        CHANGED\n-    }\n+    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n+    private @Nullable HueLightDiscoveryService discoveryService;\n+    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, "originalCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4ODA1Mg==", "bodyText": "Thanks for the detailed description. I finally got the point. We of course cannot bet on the users way to name his ThingUID.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r425388052", "createdAt": "2020-05-14T19:45:13Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -84,24 +83,20 @@\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);\n \n-    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n+    private static final long BYPASS_MIN_DURATION_BEFORE_CMD = 1500L;\n \n-    private static enum StatusType {\n-        ADDED,\n-        REMOVED,\n-        GONE,\n-        CHANGED\n-    }\n+    private static final String DEVICE_TYPE = \"EclipseSmartHome\";\n \n     private final Logger logger = LoggerFactory.getLogger(HueBridgeHandler.class);\n \n     private final Map<String, FullLight> lastLightStates = new ConcurrentHashMap<>();\n     private final Map<String, FullSensor> lastSensorStates = new ConcurrentHashMap<>();\n     private final Map<String, FullGroup> lastGroupStates = new ConcurrentHashMap<>();\n \n-    private final List<LightStatusListener> lightStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<SensorStatusListener> sensorStatusListeners = new CopyOnWriteArrayList<>();\n-    private final List<GroupStatusListener> groupStatusListeners = new CopyOnWriteArrayList<>();\n+    private @Nullable HueLightDiscoveryService discoveryService;\n+    private final Map<String, LightStatusListener> lightStatusListeners = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2MDM3OA=="}, "originalCommit": {"oid": "64ad3e34f81d0e0c9b704e015cc79d82afd4eae7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjkzMDIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyNzoxM1rOGbaDQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyNzoxM1rOGbaDQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MTU1NA==", "bodyText": "Just to handle potential null values\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (lastState == null || !lastState.getState().equals(group.getState())) {\n          \n          \n            \n                    if (lastState == null || !Objects.equals(lastState.getState(), group.getState())) {", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r431391554", "createdAt": "2020-05-27T19:27:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java", "diffHunk": "@@ -315,14 +317,18 @@ public void channelLinked(ChannelUID channelUID) {\n     }\n \n     @Override\n-    public void onGroupStateChanged(@Nullable HueBridge bridge, FullGroup group) {\n+    public boolean onGroupStateChanged(@Nullable HueBridge bridge, FullGroup group) {\n         logger.trace(\"onGroupStateChanged() was called for group {}\", group.getId());\n \n-        if (!group.getId().equals(groupId)) {\n-            logger.trace(\"Received state change for another handler's group ({}). Will be ignored.\", group.getId());\n-            return;\n+        final FullGroup lastState = lastFullGroup;\n+        if (lastState == null || !lastState.getState().equals(group.getState())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjkzNzcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyOTozM1rOGbaIIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTozODo1OFrOGcV3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjgwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (lastState == null || !lastState.getState().equals(fullLight.getState())) {\n          \n          \n            \n                    if (lastState == null || !Objects.equals(lastState.getState(), fullLight.getState())) {", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r431392803", "createdAt": "2020-05-27T19:29:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -434,14 +437,33 @@ private StateUpdate createBrightnessStateUpdate(int currentBrightness, int newBr\n     }\n \n     @Override\n-    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public void setPollBypass(long bypassTime) {\n+        endBypassTime = System.currentTimeMillis() + bypassTime;\n+    }\n+\n+    @Override\n+    public void unsetPollBypass() {\n+        endBypassTime = 0L;\n+    }\n+\n+    @Override\n+    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n-        if (!fullLight.getId().equals(lightId)) {\n-            logger.trace(\"Received state change for another handler's light ({}). Will be ignored.\", fullLight.getId());\n-            return;\n+        if (System.currentTimeMillis() <= endBypassTime) {\n+            logger.debug(\"Bypass light update after command ({}).\", lightId);\n+            return false;\n         }\n \n+        final FullLight lastState = lastFullLight;\n+        if (lastState == null || !lastState.getState().equals(fullLight.getState())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NjkwNw==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r432366907", "createdAt": "2020-05-29T09:30:01Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -434,14 +437,33 @@ private StateUpdate createBrightnessStateUpdate(int currentBrightness, int newBr\n     }\n \n     @Override\n-    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public void setPollBypass(long bypassTime) {\n+        endBypassTime = System.currentTimeMillis() + bypassTime;\n+    }\n+\n+    @Override\n+    public void unsetPollBypass() {\n+        endBypassTime = 0L;\n+    }\n+\n+    @Override\n+    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n-        if (!fullLight.getId().equals(lightId)) {\n-            logger.trace(\"Received state change for another handler's light ({}). Will be ignored.\", fullLight.getId());\n-            return;\n+        if (System.currentTimeMillis() <= endBypassTime) {\n+            logger.debug(\"Bypass light update after command ({}).\", lightId);\n+            return false;\n         }\n \n+        final FullLight lastState = lastFullLight;\n+        if (lastState == null || !lastState.getState().equals(fullLight.getState())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjgwMw=="}, "originalCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3MTY2MA==", "bodyText": "Changed in Group and Sensor handler as well.", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r432371660", "createdAt": "2020-05-29T09:38:58Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueLightHandler.java", "diffHunk": "@@ -434,14 +437,33 @@ private StateUpdate createBrightnessStateUpdate(int currentBrightness, int newBr\n     }\n \n     @Override\n-    public void onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n+    public void setPollBypass(long bypassTime) {\n+        endBypassTime = System.currentTimeMillis() + bypassTime;\n+    }\n+\n+    @Override\n+    public void unsetPollBypass() {\n+        endBypassTime = 0L;\n+    }\n+\n+    @Override\n+    public boolean onLightStateChanged(@Nullable HueBridge bridge, FullLight fullLight) {\n         logger.trace(\"onLightStateChanged() was called\");\n \n-        if (!fullLight.getId().equals(lightId)) {\n-            logger.trace(\"Received state change for another handler's light ({}). Will be ignored.\", fullLight.getId());\n-            return;\n+        if (System.currentTimeMillis() <= endBypassTime) {\n+            logger.debug(\"Bypass light update after command ({}).\", lightId);\n+            return false;\n         }\n \n+        final FullLight lastState = lastFullLight;\n+        if (lastState == null || !lastState.getState().equals(fullLight.getState())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjgwMw=="}, "originalCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzA0OTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDowNToyOFrOGbbP3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTozMDoxMFrOGcVlrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMTE2Nw==", "bodyText": "orphan semicolon", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r431411167", "createdAt": "2020-05-27T20:05:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -401,21 +445,46 @@ public void updateGroupState(FullGroup group, StateUpdate stateUpdate) {\n         }\n     }\n \n-    private void handleStateUpdateException(FullLight light, StateUpdate stateUpdate, Throwable e) {\n+    private void setGroupPollBypass(FullGroup group, long bypassTime) {\n+        group.getLights().forEach((lightId) -> {\n+            final LightStatusListener listener = lightStatusListeners.get(lightId);\n+            if (listener != null) {\n+                listener.setPollBypass(bypassTime);\n+            }\n+        });\n+    }\n+\n+    private void unsetGroupPollBypass(FullGroup group) {\n+        group.getLights().forEach((lightId) -> {\n+            final LightStatusListener listener = lightStatusListeners.get(lightId);\n+            if (listener != null) {\n+                listener.unsetPollBypass();\n+                ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM2NzAyMA==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7518#discussion_r432367020", "createdAt": "2020-05-29T09:30:10Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -401,21 +445,46 @@ public void updateGroupState(FullGroup group, StateUpdate stateUpdate) {\n         }\n     }\n \n-    private void handleStateUpdateException(FullLight light, StateUpdate stateUpdate, Throwable e) {\n+    private void setGroupPollBypass(FullGroup group, long bypassTime) {\n+        group.getLights().forEach((lightId) -> {\n+            final LightStatusListener listener = lightStatusListeners.get(lightId);\n+            if (listener != null) {\n+                listener.setPollBypass(bypassTime);\n+            }\n+        });\n+    }\n+\n+    private void unsetGroupPollBypass(FullGroup group) {\n+        group.getLights().forEach((lightId) -> {\n+            final LightStatusListener listener = lightStatusListeners.get(lightId);\n+            if (listener != null) {\n+                listener.unsetPollBypass();\n+                ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMTE2Nw=="}, "originalCommit": {"oid": "5304327dcdc6d7735f85a2ad878335489e2d223e"}, "originalPosition": 288}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 138, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}