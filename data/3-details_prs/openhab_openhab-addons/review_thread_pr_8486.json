{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTIzMjg5", "number": 8486, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowMDo0M1rOEk3DWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowOTowM1rOEk3OJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDg2MTY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/SynopAnalyzerHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowMDo0M1rOHUCT0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowMDo0M1rOHUCT0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3MTQxMQ==", "bodyText": "Put it in a try-with-resources (and you can remove the close()):\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/db/stations.json\");\n          \n          \n            \n                    try {\n          \n          \n            \n                        Reader reader = new InputStreamReader(is, \"UTF-8\");\n          \n          \n            \n                    try (InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/db/stations.json\"); \n          \n          \n            \n                        Reader reader = new InputStreamReader(is, \"UTF-8\");) {\n          \n      \n    \n    \n  \n\nAlso run mvn spotless:apply just to make sure it formats correctly.", "url": "https://github.com/openhab/openhab-addons/pull/8486#discussion_r490771411", "createdAt": "2020-09-18T08:00:43Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/SynopAnalyzerHandlerFactory.java", "diffHunk": "@@ -49,6 +76,42 @@ public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n     protected @Nullable ThingHandler createHandler(Thing thing) {\n         ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n \n-        return thingTypeUID.equals(THING_SYNOP) ? new SynopAnalyzerHandler(thing) : null;\n+        return thingTypeUID.equals(THING_SYNOP) ? new SynopAnalyzerHandler(thing, locationProvider, stationDB) : null;\n+    }\n+\n+    @Override\n+    protected void activate(ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/db/stations.json\");\n+        try {\n+            Reader reader = new InputStreamReader(is, \"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a22504fa814160e649992e98d052ef8af118bf34"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDg3NzgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowNTozNlrOHUCddg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowNTozNlrOHUCddg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3Mzg3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import tec.uom.se.unit.Units;\n          \n          \n            \n            import org.eclipse.smarthome.core.library.unit.SIUnits;", "url": "https://github.com/openhab/openhab-addons/pull/8486#discussion_r490773878", "createdAt": "2020-09-18T08:05:36Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java", "diffHunk": "@@ -43,15 +47,20 @@\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n-import org.openhab.binding.synopanalyser.internal.synop.Constants;\n+import org.openhab.binding.synopanalyser.internal.synop.StationDB;\n+import org.openhab.binding.synopanalyser.internal.synop.StationDB.Station;\n import org.openhab.binding.synopanalyser.internal.synop.Synop;\n+import org.openhab.binding.synopanalyser.internal.synop.Synop.Overcast;\n import org.openhab.binding.synopanalyser.internal.synop.SynopLand;\n-import org.openhab.binding.synopanalyser.internal.synop.SynopMobileLand;\n+import org.openhab.binding.synopanalyser.internal.synop.SynopMobile;\n import org.openhab.binding.synopanalyser.internal.synop.SynopShip;\n+import org.openhab.binding.synopanalyser.internal.synop.WindDirections;\n import org.openhab.binding.synopanalyzer.internal.config.SynopAnalyzerConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import tec.uom.se.unit.Units;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a22504fa814160e649992e98d052ef8af118bf34"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDg3OTU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowNjoxM1rOHUCenw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowNjoxM1rOHUCenw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3NDE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            properties.put(\"Distance\", new QuantityType<>(distance, Units.METRE).toString());\n          \n          \n            \n                            properties.put(\"Distance\", new QuantityType<>(distance, SIUnits.METRE).toString());", "url": "https://github.com/openhab/openhab-addons/pull/8486#discussion_r490774175", "createdAt": "2020-09-18T08:06:13Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyzer/internal/handler/SynopAnalyzerHandler.java", "diffHunk": "@@ -61,54 +70,81 @@\n  */\n @NonNullByDefault\n public class SynopAnalyzerHandler extends BaseThingHandler {\n-\n-    private static final String OGIMET_SYNOP_PATH = \"http://www.ogimet.com/cgi-bin/getsynop?block=\";\n-    private static final int REQUEST_TIMEOUT = 5000;\n+    private static final String OGIMET_SYNOP_PATH = \"http://www.ogimet.com/cgi-bin/getsynop?block=%s&begin=%s\";\n+    private static final int REQUEST_TIMEOUT_MS = 5000;\n     private static final DateTimeFormatter SYNOP_DATE_FORMAT = DateTimeFormatter.ofPattern(\"yyyyMMddHH00\");\n     private static final double KASTEN_POWER = 3.4;\n     private static final double OCTA_MAX = 8.0;\n \n     private final Logger logger = LoggerFactory.getLogger(SynopAnalyzerHandler.class);\n \n-    private @NonNullByDefault({}) ScheduledFuture<?> executionJob;\n-    private @NonNullByDefault({}) SynopAnalyzerConfiguration configuration;\n+    private @Nullable ScheduledFuture<?> executionJob;\n+    // private @NonNullByDefault({}) SynopAnalyzerConfiguration configuration;\n+    private @NonNullByDefault({}) String formattedStationId;\n+    private final LocationProvider locationProvider;\n+    private final StationDB stationDB;\n \n-    public SynopAnalyzerHandler(Thing thing) {\n+    public SynopAnalyzerHandler(Thing thing, LocationProvider locationProvider, StationDB stationDB) {\n         super(thing);\n+        this.locationProvider = locationProvider;\n+        this.stationDB = stationDB;\n     }\n \n     @Override\n     public void initialize() {\n-        configuration = getConfigAs(SynopAnalyzerConfiguration.class);\n-\n+        SynopAnalyzerConfiguration configuration = getConfigAs(SynopAnalyzerConfiguration.class);\n+        formattedStationId = String.format(\"%05d\", configuration.stationId);\n         logger.info(\"Scheduling Synop update thread to run every {} minute for Station '{}'\",\n-                configuration.refreshInterval, configuration.stationId);\n+                configuration.refreshInterval, formattedStationId);\n \n-        executionJob = scheduler.scheduleWithFixedDelay(() -> {\n-            updateSynopChannels();\n-        }, 0, configuration.refreshInterval, TimeUnit.MINUTES);\n-        updateStatus(ThingStatus.ONLINE);\n+        if (thing.getProperties().isEmpty()) {\n+            discoverAttributes(configuration.stationId);\n+        }\n+\n+        executionJob = scheduler.scheduleWithFixedDelay(this::updateSynopChannels, 0, configuration.refreshInterval,\n+                TimeUnit.MINUTES);\n+        updateStatus(ThingStatus.UNKNOWN);\n+    }\n+\n+    protected void discoverAttributes(int stationId) {\n+        final Map<String, String> properties = new HashMap<>();\n+\n+        Optional<Station> station = stationDB.stations.stream().filter(s -> stationId == s.idOmm).findFirst();\n+        station.ifPresent(s -> {\n+            properties.put(\"Usual name\", s.usualName);\n+            properties.put(\"Location\", s.getLocation());\n+\n+            PointType stationLocation = new PointType(s.getLocation());\n+            PointType serverLocation = locationProvider.getLocation();\n+            if (serverLocation != null) {\n+                DecimalType distance = serverLocation.distanceFrom(stationLocation);\n+\n+                properties.put(\"Distance\", new QuantityType<>(distance, Units.METRE).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a22504fa814160e649992e98d052ef8af118bf34"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDg4OTMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyser/internal/discovery/SynopAnalyzerDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowOTowM1rOHUCklQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowOTowM1rOHUCklQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3NTcwMQ==", "bodyText": "2 seconds seems relatively short. It means the discovery process is killed if it didn't finish in 2 seconds.", "url": "https://github.com/openhab/openhab-addons/pull/8486#discussion_r490775701", "createdAt": "2020-09-18T08:09:03Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.synopanalyzer/src/main/java/org/openhab/binding/synopanalyser/internal/discovery/SynopAnalyzerDiscoveryService.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.synopanalyser.internal.discovery;\n+\n+import static org.openhab.binding.synopanalyzer.internal.SynopAnalyzerBindingConstants.THING_SYNOP;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.i18n.LocationProvider;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.synopanalyser.internal.synop.StationDB;\n+import org.openhab.binding.synopanalyser.internal.synop.StationDB.Station;\n+import org.openhab.binding.synopanalyzer.internal.config.SynopAnalyzerConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SynopAnalyzerDiscoveryService} creates things based on the configured location.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class SynopAnalyzerDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(SynopAnalyzerDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a22504fa814160e649992e98d052ef8af118bf34"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4288, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}