{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NTQ2OTEx", "number": 9512, "title": "[pidcontroller] Initial Contribution", "bodyText": "This is a PID controller for openHAB.\nThe implementation is based on the work of @george.erhan (forum) and @Hilbrand.\nSee https://community.openhab.org/t/new-automation-pid-controller/111229", "createdAt": "2020-12-25T08:03:57Z", "url": "https://github.com/openhab/openhab-addons/pull/9512", "merged": true, "mergeCommit": {"oid": "924eca29f26e77e1a1be41f63ecadb8051369d13"}, "closed": true, "closedAt": "2020-12-28T17:31:18Z", "author": {"login": "fwolter"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpjrnjgH2gAyNTQ1NTQ2OTExOjg4YzczYTFkNTk4NWUxYTk5N2YzMjNiYWUxOGI3MjlmN2I4NzUzZDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdqpnGOAFqTU1OTIzNDk1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/88c73a1d5985e1a997f323bae18b729f7b8753d0", "committedDate": "2020-12-25T08:02:27Z", "message": "[pidcontroller] Initial Contribution\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Nzk5OTg1", "url": "https://github.com/openhab/openhab-addons/pull/9512#pullrequestreview-558799985", "createdAt": "2020-12-25T10:18:42Z", "commit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMDoxODo0MlrOILbLhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMDo0NTo1MlrOILbZcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MDU2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the output is the opening of a valve in %, you might want to set this parameter to higher values (`Kp=10` would result in 50%).\n          \n          \n            \n            If the output is the opening of a valve in %, you might want to set this parameter to higher values (`kp=10` would result in 50%).", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548850564", "createdAt": "2020-12-25T10:18:42Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/README.md", "diffHunk": "@@ -0,0 +1,137 @@\n+# PID Controller Automation\n+\n+This automation implements a [PID](https://en.wikipedia.org/wiki/PID_controller)-T1 controller for openHAB.\n+\n+A PID controller can be used for closed-loop controls. For example:\n+\n+- Heating: A sensor measures the room temperature.\n+  The PID controller calculates the heater's valve opening, so that the room temperature is kept at the setpoint.\n+- Lighting: A light sensor measures the room's illuminance.\n+  The PID controller controls the dimmer of the room's lighting, so that the illuminance in the room is kept at a constant level.\n+- PV zero export: A meter measures the power at the grid point of the building.\n+  The PID controller calculates the amount of power the battery storage system needs to feed-in or charge the battery, so that the building's grid power consumption is around zero,\n+  i.e. PV generation, battery storage output power and the building's power consumption are at balance.\n+\n+## Modules\n+\n+The PID controller can be used in openHAB's [rule engine](https://www.openhab.org/docs/configuration/rules-dsl.html). This automation provides a trigger and an action module.\n+\n+### Trigger\n+\n+This module triggers whenever the `input` or the `setpoint` changes or the `loopTime` expires.\n+Every trigger calculates the P, the I and the D part and sums them up to form the `output` value.\n+This is then transferred to the action module.\n+\n+| Name               | Type    | Description                                                                                                                                        | Required |\n+|--------------------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------|----------|\n+| `input`            | Item    | Name of the input [Item](https://www.openhab.org/docs/configuration/items.html) (e.g. temperature sensor value)                                    | Y        |\n+| `setpoint`         | Item    | Name of the setpoint Item (e.g. desired room temperature)                                                                                          | Y        |\n+| `kp`               | Decimal | P: [Proportional Gain](#proportional-p-gain-parameter) Parameter                                                                                   | Y        |\n+| `ki`               | Decimal | I: [Integral Gain](#integral-i-gain-parameter) Parameter                                                                                           | Y        |\n+| `kd`               | Decimal | D: [Derivative Gain](#derivative-d-gain-parameter) Parameter                                                                                       | Y        |\n+| `kdTimeConstant`   | Decimal | D-T1: [Derivative Gain Time Constant](#derivative-time-constant-d-t1-parameter) in sec.                                                            | Y        |\n+| `outputLowerLimit` | Decimal | The output of the PID controller will be max this value                                                                                            | Y        |\n+| `outputUpperLimit` | Decimal | The output of the PID controller will be min this value                                                                                            | Y        |\n+| `loopTime`         | Decimal | The interval the output value will be updated in milliseconds. Note: the output will also be updated when the input value or the setpoint changes. | Y        |\n+\n+The purpose of the limit parameters are to keep the output value and the integral value in a reasonable range, if the regulation cannot meet its setpoint.\n+E.g. the window is open and the heater doesn't manage to heat up the room.\n+\n+The `loopTime` should be max a tenth of the system response.\n+E.g. the heating needs 10 min to heat up the room, the loop time should be max 1 min.\n+Lower values won't harm, but need more calculation resources.\n+\n+### Action\n+\n+This module writes the PID controller's output value into the `output` Item and provides debugging abilities.\n+\n+| Name         | Type | Description                                                          | Required |\n+|--------------|------|----------------------------------------------------------------------|----------|\n+| `output`     | Item | Name of the output Item (e.g. the valve actuator 0-100%)             | Y        |\n+| `pInspector` | Item | Name of the debug Item for the current P part                        | N        |\n+| `iInspector` | Item | Name of the debug Item for the current I part                        | N        |\n+| `dInspector` | Item | Name of the debug Item for the current D part                        | N        |\n+| `eInspector` | Item | Name of the debug Item for the current regulation difference (error) | N        |\n+\n+You can view the internal P, I and D parts of the controller with the inspector Items.\n+These values are useful when tuning the controller.\n+They are updated everytime the output is updated.\n+\n+## Proportional (P) Gain Parameter\n+\n+Parameter: `kp`\n+\n+A value of 0 disables the P part.\n+\n+A value of 1 sets the output to the current setpoint deviation (error).\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C, the output will be set to 5.\n+If the output is the opening of a valve in %, you might want to set this parameter to higher values (`Kp=10` would result in 50%).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MDg0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Tuning the `Kp`, `Ki` and `Kd` parameters can be done by appling science.\n          \n          \n            \n            Tuning the `Kp`, `Ki` and `Kd` parameters can be done by applying science.", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548850845", "createdAt": "2020-12-25T10:21:03Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/README.md", "diffHunk": "@@ -0,0 +1,137 @@\n+# PID Controller Automation\n+\n+This automation implements a [PID](https://en.wikipedia.org/wiki/PID_controller)-T1 controller for openHAB.\n+\n+A PID controller can be used for closed-loop controls. For example:\n+\n+- Heating: A sensor measures the room temperature.\n+  The PID controller calculates the heater's valve opening, so that the room temperature is kept at the setpoint.\n+- Lighting: A light sensor measures the room's illuminance.\n+  The PID controller controls the dimmer of the room's lighting, so that the illuminance in the room is kept at a constant level.\n+- PV zero export: A meter measures the power at the grid point of the building.\n+  The PID controller calculates the amount of power the battery storage system needs to feed-in or charge the battery, so that the building's grid power consumption is around zero,\n+  i.e. PV generation, battery storage output power and the building's power consumption are at balance.\n+\n+## Modules\n+\n+The PID controller can be used in openHAB's [rule engine](https://www.openhab.org/docs/configuration/rules-dsl.html). This automation provides a trigger and an action module.\n+\n+### Trigger\n+\n+This module triggers whenever the `input` or the `setpoint` changes or the `loopTime` expires.\n+Every trigger calculates the P, the I and the D part and sums them up to form the `output` value.\n+This is then transferred to the action module.\n+\n+| Name               | Type    | Description                                                                                                                                        | Required |\n+|--------------------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------|----------|\n+| `input`            | Item    | Name of the input [Item](https://www.openhab.org/docs/configuration/items.html) (e.g. temperature sensor value)                                    | Y        |\n+| `setpoint`         | Item    | Name of the setpoint Item (e.g. desired room temperature)                                                                                          | Y        |\n+| `kp`               | Decimal | P: [Proportional Gain](#proportional-p-gain-parameter) Parameter                                                                                   | Y        |\n+| `ki`               | Decimal | I: [Integral Gain](#integral-i-gain-parameter) Parameter                                                                                           | Y        |\n+| `kd`               | Decimal | D: [Derivative Gain](#derivative-d-gain-parameter) Parameter                                                                                       | Y        |\n+| `kdTimeConstant`   | Decimal | D-T1: [Derivative Gain Time Constant](#derivative-time-constant-d-t1-parameter) in sec.                                                            | Y        |\n+| `outputLowerLimit` | Decimal | The output of the PID controller will be max this value                                                                                            | Y        |\n+| `outputUpperLimit` | Decimal | The output of the PID controller will be min this value                                                                                            | Y        |\n+| `loopTime`         | Decimal | The interval the output value will be updated in milliseconds. Note: the output will also be updated when the input value or the setpoint changes. | Y        |\n+\n+The purpose of the limit parameters are to keep the output value and the integral value in a reasonable range, if the regulation cannot meet its setpoint.\n+E.g. the window is open and the heater doesn't manage to heat up the room.\n+\n+The `loopTime` should be max a tenth of the system response.\n+E.g. the heating needs 10 min to heat up the room, the loop time should be max 1 min.\n+Lower values won't harm, but need more calculation resources.\n+\n+### Action\n+\n+This module writes the PID controller's output value into the `output` Item and provides debugging abilities.\n+\n+| Name         | Type | Description                                                          | Required |\n+|--------------|------|----------------------------------------------------------------------|----------|\n+| `output`     | Item | Name of the output Item (e.g. the valve actuator 0-100%)             | Y        |\n+| `pInspector` | Item | Name of the debug Item for the current P part                        | N        |\n+| `iInspector` | Item | Name of the debug Item for the current I part                        | N        |\n+| `dInspector` | Item | Name of the debug Item for the current D part                        | N        |\n+| `eInspector` | Item | Name of the debug Item for the current regulation difference (error) | N        |\n+\n+You can view the internal P, I and D parts of the controller with the inspector Items.\n+These values are useful when tuning the controller.\n+They are updated everytime the output is updated.\n+\n+## Proportional (P) Gain Parameter\n+\n+Parameter: `kp`\n+\n+A value of 0 disables the P part.\n+\n+A value of 1 sets the output to the current setpoint deviation (error).\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C, the output will be set to 5.\n+If the output is the opening of a valve in %, you might want to set this parameter to higher values (`Kp=10` would result in 50%).\n+\n+## Integral (I) Gain Parameter\n+\n+Parameter: `ki`\n+\n+The purpose of this parameter is to let the output drift towards the setpoint.\n+The bigger this parameter, the faster the drifting.\n+\n+A value of 0 disables the I part.\n+\n+A value of 1 adds the current setpoint deviation (error) to the output each second.\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C, the output will be set to 5 after 1 sec.\n+After 2 sec the output will be 10.\n+If the output is the opening of a valve in %, you might want to set this parameter to a lower value (Ki=0.1 would result in 30% after 60 sec: 5\\*0.1\\*60=30).\n+\n+## Derivative (D) Gain Parameter\n+\n+Parameter: `kd`\n+\n+The purpose of this parameter is to react to sudden changes (e.g. an opened window) and also to damp the regulation.\n+This makes the regulation more resilient against oscillations, i.e. bigger `kp` and `ki` values can be set.\n+\n+A value of 0 disables the D part.\n+\n+A value of 1 sets the output to the difference between the last setpoint deviation (error) and the current.\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C (error=5\u00b0C).\n+When the temperature drops to 10\u00b0C due to an opened window (error=15\u00b0C), the output is set to 15\u00b0C - 5\u00b0C = 10.\n+\n+## Derivative Time Constant (D-T1) Parameter\n+\n+Parameter: `kdTimeConstant`\n+\n+The purpose of this parameter is to slow down the impact of the D part.\n+\n+This parameter behaves like a [low-pass](https://en.wikipedia.org/wiki/Low-pass_filter) filter.\n+The D part will become 63% of its actual value after `kdTimeConstant` seconds and 99% after 5 times `kdTimeConstant`. E.g. `kdTimeConstant` is set to 10s, the D part will become 99% after 50s.\n+\n+Higher values lead to a longer lasting impact of the D part (stretching) after a change in the setpoint deviation (error).\n+The \"stretching\" also results in a lower amplitude, i.e. if you increase this value, you might want to also increase `kd` to keep the height of the D part at the same level.\n+\n+## Tuning\n+\n+Tuning the `Kp`, `Ki` and `Kd` parameters can be done by appling science.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MDkzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To be able to proceed with this method, you need to visualization the input and the output value of the PID controller over time.\n          \n          \n            \n            To be able to proceed with this method, you need to visualize the input and the output value of the PID controller over time.", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548850937", "createdAt": "2020-12-25T10:21:43Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/README.md", "diffHunk": "@@ -0,0 +1,137 @@\n+# PID Controller Automation\n+\n+This automation implements a [PID](https://en.wikipedia.org/wiki/PID_controller)-T1 controller for openHAB.\n+\n+A PID controller can be used for closed-loop controls. For example:\n+\n+- Heating: A sensor measures the room temperature.\n+  The PID controller calculates the heater's valve opening, so that the room temperature is kept at the setpoint.\n+- Lighting: A light sensor measures the room's illuminance.\n+  The PID controller controls the dimmer of the room's lighting, so that the illuminance in the room is kept at a constant level.\n+- PV zero export: A meter measures the power at the grid point of the building.\n+  The PID controller calculates the amount of power the battery storage system needs to feed-in or charge the battery, so that the building's grid power consumption is around zero,\n+  i.e. PV generation, battery storage output power and the building's power consumption are at balance.\n+\n+## Modules\n+\n+The PID controller can be used in openHAB's [rule engine](https://www.openhab.org/docs/configuration/rules-dsl.html). This automation provides a trigger and an action module.\n+\n+### Trigger\n+\n+This module triggers whenever the `input` or the `setpoint` changes or the `loopTime` expires.\n+Every trigger calculates the P, the I and the D part and sums them up to form the `output` value.\n+This is then transferred to the action module.\n+\n+| Name               | Type    | Description                                                                                                                                        | Required |\n+|--------------------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------|----------|\n+| `input`            | Item    | Name of the input [Item](https://www.openhab.org/docs/configuration/items.html) (e.g. temperature sensor value)                                    | Y        |\n+| `setpoint`         | Item    | Name of the setpoint Item (e.g. desired room temperature)                                                                                          | Y        |\n+| `kp`               | Decimal | P: [Proportional Gain](#proportional-p-gain-parameter) Parameter                                                                                   | Y        |\n+| `ki`               | Decimal | I: [Integral Gain](#integral-i-gain-parameter) Parameter                                                                                           | Y        |\n+| `kd`               | Decimal | D: [Derivative Gain](#derivative-d-gain-parameter) Parameter                                                                                       | Y        |\n+| `kdTimeConstant`   | Decimal | D-T1: [Derivative Gain Time Constant](#derivative-time-constant-d-t1-parameter) in sec.                                                            | Y        |\n+| `outputLowerLimit` | Decimal | The output of the PID controller will be max this value                                                                                            | Y        |\n+| `outputUpperLimit` | Decimal | The output of the PID controller will be min this value                                                                                            | Y        |\n+| `loopTime`         | Decimal | The interval the output value will be updated in milliseconds. Note: the output will also be updated when the input value or the setpoint changes. | Y        |\n+\n+The purpose of the limit parameters are to keep the output value and the integral value in a reasonable range, if the regulation cannot meet its setpoint.\n+E.g. the window is open and the heater doesn't manage to heat up the room.\n+\n+The `loopTime` should be max a tenth of the system response.\n+E.g. the heating needs 10 min to heat up the room, the loop time should be max 1 min.\n+Lower values won't harm, but need more calculation resources.\n+\n+### Action\n+\n+This module writes the PID controller's output value into the `output` Item and provides debugging abilities.\n+\n+| Name         | Type | Description                                                          | Required |\n+|--------------|------|----------------------------------------------------------------------|----------|\n+| `output`     | Item | Name of the output Item (e.g. the valve actuator 0-100%)             | Y        |\n+| `pInspector` | Item | Name of the debug Item for the current P part                        | N        |\n+| `iInspector` | Item | Name of the debug Item for the current I part                        | N        |\n+| `dInspector` | Item | Name of the debug Item for the current D part                        | N        |\n+| `eInspector` | Item | Name of the debug Item for the current regulation difference (error) | N        |\n+\n+You can view the internal P, I and D parts of the controller with the inspector Items.\n+These values are useful when tuning the controller.\n+They are updated everytime the output is updated.\n+\n+## Proportional (P) Gain Parameter\n+\n+Parameter: `kp`\n+\n+A value of 0 disables the P part.\n+\n+A value of 1 sets the output to the current setpoint deviation (error).\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C, the output will be set to 5.\n+If the output is the opening of a valve in %, you might want to set this parameter to higher values (`Kp=10` would result in 50%).\n+\n+## Integral (I) Gain Parameter\n+\n+Parameter: `ki`\n+\n+The purpose of this parameter is to let the output drift towards the setpoint.\n+The bigger this parameter, the faster the drifting.\n+\n+A value of 0 disables the I part.\n+\n+A value of 1 adds the current setpoint deviation (error) to the output each second.\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C, the output will be set to 5 after 1 sec.\n+After 2 sec the output will be 10.\n+If the output is the opening of a valve in %, you might want to set this parameter to a lower value (Ki=0.1 would result in 30% after 60 sec: 5\\*0.1\\*60=30).\n+\n+## Derivative (D) Gain Parameter\n+\n+Parameter: `kd`\n+\n+The purpose of this parameter is to react to sudden changes (e.g. an opened window) and also to damp the regulation.\n+This makes the regulation more resilient against oscillations, i.e. bigger `kp` and `ki` values can be set.\n+\n+A value of 0 disables the D part.\n+\n+A value of 1 sets the output to the difference between the last setpoint deviation (error) and the current.\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C (error=5\u00b0C).\n+When the temperature drops to 10\u00b0C due to an opened window (error=15\u00b0C), the output is set to 15\u00b0C - 5\u00b0C = 10.\n+\n+## Derivative Time Constant (D-T1) Parameter\n+\n+Parameter: `kdTimeConstant`\n+\n+The purpose of this parameter is to slow down the impact of the D part.\n+\n+This parameter behaves like a [low-pass](https://en.wikipedia.org/wiki/Low-pass_filter) filter.\n+The D part will become 63% of its actual value after `kdTimeConstant` seconds and 99% after 5 times `kdTimeConstant`. E.g. `kdTimeConstant` is set to 10s, the D part will become 99% after 50s.\n+\n+Higher values lead to a longer lasting impact of the D part (stretching) after a change in the setpoint deviation (error).\n+The \"stretching\" also results in a lower amplitude, i.e. if you increase this value, you might want to also increase `kd` to keep the height of the D part at the same level.\n+\n+## Tuning\n+\n+Tuning the `Kp`, `Ki` and `Kd` parameters can be done by appling science.\n+It can also be done by heuristic methods like the [Ziegler\u2013Nichols method](https://en.wikipedia.org/wiki/Ziegler%E2%80%93Nichols_method).\n+But it can also be done by trial and error.\n+This results in quite reasonable working systems in most cases.\n+So, this will be described in the following.\n+\n+To be able to proceed with this method, you need to visualization the input and the output value of the PID controller over time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MTExMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. Increase `kp` as long as the system starts to oscillate (continuous over- and undershoot)\n          \n          \n            \n            2. Increase `kp` until the system starts to oscillate (continuous over- and undershoot)", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548851110", "createdAt": "2020-12-25T10:23:18Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/README.md", "diffHunk": "@@ -0,0 +1,137 @@\n+# PID Controller Automation\n+\n+This automation implements a [PID](https://en.wikipedia.org/wiki/PID_controller)-T1 controller for openHAB.\n+\n+A PID controller can be used for closed-loop controls. For example:\n+\n+- Heating: A sensor measures the room temperature.\n+  The PID controller calculates the heater's valve opening, so that the room temperature is kept at the setpoint.\n+- Lighting: A light sensor measures the room's illuminance.\n+  The PID controller controls the dimmer of the room's lighting, so that the illuminance in the room is kept at a constant level.\n+- PV zero export: A meter measures the power at the grid point of the building.\n+  The PID controller calculates the amount of power the battery storage system needs to feed-in or charge the battery, so that the building's grid power consumption is around zero,\n+  i.e. PV generation, battery storage output power and the building's power consumption are at balance.\n+\n+## Modules\n+\n+The PID controller can be used in openHAB's [rule engine](https://www.openhab.org/docs/configuration/rules-dsl.html). This automation provides a trigger and an action module.\n+\n+### Trigger\n+\n+This module triggers whenever the `input` or the `setpoint` changes or the `loopTime` expires.\n+Every trigger calculates the P, the I and the D part and sums them up to form the `output` value.\n+This is then transferred to the action module.\n+\n+| Name               | Type    | Description                                                                                                                                        | Required |\n+|--------------------|---------|----------------------------------------------------------------------------------------------------------------------------------------------------|----------|\n+| `input`            | Item    | Name of the input [Item](https://www.openhab.org/docs/configuration/items.html) (e.g. temperature sensor value)                                    | Y        |\n+| `setpoint`         | Item    | Name of the setpoint Item (e.g. desired room temperature)                                                                                          | Y        |\n+| `kp`               | Decimal | P: [Proportional Gain](#proportional-p-gain-parameter) Parameter                                                                                   | Y        |\n+| `ki`               | Decimal | I: [Integral Gain](#integral-i-gain-parameter) Parameter                                                                                           | Y        |\n+| `kd`               | Decimal | D: [Derivative Gain](#derivative-d-gain-parameter) Parameter                                                                                       | Y        |\n+| `kdTimeConstant`   | Decimal | D-T1: [Derivative Gain Time Constant](#derivative-time-constant-d-t1-parameter) in sec.                                                            | Y        |\n+| `outputLowerLimit` | Decimal | The output of the PID controller will be max this value                                                                                            | Y        |\n+| `outputUpperLimit` | Decimal | The output of the PID controller will be min this value                                                                                            | Y        |\n+| `loopTime`         | Decimal | The interval the output value will be updated in milliseconds. Note: the output will also be updated when the input value or the setpoint changes. | Y        |\n+\n+The purpose of the limit parameters are to keep the output value and the integral value in a reasonable range, if the regulation cannot meet its setpoint.\n+E.g. the window is open and the heater doesn't manage to heat up the room.\n+\n+The `loopTime` should be max a tenth of the system response.\n+E.g. the heating needs 10 min to heat up the room, the loop time should be max 1 min.\n+Lower values won't harm, but need more calculation resources.\n+\n+### Action\n+\n+This module writes the PID controller's output value into the `output` Item and provides debugging abilities.\n+\n+| Name         | Type | Description                                                          | Required |\n+|--------------|------|----------------------------------------------------------------------|----------|\n+| `output`     | Item | Name of the output Item (e.g. the valve actuator 0-100%)             | Y        |\n+| `pInspector` | Item | Name of the debug Item for the current P part                        | N        |\n+| `iInspector` | Item | Name of the debug Item for the current I part                        | N        |\n+| `dInspector` | Item | Name of the debug Item for the current D part                        | N        |\n+| `eInspector` | Item | Name of the debug Item for the current regulation difference (error) | N        |\n+\n+You can view the internal P, I and D parts of the controller with the inspector Items.\n+These values are useful when tuning the controller.\n+They are updated everytime the output is updated.\n+\n+## Proportional (P) Gain Parameter\n+\n+Parameter: `kp`\n+\n+A value of 0 disables the P part.\n+\n+A value of 1 sets the output to the current setpoint deviation (error).\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C, the output will be set to 5.\n+If the output is the opening of a valve in %, you might want to set this parameter to higher values (`Kp=10` would result in 50%).\n+\n+## Integral (I) Gain Parameter\n+\n+Parameter: `ki`\n+\n+The purpose of this parameter is to let the output drift towards the setpoint.\n+The bigger this parameter, the faster the drifting.\n+\n+A value of 0 disables the I part.\n+\n+A value of 1 adds the current setpoint deviation (error) to the output each second.\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C, the output will be set to 5 after 1 sec.\n+After 2 sec the output will be 10.\n+If the output is the opening of a valve in %, you might want to set this parameter to a lower value (Ki=0.1 would result in 30% after 60 sec: 5\\*0.1\\*60=30).\n+\n+## Derivative (D) Gain Parameter\n+\n+Parameter: `kd`\n+\n+The purpose of this parameter is to react to sudden changes (e.g. an opened window) and also to damp the regulation.\n+This makes the regulation more resilient against oscillations, i.e. bigger `kp` and `ki` values can be set.\n+\n+A value of 0 disables the D part.\n+\n+A value of 1 sets the output to the difference between the last setpoint deviation (error) and the current.\n+E.g. the setpoint is 25\u00b0C and the measured value is 20\u00b0C (error=5\u00b0C).\n+When the temperature drops to 10\u00b0C due to an opened window (error=15\u00b0C), the output is set to 15\u00b0C - 5\u00b0C = 10.\n+\n+## Derivative Time Constant (D-T1) Parameter\n+\n+Parameter: `kdTimeConstant`\n+\n+The purpose of this parameter is to slow down the impact of the D part.\n+\n+This parameter behaves like a [low-pass](https://en.wikipedia.org/wiki/Low-pass_filter) filter.\n+The D part will become 63% of its actual value after `kdTimeConstant` seconds and 99% after 5 times `kdTimeConstant`. E.g. `kdTimeConstant` is set to 10s, the D part will become 99% after 50s.\n+\n+Higher values lead to a longer lasting impact of the D part (stretching) after a change in the setpoint deviation (error).\n+The \"stretching\" also results in a lower amplitude, i.e. if you increase this value, you might want to also increase `kd` to keep the height of the D part at the same level.\n+\n+## Tuning\n+\n+Tuning the `Kp`, `Ki` and `Kd` parameters can be done by appling science.\n+It can also be done by heuristic methods like the [Ziegler\u2013Nichols method](https://en.wikipedia.org/wiki/Ziegler%E2%80%93Nichols_method).\n+But it can also be done by trial and error.\n+This results in quite reasonable working systems in most cases.\n+So, this will be described in the following.\n+\n+To be able to proceed with this method, you need to visualization the input and the output value of the PID controller over time.\n+It's also good to visualize the individual P, I and D parts (these are forming the output value) via the inspector Items.\n+The visualization can be done by the analyze function in Main UI or by adding a persistence and use Grafana for example.\n+\n+After you added a [Rule](https://www.openhab.org/docs/configuration/rules-dsl.html) with above trigger and action module and configured those, proceed with the following steps:\n+\n+> *Notice:* A good starting point for the derivative time constant `kdTimeConstant` is the response time of the control loop.\n+E.g. the time it takes from opening the heater valve and seeing an effect of the measured temperature.\n+\n+1. Set `kp`, `ki` and `kd` to 0\n+2. Increase `kp` as long as the system starts to oscillate (continuous over- and undershoot)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MjExMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public Map<String, Object> execute(Map<String, Object> context) {\n          \n          \n            \n                public @Nullable Map<String, Object> execute(Map<String, Object> context) {", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548852113", "createdAt": "2020-12-25T10:29:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/handler/PIDControllerActionHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.handler;\n+\n+import static org.openhab.automation.pidcontroller.internal.PIDControllerConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.handler.ActionHandler;\n+import org.openhab.core.automation.handler.BaseModuleHandler;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.items.events.ItemEventFactory;\n+import org.openhab.core.library.types.DecimalType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ * @author Fabian Wolter - Add PID debugging items\n+ */\n+@NonNullByDefault\n+public class PIDControllerActionHandler extends BaseModuleHandler<Action> implements ActionHandler {\n+    public static final String MODULE_TYPE_ID = AUTOMATION_NAME + \".action\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(PIDControllerActionHandler.class);\n+\n+    private ItemRegistry itemRegistry;\n+    private EventPublisher eventPublisher;\n+\n+    public PIDControllerActionHandler(Action module, ItemRegistry itemRegistry, EventPublisher eventPublisher) {\n+        super(module);\n+        this.itemRegistry = itemRegistry;\n+        this.eventPublisher = eventPublisher;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Map<String, Object> execute(Map<String, Object> context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MjY0NQ==", "bodyText": "This throws an NPE and if I didn't overlook something, that is never catched.", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548852645", "createdAt": "2020-12-25T10:34:34Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/handler/PIDControllerTriggerHandler.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.handler;\n+\n+import static org.openhab.automation.pidcontroller.internal.PIDControllerConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.automation.pidcontroller.internal.PIDException;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemNotFoundException;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemEventFactory;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ * @author Fabian Wolter - Add PID debug output values\n+ */\n+@NonNullByDefault\n+public class PIDControllerTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber {\n+    public static final String MODULE_TYPE_ID = AUTOMATION_NAME + \".trigger\";\n+    private static final Set<String> SUBSCRIBED_EVENT_TYPES = Set.of(ItemStateEvent.TYPE, ItemStateChangedEvent.TYPE);\n+    private final Logger logger = LoggerFactory.getLogger(PIDControllerTriggerHandler.class);\n+    private final ScheduledExecutorService scheduler = Executors\n+            .newSingleThreadScheduledExecutor(new NamedThreadFactory(\"OH-automation-\" + AUTOMATION_NAME, true));\n+    private final ServiceRegistration<?> eventSubscriberRegistration;\n+    private final PIDController controller;\n+    private final int loopTimeMs;\n+    private @Nullable ScheduledFuture<?> controllerjob;\n+    private long previousTimeMs = System.currentTimeMillis();\n+    private Item inputItem;\n+    private Item setpointItem;\n+    private EventFilter eventFilter;\n+\n+    public PIDControllerTriggerHandler(Trigger module, ItemRegistry itemRegistry, EventPublisher eventPublisher,\n+            BundleContext bundleContext) {\n+        super(module);\n+\n+        Configuration config = module.getConfiguration();\n+\n+        String inputItemName = (String) Objects.requireNonNull(config.get(CONFIG_INPUT_ITEM), \"Input item is not set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MjkwNQ==", "bodyText": "Assign to a local variable to prevent the null-warning.", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548852905", "createdAt": "2020-12-25T10:36:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/handler/PIDControllerTriggerHandler.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.handler;\n+\n+import static org.openhab.automation.pidcontroller.internal.PIDControllerConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.automation.pidcontroller.internal.PIDException;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemNotFoundException;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemEventFactory;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ * @author Fabian Wolter - Add PID debug output values\n+ */\n+@NonNullByDefault\n+public class PIDControllerTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber {\n+    public static final String MODULE_TYPE_ID = AUTOMATION_NAME + \".trigger\";\n+    private static final Set<String> SUBSCRIBED_EVENT_TYPES = Set.of(ItemStateEvent.TYPE, ItemStateChangedEvent.TYPE);\n+    private final Logger logger = LoggerFactory.getLogger(PIDControllerTriggerHandler.class);\n+    private final ScheduledExecutorService scheduler = Executors\n+            .newSingleThreadScheduledExecutor(new NamedThreadFactory(\"OH-automation-\" + AUTOMATION_NAME, true));\n+    private final ServiceRegistration<?> eventSubscriberRegistration;\n+    private final PIDController controller;\n+    private final int loopTimeMs;\n+    private @Nullable ScheduledFuture<?> controllerjob;\n+    private long previousTimeMs = System.currentTimeMillis();\n+    private Item inputItem;\n+    private Item setpointItem;\n+    private EventFilter eventFilter;\n+\n+    public PIDControllerTriggerHandler(Trigger module, ItemRegistry itemRegistry, EventPublisher eventPublisher,\n+            BundleContext bundleContext) {\n+        super(module);\n+\n+        Configuration config = module.getConfiguration();\n+\n+        String inputItemName = (String) Objects.requireNonNull(config.get(CONFIG_INPUT_ITEM), \"Input item is not set\");\n+        String setpointItemName = (String) Objects.requireNonNull(config.get(CONFIG_SETPOINT_ITEM),\n+                \"Setpoint item is not set\");\n+\n+        try {\n+            inputItem = itemRegistry.getItem(inputItemName);\n+        } catch (ItemNotFoundException e) {\n+            throw new IllegalArgumentException(\"Configured input item not found: \" + inputItemName, e);\n+        }\n+\n+        try {\n+            setpointItem = itemRegistry.getItem(setpointItemName);\n+        } catch (ItemNotFoundException e) {\n+            throw new IllegalArgumentException(\"Configured setpoint item not found: \" + setpointItemName, e);\n+        }\n+\n+        double outputLowerLimit = getDoubleFromConfig(config, CONFIG_OUTPUT_LOWER_LIMIT);\n+        double outputUpperLimit = getDoubleFromConfig(config, CONFIG_OUTPUT_UPPER_LIMIT);\n+        double kpAdjuster = getDoubleFromConfig(config, CONFIG_KP_GAIN);\n+        double kiAdjuster = getDoubleFromConfig(config, CONFIG_KI_GAIN);\n+        double kdAdjuster = getDoubleFromConfig(config, CONFIG_KD_GAIN);\n+        double kdTimeConstant = getDoubleFromConfig(config, CONFIG_KD_TIMECONSTANT);\n+\n+        loopTimeMs = ((BigDecimal) Objects.requireNonNull(config.get(CONFIG_LOOP_TIME),\n+                CONFIG_LOOP_TIME + \" is not set\")).intValue();\n+\n+        controller = new PIDController(outputLowerLimit, outputUpperLimit, kpAdjuster, kiAdjuster, kdAdjuster,\n+                kdTimeConstant);\n+\n+        eventFilter = event -> {\n+            String topic = event.getTopic();\n+\n+            return topic.equals(\"openhab/items/\" + inputItemName + \"/state\")\n+                    || topic.equals(\"openhab/items/\" + inputItemName + \"/statechanged\")\n+                    || topic.equals(\"openhab/items/\" + setpointItemName + \"/statechanged\");\n+        };\n+\n+        eventSubscriberRegistration = bundleContext.registerService(EventSubscriber.class.getName(), this, null);\n+\n+        eventPublisher.post(ItemEventFactory.createCommandEvent(inputItemName, RefreshType.REFRESH));\n+\n+        controllerjob = scheduler.scheduleWithFixedDelay(this::calculate, 0, loopTimeMs, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private double getDoubleFromConfig(Configuration config, String key) {\n+        return ((BigDecimal) Objects.requireNonNull(config.get(key), key + \" is not set\")).doubleValue();\n+    }\n+\n+    private void calculate() {\n+        double input;\n+        double setpoint;\n+\n+        try {\n+            input = getItemValueAsNumber(inputItem);\n+        } catch (PIDException e) {\n+            logger.warn(\"Input item: {}\", e.getMessage());\n+            return;\n+        }\n+\n+        try {\n+            setpoint = getItemValueAsNumber(setpointItem);\n+        } catch (PIDException e) {\n+            logger.warn(\"Setpoint item: {}\", e.getMessage());\n+            return;\n+        }\n+\n+        long now = System.currentTimeMillis();\n+\n+        PIDOutputDTO output = controller.calculate(input, setpoint, now - previousTimeMs);\n+        previousTimeMs = now;\n+\n+        Map<String, BigDecimal> outputs = new HashMap<>();\n+\n+        putBigDecimal(outputs, OUTPUT, output.getOutput());\n+        putBigDecimal(outputs, P_INSPECTOR, output.getProportionalPart());\n+        putBigDecimal(outputs, I_INSPECTOR, output.getIntegralPart());\n+        putBigDecimal(outputs, D_INSPECTOR, output.getDerivativePart());\n+        putBigDecimal(outputs, E_INSPECTOR, output.getError());\n+\n+        ModuleHandlerCallback localCallback = callback;\n+        if (localCallback != null && localCallback instanceof TriggerHandlerCallback) {\n+            ((TriggerHandlerCallback) localCallback).triggered(module, outputs);\n+        } else {\n+            logger.warn(\"No callback set\");\n+        }\n+    }\n+\n+    private void putBigDecimal(Map<String, BigDecimal> map, String key, double value) {\n+        map.put(key, BigDecimal.valueOf(value));\n+    }\n+\n+    private double getItemValueAsNumber(Item item) throws PIDException {\n+        State setpointState = item.getState();\n+\n+        if (setpointState instanceof Number) {\n+            double doubleValue = ((Number) setpointState).doubleValue();\n+\n+            if (Double.isFinite(doubleValue)) {\n+                return doubleValue;\n+            }\n+        } else if (setpointState instanceof StringType) {\n+            try {\n+                return Double.parseDouble(setpointState.toString());\n+            } catch (NumberFormatException e) {\n+                // nothing\n+            }\n+        }\n+        throw new PIDException(\n+                \"Item type is not a number: \" + setpointState.getClass().getSimpleName() + \": \" + setpointState);\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (event instanceof ItemStateChangedEvent) {\n+            calculate();\n+        }\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return SUBSCRIBED_EVENT_TYPES;\n+    }\n+\n+    @Override\n+    public @Nullable EventFilter getEventFilter() {\n+        return eventFilter;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        eventSubscriberRegistration.unregister();\n+\n+        if (controllerjob != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1Mjk5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<Trigger> triggers = Collections.singletonList(ModuleBuilder.createTrigger().withId(triggerId)\n          \n          \n            \n                    final List<Trigger> triggers = List.of(ModuleBuilder.createTrigger().withId(triggerId)", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548852990", "createdAt": "2020-12-25T10:36:41Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerRuleTemplate.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.automation.pidcontroller.internal.PIDControllerConstants;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerActionHandler;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerTriggerHandler;\n+import org.openhab.automation.pidcontroller.internal.type.PIDControllerActionType;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.Condition;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.Visibility;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.util.ModuleBuilder;\n+import org.openhab.core.config.core.ConfigDescriptionParameter;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class PIDControllerRuleTemplate extends RuleTemplate {\n+    public static final String UID = \"PIDControllerRuleTemplate\";\n+\n+    public static PIDControllerRuleTemplate initialize() {\n+        final String triggerId = UUID.randomUUID().toString();\n+\n+        final List<Trigger> triggers = Collections.singletonList(ModuleBuilder.createTrigger().withId(triggerId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzA3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<Action> actions = Collections.singletonList(ModuleBuilder.createAction()\n          \n          \n            \n                    final List<Action> actions = List.of(ModuleBuilder.createAction()", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853071", "createdAt": "2020-12-25T10:37:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerRuleTemplate.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.automation.pidcontroller.internal.PIDControllerConstants;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerActionHandler;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerTriggerHandler;\n+import org.openhab.automation.pidcontroller.internal.type.PIDControllerActionType;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.Condition;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.Visibility;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.util.ModuleBuilder;\n+import org.openhab.core.config.core.ConfigDescriptionParameter;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class PIDControllerRuleTemplate extends RuleTemplate {\n+    public static final String UID = \"PIDControllerRuleTemplate\";\n+\n+    public static PIDControllerRuleTemplate initialize() {\n+        final String triggerId = UUID.randomUUID().toString();\n+\n+        final List<Trigger> triggers = Collections.singletonList(ModuleBuilder.createTrigger().withId(triggerId)\n+                .withTypeUID(PIDControllerTriggerHandler.MODULE_TYPE_ID).withLabel(\"PID Controller Trigger\").build());\n+\n+        final Map<String, String> actionInputs = new HashMap<String, String>();\n+        actionInputs.put(PIDControllerActionType.INPUT, triggerId + \".\" + PIDControllerConstants.OUTPUT);\n+\n+        final List<Action> actions = Collections.singletonList(ModuleBuilder.createAction()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzEzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<String> tags = new HashSet<String>();\n          \n          \n            \n                    tags.add(\"PID Controller\");\n          \n          \n            \n                    Set<String> tags = Set.of(\"PID Controller\");", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853132", "createdAt": "2020-12-25T10:37:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerRuleTemplate.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.automation.pidcontroller.internal.PIDControllerConstants;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerActionHandler;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerTriggerHandler;\n+import org.openhab.automation.pidcontroller.internal.type.PIDControllerActionType;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.Condition;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.Visibility;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.util.ModuleBuilder;\n+import org.openhab.core.config.core.ConfigDescriptionParameter;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class PIDControllerRuleTemplate extends RuleTemplate {\n+    public static final String UID = \"PIDControllerRuleTemplate\";\n+\n+    public static PIDControllerRuleTemplate initialize() {\n+        final String triggerId = UUID.randomUUID().toString();\n+\n+        final List<Trigger> triggers = Collections.singletonList(ModuleBuilder.createTrigger().withId(triggerId)\n+                .withTypeUID(PIDControllerTriggerHandler.MODULE_TYPE_ID).withLabel(\"PID Controller Trigger\").build());\n+\n+        final Map<String, String> actionInputs = new HashMap<String, String>();\n+        actionInputs.put(PIDControllerActionType.INPUT, triggerId + \".\" + PIDControllerConstants.OUTPUT);\n+\n+        final List<Action> actions = Collections.singletonList(ModuleBuilder.createAction()\n+                .withId(UUID.randomUUID().toString()).withTypeUID(PIDControllerActionHandler.MODULE_TYPE_ID)\n+                .withLabel(\"PID Controller Action\").withInputs(actionInputs).build());\n+\n+        Set<String> tags = new HashSet<String>();\n+        tags.add(\"PID Controller\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzU3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();\n          \n          \n            \n                private static final RuleTemplate PROVIDED_RULE_TEMPLATE = PIDControllerRuleTemplate.initialize();", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853579", "createdAt": "2020-12-25T10:41:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerTemplateProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.template.RuleTemplateProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerTemplateProvider implements RuleTemplateProvider {\n+    private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzY0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Collections.unmodifiableCollection(providedRuleTemplates.values());\n          \n          \n            \n                    return Set.of(PROVIDED_RULE_TEMPLATE);", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853647", "createdAt": "2020-12-25T10:41:58Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerTemplateProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.template.RuleTemplateProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerTemplateProvider implements RuleTemplateProvider {\n+    private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();\n+\n+    public PIDControllerTemplateProvider() {\n+        providedRuleTemplates.put(PIDControllerRuleTemplate.UID, PIDControllerRuleTemplate.initialize());\n+    }\n+\n+    @Override\n+    @Nullable\n+    public RuleTemplate getTemplate(String UID, @Nullable Locale locale) {\n+        return providedRuleTemplates.get(UID);\n+    }\n+\n+    @Override\n+    public Collection<RuleTemplate> getTemplates(@Nullable Locale locale) {\n+        return providedRuleTemplates.values();\n+    }\n+\n+    @Override\n+    public void addProviderChangeListener(ProviderChangeListener<RuleTemplate> listener) {\n+        // does nothing because this provider does not change\n+    }\n+\n+    @Override\n+    public Collection<RuleTemplate> getAll() {\n+        return Collections.unmodifiableCollection(providedRuleTemplates.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzgxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return providedRuleTemplates.get(UID);\n          \n          \n            \n                   \n          \n          \n            \n                    return uid.equals(PIDControllerRuleTemplate.UID) ? PROVIDED_RULE_TEMPLATE : null;", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853811", "createdAt": "2020-12-25T10:43:27Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerTemplateProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.template.RuleTemplateProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerTemplateProvider implements RuleTemplateProvider {\n+    private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();\n+\n+    public PIDControllerTemplateProvider() {\n+        providedRuleTemplates.put(PIDControllerRuleTemplate.UID, PIDControllerRuleTemplate.initialize());\n+    }\n+\n+    @Override\n+    @Nullable\n+    public RuleTemplate getTemplate(String UID, @Nullable Locale locale) {\n+        return providedRuleTemplates.get(UID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1Mzg3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return providedRuleTemplates.values();\n          \n          \n            \n                    return Set.of(PROVIDED_RULE_TEMPLATE);", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548853874", "createdAt": "2020-12-25T10:43:57Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/template/PIDControllerTemplateProvider.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.template;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.template.RuleTemplate;\n+import org.openhab.core.automation.template.RuleTemplateProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerTemplateProvider implements RuleTemplateProvider {\n+    private final Map<String, RuleTemplate> providedRuleTemplates = new HashMap<String, RuleTemplate>();\n+\n+    public PIDControllerTemplateProvider() {\n+        providedRuleTemplates.put(PIDControllerRuleTemplate.UID, PIDControllerRuleTemplate.initialize());\n+    }\n+\n+    @Override\n+    @Nullable\n+    public RuleTemplate getTemplate(String UID, @Nullable Locale locale) {\n+        return providedRuleTemplates.get(UID);\n+    }\n+\n+    @Override\n+    public Collection<RuleTemplate> getTemplates(@Nullable Locale locale) {\n+        return providedRuleTemplates.values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1NDEyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<String, ModuleType> providedModuleTypes = new HashMap<String, ModuleType>();\n          \n          \n            \n                private static final Map<String, ModuleType> PROVIDED_MODULE_TYPE = new Map.of(...)", "url": "https://github.com/openhab/openhab-addons/pull/9512#discussion_r548854128", "createdAt": "2020-12-25T10:45:52Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.automation.pidcontroller/src/main/java/org/openhab/automation/pidcontroller/internal/type/PIDControllerModuleTypeProvider.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.pidcontroller.internal.type;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerActionHandler;\n+import org.openhab.automation.pidcontroller.internal.handler.PIDControllerTriggerHandler;\n+import org.openhab.core.automation.type.ModuleType;\n+import org.openhab.core.automation.type.ModuleTypeProvider;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * @author Hilbrand Bouwkamp - Initial Contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class PIDControllerModuleTypeProvider implements ModuleTypeProvider {\n+    private final Map<String, ModuleType> providedModuleTypes = new HashMap<String, ModuleType>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c73a1d5985e1a997f323bae18b729f7b8753d0"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d6ce3e82fe704048c6e11d4ad034484ed9c2d96", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/1d6ce3e82fe704048c6e11d4ad034484ed9c2d96", "committedDate": "2020-12-25T12:12:06Z", "message": "Incorporate review feedback No.1\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTI1ODcw", "url": "https://github.com/openhab/openhab-addons/pull/9512#pullrequestreview-558925870", "createdAt": "2020-12-27T12:32:56Z", "commit": {"oid": "1d6ce3e82fe704048c6e11d4ad034484ed9c2d96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MjM0OTUw", "url": "https://github.com/openhab/openhab-addons/pull/9512#pullrequestreview-559234950", "createdAt": "2020-12-28T17:30:52Z", "commit": {"oid": "1d6ce3e82fe704048c6e11d4ad034484ed9c2d96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3611, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}