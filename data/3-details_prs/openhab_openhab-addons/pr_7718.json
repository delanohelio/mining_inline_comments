{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNTE0OTc2", "number": 7718, "title": "[stiebeleltron] Initial commit", "bodyText": "[stiebeleltron] Initial contribution of a ISG Binding (Modbus)\nThis is a initial contribution for a binding to connect to the Internet Service Gateway of Stiebel Eltron heat pumps through modbus. The binding is heavily inspired by and based on the modbus spunspec binding.\nA test version of the binding can be downloaded here.", "createdAt": "2020-05-21T18:43:41Z", "url": "https://github.com/openhab/openhab-addons/pull/7718", "merged": true, "mergeCommit": {"oid": "1857a4235c8538f5cf16c027b7dfdf4a9d079d06"}, "closed": true, "closedAt": "2020-08-27T08:19:35Z", "author": {"login": "pail23"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrnvFSgFqTQzMDk0NTM4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdC7-_SgFqTQ3NjQ5MDEwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTQ1Mzg5", "url": "https://github.com/openhab/openhab-addons/pull/7718#pullrequestreview-430945389", "createdAt": "2020-06-15T19:51:10Z", "commit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1MToxMFrOGkAdRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTozNjoyN1rOGkDmqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwOTQxNQ==", "bodyText": "Or serial as stated in the thing-types?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You need first to set up either a TCP Modbus bridge according to the Modbus documentation.\n          \n          \n            \n            You need first to set up a TCP Modbus bridge according to the Modbus documentation.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440409415", "createdAt": "2020-06-15T19:51:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/README.md", "diffHunk": "@@ -0,0 +1,207 @@\n+# Stiebel Eltron ISG Binding\n+\n+This extension adds support for the Stiebel Eltron modbus protocol.\n+\n+A Internet Service Gateway (ISG) with an installed modbus extension is required in order to run this binding. In case the modbus extension is not yet installed on the ISG, the ISG Updater Tool for the update can be found here: https://www.stiebel-eltron.de/de/home/produkte-loesungen/erneuerbare_energien/regelung_energiemanagement/internet_servicegateway/isg_web/downloads.html\n+\n+\n+\n+\n+## Supported Things\n+\n+This bundle adds the following thing types to the Modbus binding.\n+Note, that the things will show up under the Modbus binding.\n+\n+| Thing                    | Description                                        |\n+| ------------------------ | -------------------------------------------------- |\n+| Stiebel Eltron ISG | A stiebel eltron heat pump connected through a ISG |\n+\n+## Discovery\n+\n+This extension does not support autodiscovery. The things need to be added manually.\n+\n+A typical bridge configuration would look like this:\n+\n+```\n+Bridge modbus:tcp:bridge [ host=\"10.0.0.2\", port=502, id=1 ]\n+```\n+\n+\n+## Thing Configuration\n+\n+You need first to set up either a TCP Modbus bridge according to the Modbus documentation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDcyNg==", "bodyText": "Can you specify what the numbers refer to?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440410726", "createdAt": "2020-06-15T19:53:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/README.md", "diffHunk": "@@ -0,0 +1,207 @@\n+# Stiebel Eltron ISG Binding\n+\n+This extension adds support for the Stiebel Eltron modbus protocol.\n+\n+A Internet Service Gateway (ISG) with an installed modbus extension is required in order to run this binding. In case the modbus extension is not yet installed on the ISG, the ISG Updater Tool for the update can be found here: https://www.stiebel-eltron.de/de/home/produkte-loesungen/erneuerbare_energien/regelung_energiemanagement/internet_servicegateway/isg_web/downloads.html\n+\n+\n+\n+\n+## Supported Things\n+\n+This bundle adds the following thing types to the Modbus binding.\n+Note, that the things will show up under the Modbus binding.\n+\n+| Thing                    | Description                                        |\n+| ------------------------ | -------------------------------------------------- |\n+| Stiebel Eltron ISG | A stiebel eltron heat pump connected through a ISG |\n+\n+## Discovery\n+\n+This extension does not support autodiscovery. The things need to be added manually.\n+\n+A typical bridge configuration would look like this:\n+\n+```\n+Bridge modbus:tcp:bridge [ host=\"10.0.0.2\", port=502, id=1 ]\n+```\n+\n+\n+## Thing Configuration\n+\n+You need first to set up either a TCP Modbus bridge according to the Modbus documentation.\n+Things in this extension will use the selected bridge to connect to the device.\n+\n+The following parameters are valid for all thing types:\n+\n+| Parameter | Type    | Required | Default if omitted | Description                                                                |\n+| --------- | ------- | -------- | ------------------ | -------------------------------------------------------------------------- |\n+| refresh   | integer | no       | 5                  | Poll interval in seconds. Increase this if you encounter connection errors |\n+| maxTries  | integer | no       | 3                  | Number of retries when before giving up reading from this thing.           |\n+\n+## Channels\n+\n+Channels are grouped into channel groups.\n+\n+### System State Group\n+\n+This group contains general operational information about the heat pump.\n+\n+| Channel ID       | Item Type | Read only | Description                                                   |\n+| ---------------- | --------- | --------- | ------------------------------------------------------------- |\n+| is-heating       | Contact   | true      | OPEN in case the heat pump is currently in heating mode       |\n+| is-heating-water | Contact   | true      | OPEN in case the heat pump is currently in heating water mode |\n+| is-cooling       | Contact   | true      | OPEN in case the heat pump is currently in cooling mode       |\n+| is-pumping       | Contact   | true      | OPEN in case the heat pump is currently in pumping mode       |\n+| is-summer        | Contact   | true      | OPEN in case the heat pump is currently in summer mode        |\n+\n+### System Parameters Group \n+\n+This group contains system paramters of the heat pump.\n+\n+| Channel ID                  | Item Type          | Read only | Description                                 |\n+| --------------------------- | ------------------ | --------- | ------------------------------------------- |\n+| operation-mode              | Number             | false     | The current operation mode of the heat pump |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTk5MQ==", "bodyText": "The above channel IDs use dashes for sepration. Is there a reason why you use underscores, here?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440411991", "createdAt": "2020-06-15T19:56:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/README.md", "diffHunk": "@@ -0,0 +1,207 @@\n+# Stiebel Eltron ISG Binding\n+\n+This extension adds support for the Stiebel Eltron modbus protocol.\n+\n+A Internet Service Gateway (ISG) with an installed modbus extension is required in order to run this binding. In case the modbus extension is not yet installed on the ISG, the ISG Updater Tool for the update can be found here: https://www.stiebel-eltron.de/de/home/produkte-loesungen/erneuerbare_energien/regelung_energiemanagement/internet_servicegateway/isg_web/downloads.html\n+\n+\n+\n+\n+## Supported Things\n+\n+This bundle adds the following thing types to the Modbus binding.\n+Note, that the things will show up under the Modbus binding.\n+\n+| Thing                    | Description                                        |\n+| ------------------------ | -------------------------------------------------- |\n+| Stiebel Eltron ISG | A stiebel eltron heat pump connected through a ISG |\n+\n+## Discovery\n+\n+This extension does not support autodiscovery. The things need to be added manually.\n+\n+A typical bridge configuration would look like this:\n+\n+```\n+Bridge modbus:tcp:bridge [ host=\"10.0.0.2\", port=502, id=1 ]\n+```\n+\n+\n+## Thing Configuration\n+\n+You need first to set up either a TCP Modbus bridge according to the Modbus documentation.\n+Things in this extension will use the selected bridge to connect to the device.\n+\n+The following parameters are valid for all thing types:\n+\n+| Parameter | Type    | Required | Default if omitted | Description                                                                |\n+| --------- | ------- | -------- | ------------------ | -------------------------------------------------------------------------- |\n+| refresh   | integer | no       | 5                  | Poll interval in seconds. Increase this if you encounter connection errors |\n+| maxTries  | integer | no       | 3                  | Number of retries when before giving up reading from this thing.           |\n+\n+## Channels\n+\n+Channels are grouped into channel groups.\n+\n+### System State Group\n+\n+This group contains general operational information about the heat pump.\n+\n+| Channel ID       | Item Type | Read only | Description                                                   |\n+| ---------------- | --------- | --------- | ------------------------------------------------------------- |\n+| is-heating       | Contact   | true      | OPEN in case the heat pump is currently in heating mode       |\n+| is-heating-water | Contact   | true      | OPEN in case the heat pump is currently in heating water mode |\n+| is-cooling       | Contact   | true      | OPEN in case the heat pump is currently in cooling mode       |\n+| is-pumping       | Contact   | true      | OPEN in case the heat pump is currently in pumping mode       |\n+| is-summer        | Contact   | true      | OPEN in case the heat pump is currently in summer mode        |\n+\n+### System Parameters Group \n+\n+This group contains system paramters of the heat pump.\n+\n+| Channel ID                  | Item Type          | Read only | Description                                 |\n+| --------------------------- | ------------------ | --------- | ------------------------------------------- |\n+| operation-mode              | Number             | false     | The current operation mode of the heat pump |\n+| comfort-temperature-heating | Number:Temperature | false     | The current heating comfort temperature     |\n+| eco-temperature-heating     | Number:Temperature | false     | The current heating eco temperature         |\n+| comfort-temperature-water   | Number:Temperature | false     | The current water comfort temperature       |\n+| eco-temperature-water       | Number:Temperature | false     | The current water eco temperature           |\n+\n+### System Information Group \n+\n+This group contains general operational information about the device.\n+\n+| Channel ID                 | Item Type            | Read only | Description                                           |\n+| -------------------------- | -------------------- | --------- | ----------------------------------------------------- |\n+| fek-temperature            | Number:Temperature   | true      | The current temperature measured by the FEK           |\n+| fek-temperature-setpoint   | Number:Temperature   | true      | The current set point of the FEK temperature          |\n+| fek-humidity               | Number:Dimensionless | true      | The current humidity measured by the FEK              |\n+| fek-dewpoint               | Number:Temperature   | true      | The current dew point temperature measured by the FEK |\n+| outdoor-temperature        | Number:Temperature   | true      | The current outdoor temperature                       |\n+| hk1-temperature            | Number:Temperature   | true      | The current temperature of the HK1                    |\n+| hk1-temperature-setpoint   | Number:Temperature   | true      | The current temperature set point of the HK1          |\n+| supply-temperature         | Number:Temperature   | true      | The current supply temperature                        |\n+| return-temperature         | Number:Temperature   | true      | The current return measured                           |\n+| source-temperature         | Number:Temperature   | true      | The current sourcetemperature                         |\n+| water-temperature          | Number:Temperature   | true      | The current water temperature                         |\n+| water-temperature-setpoint | Number:Temperature   | true      | The current water temperature set point               |\n+\n+### Energy Information Group \n+\n+This group contains about the energy consumption and delivery of the heat pump.\n+\n+| Channel ID              | Item Type     | Read only | Description                                      |\n+| ----------------------- | ------------- | --------- | ------------------------------------------------ |\n+| production_heat_today   | Number:Energy | true      | The heat quantity delivered today                |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMjUzMg==", "bodyText": "Can you mention the ThingID here?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440412532", "createdAt": "2020-06-15T19:57:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/README.md", "diffHunk": "@@ -0,0 +1,207 @@\n+# Stiebel Eltron ISG Binding\n+\n+This extension adds support for the Stiebel Eltron modbus protocol.\n+\n+A Internet Service Gateway (ISG) with an installed modbus extension is required in order to run this binding. In case the modbus extension is not yet installed on the ISG, the ISG Updater Tool for the update can be found here: https://www.stiebel-eltron.de/de/home/produkte-loesungen/erneuerbare_energien/regelung_energiemanagement/internet_servicegateway/isg_web/downloads.html\n+\n+\n+\n+\n+## Supported Things\n+\n+This bundle adds the following thing types to the Modbus binding.\n+Note, that the things will show up under the Modbus binding.\n+\n+| Thing                    | Description                                        |\n+| ------------------------ | -------------------------------------------------- |\n+| Stiebel Eltron ISG | A stiebel eltron heat pump connected through a ISG |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMzg5NA==", "bodyText": "This comment has no benefit. You could remove it. Same for similar. Private fields don't need to be commented.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440413894", "createdAt": "2020-06-15T20:00:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/StiebelEltronHandlerFactory.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal;\n+\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.THING_TYPE_SAMPLE;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.modbus.stiebeleltron.internal.handler.StiebelEltronHandler;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.stiebeleltron\", service = ThingHandlerFactory.class)\n+public class StiebelEltronHandlerFactory extends BaseThingHandlerFactory {\n+\n+    /**\n+     * Reference to the modbus manager\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNDM0OQ==", "bodyText": "Sample?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440414349", "createdAt": "2020-06-15T20:01:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/StiebelEltronBindingConstants.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.openhab.binding.modbus.ModbusBindingConstants;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronBindingConstants} class defines common\n+ * constants, which are used across the whole binding.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronBindingConstants {\n+\n+    private static final String BINDING_ID = ModbusBindingConstants.BINDING_ID;\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_SAMPLE = new ThingTypeUID(BINDING_ID, \"heatpump\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNTAwOQ==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440415009", "createdAt": "2020-06-15T20:02:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNTMxNA==", "bodyText": "Does this have any function?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440415314", "createdAt": "2020-06-15T20:02:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNzUyOQ==", "bodyText": "Local variables don't need to be annotated. You could remove it. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440417529", "createdAt": "2020-06-15T20:07:40Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxODg1Mg==", "bodyText": "Is it logged twice by intention?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440418852", "createdAt": "2020-06-15T20:10:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMDA5MA==", "bodyText": "If this is fatal or unexpected, it should be logged to warn.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440420090", "createdAt": "2020-06-15T20:12:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMTc3MA==", "bodyText": "What excpetion type do you want to catch here? Better specify the concrete type and add throws declaration to the method which throws the exception.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440421770", "createdAt": "2020-06-15T20:15:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNjM1Ng==", "bodyText": "You might want to throw an exception here to be able to log that the user used an unsupported command. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440426356", "createdAt": "2020-06-15T20:25:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyODMwNQ==", "bodyText": "What is the state of the TODO?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440428305", "createdAt": "2020-06-15T20:29:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            // TODO: Implement refresh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyOTQ4MA==", "bodyText": "Did you test what happen if the user uses Fahrenheit? Do you need an additional c.toUnit()?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440429480", "createdAt": "2020-06-15T20:31:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMDc1Nw==", "bodyText": "sunspec?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440430757", "createdAt": "2020-06-15T20:34:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            // TODO: Implement refresh\n+        } else {\n+            if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                switch (channelUID.getIdWithoutGroup()) {\n+                    case CHANNEL_OPERATION_MODE:\n+                        writeInt16(1500, getInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                        writeInt16(1501, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                        writeInt16(1502, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                        writeInt16(1509, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_WATER:\n+                        writeInt16(1510, getScaledInt16Value(command));\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler\n+     * Connect to the slave bridge Start the periodic polling\n+     */\n+    private void startUp() {\n+\n+        connectEndpoint();\n+\n+        if (endpoint == null || config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for sunspec handler\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 361}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNDQ2OQ==", "bodyText": "Better move this to the end of the initialization, since the framework starts to work with this thing and can invoke handleCommand() and dispose() when the state is set to UNKNOWN.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440434469", "createdAt": "2020-06-15T20:41:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            // TODO: Implement refresh\n+        } else {\n+            if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                switch (channelUID.getIdWithoutGroup()) {\n+                    case CHANNEL_OPERATION_MODE:\n+                        writeInt16(1500, getInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                        writeInt16(1501, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                        writeInt16(1502, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                        writeInt16(1509, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_WATER:\n+                        writeInt16(1510, getScaledInt16Value(command));\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler\n+     * Connect to the slave bridge Start the periodic polling\n+     */\n+    private void startUp() {\n+\n+        connectEndpoint();\n+\n+        if (endpoint == null || config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for sunspec handler\");\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTc4Mg==", "bodyText": "The compiler complains here, since systemInformationPoller could be set to null between the null check and the invocation of unregisterPollTask(). You can store the reference of systemInformationPoller to a local variable and do the null check on that. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440441782", "createdAt": "2020-06-15T20:56:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            // TODO: Implement refresh\n+        } else {\n+            if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                switch (channelUID.getIdWithoutGroup()) {\n+                    case CHANNEL_OPERATION_MODE:\n+                        writeInt16(1500, getInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                        writeInt16(1501, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                        writeInt16(1502, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                        writeInt16(1509, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_WATER:\n+                        writeInt16(1510, getScaledInt16Value(command));\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler\n+     * Connect to the slave bridge Start the periodic polling\n+     */\n+    private void startUp() {\n+\n+        connectEndpoint();\n+\n+        if (endpoint == null || config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for sunspec handler\");\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (systemInformationPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemInformationData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(500, 36, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemInformationPoller = poller;\n+        }\n+        if (energyPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledEnergyData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(3500, 16, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            energyPoller = poller;\n+        }\n+        if (systemStatePoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemStateData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(2500, 2, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemStatePoller = poller;\n+        }\n+        if (systemParameterPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemParameterData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(1500, 11, ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS);\n+            systemParameterPoller = poller;\n+        }\n+    }\n+\n+    /**\n+     * Dispose the binding correctly\n+     */\n+    @Override\n+    public void dispose() {\n+        tearDown();\n+    }\n+\n+    /**\n+     * Unregister the poll tasks and release the endpoint reference\n+     */\n+    private void tearDown() {\n+        logger.trace(\"unregisterPollTasks\");\n+        if (systemInformationPoller != null) {\n+            logger.debug(\"Unregistering systemInformationPoller from ModbusManager\");\n+            systemInformationPoller.unregisterPollTask();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0Mjc3OA==", "bodyText": "You could put the log message as an argument into the exception's constructor and remove the log message.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440442778", "createdAt": "2020-06-15T20:57:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            // TODO: Implement refresh\n+        } else {\n+            if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                switch (channelUID.getIdWithoutGroup()) {\n+                    case CHANNEL_OPERATION_MODE:\n+                        writeInt16(1500, getInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                        writeInt16(1501, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                        writeInt16(1502, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                        writeInt16(1509, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_WATER:\n+                        writeInt16(1510, getScaledInt16Value(command));\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler\n+     * Connect to the slave bridge Start the periodic polling\n+     */\n+    private void startUp() {\n+\n+        connectEndpoint();\n+\n+        if (endpoint == null || config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for sunspec handler\");\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (systemInformationPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemInformationData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(500, 36, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemInformationPoller = poller;\n+        }\n+        if (energyPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledEnergyData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(3500, 16, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            energyPoller = poller;\n+        }\n+        if (systemStatePoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemStateData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(2500, 2, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemStatePoller = poller;\n+        }\n+        if (systemParameterPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemParameterData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(1500, 11, ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS);\n+            systemParameterPoller = poller;\n+        }\n+    }\n+\n+    /**\n+     * Dispose the binding correctly\n+     */\n+    @Override\n+    public void dispose() {\n+        tearDown();\n+    }\n+\n+    /**\n+     * Unregister the poll tasks and release the endpoint reference\n+     */\n+    private void tearDown() {\n+        logger.trace(\"unregisterPollTasks\");\n+        if (systemInformationPoller != null) {\n+            logger.debug(\"Unregistering systemInformationPoller from ModbusManager\");\n+            systemInformationPoller.unregisterPollTask();\n+\n+            systemInformationPoller = null;\n+        }\n+        if (energyPoller != null) {\n+            logger.debug(\"Unregistering energyPoller from ModbusManager\");\n+            energyPoller.unregisterPollTask();\n+\n+            energyPoller = null;\n+        }\n+        if (systemStatePoller != null) {\n+            logger.debug(\"Unregistering systemStatePoller from ModbusManager\");\n+            systemStatePoller.unregisterPollTask();\n+\n+            systemStatePoller = null;\n+        }\n+        if (systemParameterPoller != null) {\n+            logger.debug(\"Unregistering systemParameterPoller from ModbusManager\");\n+            systemParameterPoller.unregisterPollTask();\n+\n+            systemParameterPoller = null;\n+        }\n+\n+        unregisterEndpoint();\n+    }\n+\n+    /**\n+     * Returns the current slave id from the bridge\n+     */\n+    public int getSlaveId() {\n+        return slaveId;\n+    }\n+\n+    /**\n+     * Get the endpoint handler from the bridge this handler is connected to Checks\n+     * that we're connected to the right type of bridge\n+     *\n+     * @return the endpoint handler or null if the bridge does not exist\n+     */\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"Bridge is null\");\n+            return null;\n+        }\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Bridge is not online\");\n+            return null;\n+        }\n+\n+        ThingHandler handler = bridge.getHandler();\n+        if (handler == null) {\n+            logger.debug(\"Bridge handler is null\");\n+            return null;\n+        }\n+\n+        if (handler instanceof ModbusEndpointThingHandler) {\n+            ModbusEndpointThingHandler slaveEndpoint = (ModbusEndpointThingHandler) handler;\n+            return slaveEndpoint;\n+        } else {\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\n+            throw new IllegalStateException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 489}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0NTQ1OQ==", "bodyText": "This is much overhead to work around two null checks. Beside that, there is still a compiler warning left. IMHO you don't need to log the bridge's label, since bridge and things are already correlated in the UI.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440445459", "createdAt": "2020-06-15T21:02:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            // TODO: Implement refresh\n+        } else {\n+            if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                switch (channelUID.getIdWithoutGroup()) {\n+                    case CHANNEL_OPERATION_MODE:\n+                        writeInt16(1500, getInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                        writeInt16(1501, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                        writeInt16(1502, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                        writeInt16(1509, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_WATER:\n+                        writeInt16(1510, getScaledInt16Value(command));\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler\n+     * Connect to the slave bridge Start the periodic polling\n+     */\n+    private void startUp() {\n+\n+        connectEndpoint();\n+\n+        if (endpoint == null || config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for sunspec handler\");\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (systemInformationPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemInformationData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(500, 36, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemInformationPoller = poller;\n+        }\n+        if (energyPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledEnergyData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(3500, 16, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            energyPoller = poller;\n+        }\n+        if (systemStatePoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemStateData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(2500, 2, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemStatePoller = poller;\n+        }\n+        if (systemParameterPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemParameterData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(1500, 11, ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS);\n+            systemParameterPoller = poller;\n+        }\n+    }\n+\n+    /**\n+     * Dispose the binding correctly\n+     */\n+    @Override\n+    public void dispose() {\n+        tearDown();\n+    }\n+\n+    /**\n+     * Unregister the poll tasks and release the endpoint reference\n+     */\n+    private void tearDown() {\n+        logger.trace(\"unregisterPollTasks\");\n+        if (systemInformationPoller != null) {\n+            logger.debug(\"Unregistering systemInformationPoller from ModbusManager\");\n+            systemInformationPoller.unregisterPollTask();\n+\n+            systemInformationPoller = null;\n+        }\n+        if (energyPoller != null) {\n+            logger.debug(\"Unregistering energyPoller from ModbusManager\");\n+            energyPoller.unregisterPollTask();\n+\n+            energyPoller = null;\n+        }\n+        if (systemStatePoller != null) {\n+            logger.debug(\"Unregistering systemStatePoller from ModbusManager\");\n+            systemStatePoller.unregisterPollTask();\n+\n+            systemStatePoller = null;\n+        }\n+        if (systemParameterPoller != null) {\n+            logger.debug(\"Unregistering systemParameterPoller from ModbusManager\");\n+            systemParameterPoller.unregisterPollTask();\n+\n+            systemParameterPoller = null;\n+        }\n+\n+        unregisterEndpoint();\n+    }\n+\n+    /**\n+     * Returns the current slave id from the bridge\n+     */\n+    public int getSlaveId() {\n+        return slaveId;\n+    }\n+\n+    /**\n+     * Get the endpoint handler from the bridge this handler is connected to Checks\n+     * that we're connected to the right type of bridge\n+     *\n+     * @return the endpoint handler or null if the bridge does not exist\n+     */\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"Bridge is null\");\n+            return null;\n+        }\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Bridge is not online\");\n+            return null;\n+        }\n+\n+        ThingHandler handler = bridge.getHandler();\n+        if (handler == null) {\n+            logger.debug(\"Bridge handler is null\");\n+            return null;\n+        }\n+\n+        if (handler instanceof ModbusEndpointThingHandler) {\n+            ModbusEndpointThingHandler slaveEndpoint = (ModbusEndpointThingHandler) handler;\n+            return slaveEndpoint;\n+        } else {\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\n+            throw new IllegalStateException();\n+        }\n+    }\n+\n+    /**\n+     * Get a reference to the modbus endpoint\n+     */\n+    private void connectEndpoint() {\n+        if (endpoint != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, String.format(\"Bridge '%s' is offline\",\n+                    Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 504}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0NjgwOA==", "bodyText": "Why not removing the catch clause, throw the exception and catch it in startUp()? This would simplify code.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440446808", "createdAt": "2020-06-15T21:05:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            // TODO: Implement refresh\n+        } else {\n+            if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                switch (channelUID.getIdWithoutGroup()) {\n+                    case CHANNEL_OPERATION_MODE:\n+                        writeInt16(1500, getInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                        writeInt16(1501, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                        writeInt16(1502, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                        writeInt16(1509, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_WATER:\n+                        writeInt16(1510, getScaledInt16Value(command));\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler\n+     * Connect to the slave bridge Start the periodic polling\n+     */\n+    private void startUp() {\n+\n+        connectEndpoint();\n+\n+        if (endpoint == null || config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for sunspec handler\");\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (systemInformationPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemInformationData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(500, 36, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemInformationPoller = poller;\n+        }\n+        if (energyPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledEnergyData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(3500, 16, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            energyPoller = poller;\n+        }\n+        if (systemStatePoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemStateData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(2500, 2, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemStatePoller = poller;\n+        }\n+        if (systemParameterPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemParameterData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(1500, 11, ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS);\n+            systemParameterPoller = poller;\n+        }\n+    }\n+\n+    /**\n+     * Dispose the binding correctly\n+     */\n+    @Override\n+    public void dispose() {\n+        tearDown();\n+    }\n+\n+    /**\n+     * Unregister the poll tasks and release the endpoint reference\n+     */\n+    private void tearDown() {\n+        logger.trace(\"unregisterPollTasks\");\n+        if (systemInformationPoller != null) {\n+            logger.debug(\"Unregistering systemInformationPoller from ModbusManager\");\n+            systemInformationPoller.unregisterPollTask();\n+\n+            systemInformationPoller = null;\n+        }\n+        if (energyPoller != null) {\n+            logger.debug(\"Unregistering energyPoller from ModbusManager\");\n+            energyPoller.unregisterPollTask();\n+\n+            energyPoller = null;\n+        }\n+        if (systemStatePoller != null) {\n+            logger.debug(\"Unregistering systemStatePoller from ModbusManager\");\n+            systemStatePoller.unregisterPollTask();\n+\n+            systemStatePoller = null;\n+        }\n+        if (systemParameterPoller != null) {\n+            logger.debug(\"Unregistering systemParameterPoller from ModbusManager\");\n+            systemParameterPoller.unregisterPollTask();\n+\n+            systemParameterPoller = null;\n+        }\n+\n+        unregisterEndpoint();\n+    }\n+\n+    /**\n+     * Returns the current slave id from the bridge\n+     */\n+    public int getSlaveId() {\n+        return slaveId;\n+    }\n+\n+    /**\n+     * Get the endpoint handler from the bridge this handler is connected to Checks\n+     * that we're connected to the right type of bridge\n+     *\n+     * @return the endpoint handler or null if the bridge does not exist\n+     */\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"Bridge is null\");\n+            return null;\n+        }\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Bridge is not online\");\n+            return null;\n+        }\n+\n+        ThingHandler handler = bridge.getHandler();\n+        if (handler == null) {\n+            logger.debug(\"Bridge handler is null\");\n+            return null;\n+        }\n+\n+        if (handler instanceof ModbusEndpointThingHandler) {\n+            ModbusEndpointThingHandler slaveEndpoint = (ModbusEndpointThingHandler) handler;\n+            return slaveEndpoint;\n+        } else {\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\n+            throw new IllegalStateException();\n+        }\n+    }\n+\n+    /**\n+     * Get a reference to the modbus endpoint\n+     */\n+    private void connectEndpoint() {\n+        if (endpoint != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, String.format(\"Bridge '%s' is offline\",\n+                    Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\")));\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        try {\n+            slaveId = slaveEndpointThingHandler.getSlaveId();\n+\n+            endpoint = slaveEndpointThingHandler.asSlaveEndpoint();\n+        } catch (EndpointNotInitializedException e) {\n+            // this will be handled below as endpoint remains null\n+        }\n+\n+        if (endpoint == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 523}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0OTY4Ng==", "bodyText": "Can you use camel case here?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440449686", "createdAt": "2020-06-15T21:11:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,736 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+        /**\n+         * Logger instance\n+         */\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public AbstractBasePoller() {\n+        }\n+\n+        public synchronized void unregisterPollTask() {\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            @Nullable\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            @Nullable\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.info(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    try {\n+                        handlePolledData(registers);\n+\n+                        if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (Exception error) {\n+                        StiebelEltronHandler.this.handleError(error);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+            @Nullable\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }        \n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in the stiebel eltron modbus\n+     *         documentation)\n+     */\n+    private short getScaledInt16Value(Command command) {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = (QuantityType<?>) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        return 0;\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            // TODO: Implement refresh\n+        } else {\n+            if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                switch (channelUID.getIdWithoutGroup()) {\n+                    case CHANNEL_OPERATION_MODE:\n+                        writeInt16(1500, getInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                        writeInt16(1501, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                        writeInt16(1502, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                        writeInt16(1509, getScaledInt16Value(command));\n+                        break;\n+                    case CHANNEL_ECO_TEMPERATURE_WATER:\n+                        writeInt16(1510, getScaledInt16Value(command));\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler\n+     * Connect to the slave bridge Start the periodic polling\n+     */\n+    private void startUp() {\n+\n+        connectEndpoint();\n+\n+        if (endpoint == null || config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for sunspec handler\");\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (systemInformationPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemInformationData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(500, 36, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemInformationPoller = poller;\n+        }\n+        if (energyPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledEnergyData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(3500, 16, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            energyPoller = poller;\n+        }\n+        if (systemStatePoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemStateData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(2500, 2, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemStatePoller = poller;\n+        }\n+        if (systemParameterPoller == null) {\n+            AbstractBasePoller poller  = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemParameterData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(1500, 11, ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS);\n+            systemParameterPoller = poller;\n+        }\n+    }\n+\n+    /**\n+     * Dispose the binding correctly\n+     */\n+    @Override\n+    public void dispose() {\n+        tearDown();\n+    }\n+\n+    /**\n+     * Unregister the poll tasks and release the endpoint reference\n+     */\n+    private void tearDown() {\n+        logger.trace(\"unregisterPollTasks\");\n+        if (systemInformationPoller != null) {\n+            logger.debug(\"Unregistering systemInformationPoller from ModbusManager\");\n+            systemInformationPoller.unregisterPollTask();\n+\n+            systemInformationPoller = null;\n+        }\n+        if (energyPoller != null) {\n+            logger.debug(\"Unregistering energyPoller from ModbusManager\");\n+            energyPoller.unregisterPollTask();\n+\n+            energyPoller = null;\n+        }\n+        if (systemStatePoller != null) {\n+            logger.debug(\"Unregistering systemStatePoller from ModbusManager\");\n+            systemStatePoller.unregisterPollTask();\n+\n+            systemStatePoller = null;\n+        }\n+        if (systemParameterPoller != null) {\n+            logger.debug(\"Unregistering systemParameterPoller from ModbusManager\");\n+            systemParameterPoller.unregisterPollTask();\n+\n+            systemParameterPoller = null;\n+        }\n+\n+        unregisterEndpoint();\n+    }\n+\n+    /**\n+     * Returns the current slave id from the bridge\n+     */\n+    public int getSlaveId() {\n+        return slaveId;\n+    }\n+\n+    /**\n+     * Get the endpoint handler from the bridge this handler is connected to Checks\n+     * that we're connected to the right type of bridge\n+     *\n+     * @return the endpoint handler or null if the bridge does not exist\n+     */\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"Bridge is null\");\n+            return null;\n+        }\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Bridge is not online\");\n+            return null;\n+        }\n+\n+        ThingHandler handler = bridge.getHandler();\n+        if (handler == null) {\n+            logger.debug(\"Bridge handler is null\");\n+            return null;\n+        }\n+\n+        if (handler instanceof ModbusEndpointThingHandler) {\n+            ModbusEndpointThingHandler slaveEndpoint = (ModbusEndpointThingHandler) handler;\n+            return slaveEndpoint;\n+        } else {\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\n+            throw new IllegalStateException();\n+        }\n+    }\n+\n+    /**\n+     * Get a reference to the modbus endpoint\n+     */\n+    private void connectEndpoint() {\n+        if (endpoint != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, String.format(\"Bridge '%s' is offline\",\n+                    Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\")));\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        try {\n+            slaveId = slaveEndpointThingHandler.getSlaveId();\n+\n+            endpoint = slaveEndpointThingHandler.asSlaveEndpoint();\n+        } catch (EndpointNotInitializedException e) {\n+            // this will be handled below as endpoint remains null\n+        }\n+\n+        if (endpoint == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Remove the endpoint if exists\n+     */\n+    private synchronized void unregisterEndpoint() {\n+        endpoint = null;\n+    }\n+\n+    /**\n+     * Returns value divided by the 10\n+     *\n+     * @param value the value to alter\n+     * @return the scaled value as a DecimalType\n+     */\n+    protected State getScaled(Number value, Unit<?> unit) {\n+        return new QuantityType<>(BigDecimal.valueOf(value.longValue(), 1), unit);\n+    }\n+\n+    /**\n+     * Returns high value * 1000 + low value\n+     *\n+     * @param high the high value\n+     * @param low the low valze\n+     * @return the scaled value as a DecimalType\n+     */\n+    protected State getEnergyQuantity(int high, int low) {\n+        double value = high * 1000 + low;\n+        return new QuantityType<>(value, KILOWATT_HOUR);\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemInformationData(ModbusRegisterArray registers) {\n+        logger.trace(\"System Information block received, size: {}\", registers.size());\n+\n+        SystemInformationBlock block = systemInformationBlockParser.parse(registers);\n+\n+        // System information group\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_TEMPERATURE), getScaled(block.temperature_fek, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_fek_setpoint, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_HUMIDITY), getScaled(block.humidity_ffk, PERCENT));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_DEWPOINT), getScaled(block.dewpoint_ffk, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_OUTDOOR_TEMPERATURE),\n+                getScaled(block.temperature_outdoor, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_HK1_TEMPERATURE), getScaled(block.temperature_hk1, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_HK1_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_hk1_setpoint, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_SUPPLY_TEMPERATURE),\n+                getScaled(block.temperature_supply, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_RETURN_TEMPERATURE),\n+                getScaled(block.temperature_return, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_SOURCE_TEMPERATURE),\n+                getScaled(block.temperature_source, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_WATER_TEMPERATURE),\n+                getScaled(block.temperature_water, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_WATER_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_water_setpoint, CELSIUS));\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledEnergyData(ModbusRegisterArray registers) {\n+        logger.trace(\"Energy block received, size: {}\", registers.size());\n+\n+        EnergyBlock block = energyBlockParser.parse(registers);\n+\n+        // Energy information group\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_HEAT_TODAY),\n+                new QuantityType<>(block.production_heat_today, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_HEAT_TOTAL),\n+                getEnergyQuantity(block.production_heat_total_high, block.production_heat_total_low));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_WATER_TODAY),\n+                new QuantityType<>(block.production_water_today, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_WATER_TOTAL),\n+                getEnergyQuantity(block.production_water_total_high, block.production_water_total_low));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_HEAT_TODAY),\n+                new QuantityType<>(block.consumption_heat_today, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_HEAT_TOTAL),\n+                getEnergyQuantity(block.consumption_heat_total_high, block.consumption_heat_total_low));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_WATER_TODAY),\n+                new QuantityType<>(block.consumption_water_today, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_WATER_TOTAL),\n+                getEnergyQuantity(block.consumption_water_total_high, block.consumption_water_total_low));\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemStateData(ModbusRegisterArray registers) {\n+        logger.trace(\"System state block received, size: {}\", registers.size());\n+\n+        SystemStateBlock block = systemstateBlockParser.parse(registers);\n+        boolean is_heating = (block.state & 16) != 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 633}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1NTEyOA==", "bodyText": "Can you use camel case here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public int production_heat_today;\n          \n          \n            \n                public int productionHeatToday;", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440455128", "createdAt": "2020-06-15T21:23:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/dto/EnergyBlock.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.dto;\n+\n+/**\n+ * Dto class for the Energy Block\n+ *\n+ * @author Paul Frank - Initial contribution\n+ *\n+ */\n+public class EnergyBlock {\n+\n+    public int production_heat_today;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1NTc4NA==", "bodyText": "Since this method returns Double, you might want to use double instead of float.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440455784", "createdAt": "2020-06-15T21:24:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/parser/AbstractBaseParser.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.parser;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+\n+/**\n+ * Base class for parsers with some helper methods\n+ *\n+ * @author Nagy Attila Gabor - Initial contribution\n+ * @author Paul Frank - Added more methods\n+ */\n+@NonNullByDefault\n+public class AbstractBaseParser {\n+\n+    /**\n+     * Extract an optional double value\n+     *\n+     * @param raw the register array to extract from\n+     * @param index the address of the field\n+     * @return the parsed value or empty if the field is not implemented\n+     */\n+    protected Optional<Double> extractOptionalDouble(ModbusRegisterArray raw, int index) {\n+        return ModbusBitUtilities.extractStateFromRegisters(raw, index, ValueType.INT16)\n+                .map(value -> ((float) value.intValue()) / 10.0).filter(value -> value != (short) 0x8000);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1NzMwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"refresh\" type=\"integer\" min=\"0\">\n          \n          \n            \n            \t\t<parameter name=\"refresh\" type=\"integer\" min=\"0\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440457307", "createdAt": "2020-06-15T21:28:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/resources/ESH-INF/config/config-descriptions.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:stiebeleltron:modbusconfig\">\n+\n+\t\t<parameter name=\"refresh\" type=\"integer\" min=\"0\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1NzQ2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>Interval (s)</label>\n          \n          \n            \n            \t\t\t<label>Polling Interval</label>", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440457469", "createdAt": "2020-06-15T21:28:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/resources/ESH-INF/config/config-descriptions.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:stiebeleltron:modbusconfig\">\n+\n+\t\t<parameter name=\"refresh\" type=\"integer\" min=\"0\">\n+\t\t\t<label>Interval (s)</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1ODA0OQ==", "bodyText": "Did this file find its way into your binding by intention?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440458049", "createdAt": "2020-06-15T21:29:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/resources/ESH-INF/i18n/modbus.stiebeleltron_xx_XX.properties", "diffHunk": "@@ -0,0 +1,17 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1ODkxNA==", "bodyText": "Words in labels should be capitalized. See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440458914", "createdAt": "2020-06-15T21:31:49Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/resources/ESH-INF/thing/heatpump-channel-types.xml", "diffHunk": "@@ -0,0 +1,171 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<thing:thing-descriptions bindingId=\"modbus\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"fek-temperature-type\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>FFK temperature</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2MDk3MA==", "bodyText": "Can you remove the formatting from this file?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r440460970", "createdAt": "2020-06-15T21:36:27Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -1,501 +1,982 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzU1NjI5", "url": "https://github.com/openhab/openhab-addons/pull/7718#pullrequestreview-432755629", "createdAt": "2020-06-17T20:34:41Z", "commit": {"oid": "f4964cb4d746d797e93150d13d30aeacfa17a8aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDozNDo0MVrOGlWYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDozNDo0MVrOGlWYtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNzI2OQ==", "bodyText": "The field is named THING_TYPE_SAMPLE.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r441817269", "createdAt": "2020-06-17T20:34:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/StiebelEltronBindingConstants.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.openhab.binding.modbus.ModbusBindingConstants;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronBindingConstants} class defines common\n+ * constants, which are used across the whole binding.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronBindingConstants {\n+\n+    private static final String BINDING_ID = ModbusBindingConstants.BINDING_ID;\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_SAMPLE = new ThingTypeUID(BINDING_ID, \"heatpump\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNDM0OQ=="}, "originalCommit": {"oid": "326bb6cd4ea16809963d8c61ea7a842fdaaa00bb"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDY4OTA0", "url": "https://github.com/openhab/openhab-addons/pull/7718#pullrequestreview-436068904", "createdAt": "2020-06-23T18:58:31Z", "commit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1ODozMVrOGn2hPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDowNzowMVrOGn4s8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0MDg5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A Internet Service Gateway (ISG) with an installed modbus extension is required in order to run this binding. In case the modbus extension is not yet installed on the ISG, the ISG Updater Tool for the update can be found here: https://www.stiebel-eltron.de/de/home/produkte-loesungen/erneuerbare_energien/regelung_energiemanagement/internet_servicegateway/isg_web/downloads.html\n          \n          \n            \n            An Internet Service Gateway (ISG) with an installed modbus extension is required in order to run this binding. In case the modbus extension is not yet installed on the ISG, the ISG Updater Tool for the update can be found here: https://www.stiebel-eltron.de/de/home/produkte-loesungen/erneuerbare_energien/regelung_energiemanagement/internet_servicegateway/isg_web/downloads.html", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444440895", "createdAt": "2020-06-23T18:58:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/README.md", "diffHunk": "@@ -0,0 +1,206 @@\n+# Stiebel Eltron ISG Binding\n+\n+This extension adds support for the Stiebel Eltron modbus protocol.\n+\n+A Internet Service Gateway (ISG) with an installed modbus extension is required in order to run this binding. In case the modbus extension is not yet installed on the ISG, the ISG Updater Tool for the update can be found here: https://www.stiebel-eltron.de/de/home/produkte-loesungen/erneuerbare_energien/regelung_energiemanagement/internet_servicegateway/isg_web/downloads.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NDY2OA==", "bodyText": "Can you use camel case?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public short temperature_fek;\n          \n          \n            \n                public short temperatureFek;", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444444668", "createdAt": "2020-06-23T19:05:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/dto/SystemInformationBlock.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.dto;\n+\n+/**\n+ * Dto class for the System Information Block\n+ *\n+ * @author Paul Frank - Initial contribution\n+ *\n+ */\n+public class SystemInformationBlock {\n+\n+    public short temperature_fek;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NTAzNw==", "bodyText": "See above (camel case)", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444445037", "createdAt": "2020-06-23T19:05:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/dto/SystemParameterBlock.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.dto;\n+\n+/**\n+ * Dto class for the System Parameter Block\n+ *\n+ * @author Paul Frank - Initial contribution\n+ *\n+ */\n+public class SystemParameterBlock {\n+\n+    public Integer operation_mode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NjA5Nw==", "bodyText": "Is there a reason why you use complex type? Can this be int? Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444446097", "createdAt": "2020-06-23T19:07:47Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/dto/SystemParameterBlock.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.dto;\n+\n+/**\n+ * Dto class for the System Parameter Block\n+ *\n+ * @author Paul Frank - Initial contribution\n+ *\n+ */\n+public class SystemParameterBlock {\n+\n+    public Integer operation_mode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0NjQzMw==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444446433", "createdAt": "2020-06-23T19:08:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/dto/SystemStateBlock.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.dto;\n+\n+/**\n+ * Dto class for the System State Block\n+ *\n+ * @author Paul Frank - Initial contribution\n+ *\n+ */\n+public class SystemStateBlock {\n+\n+    public Integer state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0Njc2Mg==", "bodyText": "Can you add the NonNullByDefault annotation?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444446762", "createdAt": "2020-06-23T19:09:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+/**\n+ * Thrown when the stiebel eltron handler sees an error.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@SuppressWarnings(\"serial\")\n+public class StiebelEltronException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NDg4MQ==", "bodyText": "Local variables need no Nullable annotation.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444454881", "createdAt": "2020-06-23T19:24:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,744 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.warn(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    handlePolledData(registers);\n+\n+                    if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        public synchronized void poll() {\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.submitOneTimePoll(task);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing         the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address    address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NTk1NA==", "bodyText": "Is this expected to be called very often? Otherwise, it's ok to set an online thing to online.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444455954", "createdAt": "2020-06-23T19:26:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,744 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.warn(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    handlePolledData(registers);\n+\n+                    if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                        updateStatus(ThingStatus.ONLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1OTY3Mg==", "bodyText": "You can do this to eliminate the compiler warning:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        AbstractBasePoller poller = null;\n          \n          \n            \n                        String groupId = channelUID.getGroupId();\n          \n          \n            \n                        if (groupId != null) {\n          \n          \n            \n                            switch (groupId) {\n          \n          \n            \n                                case GROUP_SYSTEM_STATE:\n          \n          \n            \n                                    poller = systemStatePoller;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                case GROUP_SYSTEM_PARAMETER:\n          \n          \n            \n                                    poller = systemParameterPoller;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                case GROUP_SYSTEM_INFO:\n          \n          \n            \n                                    poller = systemInformationPoller;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                case GROUP_ENERGY_INFO:\n          \n          \n            \n                                    poller = energyPoller;\n          \n          \n            \n                                    break;\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        if (poller != null) {\n          \n          \n            \n                            poller.poll();\n          \n          \n            \n                        }\n          \n          \n            \n                        AbstractBasePoller poller;\n          \n          \n            \n                        String groupId = channelUID.getGroupId();\n          \n          \n            \n                        if (groupId != null) {\n          \n          \n            \n                            switch (groupId) {\n          \n          \n            \n                                case GROUP_SYSTEM_STATE:\n          \n          \n            \n                                    poller = systemStatePoller;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                case GROUP_SYSTEM_PARAMETER:\n          \n          \n            \n                                    poller = systemParameterPoller;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                case GROUP_SYSTEM_INFO:\n          \n          \n            \n                                    poller = systemInformationPoller;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                case GROUP_ENERGY_INFO:\n          \n          \n            \n                                    poller = energyPoller;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                default:\n          \n          \n            \n                                    poller = null;\n          \n          \n            \n                                    break;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (poller != null) {\n          \n          \n            \n                                poller.poll();\n          \n          \n            \n                            }\n          \n          \n            \n                        }", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444459672", "createdAt": "2020-06-23T19:33:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,744 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.warn(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    handlePolledData(registers);\n+\n+                    if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        public synchronized void poll() {\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.submitOneTimePoll(task);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing         the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address    address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }\n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in\n+     *         the stiebel eltron modbus documentation)\n+     */\n+    private short getScaledInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = ((QuantityType<?>) command).toUnit(CELSIUS);\n+            if (c != null) {\n+                return (short) (c.doubleValue() * 10);\n+            } else {\n+                throw new StiebelEltronException(\"Unsupported unit\");\n+            }\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            AbstractBasePoller poller = null;\n+            String groupId = channelUID.getGroupId();\n+            if (groupId != null) {\n+                switch (groupId) {\n+                    case GROUP_SYSTEM_STATE:\n+                        poller = systemStatePoller;\n+                        break;\n+                    case GROUP_SYSTEM_PARAMETER:\n+                        poller = systemParameterPoller;\n+                        break;\n+                    case GROUP_SYSTEM_INFO:\n+                        poller = systemInformationPoller;\n+                        break;\n+                    case GROUP_ENERGY_INFO:\n+                        poller = energyPoller;\n+                        break;\n+                }\n+            }\n+            if (poller != null) {\n+                poller.poll();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2MTY2OA==", "bodyText": "The error message is already logged by the framework. You could remove your log message.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444461668", "createdAt": "2020-06-23T19:37:47Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,744 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.warn(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    handlePolledData(registers);\n+\n+                    if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        public synchronized void poll() {\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.submitOneTimePoll(task);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing         the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address    address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }\n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in\n+     *         the stiebel eltron modbus documentation)\n+     */\n+    private short getScaledInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = ((QuantityType<?>) command).toUnit(CELSIUS);\n+            if (c != null) {\n+                return (short) (c.doubleValue() * 10);\n+            } else {\n+                throw new StiebelEltronException(\"Unsupported unit\");\n+            }\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            AbstractBasePoller poller = null;\n+            String groupId = channelUID.getGroupId();\n+            if (groupId != null) {\n+                switch (groupId) {\n+                    case GROUP_SYSTEM_STATE:\n+                        poller = systemStatePoller;\n+                        break;\n+                    case GROUP_SYSTEM_PARAMETER:\n+                        poller = systemParameterPoller;\n+                        break;\n+                    case GROUP_SYSTEM_INFO:\n+                        poller = systemInformationPoller;\n+                        break;\n+                    case GROUP_ENERGY_INFO:\n+                        poller = energyPoller;\n+                        break;\n+                }\n+            }\n+            if (poller != null) {\n+                poller.poll();\n+            }\n+        } else {\n+            try {\n+                if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                    switch (channelUID.getIdWithoutGroup()) {\n+                        case CHANNEL_OPERATION_MODE:\n+                            writeInt16(1500, getInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                            writeInt16(1501, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                            writeInt16(1502, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                            writeInt16(1509, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_WATER:\n+                            writeInt16(1510, getScaledInt16Value(command));\n+                            break;\n+                    }\n+                }\n+            } catch (StiebelEltronException e) {\n+                handleError(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler Connect to the slave bridge\n+     * Start the periodic polling1\n+     */\n+    private void startUp() {\n+\n+        if (endpoint != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, \"Bridge is offline\");\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 384}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2MTg3MA==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444461870", "createdAt": "2020-06-23T19:38:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,744 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.warn(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    handlePolledData(registers);\n+\n+                    if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        public synchronized void poll() {\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.submitOneTimePoll(task);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing         the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address    address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }\n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in\n+     *         the stiebel eltron modbus documentation)\n+     */\n+    private short getScaledInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = ((QuantityType<?>) command).toUnit(CELSIUS);\n+            if (c != null) {\n+                return (short) (c.doubleValue() * 10);\n+            } else {\n+                throw new StiebelEltronException(\"Unsupported unit\");\n+            }\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            AbstractBasePoller poller = null;\n+            String groupId = channelUID.getGroupId();\n+            if (groupId != null) {\n+                switch (groupId) {\n+                    case GROUP_SYSTEM_STATE:\n+                        poller = systemStatePoller;\n+                        break;\n+                    case GROUP_SYSTEM_PARAMETER:\n+                        poller = systemParameterPoller;\n+                        break;\n+                    case GROUP_SYSTEM_INFO:\n+                        poller = systemInformationPoller;\n+                        break;\n+                    case GROUP_ENERGY_INFO:\n+                        poller = energyPoller;\n+                        break;\n+                }\n+            }\n+            if (poller != null) {\n+                poller.poll();\n+            }\n+        } else {\n+            try {\n+                if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                    switch (channelUID.getIdWithoutGroup()) {\n+                        case CHANNEL_OPERATION_MODE:\n+                            writeInt16(1500, getInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                            writeInt16(1501, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                            writeInt16(1502, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                            writeInt16(1509, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_WATER:\n+                            writeInt16(1510, getScaledInt16Value(command));\n+                            break;\n+                    }\n+                }\n+            } catch (StiebelEltronException e) {\n+                handleError(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler Connect to the slave bridge\n+     * Start the periodic polling1\n+     */\n+    private void startUp() {\n+\n+        if (endpoint != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, \"Bridge is offline\");\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        try {\n+            slaveId = slaveEndpointThingHandler.getSlaveId();\n+\n+            endpoint = slaveEndpointThingHandler.asSlaveEndpoint();\n+        } catch (EndpointNotInitializedException e) {\n+            // this will be handled below as endpoint remains null\n+        }\n+\n+        if (endpoint == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 401}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2MzkzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new QuantityType<>(BigDecimal.valueOf(value.longValue(), 1), unit);\n          \n          \n            \n                    return QuantityType.valueOf(value.doubleValue(), unit);", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444463934", "createdAt": "2020-06-23T19:42:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,744 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.warn(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    handlePolledData(registers);\n+\n+                    if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        public synchronized void poll() {\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.submitOneTimePoll(task);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing         the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address    address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }\n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in\n+     *         the stiebel eltron modbus documentation)\n+     */\n+    private short getScaledInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = ((QuantityType<?>) command).toUnit(CELSIUS);\n+            if (c != null) {\n+                return (short) (c.doubleValue() * 10);\n+            } else {\n+                throw new StiebelEltronException(\"Unsupported unit\");\n+            }\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            AbstractBasePoller poller = null;\n+            String groupId = channelUID.getGroupId();\n+            if (groupId != null) {\n+                switch (groupId) {\n+                    case GROUP_SYSTEM_STATE:\n+                        poller = systemStatePoller;\n+                        break;\n+                    case GROUP_SYSTEM_PARAMETER:\n+                        poller = systemParameterPoller;\n+                        break;\n+                    case GROUP_SYSTEM_INFO:\n+                        poller = systemInformationPoller;\n+                        break;\n+                    case GROUP_ENERGY_INFO:\n+                        poller = energyPoller;\n+                        break;\n+                }\n+            }\n+            if (poller != null) {\n+                poller.poll();\n+            }\n+        } else {\n+            try {\n+                if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                    switch (channelUID.getIdWithoutGroup()) {\n+                        case CHANNEL_OPERATION_MODE:\n+                            writeInt16(1500, getInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                            writeInt16(1501, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                            writeInt16(1502, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                            writeInt16(1509, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_WATER:\n+                            writeInt16(1510, getScaledInt16Value(command));\n+                            break;\n+                    }\n+                }\n+            } catch (StiebelEltronException e) {\n+                handleError(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler Connect to the slave bridge\n+     * Start the periodic polling1\n+     */\n+    private void startUp() {\n+\n+        if (endpoint != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, \"Bridge is offline\");\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        try {\n+            slaveId = slaveEndpointThingHandler.getSlaveId();\n+\n+            endpoint = slaveEndpointThingHandler.asSlaveEndpoint();\n+        } catch (EndpointNotInitializedException e) {\n+            // this will be handled below as endpoint remains null\n+        }\n+\n+        if (endpoint == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        if (config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for stiebel eltron handler\");\n+            return;\n+        }\n+\n+        if (systemInformationPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemInformationData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(500, 36, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemInformationPoller = poller;\n+        }\n+        if (energyPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledEnergyData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(3500, 16, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            energyPoller = poller;\n+        }\n+        if (systemStatePoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemStateData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(2500, 2, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemStatePoller = poller;\n+        }\n+        if (systemParameterPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemParameterData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(1500, 11, ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS);\n+            systemParameterPoller = poller;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+    }\n+\n+    /**\n+     * Dispose the binding correctly\n+     */\n+    @Override\n+    public void dispose() {\n+        tearDown();\n+    }\n+\n+    /**\n+     * Unregister the poll tasks and release the endpoint reference\n+     */\n+    private void tearDown() {\n+        AbstractBasePoller poller = systemInformationPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemInformationPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemInformationPoller = null;\n+        }\n+\n+        poller = energyPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering energyPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            energyPoller = null;\n+        }\n+\n+        poller = systemStatePoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemStatePoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemStatePoller = null;\n+        }\n+\n+        poller = systemParameterPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemParameterPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemParameterPoller = null;\n+        }\n+\n+        endpoint = null;\n+    }\n+\n+    /**\n+     * Returns the current slave id from the bridge\n+     */\n+    public int getSlaveId() {\n+        return slaveId;\n+    }\n+\n+    /**\n+     * Get the endpoint handler from the bridge this handler is connected to Checks\n+     * that we're connected to the right type of bridge\n+     *\n+     * @return the endpoint handler or null if the bridge does not exist\n+     */\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"Bridge is null\");\n+            return null;\n+        }\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Bridge is not online\");\n+            return null;\n+        }\n+\n+        ThingHandler handler = bridge.getHandler();\n+        if (handler == null) {\n+            logger.debug(\"Bridge handler is null\");\n+            return null;\n+        }\n+\n+        if (handler instanceof ModbusEndpointThingHandler) {\n+            ModbusEndpointThingHandler slaveEndpoint = (ModbusEndpointThingHandler) handler;\n+            return slaveEndpoint;\n+        } else {\n+            throw new IllegalStateException(\"Unexpected bridge handler: \" + handler.toString());\n+        }\n+    }\n+\n+    /**\n+     * Returns value divided by the 10\n+     *\n+     * @param value the value to alter\n+     * @return the scaled value as a DecimalType\n+     */\n+    protected State getScaled(Number value, Unit<?> unit) {\n+        return new QuantityType<>(BigDecimal.valueOf(value.longValue(), 1), unit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 549}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NDQ3OQ==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444464479", "createdAt": "2020-06-23T19:43:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,744 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.warn(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    handlePolledData(registers);\n+\n+                    if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        public synchronized void poll() {\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.submitOneTimePoll(task);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing         the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address    address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }\n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in\n+     *         the stiebel eltron modbus documentation)\n+     */\n+    private short getScaledInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = ((QuantityType<?>) command).toUnit(CELSIUS);\n+            if (c != null) {\n+                return (short) (c.doubleValue() * 10);\n+            } else {\n+                throw new StiebelEltronException(\"Unsupported unit\");\n+            }\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            AbstractBasePoller poller = null;\n+            String groupId = channelUID.getGroupId();\n+            if (groupId != null) {\n+                switch (groupId) {\n+                    case GROUP_SYSTEM_STATE:\n+                        poller = systemStatePoller;\n+                        break;\n+                    case GROUP_SYSTEM_PARAMETER:\n+                        poller = systemParameterPoller;\n+                        break;\n+                    case GROUP_SYSTEM_INFO:\n+                        poller = systemInformationPoller;\n+                        break;\n+                    case GROUP_ENERGY_INFO:\n+                        poller = energyPoller;\n+                        break;\n+                }\n+            }\n+            if (poller != null) {\n+                poller.poll();\n+            }\n+        } else {\n+            try {\n+                if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                    switch (channelUID.getIdWithoutGroup()) {\n+                        case CHANNEL_OPERATION_MODE:\n+                            writeInt16(1500, getInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                            writeInt16(1501, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                            writeInt16(1502, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                            writeInt16(1509, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_WATER:\n+                            writeInt16(1510, getScaledInt16Value(command));\n+                            break;\n+                    }\n+                }\n+            } catch (StiebelEltronException e) {\n+                handleError(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler Connect to the slave bridge\n+     * Start the periodic polling1\n+     */\n+    private void startUp() {\n+\n+        if (endpoint != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, \"Bridge is offline\");\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        try {\n+            slaveId = slaveEndpointThingHandler.getSlaveId();\n+\n+            endpoint = slaveEndpointThingHandler.asSlaveEndpoint();\n+        } catch (EndpointNotInitializedException e) {\n+            // this will be handled below as endpoint remains null\n+        }\n+\n+        if (endpoint == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        if (config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for stiebel eltron handler\");\n+            return;\n+        }\n+\n+        if (systemInformationPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemInformationData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(500, 36, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemInformationPoller = poller;\n+        }\n+        if (energyPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledEnergyData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(3500, 16, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            energyPoller = poller;\n+        }\n+        if (systemStatePoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemStateData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(2500, 2, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemStatePoller = poller;\n+        }\n+        if (systemParameterPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemParameterData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(1500, 11, ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS);\n+            systemParameterPoller = poller;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+    }\n+\n+    /**\n+     * Dispose the binding correctly\n+     */\n+    @Override\n+    public void dispose() {\n+        tearDown();\n+    }\n+\n+    /**\n+     * Unregister the poll tasks and release the endpoint reference\n+     */\n+    private void tearDown() {\n+        AbstractBasePoller poller = systemInformationPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemInformationPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemInformationPoller = null;\n+        }\n+\n+        poller = energyPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering energyPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            energyPoller = null;\n+        }\n+\n+        poller = systemStatePoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemStatePoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemStatePoller = null;\n+        }\n+\n+        poller = systemParameterPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemParameterPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemParameterPoller = null;\n+        }\n+\n+        endpoint = null;\n+    }\n+\n+    /**\n+     * Returns the current slave id from the bridge\n+     */\n+    public int getSlaveId() {\n+        return slaveId;\n+    }\n+\n+    /**\n+     * Get the endpoint handler from the bridge this handler is connected to Checks\n+     * that we're connected to the right type of bridge\n+     *\n+     * @return the endpoint handler or null if the bridge does not exist\n+     */\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"Bridge is null\");\n+            return null;\n+        }\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Bridge is not online\");\n+            return null;\n+        }\n+\n+        ThingHandler handler = bridge.getHandler();\n+        if (handler == null) {\n+            logger.debug(\"Bridge handler is null\");\n+            return null;\n+        }\n+\n+        if (handler instanceof ModbusEndpointThingHandler) {\n+            ModbusEndpointThingHandler slaveEndpoint = (ModbusEndpointThingHandler) handler;\n+            return slaveEndpoint;\n+        } else {\n+            throw new IllegalStateException(\"Unexpected bridge handler: \" + handler.toString());\n+        }\n+    }\n+\n+    /**\n+     * Returns value divided by the 10\n+     *\n+     * @param value the value to alter\n+     * @return the scaled value as a DecimalType\n+     */\n+    protected State getScaled(Number value, Unit<?> unit) {\n+        return new QuantityType<>(BigDecimal.valueOf(value.longValue(), 1), unit);\n+    }\n+\n+    /**\n+     * Returns high value * 1000 + low value\n+     *\n+     * @param high the high value\n+     * @param low  the low valze\n+     * @return the scaled value as a DecimalType\n+     */\n+    protected State getEnergyQuantity(int high, int low) {\n+        double value = high * 1000 + low;\n+        return new QuantityType<>(value, KILOWATT_HOUR);\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemInformationData(ModbusRegisterArray registers) {\n+        logger.trace(\"System Information block received, size: {}\", registers.size());\n+\n+        SystemInformationBlock block = systemInformationBlockParser.parse(registers);\n+\n+        // System information group\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_TEMPERATURE), getScaled(block.temperature_fek, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_fek_setpoint, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_HUMIDITY), getScaled(block.humidity_ffk, PERCENT));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_DEWPOINT), getScaled(block.dewpoint_ffk, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_OUTDOOR_TEMPERATURE),\n+                getScaled(block.temperature_outdoor, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_HK1_TEMPERATURE), getScaled(block.temperature_hk1, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_HK1_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_hk1_setpoint, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_SUPPLY_TEMPERATURE),\n+                getScaled(block.temperature_supply, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_RETURN_TEMPERATURE),\n+                getScaled(block.temperature_return, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_SOURCE_TEMPERATURE),\n+                getScaled(block.temperature_source, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_WATER_TEMPERATURE),\n+                getScaled(block.temperature_water, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_WATER_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_water_setpoint, CELSIUS));\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledEnergyData(ModbusRegisterArray registers) {\n+        logger.trace(\"Energy block received, size: {}\", registers.size());\n+\n+        EnergyBlock block = energyBlockParser.parse(registers);\n+\n+        // Energy information group\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_HEAT_TODAY),\n+                new QuantityType<>(block.productionHeatToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_HEAT_TOTAL),\n+                getEnergyQuantity(block.productionHeatTotalHigh, block.productionHeatTotalLow));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_WATER_TODAY),\n+                new QuantityType<>(block.productionWaterToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_WATER_TOTAL),\n+                getEnergyQuantity(block.productionWaterTotalHigh, block.productionWaterTotalLow));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_HEAT_TODAY),\n+                new QuantityType<>(block.consumptionHeatToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_HEAT_TOTAL),\n+                getEnergyQuantity(block.consumptionHeatTotalHigh, block.consumptionHeatTotalLow));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_WATER_TODAY),\n+                new QuantityType<>(block.consumptionWaterToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_WATER_TOTAL),\n+                getEnergyQuantity(block.consumptionWaterTotalHigh, block.consumptionWaterTotalLow));\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemStateData(ModbusRegisterArray registers) {\n+        logger.trace(\"System state block received, size: {}\", registers.size());\n+\n+        SystemStateBlock block = systemstateBlockParser.parse(registers);\n+        boolean isHeating = (block.state & 16) != 0;\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_HEATING),\n+                isHeating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_HEATING_WATER),\n+                (block.state & 32) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_COOLING),\n+                (block.state & 256) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_SUMMER),\n+                (block.state & 128) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_PUMPING),\n+                (block.state & 1) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemParameterData(ModbusRegisterArray registers) {\n+        logger.trace(\"System state block received, size: {}\", registers.size());\n+\n+        SystemParameterBlock block = systemParameterBlockParser.parse(registers);\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_OPERATION_MODE), new DecimalType(block.operation_mode));\n+\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_COMFORT_TEMPERATURE_HEATING),\n+                getScaled(block.comfort_temperature_heating, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_ECO_TEMPERATURE_HEATING),\n+                getScaled(block.eco_temperature_heating, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_COMFORT_TEMPERATURE_WATER),\n+                getScaled(block.comfort_temperature_water, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_ECO_TEMPERATURE_WATER),\n+                getScaled(block.eco_temperature_water, CELSIUS));\n+    }\n+\n+    /**\n+     * @param bridgeStatusInfo\n+     */\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+\n+        logger.debug(\"Thing status changed to {}\", this.getThing().getStatus().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 685}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NjUwNA==", "bodyText": "You are checking for the Thing status here. Do you want to check the bridge status?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444466504", "createdAt": "2020-06-23T19:47:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,744 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.warn(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    handlePolledData(registers);\n+\n+                    if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        public synchronized void poll() {\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.submitOneTimePoll(task);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing         the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address    address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }\n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in\n+     *         the stiebel eltron modbus documentation)\n+     */\n+    private short getScaledInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = ((QuantityType<?>) command).toUnit(CELSIUS);\n+            if (c != null) {\n+                return (short) (c.doubleValue() * 10);\n+            } else {\n+                throw new StiebelEltronException(\"Unsupported unit\");\n+            }\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            AbstractBasePoller poller = null;\n+            String groupId = channelUID.getGroupId();\n+            if (groupId != null) {\n+                switch (groupId) {\n+                    case GROUP_SYSTEM_STATE:\n+                        poller = systemStatePoller;\n+                        break;\n+                    case GROUP_SYSTEM_PARAMETER:\n+                        poller = systemParameterPoller;\n+                        break;\n+                    case GROUP_SYSTEM_INFO:\n+                        poller = systemInformationPoller;\n+                        break;\n+                    case GROUP_ENERGY_INFO:\n+                        poller = energyPoller;\n+                        break;\n+                }\n+            }\n+            if (poller != null) {\n+                poller.poll();\n+            }\n+        } else {\n+            try {\n+                if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                    switch (channelUID.getIdWithoutGroup()) {\n+                        case CHANNEL_OPERATION_MODE:\n+                            writeInt16(1500, getInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                            writeInt16(1501, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                            writeInt16(1502, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                            writeInt16(1509, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_WATER:\n+                            writeInt16(1510, getScaledInt16Value(command));\n+                            break;\n+                    }\n+                }\n+            } catch (StiebelEltronException e) {\n+                handleError(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler Connect to the slave bridge\n+     * Start the periodic polling1\n+     */\n+    private void startUp() {\n+\n+        if (endpoint != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, \"Bridge is offline\");\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        try {\n+            slaveId = slaveEndpointThingHandler.getSlaveId();\n+\n+            endpoint = slaveEndpointThingHandler.asSlaveEndpoint();\n+        } catch (EndpointNotInitializedException e) {\n+            // this will be handled below as endpoint remains null\n+        }\n+\n+        if (endpoint == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        if (config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for stiebel eltron handler\");\n+            return;\n+        }\n+\n+        if (systemInformationPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemInformationData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(500, 36, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemInformationPoller = poller;\n+        }\n+        if (energyPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledEnergyData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(3500, 16, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            energyPoller = poller;\n+        }\n+        if (systemStatePoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemStateData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(2500, 2, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemStatePoller = poller;\n+        }\n+        if (systemParameterPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemParameterData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(1500, 11, ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS);\n+            systemParameterPoller = poller;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+    }\n+\n+    /**\n+     * Dispose the binding correctly\n+     */\n+    @Override\n+    public void dispose() {\n+        tearDown();\n+    }\n+\n+    /**\n+     * Unregister the poll tasks and release the endpoint reference\n+     */\n+    private void tearDown() {\n+        AbstractBasePoller poller = systemInformationPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemInformationPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemInformationPoller = null;\n+        }\n+\n+        poller = energyPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering energyPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            energyPoller = null;\n+        }\n+\n+        poller = systemStatePoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemStatePoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemStatePoller = null;\n+        }\n+\n+        poller = systemParameterPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemParameterPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemParameterPoller = null;\n+        }\n+\n+        endpoint = null;\n+    }\n+\n+    /**\n+     * Returns the current slave id from the bridge\n+     */\n+    public int getSlaveId() {\n+        return slaveId;\n+    }\n+\n+    /**\n+     * Get the endpoint handler from the bridge this handler is connected to Checks\n+     * that we're connected to the right type of bridge\n+     *\n+     * @return the endpoint handler or null if the bridge does not exist\n+     */\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"Bridge is null\");\n+            return null;\n+        }\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Bridge is not online\");\n+            return null;\n+        }\n+\n+        ThingHandler handler = bridge.getHandler();\n+        if (handler == null) {\n+            logger.debug(\"Bridge handler is null\");\n+            return null;\n+        }\n+\n+        if (handler instanceof ModbusEndpointThingHandler) {\n+            ModbusEndpointThingHandler slaveEndpoint = (ModbusEndpointThingHandler) handler;\n+            return slaveEndpoint;\n+        } else {\n+            throw new IllegalStateException(\"Unexpected bridge handler: \" + handler.toString());\n+        }\n+    }\n+\n+    /**\n+     * Returns value divided by the 10\n+     *\n+     * @param value the value to alter\n+     * @return the scaled value as a DecimalType\n+     */\n+    protected State getScaled(Number value, Unit<?> unit) {\n+        return new QuantityType<>(BigDecimal.valueOf(value.longValue(), 1), unit);\n+    }\n+\n+    /**\n+     * Returns high value * 1000 + low value\n+     *\n+     * @param high the high value\n+     * @param low  the low valze\n+     * @return the scaled value as a DecimalType\n+     */\n+    protected State getEnergyQuantity(int high, int low) {\n+        double value = high * 1000 + low;\n+        return new QuantityType<>(value, KILOWATT_HOUR);\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemInformationData(ModbusRegisterArray registers) {\n+        logger.trace(\"System Information block received, size: {}\", registers.size());\n+\n+        SystemInformationBlock block = systemInformationBlockParser.parse(registers);\n+\n+        // System information group\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_TEMPERATURE), getScaled(block.temperature_fek, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_fek_setpoint, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_HUMIDITY), getScaled(block.humidity_ffk, PERCENT));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_DEWPOINT), getScaled(block.dewpoint_ffk, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_OUTDOOR_TEMPERATURE),\n+                getScaled(block.temperature_outdoor, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_HK1_TEMPERATURE), getScaled(block.temperature_hk1, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_HK1_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_hk1_setpoint, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_SUPPLY_TEMPERATURE),\n+                getScaled(block.temperature_supply, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_RETURN_TEMPERATURE),\n+                getScaled(block.temperature_return, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_SOURCE_TEMPERATURE),\n+                getScaled(block.temperature_source, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_WATER_TEMPERATURE),\n+                getScaled(block.temperature_water, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_WATER_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_water_setpoint, CELSIUS));\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledEnergyData(ModbusRegisterArray registers) {\n+        logger.trace(\"Energy block received, size: {}\", registers.size());\n+\n+        EnergyBlock block = energyBlockParser.parse(registers);\n+\n+        // Energy information group\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_HEAT_TODAY),\n+                new QuantityType<>(block.productionHeatToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_HEAT_TOTAL),\n+                getEnergyQuantity(block.productionHeatTotalHigh, block.productionHeatTotalLow));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_WATER_TODAY),\n+                new QuantityType<>(block.productionWaterToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_WATER_TOTAL),\n+                getEnergyQuantity(block.productionWaterTotalHigh, block.productionWaterTotalLow));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_HEAT_TODAY),\n+                new QuantityType<>(block.consumptionHeatToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_HEAT_TOTAL),\n+                getEnergyQuantity(block.consumptionHeatTotalHigh, block.consumptionHeatTotalLow));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_WATER_TODAY),\n+                new QuantityType<>(block.consumptionWaterToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_WATER_TOTAL),\n+                getEnergyQuantity(block.consumptionWaterTotalHigh, block.consumptionWaterTotalLow));\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemStateData(ModbusRegisterArray registers) {\n+        logger.trace(\"System state block received, size: {}\", registers.size());\n+\n+        SystemStateBlock block = systemstateBlockParser.parse(registers);\n+        boolean isHeating = (block.state & 16) != 0;\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_HEATING),\n+                isHeating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_HEATING_WATER),\n+                (block.state & 32) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_COOLING),\n+                (block.state & 256) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_SUMMER),\n+                (block.state & 128) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_PUMPING),\n+                (block.state & 1) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemParameterData(ModbusRegisterArray registers) {\n+        logger.trace(\"System state block received, size: {}\", registers.size());\n+\n+        SystemParameterBlock block = systemParameterBlockParser.parse(registers);\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_OPERATION_MODE), new DecimalType(block.operation_mode));\n+\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_COMFORT_TEMPERATURE_HEATING),\n+                getScaled(block.comfort_temperature_heating, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_ECO_TEMPERATURE_HEATING),\n+                getScaled(block.eco_temperature_heating, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_COMFORT_TEMPERATURE_WATER),\n+                getScaled(block.comfort_temperature_water, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_ECO_TEMPERATURE_WATER),\n+                getScaled(block.eco_temperature_water, CELSIUS));\n+    }\n+\n+    /**\n+     * @param bridgeStatusInfo\n+     */\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+\n+        logger.debug(\"Thing status changed to {}\", this.getThing().getStatus().name());\n+        if (getThing().getStatus() == ThingStatus.ONLINE) {\n+            startUp();\n+        } else if (getThing().getStatus() == ThingStatus.OFFLINE) {\n+            tearDown();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 690}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3Mzg3MA==", "bodyText": "Is this method used anywhere?", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444473870", "createdAt": "2020-06-23T20:01:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,744 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.BasicModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicModbusRegister;\n+import org.openhab.io.transport.modbus.BasicModbusRegisterArray;\n+import org.openhab.io.transport.modbus.BasicModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.BasicPollTaskImpl;\n+import org.openhab.io.transport.modbus.BasicWriteTask;\n+import org.openhab.io.transport.modbus.BitArray;\n+import org.openhab.io.transport.modbus.ModbusManager;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusResponse;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+            logger.debug(\"Unregistering polling from ModbusManager\");\n+            StiebelEltronHandler.this.modbusManager.unregisterRegularPoll(task);\n+\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusSlaveEndpoint myendpoint = StiebelEltronHandler.this.endpoint;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || myendpoint == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            BasicModbusReadRequestBlueprint request = new BasicModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+            pollTask = new BasicPollTaskImpl(myendpoint, request, new ModbusReadCallback() {\n+\n+                @Override\n+                public void onRegisters(@Nullable ModbusReadRequestBlueprint request,\n+                        @Nullable ModbusRegisterArray registers) {\n+                    if (registers == null) {\n+                        logger.warn(\"Received empty register array on poll\");\n+                        return;\n+                    }\n+                    handlePolledData(registers);\n+\n+                    if (StiebelEltronHandler.this.getThing().getStatus() != ThingStatus.ONLINE) {\n+                        updateStatus(ThingStatus.ONLINE);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(@Nullable ModbusReadRequestBlueprint request, @Nullable Exception error) {\n+                    StiebelEltronHandler.this.handleError(error);\n+                }\n+\n+                @Override\n+                public void onBits(@Nullable ModbusReadRequestBlueprint request, @Nullable BitArray bits) {\n+                    // don't care, we don't expect this result\n+                }\n+            });\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.registerRegularPoll(task, refreshMillis, 1000);\n+            }\n+        }\n+\n+        public synchronized void poll() {\n+            PollTask task = pollTask;\n+            if (task != null) {\n+                StiebelEltronHandler.this.modbusManager.submitOneTimePoll(task);\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * This is the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusSlaveEndpoint endpoint = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Reference to the modbus manager\n+     */\n+    protected ModbusManager modbusManager;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing         the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing, ModbusManager modbusManager) {\n+        super(thing);\n+        this.modbusManager = modbusManager;\n+    }\n+\n+    /**\n+     * @param address    address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        @Nullable\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        if (myconfig == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }\n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new BasicModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new BasicModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        BasicModbusWriteRegisterRequestBlueprint request = new BasicModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        ModbusSlaveEndpoint slaveEndpoint = this.endpoint;\n+        if (slaveEndpoint == null) {\n+            return;\n+        }\n+\n+        BasicWriteTask writeTask = new BasicWriteTask(slaveEndpoint, request, new ModbusWriteCallback() {\n+            @Override\n+            public void onWriteResponse(ModbusWriteRequestBlueprint request, ModbusResponse response) {\n+                if (hasConfigurationError()) {\n+                    return;\n+                }\n+                logger.debug(\"Successful write, matching request {}\", request);\n+                StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            @Override\n+            public void onError(ModbusWriteRequestBlueprint request, Exception error) {\n+                StiebelEltronHandler.this.handleError(error);\n+            }\n+        });\n+        logger.trace(\"Submitting write task: {}\", writeTask);\n+        modbusManager.submitOneTimeWrite(writeTask);\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in\n+     *         the stiebel eltron modbus documentation)\n+     */\n+    private short getScaledInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = ((QuantityType<?>) command).toUnit(CELSIUS);\n+            if (c != null) {\n+                return (short) (c.doubleValue() * 10);\n+            } else {\n+                throw new StiebelEltronException(\"Unsupported unit\");\n+            }\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            AbstractBasePoller poller = null;\n+            String groupId = channelUID.getGroupId();\n+            if (groupId != null) {\n+                switch (groupId) {\n+                    case GROUP_SYSTEM_STATE:\n+                        poller = systemStatePoller;\n+                        break;\n+                    case GROUP_SYSTEM_PARAMETER:\n+                        poller = systemParameterPoller;\n+                        break;\n+                    case GROUP_SYSTEM_INFO:\n+                        poller = systemInformationPoller;\n+                        break;\n+                    case GROUP_ENERGY_INFO:\n+                        poller = energyPoller;\n+                        break;\n+                }\n+            }\n+            if (poller != null) {\n+                poller.poll();\n+            }\n+        } else {\n+            try {\n+                if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                    switch (channelUID.getIdWithoutGroup()) {\n+                        case CHANNEL_OPERATION_MODE:\n+                            writeInt16(1500, getInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                            writeInt16(1501, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                            writeInt16(1502, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                            writeInt16(1509, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_WATER:\n+                            writeInt16(1510, getScaledInt16Value(command));\n+                            break;\n+                    }\n+                }\n+            } catch (StiebelEltronException e) {\n+                handleError(e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initialization: Load the config object of the block Connect to the slave\n+     * bridge Start the periodic polling\n+     */\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(StiebelEltronConfiguration.class);\n+        logger.debug(\"Initializing thing with properties: {}\", thing.getProperties());\n+\n+        startUp();\n+    }\n+\n+    /*\n+     * This method starts the operation of this handler Connect to the slave bridge\n+     * Start the periodic polling1\n+     */\n+    private void startUp() {\n+\n+        if (endpoint != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, \"Bridge is offline\");\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        try {\n+            slaveId = slaveEndpointThingHandler.getSlaveId();\n+\n+            endpoint = slaveEndpointThingHandler.asSlaveEndpoint();\n+        } catch (EndpointNotInitializedException e) {\n+            // this will be handled below as endpoint remains null\n+        }\n+\n+        if (endpoint == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\n+            return;\n+        }\n+\n+        if (config == null) {\n+            logger.debug(\"Invalid endpoint/config/manager ref for stiebel eltron handler\");\n+            return;\n+        }\n+\n+        if (systemInformationPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemInformationData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(500, 36, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemInformationPoller = poller;\n+        }\n+        if (energyPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledEnergyData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(3500, 16, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            energyPoller = poller;\n+        }\n+        if (systemStatePoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemStateData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(2500, 2, ModbusReadFunctionCode.READ_INPUT_REGISTERS);\n+            systemStatePoller = poller;\n+        }\n+        if (systemParameterPoller == null) {\n+            AbstractBasePoller poller = new AbstractBasePoller() {\n+                @Override\n+                protected void handlePolledData(ModbusRegisterArray registers) {\n+                    handlePolledSystemParameterData(registers);\n+                }\n+\n+            };\n+            poller.registerPollTask(1500, 11, ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS);\n+            systemParameterPoller = poller;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+    }\n+\n+    /**\n+     * Dispose the binding correctly\n+     */\n+    @Override\n+    public void dispose() {\n+        tearDown();\n+    }\n+\n+    /**\n+     * Unregister the poll tasks and release the endpoint reference\n+     */\n+    private void tearDown() {\n+        AbstractBasePoller poller = systemInformationPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemInformationPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemInformationPoller = null;\n+        }\n+\n+        poller = energyPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering energyPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            energyPoller = null;\n+        }\n+\n+        poller = systemStatePoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemStatePoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemStatePoller = null;\n+        }\n+\n+        poller = systemParameterPoller;\n+        if (poller != null) {\n+            logger.debug(\"Unregistering systemParameterPoller from ModbusManager\");\n+            poller.unregisterPollTask();\n+\n+            systemParameterPoller = null;\n+        }\n+\n+        endpoint = null;\n+    }\n+\n+    /**\n+     * Returns the current slave id from the bridge\n+     */\n+    public int getSlaveId() {\n+        return slaveId;\n+    }\n+\n+    /**\n+     * Get the endpoint handler from the bridge this handler is connected to Checks\n+     * that we're connected to the right type of bridge\n+     *\n+     * @return the endpoint handler or null if the bridge does not exist\n+     */\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"Bridge is null\");\n+            return null;\n+        }\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Bridge is not online\");\n+            return null;\n+        }\n+\n+        ThingHandler handler = bridge.getHandler();\n+        if (handler == null) {\n+            logger.debug(\"Bridge handler is null\");\n+            return null;\n+        }\n+\n+        if (handler instanceof ModbusEndpointThingHandler) {\n+            ModbusEndpointThingHandler slaveEndpoint = (ModbusEndpointThingHandler) handler;\n+            return slaveEndpoint;\n+        } else {\n+            throw new IllegalStateException(\"Unexpected bridge handler: \" + handler.toString());\n+        }\n+    }\n+\n+    /**\n+     * Returns value divided by the 10\n+     *\n+     * @param value the value to alter\n+     * @return the scaled value as a DecimalType\n+     */\n+    protected State getScaled(Number value, Unit<?> unit) {\n+        return new QuantityType<>(BigDecimal.valueOf(value.longValue(), 1), unit);\n+    }\n+\n+    /**\n+     * Returns high value * 1000 + low value\n+     *\n+     * @param high the high value\n+     * @param low  the low valze\n+     * @return the scaled value as a DecimalType\n+     */\n+    protected State getEnergyQuantity(int high, int low) {\n+        double value = high * 1000 + low;\n+        return new QuantityType<>(value, KILOWATT_HOUR);\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemInformationData(ModbusRegisterArray registers) {\n+        logger.trace(\"System Information block received, size: {}\", registers.size());\n+\n+        SystemInformationBlock block = systemInformationBlockParser.parse(registers);\n+\n+        // System information group\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_TEMPERATURE), getScaled(block.temperature_fek, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_fek_setpoint, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_HUMIDITY), getScaled(block.humidity_ffk, PERCENT));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_FEK_DEWPOINT), getScaled(block.dewpoint_ffk, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_OUTDOOR_TEMPERATURE),\n+                getScaled(block.temperature_outdoor, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_HK1_TEMPERATURE), getScaled(block.temperature_hk1, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_HK1_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_hk1_setpoint, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_SUPPLY_TEMPERATURE),\n+                getScaled(block.temperature_supply, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_RETURN_TEMPERATURE),\n+                getScaled(block.temperature_return, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_SOURCE_TEMPERATURE),\n+                getScaled(block.temperature_source, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_WATER_TEMPERATURE),\n+                getScaled(block.temperature_water, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_INFO, CHANNEL_WATER_TEMPERATURE_SETPOINT),\n+                getScaled(block.temperature_water_setpoint, CELSIUS));\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledEnergyData(ModbusRegisterArray registers) {\n+        logger.trace(\"Energy block received, size: {}\", registers.size());\n+\n+        EnergyBlock block = energyBlockParser.parse(registers);\n+\n+        // Energy information group\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_HEAT_TODAY),\n+                new QuantityType<>(block.productionHeatToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_HEAT_TOTAL),\n+                getEnergyQuantity(block.productionHeatTotalHigh, block.productionHeatTotalLow));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_WATER_TODAY),\n+                new QuantityType<>(block.productionWaterToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_PRODUCTION_WATER_TOTAL),\n+                getEnergyQuantity(block.productionWaterTotalHigh, block.productionWaterTotalLow));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_HEAT_TODAY),\n+                new QuantityType<>(block.consumptionHeatToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_HEAT_TOTAL),\n+                getEnergyQuantity(block.consumptionHeatTotalHigh, block.consumptionHeatTotalLow));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_WATER_TODAY),\n+                new QuantityType<>(block.consumptionWaterToday, KILOWATT_HOUR));\n+        updateState(channelUID(GROUP_ENERGY_INFO, CHANNEL_CONSUMPTION_WATER_TOTAL),\n+                getEnergyQuantity(block.consumptionWaterTotalHigh, block.consumptionWaterTotalLow));\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemStateData(ModbusRegisterArray registers) {\n+        logger.trace(\"System state block received, size: {}\", registers.size());\n+\n+        SystemStateBlock block = systemstateBlockParser.parse(registers);\n+        boolean isHeating = (block.state & 16) != 0;\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_HEATING),\n+                isHeating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_HEATING_WATER),\n+                (block.state & 32) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_COOLING),\n+                (block.state & 256) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_SUMMER),\n+                (block.state & 128) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(channelUID(GROUP_SYSTEM_STATE, CHANNEL_IS_PUMPING),\n+                (block.state & 1) != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+\n+    }\n+\n+    /**\n+     * This method is called each time new data has been polled from the modbus\n+     * slave The register array is first parsed, then each of the channels are\n+     * updated to the new values\n+     *\n+     * @param registers byte array read from the modbus slave\n+     */\n+    protected void handlePolledSystemParameterData(ModbusRegisterArray registers) {\n+        logger.trace(\"System state block received, size: {}\", registers.size());\n+\n+        SystemParameterBlock block = systemParameterBlockParser.parse(registers);\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_OPERATION_MODE), new DecimalType(block.operation_mode));\n+\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_COMFORT_TEMPERATURE_HEATING),\n+                getScaled(block.comfort_temperature_heating, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_ECO_TEMPERATURE_HEATING),\n+                getScaled(block.eco_temperature_heating, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_COMFORT_TEMPERATURE_WATER),\n+                getScaled(block.comfort_temperature_water, CELSIUS));\n+        updateState(channelUID(GROUP_SYSTEM_PARAMETER, CHANNEL_ECO_TEMPERATURE_WATER),\n+                getScaled(block.eco_temperature_water, CELSIUS));\n+    }\n+\n+    /**\n+     * @param bridgeStatusInfo\n+     */\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+\n+        logger.debug(\"Thing status changed to {}\", this.getThing().getStatus().name());\n+        if (getThing().getStatus() == ThingStatus.ONLINE) {\n+            startUp();\n+        } else if (getThing().getStatus() == ThingStatus.OFFLINE) {\n+            tearDown();\n+        }\n+    }\n+\n+    /**\n+     * Handle errors received during communication\n+     */\n+    protected void handleError(@Nullable Exception error) {\n+        // Ignore all incoming data and errors if configuration is not correct\n+        if (hasConfigurationError() || getThing().getStatus() == ThingStatus.OFFLINE) {\n+            return;\n+        }\n+        String msg = \"\";\n+        String cls = \"\";\n+        if (error != null) {\n+            cls = error.getClass().getName();\n+            msg = error.getMessage();\n+        }\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                String.format(\"Error with read: %s: %s\", cls, msg));\n+    }\n+\n+    /**\n+     * Returns true, if we're in a CONFIGURATION_ERROR state\n+     *\n+     * @return\n+     */\n+    protected boolean hasConfigurationError() {\n+        ThingStatusInfo statusInfo = getThing().getStatusInfo();\n+        return statusInfo.getStatus() == ThingStatus.OFFLINE\n+                && statusInfo.getStatusDetail() == ThingStatusDetail.CONFIGURATION_ERROR;\n+    }\n+\n+    /**\n+     * Reset communication status to ONLINE if we're in an OFFLINE state\n+     */\n+    protected void resetCommunicationError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 725}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3NjY1Ng==", "bodyText": "Did you test 0? If I see correctly it will be passed to the modbus code, which will throw an IllegalArgumentException.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r444476656", "createdAt": "2020-06-23T20:07:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/resources/ESH-INF/config/config-descriptions.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:stiebeleltron:modbusconfig\">\n+\n+\t\t<parameter name=\"refresh\" type=\"integer\" min=\"0\" unit=\"s\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a167f86258fd73651ec72f42f2b99c01b046d5e4"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTc0NzAx", "url": "https://github.com/openhab/openhab-addons/pull/7718#pullrequestreview-436974701", "createdAt": "2020-06-24T20:17:11Z", "commit": {"oid": "19682153933fae8e4ea876d141fa0f4189b9d0d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTE5ODA0", "url": "https://github.com/openhab/openhab-addons/pull/7718#pullrequestreview-447519804", "createdAt": "2020-07-13T19:01:05Z", "commit": {"oid": "1fe4a967869bb7203ec731025560cdf00805ff35"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTowMTowNVrOGw1x4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToxMDowNFrOGw2FaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg2NTk1NA==", "bodyText": "Syntactical sugar. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }, failure -> {StiebelEltronHandler.this.handleReadError(failure);});\n          \n          \n            \n                        }, StiebelEltronHandler.this::handleReadError);", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r453865954", "createdAt": "2020-07-13T19:01:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,713 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+\n+            ModbusCommunicationInterface mycomms = StiebelEltronHandler.this.comms;\n+            if (mycomms != null) {\n+                mycomms.unregisterRegularPoll(task);\n+            }\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusCommunicationInterface mycomms = StiebelEltronHandler.this.comms;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || mycomms == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            ModbusReadRequestBlueprint request = new ModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            pollTask = mycomms.registerRegularPoll(request, refreshMillis, 1000, result -> {\n+                result.getRegisters().ifPresent(this::handlePolledData);\n+                if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }, failure -> {StiebelEltronHandler.this.handleReadError(failure);});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe4a967869bb7203ec731025560cdf00805ff35"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3MDk1Mg==", "bodyText": "Initialization with empty strings has no effect, since they are overwritten below. You can initialize them with the intended values at once.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r453870952", "createdAt": "2020-07-13T19:10:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java", "diffHunk": "@@ -0,0 +1,713 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.stiebeleltron.internal.handler;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.KILOWATT_HOUR;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.PERCENT;\n+import static org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronBindingConstants.*;\n+\n+import java.util.Optional;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.EndpointNotInitializedException;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.binding.modbus.stiebeleltron.internal.StiebelEltronConfiguration;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.EnergyBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemInformationBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemParameterBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.dto.SystemStateBlock;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.EnergyBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemInfromationBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemParameterBlockParser;\n+import org.openhab.binding.modbus.stiebeleltron.internal.parser.SystemStateBlockParser;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Modbus.StiebelEltronHandler} is responsible for handling commands,\n+ * which are sent to one of the channels and for polling the modbus.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class StiebelEltronHandler extends BaseThingHandler {\n+\n+    public abstract class AbstractBasePoller {\n+\n+        private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+        private volatile @Nullable PollTask pollTask;\n+\n+        public synchronized void unregisterPollTask() {\n+            PollTask task = pollTask;\n+            if (task == null) {\n+                return;\n+            }\n+\n+            ModbusCommunicationInterface mycomms = StiebelEltronHandler.this.comms;\n+            if (mycomms != null) {\n+                mycomms.unregisterRegularPoll(task);\n+            }\n+            pollTask = null;\n+        }\n+\n+        /**\n+         * Register poll task This is where we set up our regular poller\n+         */\n+        public synchronized void registerPollTask(int address, int length, ModbusReadFunctionCode readFunctionCode) {\n+\n+            logger.debug(\"Setting up regular polling\");\n+\n+            ModbusCommunicationInterface mycomms = StiebelEltronHandler.this.comms;\n+            StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+            if (myconfig == null || mycomms == null) {\n+                throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+            }\n+\n+            ModbusReadRequestBlueprint request = new ModbusReadRequestBlueprint(getSlaveId(),\n+                    readFunctionCode, address, length, myconfig.getMaxTries());\n+\n+\n+            long refreshMillis = myconfig.getRefreshMillis();\n+\n+            pollTask = mycomms.registerRegularPoll(request, refreshMillis, 1000, result -> {\n+                result.getRegisters().ifPresent(this::handlePolledData);\n+                if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }, failure -> {StiebelEltronHandler.this.handleReadError(failure);});\n+        }\n+\n+        public synchronized void poll() {\n+            PollTask task = pollTask;\n+            ModbusCommunicationInterface mycomms = StiebelEltronHandler.this.comms;\n+            if (task != null && mycomms != null) {\n+                mycomms.submitOneTimePoll(task.getRequest(), task.getResultCallback(), task.getFailureCallback());\n+            }\n+        }\n+\n+        protected abstract void handlePolledData(ModbusRegisterArray registers);\n+    }\n+\n+    /**\n+     * Logger instance\n+     */\n+    private final Logger logger = LoggerFactory.getLogger(StiebelEltronHandler.class);\n+\n+    /**\n+     * Configuration instance\n+     */\n+    protected @Nullable StiebelEltronConfiguration config = null;\n+    /**\n+     * Parser used to convert incoming raw messages into system blocks\n+     */\n+    private final SystemInfromationBlockParser systemInformationBlockParser = new SystemInfromationBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system state blocks\n+     */\n+    private final SystemStateBlockParser systemstateBlockParser = new SystemStateBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into system parameter blocks\n+     */\n+    private final SystemParameterBlockParser systemParameterBlockParser = new SystemParameterBlockParser();\n+    /**\n+     * Parser used to convert incoming raw messages into model blocks\n+     */\n+    private final EnergyBlockParser energyBlockParser = new EnergyBlockParser();\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemInformationPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller energyPoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemStatePoller = null;\n+    /**\n+     * This is the task used to poll the device\n+     */\n+    private volatile @Nullable AbstractBasePoller systemParameterPoller = null;\n+    /**\n+     * Communication interface to the slave endpoint we're connecting to\n+     */\n+    protected volatile @Nullable ModbusCommunicationInterface comms = null;\n+\n+    /**\n+     * This is the slave id, we store this once initialization is complete\n+     */\n+    private volatile int slaveId;\n+\n+    /**\n+     * Instances of this handler should get a reference to the modbus manager\n+     *\n+     * @param thing the thing to handle\n+     * @param modbusManager the modbus manager\n+     */\n+    public StiebelEltronHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * @param address address of the value to be written on the modbus\n+     * @param shortValue value to be written on the modbus\n+     */\n+    protected void writeInt16(int address, short shortValue) {\n+        StiebelEltronConfiguration myconfig = StiebelEltronHandler.this.config;\n+        ModbusCommunicationInterface mycomms = StiebelEltronHandler.this.comms;\n+\n+        if (myconfig == null || mycomms == null) {\n+            throw new IllegalStateException(\"registerPollTask called without proper configuration\");\n+        }\n+        // big endian byte ordering\n+        byte b1 = (byte) (shortValue >> 8);\n+        byte b2 = (byte) shortValue;\n+\n+        ModbusRegister register = new ModbusRegister(b1, b2);\n+        ModbusRegisterArray data = new ModbusRegisterArray(new ModbusRegister[] { register });\n+\n+        ModbusWriteRegisterRequestBlueprint request = new ModbusWriteRegisterRequestBlueprint(slaveId,\n+                address, data, false, myconfig.getMaxTries());\n+\n+        mycomms.submitOneTimeWrite(request, result -> {\n+            if (hasConfigurationError()) {\n+                return;\n+            }\n+            logger.debug(\"Successful write, matching request {}\", request);\n+            StiebelEltronHandler.this.updateStatus(ThingStatus.ONLINE);\n+        }, failure -> {StiebelEltronHandler.this.handleWriteError(failure);});\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command multiplied by 10 (see datatype 2 in\n+     *         the stiebel eltron modbus documentation)\n+     */\n+    private short getScaledInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof QuantityType) {\n+            QuantityType<?> c = ((QuantityType<?>) command).toUnit(CELSIUS);\n+            if (c != null) {\n+                return (short) (c.doubleValue() * 10);\n+            } else {\n+                throw new StiebelEltronException(\"Unsupported unit\");\n+            }\n+        }\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return (short) (c.doubleValue() * 10);\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * @param command get the value of this command.\n+     * @return short the value of the command as short\n+     */\n+    private short getInt16Value(Command command) throws StiebelEltronException {\n+        if (command instanceof DecimalType) {\n+            DecimalType c = (DecimalType) command;\n+            return c.shortValue();\n+        }\n+        throw new StiebelEltronException(\"Unsupported command type\");\n+    }\n+\n+    /**\n+     * Handle incoming commands.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            String groupId = channelUID.getGroupId();\n+            if (groupId != null) {\n+                AbstractBasePoller poller;\n+                switch (groupId) {\n+                    case GROUP_SYSTEM_STATE:\n+                        poller = systemStatePoller;\n+                        break;\n+                    case GROUP_SYSTEM_PARAMETER:\n+                        poller = systemParameterPoller;\n+                        break;\n+                    case GROUP_SYSTEM_INFO:\n+                        poller = systemInformationPoller;\n+                        break;\n+                    case GROUP_ENERGY_INFO:\n+                        poller = energyPoller;\n+                        break;\n+                    default:\n+                        poller = null;\n+                        break;\n+                }\n+                if (poller != null) {\n+                    poller.poll();\n+                }\n+            }\n+        } else {\n+            try {\n+                if (GROUP_SYSTEM_PARAMETER.equals(channelUID.getGroupId())) {\n+                    switch (channelUID.getIdWithoutGroup()) {\n+                        case CHANNEL_OPERATION_MODE:\n+                            writeInt16(1500, getInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_HEATING:\n+                            writeInt16(1501, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_HEATING:\n+                            writeInt16(1502, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_COMFORT_TEMPERATURE_WATER:\n+                            writeInt16(1509, getScaledInt16Value(command));\n+                            break;\n+                        case CHANNEL_ECO_TEMPERATURE_WATER:\n+                            writeInt16(1510, getScaledInt16Value(command));\n+                            break;\n+                    }\n+                }\n+            } catch (StiebelEltronException error) {\n+                if (hasConfigurationError() || getThing().getStatus() == ThingStatus.OFFLINE) {\n+                    return;\n+                }\n+                String msg = \"\";\n+                String cls = \"\";\n+                cls = error.getClass().getName();\n+                msg = error.getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe4a967869bb7203ec731025560cdf00805ff35"}, "originalPosition": 311}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NDc5Mzc0", "url": "https://github.com/openhab/openhab-addons/pull/7718#pullrequestreview-475479374", "createdAt": "2020-08-26T13:20:01Z", "commit": {"oid": "27127f980a9e55c380ee621b0549c484f0227b32"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoyMDowMVrOHHLtAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzoyNToxMVrOHHL7HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5MzgyNQ==", "bodyText": "Can you put each line on a new line so it makes it easier to review (future) improvements to the documentation.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r477293825", "createdAt": "2020-08-26T13:20:01Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/README.md", "diffHunk": "@@ -0,0 +1,205 @@\n+# Stiebel Eltron ISG Binding\n+\n+This extension adds support for the Stiebel Eltron modbus protocol.\n+\n+An Internet Service Gateway (ISG) with an installed modbus extension is required in order to run this binding. In case the modbus extension is not yet installed on the ISG, the ISG Updater Tool for the update can be found here: https://www.stiebel-eltron.de/de/home/produkte-loesungen/erneuerbare_energien/regelung_energiemanagement/internet_servicegateway/isg_web/downloads.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27127f980a9e55c380ee621b0549c484f0227b32"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NTI1OA==", "bodyText": "Please revert this indentation change.", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r477295258", "createdAt": "2020-08-26T13:22:07Z", "author": {"login": "Hilbrand"}, "path": "bundles/pom.xml", "diffHunk": "@@ -230,7 +231,7 @@\n     <module>org.openhab.binding.snmp</module>\n     <module>org.openhab.binding.solaredge</module>\n     <module>org.openhab.binding.solarlog</module>\n-\t<module>org.openhab.binding.somfymylink</module>\n+\t  <module>org.openhab.binding.somfymylink</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27127f980a9e55c380ee621b0549c484f0227b32"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI5NzQzNg==", "bodyText": "Please rebase/update to 2.5.8-SNAPSHOT", "url": "https://github.com/openhab/openhab-addons/pull/7718#discussion_r477297436", "createdAt": "2020-08-26T13:25:11Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.stiebeleltron/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>2.5.7-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27127f980a9e55c380ee621b0549c484f0227b32"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b0281b11d675941b381d0b71d56e70820167424", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/5b0281b11d675941b381d0b71d56e70820167424", "committedDate": "2020-08-27T05:55:47Z", "message": "Initial Commit\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa4d2c8f64db20fb2deb122d13d29e4fe1a689d6", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/aa4d2c8f64db20fb2deb122d13d29e4fe1a689d6", "committedDate": "2020-08-27T05:55:58Z", "message": "Update bundles/org.openhab.binding.modbus.stiebeleltron/README.md\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88c021a384f8c7d3f80aa2449b2007992ca3b2cc", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/88c021a384f8c7d3f80aa2449b2007992ca3b2cc", "committedDate": "2020-08-27T05:55:58Z", "message": "Update bundles/org.openhab.binding.modbus.stiebeleltron/src/main/resources/ESH-INF/config/config-descriptions.xml\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f1804676841e278e7d38e48e11670bf92c64449", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/9f1804676841e278e7d38e48e11670bf92c64449", "committedDate": "2020-08-27T05:55:58Z", "message": "Update bundles/org.openhab.binding.modbus.stiebeleltron/src/main/resources/ESH-INF/config/config-descriptions.xml\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6493eea4dc4035953f83f5fd424d0b3843e22e2f", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/6493eea4dc4035953f83f5fd424d0b3843e22e2f", "committedDate": "2020-08-27T05:58:21Z", "message": "fix review finding\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2f08c4c93f79953b38b18e69f21a66aec37dbcc", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/b2f08c4c93f79953b38b18e69f21a66aec37dbcc", "committedDate": "2020-08-27T05:58:28Z", "message": "renamed THING_TYPE_SAMPLE\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ad3c45c6d59bef7e196352c38d77c28af2776a8", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/9ad3c45c6d59bef7e196352c38d77c28af2776a8", "committedDate": "2020-08-27T05:58:28Z", "message": "fix remaining review comment\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "696c6ba0ed9b45b3911504b7d201323a0a164289", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/696c6ba0ed9b45b3911504b7d201323a0a164289", "committedDate": "2020-08-27T05:58:28Z", "message": "removed warnings\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b69c402a54834c2d1e91753bdb5d9a91d25f78bb", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/b69c402a54834c2d1e91753bdb5d9a91d25f78bb", "committedDate": "2020-08-27T05:58:28Z", "message": "Added handling for REFRESH and changed exception\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9255cf2dd9962c104295fb47c95fa16f13bd42c6", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/9255cf2dd9962c104295fb47c95fa16f13bd42c6", "committedDate": "2020-08-27T05:58:28Z", "message": "Update bundles/org.openhab.binding.modbus.stiebeleltron/README.md\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95fbb82bab8907a568cd8c0583d97614a77b42f1", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/95fbb82bab8907a568cd8c0583d97614a77b42f1", "committedDate": "2020-08-27T05:58:29Z", "message": "Update bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/dto/SystemInformationBlock.java\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7befb6f57e751f51d52f0bdd514614e51375159", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/b7befb6f57e751f51d52f0bdd514614e51375159", "committedDate": "2020-08-27T05:58:29Z", "message": "Update bundles/org.openhab.binding.modbus.stiebeleltron/src/main/java/org/openhab/binding/modbus/stiebeleltron/internal/handler/StiebelEltronHandler.java\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d80b481a47d36c034b26cac5d7f7bec6d0c4ce", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/b8d80b481a47d36c034b26cac5d7f7bec6d0c4ce", "committedDate": "2020-08-27T05:58:29Z", "message": "fixed review findings\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "979016502f2acc1fc9bd619b99881297b71c52fa", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/979016502f2acc1fc9bd619b99881297b71c52fa", "committedDate": "2020-08-27T05:58:29Z", "message": "mvn spotless:apply\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9528e38a573dc8357afdcca1809a64ff90558e1", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/f9528e38a573dc8357afdcca1809a64ff90558e1", "committedDate": "2020-08-27T05:58:29Z", "message": "rebased from upstream 2.5.x and upgraded 2.5.7\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c7602088cadcf08023ec069400a75305939dfe5", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/9c7602088cadcf08023ec069400a75305939dfe5", "committedDate": "2020-08-27T05:58:30Z", "message": "Adapted to simplified modbus api\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f48432c733a623cc420ddfbd15577a754611014", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/1f48432c733a623cc420ddfbd15577a754611014", "committedDate": "2020-08-27T05:58:30Z", "message": "fixes\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73f0e28287bb28833127abf82c9e84227e058fde", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/73f0e28287bb28833127abf82c9e84227e058fde", "committedDate": "2020-08-27T05:58:30Z", "message": "review findings\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "875e04c66318b1bf052ea14a48ff7955f5519df9", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/875e04c66318b1bf052ea14a48ff7955f5519df9", "committedDate": "2020-08-27T06:18:29Z", "message": "update version\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c078020df7aa2085c432ffdfe007747c32389c66", "author": {"user": {"login": "pail23", "name": "Paul Frank"}}, "url": "https://github.com/openhab/openhab-addons/commit/c078020df7aa2085c432ffdfe007747c32389c66", "committedDate": "2020-08-27T06:30:00Z", "message": "updated documentation\n\nSigned-off-by: Paul Frank <pail@gmx.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDkwMTA1", "url": "https://github.com/openhab/openhab-addons/pull/7718#pullrequestreview-476490105", "createdAt": "2020-08-27T08:18:17Z", "commit": {"oid": "c078020df7aa2085c432ffdfe007747c32389c66"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 632, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}