{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MTYxMDAy", "number": 9174, "title": "[modbus.sbc] Initial contribution", "bodyText": "Signed-off-by: Fabian Wolter github@fabian-wolter.de", "createdAt": "2020-11-29T19:44:11Z", "url": "https://github.com/openhab/openhab-addons/pull/9174", "merged": true, "mergeCommit": {"oid": "0be7f604386997ae2aed1b1cb408c03eef946b3d"}, "closed": true, "closedAt": "2021-02-02T07:28:58Z", "author": {"login": "fwolter"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhfNX4AFqTU0MDYxNTQ0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2GkmOgFqTU4MTA0OTMzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjE1NDQ0", "url": "https://github.com/openhab/openhab-addons/pull/9174#pullrequestreview-540615444", "createdAt": "2020-11-30T05:56:21Z", "commit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNTo1NjoyMlrOH7s0Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjoxNDoyOVrOH7tHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MjMyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | pollIntervall | Time between polling the data in ms      | Integer | yes      |\n          \n          \n            \n            | pollInterval | Time between polling the data in ms      | Integer | yes      |", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532362326", "createdAt": "2020-11-30T05:56:22Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/README.md", "diffHunk": "@@ -0,0 +1,75 @@\n+# Modbus Saia Burgess Controls Binding\n+\n+This binding interfaces the energy meter series ALD1 by Saia Burgess Controls (SBC) via Modbus.\n+\n+## Supported Things\n+\n+The following Things are supported:\n+\n+- `ald1Unidirectional`: 1-phase 32A one-way energy meter ALD1D5FD00A3A00\n+- `ald1Bidirectional`:  1-phase 32A two-way energy meter ALD1B5FD00A3A00\n+\n+## Discovery\n+\n+This binding does not support discovery.\n+\n+## Thing Configuration\n+\n+The following configuration parameters apply to `ald1Unidirectional` and `ald1Bidirectional`.\n+\n+| Name          | Description                              | Type    | Required |\n+|---------------|------------------------------------------|---------|----------|\n+| address       | Modbus slave address of the energy meter | Integer | yes      |\n+| pollIntervall | Time between polling the data in ms      | Integer | yes      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw==", "bodyText": "What is the -1 here? Would it be readable to follow the terminology of the modbus binding: \"address\" word would be used to refer zero based indices", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532363137", "createdAt": "2020-11-30T05:59:28Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA0NQ==", "bodyText": "Unnecessary? You could construct QuantityType using the DecimalType without intermediate conversion to float", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532364045", "createdAt": "2020-11-30T06:02:54Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        registerRegularPoll(localBlueprint, config.pollInterval, 0, this::readSuccessful, this::readError);\n+    }\n+\n+    private void readSuccessful(AsyncModbusReadResult result) {\n+        result.getRegisters().ifPresent(registers -> {\n+            if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            for (ALD1Registers channel : ALD1Registers.values()) {\n+                int index = channel.getRegisterAddress() - FIRST_READ_ADDRESS;\n+\n+                ModbusBitUtilities.extractStateFromRegisters(registers, index, channel.getType())\n+                        .map(DecimalType::floatValue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDgwNA==", "bodyText": "Same index as above?", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532364804", "createdAt": "2020-11-30T06:05:35Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import static org.openhab.io.transport.modbus.ModbusConstants.ValueType.*;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.io.transport.modbus.ModbusConstants;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+\n+/**\n+ * The {@link ALD1Registers} is responsible for defining Modbus registers and their units.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum ALD1Registers {\n+    TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NjcwNQ==", "bodyText": "This is already specified in the parent serial thing, I think it makes sense to use it from there and remove this parameter.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532366705", "createdAt": "2020-11-30T06:12:11Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/README.md", "diffHunk": "@@ -0,0 +1,75 @@\n+# Modbus Saia Burgess Controls Binding\n+\n+This binding interfaces the energy meter series ALD1 by Saia Burgess Controls (SBC) via Modbus.\n+\n+## Supported Things\n+\n+The following Things are supported:\n+\n+- `ald1Unidirectional`: 1-phase 32A one-way energy meter ALD1D5FD00A3A00\n+- `ald1Bidirectional`:  1-phase 32A two-way energy meter ALD1B5FD00A3A00\n+\n+## Discovery\n+\n+This binding does not support discovery.\n+\n+## Thing Configuration\n+\n+The following configuration parameters apply to `ald1Unidirectional` and `ald1Bidirectional`.\n+\n+| Name          | Description                              | Type    | Required |\n+|---------------|------------------------------------------|---------|----------|\n+| address       | Modbus slave address of the energy meter | Integer | yes      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NzEzMA==", "bodyText": "Remove (see comment above)", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532367130", "createdAt": "2020-11-30T06:13:48Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:modbus-sbc:ald1\">\n+\t\t<parameter name=\"address\" type=\"integer\" required=\"true\" min=\"1\" max=\"247\">\n+\t\t\t<label>Modbus Address</label>\n+\t\t\t<description>Modbus slave address of the energy meter.</description>\n+\t\t\t<default>1</default>\n+\t\t</parameter>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NzI5Ng==", "bodyText": "Add unit information", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532367296", "createdAt": "2020-11-30T06:14:29Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:modbus-sbc:ald1\">\n+\t\t<parameter name=\"address\" type=\"integer\" required=\"true\" min=\"1\" max=\"247\">\n+\t\t\t<label>Modbus Address</label>\n+\t\t\t<description>Modbus slave address of the energy meter.</description>\n+\t\t\t<default>1</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"pollInterval\" type=\"integer\" required=\"true\" min=\"100\" unit=\"ms\">\n+\t\t\t<label>Poll Interval</label>\n+\t\t\t<description>Time between polling the data.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73b34d5be69296260cf8cc9c150dcc071bbf8593", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/73b34d5be69296260cf8cc9c150dcc071bbf8593", "committedDate": "2020-11-30T08:27:26Z", "message": "Incorporate review feedback #1"}, "afterCommit": {"oid": "a23d7ac966dd01f82968e39ebe837f790f49422e", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/a23d7ac966dd01f82968e39ebe837f790f49422e", "committedDate": "2020-11-30T08:30:03Z", "message": "Incorporate review feedback #1\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNTQxODcz", "url": "https://github.com/openhab/openhab-addons/pull/9174#pullrequestreview-542541873", "createdAt": "2020-12-02T06:54:18Z", "commit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1NDoxOVrOH9Mxcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1NDoxOVrOH9Mxcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDQ1MA==", "bodyText": "Would this work?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .map(DecimalType::floatValue)\n          \n          \n            \n                                    .map(v -> QuantityType.valueOf(v * channel.getMultiplier(), channel.getUnit()))\n          \n          \n            \n                                    .map(decimalState -> new QuantityType(decimalState.toBigDecimal().multiply(new BigDecimal(multiplier)), channel.getUnit()))\n          \n      \n    \n    \n  \n\nIt's a minor cosmetic change to the original but avoids floating point conversions.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r533934450", "createdAt": "2020-12-02T06:54:19Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        registerRegularPoll(localBlueprint, config.pollInterval, 0, this::readSuccessful, this::readError);\n+    }\n+\n+    private void readSuccessful(AsyncModbusReadResult result) {\n+        result.getRegisters().ifPresent(registers -> {\n+            if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            for (ALD1Registers channel : ALD1Registers.values()) {\n+                int index = channel.getRegisterAddress() - FIRST_READ_ADDRESS;\n+\n+                ModbusBitUtilities.extractStateFromRegisters(registers, index, channel.getType())\n+                        .map(DecimalType::floatValue)\n+                        .map(v -> QuantityType.valueOf(v * channel.getMultiplier(), channel.getUnit()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "256a8b5b9e405bede7ed42582e4f015d60fa83bc", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/256a8b5b9e405bede7ed42582e4f015d60fa83bc", "committedDate": "2020-12-02T16:56:49Z", "message": "Fix import\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}, "afterCommit": {"oid": "852005e12aa18549c18385f37c23e37de7914478", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/852005e12aa18549c18385f37c23e37de7914478", "committedDate": "2020-12-02T16:57:58Z", "message": "Fix import\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "852005e12aa18549c18385f37c23e37de7914478", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/852005e12aa18549c18385f37c23e37de7914478", "committedDate": "2020-12-02T16:57:58Z", "message": "Fix import\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}, "afterCommit": {"oid": "3ec282de6389adc506a1a865072f3a32ddbb4018", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/3ec282de6389adc506a1a865072f3a32ddbb4018", "committedDate": "2020-12-02T16:59:48Z", "message": "Fix import\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDU3Njcy", "url": "https://github.com/openhab/openhab-addons/pull/9174#pullrequestreview-543057672", "createdAt": "2020-12-02T17:12:02Z", "commit": {"oid": "3ec282de6389adc506a1a865072f3a32ddbb4018"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxMjowM1rOH9laig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxMjowM1rOH9laig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODE4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n          \n          \n            \n                PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n          \n          \n            \n                FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n          \n          \n            \n                VOLTAGE(1, 36, UINT16, SmartHomeUnits.VOLT),\n          \n          \n            \n                CURRENT(0.1f, 37, UINT16, SmartHomeUnits.AMPERE),\n          \n          \n            \n                ACTIVE_POWER(10, 38, INT16, SmartHomeUnits.WATT),\n          \n          \n            \n                REACTIVE_POWER(10, 39, INT16, SmartHomeUnits.VAR),\n          \n          \n            \n                POWER_FACTOR(0.01f, 40, UINT16, SmartHomeUnits.ONE);\n          \n          \n            \n            \n          \n          \n            \n                private BigDecimal multiplier;\n          \n          \n            \n                private int registerAddress;\n          \n          \n            \n                private ModbusConstants.ValueType type;\n          \n          \n            \n                private Unit<?> unit;\n          \n          \n            \n            \n          \n          \n            \n                private ALD1Registers(float multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n          \n          \n            \n                    this.multiplier = new BigDecimal(multiplier);\n          \n          \n            \n                TOTAL_ENERGY(\"0.01\", 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n          \n          \n            \n                PARTIAL_ENERGY(\"0.01\", 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n          \n          \n            \n                FEEDING_BACK_ENERGY(\"0.01\", 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n          \n          \n            \n                VOLTAGE(\"1\", 36, UINT16, SmartHomeUnits.VOLT),\n          \n          \n            \n                CURRENT(\"0.1\", 37, UINT16, SmartHomeUnits.AMPERE),\n          \n          \n            \n                ACTIVE_POWER(\"10\", 38, INT16, SmartHomeUnits.WATT),\n          \n          \n            \n                REACTIVE_POWER(\"10\", 39, INT16, SmartHomeUnits.VAR),\n          \n          \n            \n                POWER_FACTOR(\"0.01\", 40, UINT16, SmartHomeUnits.ONE);\n          \n          \n            \n            \n          \n          \n            \n                private BigDecimal multiplier;\n          \n          \n            \n                private int registerAddress;\n          \n          \n            \n                private ModbusConstants.ValueType type;\n          \n          \n            \n                private Unit<?> unit;\n          \n          \n            \n            \n          \n          \n            \n                private ALD1Registers(String multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n          \n          \n            \n                    this.multiplier = new BigDecimal(multiplier);\n          \n      \n    \n    \n  \n\nJust a cosmetic suggestion\nWith this change you would have \"neat\" finite numbers since big decimal operate in 10-base. See https://stackoverflow.com/questions/7408566/java-double-value-0-01-changes-to-0-009999999999999787\nFeel free to ignore this comment :)", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534338186", "createdAt": "2020-12-02T17:12:03Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import static org.openhab.io.transport.modbus.ModbusConstants.ValueType.*;\n+\n+import java.math.BigDecimal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.io.transport.modbus.ModbusConstants;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+\n+/**\n+ * The {@link ALD1Registers} is responsible for defining Modbus registers and their units.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum ALD1Registers {\n+    TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n+    FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n+    VOLTAGE(1, 36, UINT16, SmartHomeUnits.VOLT),\n+    CURRENT(0.1f, 37, UINT16, SmartHomeUnits.AMPERE),\n+    ACTIVE_POWER(10, 38, INT16, SmartHomeUnits.WATT),\n+    REACTIVE_POWER(10, 39, INT16, SmartHomeUnits.VAR),\n+    POWER_FACTOR(0.01f, 40, UINT16, SmartHomeUnits.ONE);\n+\n+    private BigDecimal multiplier;\n+    private int registerAddress;\n+    private ModbusConstants.ValueType type;\n+    private Unit<?> unit;\n+\n+    private ALD1Registers(float multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n+        this.multiplier = new BigDecimal(multiplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec282de6389adc506a1a865072f3a32ddbb4018"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTcxMjU1", "url": "https://github.com/openhab/openhab-addons/pull/9174#pullrequestreview-545171255", "createdAt": "2020-12-04T17:48:27Z", "commit": {"oid": "8bac3909e642c164262def8ae57e63074273dad3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1Mzc2MTcy", "url": "https://github.com/openhab/openhab-addons/pull/9174#pullrequestreview-545376172", "createdAt": "2020-12-05T00:23:13Z", "commit": {"oid": "8bac3909e642c164262def8ae57e63074273dad3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3OTA2MTEy", "url": "https://github.com/openhab/openhab-addons/pull/9174#pullrequestreview-557906112", "createdAt": "2020-12-23T14:37:01Z", "commit": {"oid": "8bac3909e642c164262def8ae57e63074273dad3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNzowMVrOIKmk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNzowMVrOIKmk9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODcyNQ==", "bodyText": "You may want to consider adding support for the RTU over TCP ( #9435 ) by adding the following here..\n<bridge-type-ref id=\"tcp\"/>", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r547988725", "createdAt": "2020-12-23T14:37:01Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"modbus\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"ald1Unidirectional\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"serial\"/>\n+\t\t</supported-bridge-type-refs>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bac3909e642c164262def8ae57e63074273dad3"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e157fb76b0e1b9a9ba57be2a9f0e97429bd7d54", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/4e157fb76b0e1b9a9ba57be2a9f0e97429bd7d54", "committedDate": "2020-12-23T16:55:56Z", "message": "Fix OH version\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}, "afterCommit": {"oid": "36993c5b60a7239747f5da29d812bcefe3bcbcb1", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/36993c5b60a7239747f5da29d812bcefe3bcbcb1", "committedDate": "2020-12-23T16:58:08Z", "message": "Fix OH version\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwNDk4NTAz", "url": "https://github.com/openhab/openhab-addons/pull/9174#pullrequestreview-580498503", "createdAt": "2021-02-01T15:56:07Z", "commit": {"oid": "40fbd71e0ba80e0014010d26e85a1f15025e72ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNTo1NjowN1rOIdn-1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNTo1NjowN1rOIdn-1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkzNDY3Nw==", "bodyText": "Is adding tcp bridge something that will be added here?", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r567934677", "createdAt": "2021-02-01T15:56:07Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"modbus\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"ald1Unidirectional\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"serial\"/>\n+\t\t</supported-bridge-type-refs>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODcyNQ=="}, "originalCommit": {"oid": "8bac3909e642c164262def8ae57e63074273dad3"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b3a863033875504604ab53d5307fb42474d1f87", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/1b3a863033875504604ab53d5307fb42474d1f87", "committedDate": "2021-02-01T17:56:42Z", "message": "[modbus.sbc] Initial contribution\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b79f818c7fa3375aac7e7380c44ecfbe375ffd20", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/b79f818c7fa3375aac7e7380c44ecfbe375ffd20", "committedDate": "2021-02-01T17:56:42Z", "message": "Incorporate review feedback #1\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6b14219091ce0c93014a026679a974dc1debea5", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/b6b14219091ce0c93014a026679a974dc1debea5", "committedDate": "2021-02-01T17:56:42Z", "message": "Clean address\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c421e6b76537a754563f2db70b44dce6934088a8", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/c421e6b76537a754563f2db70b44dce6934088a8", "committedDate": "2021-02-01T17:56:42Z", "message": "Adoptions to Modbus PR\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9239dd836f5c9e249962eff8b1274bd4e2b5374", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/e9239dd836f5c9e249962eff8b1274bd4e2b5374", "committedDate": "2021-02-01T17:56:42Z", "message": "Change wording\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b230f08d777f7e9b696b1039cd39e06d45e21730", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/b230f08d777f7e9b696b1039cd39e06d45e21730", "committedDate": "2021-02-01T17:56:42Z", "message": "Refactor float/BigDecimal\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "762f2b858530e5e28effb42660db5edf5a29d7ab", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/762f2b858530e5e28effb42660db5edf5a29d7ab", "committedDate": "2021-02-01T17:56:43Z", "message": "Fix import\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "add8ed01e8ec2ccb9cb1a759ceaaddb2394f2a06", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/add8ed01e8ec2ccb9cb1a759ceaaddb2394f2a06", "committedDate": "2021-02-01T17:56:43Z", "message": "Change wording\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b66f401bbca667b5e48659ea1bae8f230f067c7", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/6b66f401bbca667b5e48659ea1bae8f230f067c7", "committedDate": "2021-02-01T17:56:43Z", "message": "Add ability for TCP bridge. Apply moving of modbus transport to core. Apply renaming of Units. Remove feature file.\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5483bd2ef6c77638a35bb6b1c51621bf4a14beb3", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/5483bd2ef6c77638a35bb6b1c51621bf4a14beb3", "committedDate": "2021-02-01T17:56:43Z", "message": "Fix OH version\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cecdc4346a55129b026f5ad372dfe2937587ab7", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/1cecdc4346a55129b026f5ad372dfe2937587ab7", "committedDate": "2021-02-01T17:56:43Z", "message": "Fixed signedness for the power factor\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76d358694a647f978a2b06610dde05d046e9134f", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/76d358694a647f978a2b06610dde05d046e9134f", "committedDate": "2021-02-01T17:56:43Z", "message": "Add TCP bridge\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc20f1782c07759122ac67dc2a3f5f83ff61bda3", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/bc20f1782c07759122ac67dc2a3f5f83ff61bda3", "committedDate": "2021-02-01T18:01:27Z", "message": "Update license headers\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40fbd71e0ba80e0014010d26e85a1f15025e72ac", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/40fbd71e0ba80e0014010d26e85a1f15025e72ac", "committedDate": "2021-01-12T13:56:07Z", "message": "Fixed signedness for the power factor\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}, "afterCommit": {"oid": "bc20f1782c07759122ac67dc2a3f5f83ff61bda3", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/bc20f1782c07759122ac67dc2a3f5f83ff61bda3", "committedDate": "2021-02-01T18:01:27Z", "message": "Update license headers\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMDQ5MzMw", "url": "https://github.com/openhab/openhab-addons/pull/9174#pullrequestreview-581049330", "createdAt": "2021-02-02T07:28:33Z", "commit": {"oid": "bc20f1782c07759122ac67dc2a3f5f83ff61bda3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3883, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}