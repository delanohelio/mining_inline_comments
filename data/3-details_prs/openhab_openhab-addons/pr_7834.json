{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MjYyNjc1", "number": 7834, "title": "[ntp] Clean up", "bodyText": "Add null annotations\nSuppress one unused configutation setting (locale)\nGet the default timezone from TimeZoneProvider\nMap thing configuration and channel configuration to classes\nUse constructor injection for the discovery service\nSigned-off-by: Laurent Garnier lg.hc@free.fr", "createdAt": "2020-06-01T23:18:24Z", "url": "https://github.com/openhab/openhab-addons/pull/7834", "merged": true, "mergeCommit": {"oid": "abc926ddd03ca667b6e1dfb1b37cb77491154f79"}, "closed": true, "closedAt": "2020-06-19T20:53:59Z", "author": {"login": "lolodomo"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnPm0HAH2gAyNDI2MjYyNjc1OjA0YWYxOTU2ODczMWMzNTQ5NWI1NGFmMWI2MzYzMjZjY2I1YzhjYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcs3uqnAFqTQzNDI4MzE4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/04af19568731c35495b54af1b636326ccb5c8ca0", "committedDate": "2020-06-02T07:20:06Z", "message": "[ntp] Clean up\n\nAdd null annotations\nSuppress one unused configutation setting (locale)\nGet the default timezone from TimeZoneProvider\nMap thing configuration and channel configuration to classes\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f89095c2de5be70934f8730c5d8965cec4128bf", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/6f89095c2de5be70934f8730c5d8965cec4128bf", "committedDate": "2020-06-01T23:15:07Z", "message": "[ntp] Clean up\n\nAdd null annotations\nSuppress one unused configutation setting (locale)\nGet the default timezone from TimeZoneProvider\nMap thing configuration and channel configuration to classes\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}, "afterCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/04af19568731c35495b54af1b636326ccb5c8ca0", "committedDate": "2020-06-02T07:20:06Z", "message": "[ntp] Clean up\n\nAdd null annotations\nSuppress one unused configutation setting (locale)\nGet the default timezone from TimeZoneProvider\nMap thing configuration and channel configuration to classes\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyOTE2NDM1", "url": "https://github.com/openhab/openhab-addons/pull/7834#pullrequestreview-422916435", "createdAt": "2020-06-02T17:49:47Z", "commit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0OTo0N1rOGd9CMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo1ODozNVrOGd9Wzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MTg3Mg==", "bodyText": "Why don't you use something like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @Nullable String hostname;\n          \n          \n            \n                public String hostname = \"0.pool.ntp.org\";\n          \n      \n    \n    \n  \n\nYou can skip the whole logic below then and directly access the fields in the code. If the user sets set parameter, the default is overwritten.", "url": "https://github.com/openhab/openhab-addons/pull/7834#discussion_r434061872", "createdAt": "2020-06-02T17:49:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/config/NtpThingConfiguration.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ntp.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link NtpThingConfiguration} is responsible for holding\n+ * the thing configuration settings\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NtpThingConfiguration {\n+\n+    public static final String HOSTNAME = \"hostname\";\n+    public static final String REFRESH_INTERVAL = \"refreshInterval\";\n+    public static final String REFRESH_NTP = \"refreshNtp\";\n+    public static final String SERVER_PORT = \"serverPort\";\n+    public static final String TIMEZONE = \"timeZone\";\n+\n+    private static final String DEFAULT_SERVER_HOSTNAME = \"0.pool.ntp.org\";\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+    private static final int DEFAULT_REFRESH_NTP = 30;\n+    private static final int DEFAULT_SERVER_PORT = 123;\n+\n+    public @Nullable String hostname;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MjI3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @Nullable Integer refreshInterval;\n          \n          \n            \n                public int refreshInterval = 60;", "url": "https://github.com/openhab/openhab-addons/pull/7834#discussion_r434062271", "createdAt": "2020-06-02T17:50:26Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/config/NtpThingConfiguration.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ntp.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link NtpThingConfiguration} is responsible for holding\n+ * the thing configuration settings\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NtpThingConfiguration {\n+\n+    public static final String HOSTNAME = \"hostname\";\n+    public static final String REFRESH_INTERVAL = \"refreshInterval\";\n+    public static final String REFRESH_NTP = \"refreshNtp\";\n+    public static final String SERVER_PORT = \"serverPort\";\n+    public static final String TIMEZONE = \"timeZone\";\n+\n+    private static final String DEFAULT_SERVER_HOSTNAME = \"0.pool.ntp.org\";\n+    private static final int DEFAULT_REFRESH_INTERVAL = 60;\n+    private static final int DEFAULT_REFRESH_NTP = 30;\n+    private static final int DEFAULT_SERVER_PORT = 123;\n+\n+    public @Nullable String hostname;\n+    public @Nullable Integer refreshInterval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MzM0NA==", "bodyText": "Why is this needed at all? It only calls the method it overrides", "url": "https://github.com/openhab/openhab-addons/pull/7834#discussion_r434063344", "createdAt": "2020-06-02T17:52:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/discovery/NtpDiscovery.java", "diffHunk": "@@ -44,12 +48,12 @@ public NtpDiscovery() throws IllegalArgumentException {\n     }\n \n     @Override\n-    protected void activate(Map<String, Object> configProperties) {\n+    protected void activate(@Nullable Map<String, @Nullable Object> configProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2Mzk2Mg==", "bodyText": "This looks wrong. Thomas's last name is \"Eichstaedt-Engelen\", so the spaces arounf the dash are wrong.", "url": "https://github.com/openhab/openhab-addons/pull/7834#discussion_r434063962", "createdAt": "2020-06-02T17:53:18Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/handler/NtpHandler.java", "diffHunk": "@@ -54,217 +54,183 @@\n  * to one of the channels.\n  *\n  * @author Marcel Verpaalen - Initial contribution OH2 ntp binding\n- * @author Thomas.Eichstaedt-Engelen OH1 ntp binding (getTime routine)\n+ * @author Thomas.Eichstaedt - Engelen OH1 ntp binding (getTime routine)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDQyMg==", "bodyText": "Since all values have reasonable defaults, you can skip null checks by using\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @Nullable NtpThingConfiguration configuration;\n          \n          \n            \n                private NtpThingConfiguration configuration = new NtpThingConfiguration();", "url": "https://github.com/openhab/openhab-addons/pull/7834#discussion_r434064422", "createdAt": "2020-06-02T17:54:08Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/handler/NtpHandler.java", "diffHunk": "@@ -54,217 +54,183 @@\n  * to one of the channels.\n  *\n  * @author Marcel Verpaalen - Initial contribution OH2 ntp binding\n- * @author Thomas.Eichstaedt-Engelen OH1 ntp binding (getTime routine)\n+ * @author Thomas.Eichstaedt - Engelen OH1 ntp binding (getTime routine)\n  * @author Markus Rathgeb - Add locale provider\n  * @author Erdoan Hadzhiyusein - Adapted the class to work with the new DateTimeType\n+ * @author Laurent Garnier - null annotations, TimeZoneProvider, configuration settings cleanup\n  */\n-\n+@NonNullByDefault\n public class NtpHandler extends BaseThingHandler {\n \n-    private final Logger logger = LoggerFactory.getLogger(NtpHandler.class);\n-\n     /** timeout for requests to the NTP server */\n     private static final int NTP_TIMEOUT = 30000;\n \n     public static final String DATE_PATTERN_WITH_TZ = \"yyyy-MM-dd HH:mm:ss z\";\n+    private static final DateTimeFormatter DATE_FORMATTER_WITH_TZ = DateTimeFormatter.ofPattern(DATE_PATTERN_WITH_TZ);\n \n-    /** for logging purposes */\n-    private final DateFormat SDF = new SimpleDateFormat(DATE_PATTERN_WITH_TZ);\n+    private final Logger logger = LoggerFactory.getLogger(NtpHandler.class);\n \n     /** for publish purposes */\n     private DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern(DATE_PATTERN_WITH_TZ);\n \n-    private final LocaleProvider localeProvider;\n+    private @Nullable NtpThingConfiguration configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NTIyOA==", "bodyText": "Why not use\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    NtpThingConfiguration config = getConfigAs(NtpThingConfiguration.class);\n          \n          \n            \n                    configuration = config;\n          \n          \n            \n                    configuration = getConfigAs(NtpThingConfiguration.class);", "url": "https://github.com/openhab/openhab-addons/pull/7834#discussion_r434065228", "createdAt": "2020-06-02T17:55:27Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/handler/NtpHandler.java", "diffHunk": "@@ -54,217 +54,183 @@\n  * to one of the channels.\n  *\n  * @author Marcel Verpaalen - Initial contribution OH2 ntp binding\n- * @author Thomas.Eichstaedt-Engelen OH1 ntp binding (getTime routine)\n+ * @author Thomas.Eichstaedt - Engelen OH1 ntp binding (getTime routine)\n  * @author Markus Rathgeb - Add locale provider\n  * @author Erdoan Hadzhiyusein - Adapted the class to work with the new DateTimeType\n+ * @author Laurent Garnier - null annotations, TimeZoneProvider, configuration settings cleanup\n  */\n-\n+@NonNullByDefault\n public class NtpHandler extends BaseThingHandler {\n \n-    private final Logger logger = LoggerFactory.getLogger(NtpHandler.class);\n-\n     /** timeout for requests to the NTP server */\n     private static final int NTP_TIMEOUT = 30000;\n \n     public static final String DATE_PATTERN_WITH_TZ = \"yyyy-MM-dd HH:mm:ss z\";\n+    private static final DateTimeFormatter DATE_FORMATTER_WITH_TZ = DateTimeFormatter.ofPattern(DATE_PATTERN_WITH_TZ);\n \n-    /** for logging purposes */\n-    private final DateFormat SDF = new SimpleDateFormat(DATE_PATTERN_WITH_TZ);\n+    private final Logger logger = LoggerFactory.getLogger(NtpHandler.class);\n \n     /** for publish purposes */\n     private DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern(DATE_PATTERN_WITH_TZ);\n \n-    private final LocaleProvider localeProvider;\n+    private @Nullable NtpThingConfiguration configuration;\n \n-    ScheduledFuture<?> refreshJob;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n \n-    /** NTP host */\n-    private String hostname;\n-    /** NTP server port */\n-    private BigDecimal port;\n-    /** refresh interval */\n-    private BigDecimal refreshInterval;\n-    /** NTP refresh frequency */\n-    private BigDecimal refreshNtp = new BigDecimal(0);\n-    /** Timezone */\n-    private TimeZone timeZone;\n-    /** Locale */\n-    private Locale locale;\n+    private ZoneId defaultTimeZoneId;\n+    private ZoneId timeZoneId;\n \n     /** NTP refresh counter */\n     private int refreshNtpCount = 0;\n     /** NTP system time delta */\n     private long timeOffset;\n \n-    private ChannelUID dateTimeChannelUID;\n-    private ChannelUID stringChannelUID;\n-\n-    public NtpHandler(final Thing thing, final LocaleProvider localeProvider) {\n+    public NtpHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n         super(thing);\n-        this.localeProvider = localeProvider;\n+        this.defaultTimeZoneId = timeZoneProvider.getTimeZone();\n+        this.timeZoneId = defaultTimeZoneId;\n     }\n \n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n-        // No specific commands tied to this, but we will trigger an update\n-        this.refreshNtpCount = 0;\n-        refreshTimeDate();\n+        if (command == RefreshType.REFRESH) {\n+            logger.debug(\"Refreshing channel '{}' for '{}'.\", channelUID.getId(), getThing().getUID());\n+            refreshTimeDate();\n+        }\n     }\n \n     @Override\n     public void initialize() {\n-        try {\n-            logger.debug(\"Initializing NTP handler for '{}'.\", getThing().getUID());\n+        logger.debug(\"Initializing NTP handler for '{}'.\", getThing().getUID());\n \n-            Configuration config = getThing().getConfiguration();\n-            hostname = config.get(PROPERTY_NTP_SERVER_HOST).toString();\n-            port = (BigDecimal) config.get(PROPERTY_NTP_SERVER_PORT);\n-            refreshInterval = (BigDecimal) config.get(PROPERTY_REFRESH_INTERVAL);\n-            refreshNtp = (BigDecimal) config.get(PROPERTY_REFRESH_NTP);\n-            refreshNtpCount = 0;\n+        NtpThingConfiguration config = getConfigAs(NtpThingConfiguration.class);\n+        configuration = config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NTg2OQ==", "bodyText": "If you use the defaults directly, you can access the fields here  and omit most of the null checks/function calls.", "url": "https://github.com/openhab/openhab-addons/pull/7834#discussion_r434065869", "createdAt": "2020-06-02T17:56:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/handler/NtpHandler.java", "diffHunk": "@@ -54,217 +54,183 @@\n  * to one of the channels.\n  *\n  * @author Marcel Verpaalen - Initial contribution OH2 ntp binding\n- * @author Thomas.Eichstaedt-Engelen OH1 ntp binding (getTime routine)\n+ * @author Thomas.Eichstaedt - Engelen OH1 ntp binding (getTime routine)\n  * @author Markus Rathgeb - Add locale provider\n  * @author Erdoan Hadzhiyusein - Adapted the class to work with the new DateTimeType\n+ * @author Laurent Garnier - null annotations, TimeZoneProvider, configuration settings cleanup\n  */\n-\n+@NonNullByDefault\n public class NtpHandler extends BaseThingHandler {\n \n-    private final Logger logger = LoggerFactory.getLogger(NtpHandler.class);\n-\n     /** timeout for requests to the NTP server */\n     private static final int NTP_TIMEOUT = 30000;\n \n     public static final String DATE_PATTERN_WITH_TZ = \"yyyy-MM-dd HH:mm:ss z\";\n+    private static final DateTimeFormatter DATE_FORMATTER_WITH_TZ = DateTimeFormatter.ofPattern(DATE_PATTERN_WITH_TZ);\n \n-    /** for logging purposes */\n-    private final DateFormat SDF = new SimpleDateFormat(DATE_PATTERN_WITH_TZ);\n+    private final Logger logger = LoggerFactory.getLogger(NtpHandler.class);\n \n     /** for publish purposes */\n     private DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern(DATE_PATTERN_WITH_TZ);\n \n-    private final LocaleProvider localeProvider;\n+    private @Nullable NtpThingConfiguration configuration;\n \n-    ScheduledFuture<?> refreshJob;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n \n-    /** NTP host */\n-    private String hostname;\n-    /** NTP server port */\n-    private BigDecimal port;\n-    /** refresh interval */\n-    private BigDecimal refreshInterval;\n-    /** NTP refresh frequency */\n-    private BigDecimal refreshNtp = new BigDecimal(0);\n-    /** Timezone */\n-    private TimeZone timeZone;\n-    /** Locale */\n-    private Locale locale;\n+    private ZoneId defaultTimeZoneId;\n+    private ZoneId timeZoneId;\n \n     /** NTP refresh counter */\n     private int refreshNtpCount = 0;\n     /** NTP system time delta */\n     private long timeOffset;\n \n-    private ChannelUID dateTimeChannelUID;\n-    private ChannelUID stringChannelUID;\n-\n-    public NtpHandler(final Thing thing, final LocaleProvider localeProvider) {\n+    public NtpHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n         super(thing);\n-        this.localeProvider = localeProvider;\n+        this.defaultTimeZoneId = timeZoneProvider.getTimeZone();\n+        this.timeZoneId = defaultTimeZoneId;\n     }\n \n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n-        // No specific commands tied to this, but we will trigger an update\n-        this.refreshNtpCount = 0;\n-        refreshTimeDate();\n+        if (command == RefreshType.REFRESH) {\n+            logger.debug(\"Refreshing channel '{}' for '{}'.\", channelUID.getId(), getThing().getUID());\n+            refreshTimeDate();\n+        }\n     }\n \n     @Override\n     public void initialize() {\n-        try {\n-            logger.debug(\"Initializing NTP handler for '{}'.\", getThing().getUID());\n+        logger.debug(\"Initializing NTP handler for '{}'.\", getThing().getUID());\n \n-            Configuration config = getThing().getConfiguration();\n-            hostname = config.get(PROPERTY_NTP_SERVER_HOST).toString();\n-            port = (BigDecimal) config.get(PROPERTY_NTP_SERVER_PORT);\n-            refreshInterval = (BigDecimal) config.get(PROPERTY_REFRESH_INTERVAL);\n-            refreshNtp = (BigDecimal) config.get(PROPERTY_REFRESH_NTP);\n-            refreshNtpCount = 0;\n+        NtpThingConfiguration config = getConfigAs(NtpThingConfiguration.class);\n+        configuration = config;\n \n-            try {\n-                Object timeZoneConfigValue = config.get(PROPERTY_TIMEZONE);\n-                if (timeZoneConfigValue != null) {\n-                    timeZone = TimeZone.getTimeZone(timeZoneConfigValue.toString());\n-                } else {\n-                    timeZone = TimeZone.getDefault();\n-                    logger.debug(\"{} using default TZ '{}', because configuration property '{}' is null.\",\n-                            getThing().getUID(), timeZone, PROPERTY_TIMEZONE);\n-                }\n-            } catch (Exception e) {\n-                timeZone = TimeZone.getDefault();\n-                logger.debug(\"{} using default TZ '{}' due to an occurred exception: \", getThing().getUID(), timeZone,\n-                        e);\n-            }\n+        refreshNtpCount = 0;\n \n+        String timeZoneConfigValue = config.getTimeZone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NjE0NQ==", "bodyText": "Is it necessary to catch Exception here?", "url": "https://github.com/openhab/openhab-addons/pull/7834#discussion_r434066145", "createdAt": "2020-06-02T17:56:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/handler/NtpHandler.java", "diffHunk": "@@ -54,217 +54,183 @@\n  * to one of the channels.\n  *\n  * @author Marcel Verpaalen - Initial contribution OH2 ntp binding\n- * @author Thomas.Eichstaedt-Engelen OH1 ntp binding (getTime routine)\n+ * @author Thomas.Eichstaedt - Engelen OH1 ntp binding (getTime routine)\n  * @author Markus Rathgeb - Add locale provider\n  * @author Erdoan Hadzhiyusein - Adapted the class to work with the new DateTimeType\n+ * @author Laurent Garnier - null annotations, TimeZoneProvider, configuration settings cleanup\n  */\n-\n+@NonNullByDefault\n public class NtpHandler extends BaseThingHandler {\n \n-    private final Logger logger = LoggerFactory.getLogger(NtpHandler.class);\n-\n     /** timeout for requests to the NTP server */\n     private static final int NTP_TIMEOUT = 30000;\n \n     public static final String DATE_PATTERN_WITH_TZ = \"yyyy-MM-dd HH:mm:ss z\";\n+    private static final DateTimeFormatter DATE_FORMATTER_WITH_TZ = DateTimeFormatter.ofPattern(DATE_PATTERN_WITH_TZ);\n \n-    /** for logging purposes */\n-    private final DateFormat SDF = new SimpleDateFormat(DATE_PATTERN_WITH_TZ);\n+    private final Logger logger = LoggerFactory.getLogger(NtpHandler.class);\n \n     /** for publish purposes */\n     private DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern(DATE_PATTERN_WITH_TZ);\n \n-    private final LocaleProvider localeProvider;\n+    private @Nullable NtpThingConfiguration configuration;\n \n-    ScheduledFuture<?> refreshJob;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n \n-    /** NTP host */\n-    private String hostname;\n-    /** NTP server port */\n-    private BigDecimal port;\n-    /** refresh interval */\n-    private BigDecimal refreshInterval;\n-    /** NTP refresh frequency */\n-    private BigDecimal refreshNtp = new BigDecimal(0);\n-    /** Timezone */\n-    private TimeZone timeZone;\n-    /** Locale */\n-    private Locale locale;\n+    private ZoneId defaultTimeZoneId;\n+    private ZoneId timeZoneId;\n \n     /** NTP refresh counter */\n     private int refreshNtpCount = 0;\n     /** NTP system time delta */\n     private long timeOffset;\n \n-    private ChannelUID dateTimeChannelUID;\n-    private ChannelUID stringChannelUID;\n-\n-    public NtpHandler(final Thing thing, final LocaleProvider localeProvider) {\n+    public NtpHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n         super(thing);\n-        this.localeProvider = localeProvider;\n+        this.defaultTimeZoneId = timeZoneProvider.getTimeZone();\n+        this.timeZoneId = defaultTimeZoneId;\n     }\n \n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n-        // No specific commands tied to this, but we will trigger an update\n-        this.refreshNtpCount = 0;\n-        refreshTimeDate();\n+        if (command == RefreshType.REFRESH) {\n+            logger.debug(\"Refreshing channel '{}' for '{}'.\", channelUID.getId(), getThing().getUID());\n+            refreshTimeDate();\n+        }\n     }\n \n     @Override\n     public void initialize() {\n-        try {\n-            logger.debug(\"Initializing NTP handler for '{}'.\", getThing().getUID());\n+        logger.debug(\"Initializing NTP handler for '{}'.\", getThing().getUID());\n \n-            Configuration config = getThing().getConfiguration();\n-            hostname = config.get(PROPERTY_NTP_SERVER_HOST).toString();\n-            port = (BigDecimal) config.get(PROPERTY_NTP_SERVER_PORT);\n-            refreshInterval = (BigDecimal) config.get(PROPERTY_REFRESH_INTERVAL);\n-            refreshNtp = (BigDecimal) config.get(PROPERTY_REFRESH_NTP);\n-            refreshNtpCount = 0;\n+        NtpThingConfiguration config = getConfigAs(NtpThingConfiguration.class);\n+        configuration = config;\n \n-            try {\n-                Object timeZoneConfigValue = config.get(PROPERTY_TIMEZONE);\n-                if (timeZoneConfigValue != null) {\n-                    timeZone = TimeZone.getTimeZone(timeZoneConfigValue.toString());\n-                } else {\n-                    timeZone = TimeZone.getDefault();\n-                    logger.debug(\"{} using default TZ '{}', because configuration property '{}' is null.\",\n-                            getThing().getUID(), timeZone, PROPERTY_TIMEZONE);\n-                }\n-            } catch (Exception e) {\n-                timeZone = TimeZone.getDefault();\n-                logger.debug(\"{} using default TZ '{}' due to an occurred exception: \", getThing().getUID(), timeZone,\n-                        e);\n-            }\n+        refreshNtpCount = 0;\n \n+        String timeZoneConfigValue = config.getTimeZone();\n+        if (timeZoneConfigValue != null) {\n+            logger.debug(\"{} with timezone '{}' set in configuration setting '{}'\", getThing().getUID(),\n+                    timeZoneConfigValue, NtpThingConfiguration.TIMEZONE);\n             try {\n-                Object localeStringConfigValue = config.get(PROPERTY_LOCALE);\n-                if (localeStringConfigValue != null) {\n-                    locale = new Locale(localeStringConfigValue.toString());\n-                } else {\n-                    locale = localeProvider.getLocale();\n-                    logger.debug(\"{} using default locale '{}', because configuration property '{}' is null.\",\n-                            getThing().getUID(), locale, PROPERTY_LOCALE);\n-                }\n+                timeZoneId = TimeZone.getTimeZone(timeZoneConfigValue).toZoneId();\n             } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NzE1MA==", "bodyText": "I would prefer to keep the constants here, as that is what is most common in other bindings.", "url": "https://github.com/openhab/openhab-addons/pull/7834#discussion_r434067150", "createdAt": "2020-06-02T17:58:35Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.ntp/src/main/java/org/openhab/binding/ntp/internal/NtpBindingConstants.java", "diffHunk": "@@ -37,14 +37,5 @@\n     public static final String CHANNEL_DATE_TIME = \"dateTime\";\n     public static final String CHANNEL_STRING = \"string\";\n \n-    // Custom Properties\n-    public static final String PROPERTY_NTP_SERVER_HOST = \"hostname\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04af19568731c35495b54af1b636326ccb5c8ca0"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "888c605d2884309f2960aa87debd8fdf9e1bc817", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/888c605d2884309f2960aa87debd8fdf9e1bc817", "committedDate": "2020-06-02T22:23:43Z", "message": "All review comments considered except one\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}, "afterCommit": {"oid": "18f34f27fd4b1380d90342e715cdee5310652de5", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/18f34f27fd4b1380d90342e715cdee5310652de5", "committedDate": "2020-06-02T23:17:16Z", "message": "All review comments considered\n\nUse constructor injector for the discovery service\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0e2029de17605075265614185e3bf992d40d027", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/c0e2029de17605075265614185e3bf992d40d027", "committedDate": "2020-06-02T23:27:08Z", "message": "All review comments considered\n\nUse constructor injection for the discovery service\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18f34f27fd4b1380d90342e715cdee5310652de5", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/18f34f27fd4b1380d90342e715cdee5310652de5", "committedDate": "2020-06-02T23:17:16Z", "message": "All review comments considered\n\nUse constructor injector for the discovery service\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}, "afterCommit": {"oid": "c0e2029de17605075265614185e3bf992d40d027", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/c0e2029de17605075265614185e3bf992d40d027", "committedDate": "2020-06-02T23:27:08Z", "message": "All review comments considered\n\nUse constructor injection for the discovery service\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bf80ae6a2a5edf7e481622062d1c683f27d78c7", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/7bf80ae6a2a5edf7e481622062d1c683f27d78c7", "committedDate": "2020-06-08T15:58:14Z", "message": "Pass ZoneId rather than TimeZoneProvider to the thing handler\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4791b0eb84ccb794bfa57b61d4bd0995171b7228", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/4791b0eb84ccb794bfa57b61d4bd0995171b7228", "committedDate": "2020-06-09T07:25:44Z", "message": "Revert to keep TimeZoneProvider on the thing handler\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cc9c724fe3d830ffbeab399710332bef8fd78da", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/7cc9c724fe3d830ffbeab399710332bef8fd78da", "committedDate": "2020-06-09T12:26:44Z", "message": "Use TimeZoneProvider each time the timezone is required\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a6afd5d0886ca001672f30a06e0eea881b171d1", "author": {"user": {"login": "lolodomo", "name": "lolodomo"}}, "url": "https://github.com/openhab/openhab-addons/commit/3a6afd5d0886ca001672f30a06e0eea881b171d1", "committedDate": "2020-06-10T17:12:46Z", "message": "Call activate in the discovery service constructor\n\nSigned-off-by: Laurent Garnier <lg.hc@free.fr>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDA2NTAw", "url": "https://github.com/openhab/openhab-addons/pull/7834#pullrequestreview-429406500", "createdAt": "2020-06-12T01:33:48Z", "commit": {"oid": "3a6afd5d0886ca001672f30a06e0eea881b171d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjgzMTgy", "url": "https://github.com/openhab/openhab-addons/pull/7834#pullrequestreview-434283182", "createdAt": "2020-06-19T18:54:30Z", "commit": {"oid": "3a6afd5d0886ca001672f30a06e0eea881b171d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 516, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}