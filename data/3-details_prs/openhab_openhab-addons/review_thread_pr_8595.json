{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MDYzODAz", "number": 8595, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowNjoyNVrOEp-e3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjoxODo1MlrOEqA2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUwNzgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowNjoyNVrOHb-R7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowNjoyNVrOHb-R7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5Mzk5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ActionResultControler implements Runnable {\n          \n          \n            \n            public class ActionResultController implements Runnable {", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499093998", "createdAt": "2020-10-03T00:06:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUwNzk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowNjozNVrOHb-SBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowNjozNVrOHb-SBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDAyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private PostResponse postResponse;\n          \n          \n            \n                private final PostResponse postResponse;", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094022", "createdAt": "2020-10-03T00:06:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(ActionResultControler.class);\n+\n+    private final VocHttpApi service;\n+    private final ScheduledExecutorService scheduler;\n+    private PostResponse postResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUwODE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowNjo0NVrOHb-SFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowNjo0NVrOHb-SFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDAzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ThingHandler vehicle;\n          \n          \n            \n                private final ThingHandler vehicle;", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094039", "createdAt": "2020-10-03T00:06:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(ActionResultControler.class);\n+\n+    private final VocHttpApi service;\n+    private final ScheduledExecutorService scheduler;\n+    private PostResponse postResponse;\n+\n+    private ThingHandler vehicle;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUwODY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowNzoxOFrOHb-SZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowNzoxOFrOHb-SZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDExNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.info(\"Action {} for vehicle {} resulted : {}.\", postResponse.serviceType.toString(),\n          \n          \n            \n                                    postResponse.vehicleId, postResponse.status.toString());\n          \n          \n            \n                            logger.debug(\"Action {} for vehicle {} resulted : {}.\", postResponse.serviceType,\n          \n          \n            \n                                    postResponse.vehicleId, postResponse.status);", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094116", "createdAt": "2020-10-03T00:07:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(ActionResultControler.class);\n+\n+    private final VocHttpApi service;\n+    private final ScheduledExecutorService scheduler;\n+    private PostResponse postResponse;\n+\n+    private ThingHandler vehicle;\n+\n+    public ActionResultControler(VocHttpApi service, PostResponse postResponse, ScheduledExecutorService scheduler,\n+            ThingHandler vehicle) {\n+        this.postResponse = postResponse;\n+        this.service = service;\n+        this.scheduler = scheduler;\n+        this.vehicle = vehicle;\n+    }\n+\n+    @Override\n+    public void run() {\n+        switch (postResponse.status) {\n+            case SUCCESSFULL:\n+            case FAILED:\n+                logger.info(\"Action {} for vehicle {} resulted : {}.\", postResponse.serviceType.toString(),\n+                        postResponse.vehicleId, postResponse.status.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUwOTY3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowODoyMlrOHb-S9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDowODoyMlrOHb-S9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDI2MQ==", "bodyText": "If you received an interrupt you shouldn't schedule more things. Typically an interrupt indicates a shutdown is occurring.", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094261", "createdAt": "2020-10-03T00:08:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/ActionResultControler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.volvooncall.internal.api;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException;\n+import org.openhab.binding.volvooncall.internal.VolvoOnCallException.ErrorType;\n+import org.openhab.binding.volvooncall.internal.dto.PostResponse;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ActionResultControler} is responsible for triggering information\n+ * update after a post has been submitted to the webservice.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionResultControler implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(ActionResultControler.class);\n+\n+    private final VocHttpApi service;\n+    private final ScheduledExecutorService scheduler;\n+    private PostResponse postResponse;\n+\n+    private ThingHandler vehicle;\n+\n+    public ActionResultControler(VocHttpApi service, PostResponse postResponse, ScheduledExecutorService scheduler,\n+            ThingHandler vehicle) {\n+        this.postResponse = postResponse;\n+        this.service = service;\n+        this.scheduler = scheduler;\n+        this.vehicle = vehicle;\n+    }\n+\n+    @Override\n+    public void run() {\n+        switch (postResponse.status) {\n+            case SUCCESSFULL:\n+            case FAILED:\n+                logger.info(\"Action {} for vehicle {} resulted : {}.\", postResponse.serviceType.toString(),\n+                        postResponse.vehicleId, postResponse.status.toString());\n+                vehicle.handleCommand(vehicle.getThing().getChannels().get(0).getUID(), RefreshType.REFRESH);\n+                break;\n+            default:\n+                try {\n+                    postResponse = service.getURL(postResponse.serviceURL, PostResponse.class);\n+                    scheduler.schedule(this, 10000, TimeUnit.MILLISECONDS);\n+                } catch (VolvoOnCallException e) {\n+                    if (e.getType() == ErrorType.SERVICE_UNAVAILABLE || e.getType() == ErrorType.INTERRUPTED) {\n+                        scheduler.schedule(this, 10000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUxNDkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/dto/HvBattery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoxMzozNFrOHb-V0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwNjozNjo1OVrOHb__JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDk5Mw==", "bodyText": "If this actually works then I have no problem with this change.", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499094993", "createdAt": "2020-10-03T00:13:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/dto/HvBattery.java", "diffHunk": "@@ -26,7 +27,7 @@\n public class HvBattery {\n     public int hvBatteryLevel = UNDEFINED;\n     public int distanceToHVBatteryEmpty = UNDEFINED;\n-    public @NonNullByDefault({}) String hvBatteryChargeStatusDerived;\n+    public @NonNullByDefault({}) StringType hvBatteryChargeStatusDerived;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyMTk1Ng==", "bodyText": "Yes, it works, it's taken in charge by gson jsonDeserializer declaration.", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499121956", "createdAt": "2020-10-03T06:36:59Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/dto/HvBattery.java", "diffHunk": "@@ -26,7 +27,7 @@\n public class HvBattery {\n     public int hvBatteryLevel = UNDEFINED;\n     public int distanceToHVBatteryEmpty = UNDEFINED;\n-    public @NonNullByDefault({}) String hvBatteryChargeStatusDerived;\n+    public @NonNullByDefault({}) StringType hvBatteryChargeStatusDerived;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NDk5Mw=="}, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyMjcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/resources/OH-INF/thing/vehicle.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyMToyOFrOHb-aFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwNjozODoxNlrOHb__aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjA4Ng==", "bodyText": "Why are the units in volume/distance instance of distance/volume? Is this just a Volvo thing?", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499096086", "createdAt": "2020-10-03T00:21:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/resources/OH-INF/thing/vehicle.xml", "diffHunk": "@@ -264,8 +266,8 @@\n \t<channel-type id=\"fuelConsumption\" advanced=\"true\">\n \t\t<item-type>Number</item-type>\n \t\t<label>Average Consumption</label>\n-\t\t<description>Indicates the average fuel consumption in L/100km</description>\n-\t\t<state pattern=\"%.1f L/100km\" readOnly=\"true\"></state>\n+\t\t<description>Indicates the average fuel consumption in l/100km</description>\n+\t\t<state pattern=\"%.1f l/100km\" readOnly=\"true\"></state>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyMjAyNA==", "bodyText": "Not especially Volvo, it more European to indicate fuel consumption / 100km - I saw that in US (or the rest of the world) it's different.", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499122024", "createdAt": "2020-10-03T06:38:16Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/resources/OH-INF/thing/vehicle.xml", "diffHunk": "@@ -264,8 +266,8 @@\n \t<channel-type id=\"fuelConsumption\" advanced=\"true\">\n \t\t<item-type>Number</item-type>\n \t\t<label>Average Consumption</label>\n-\t\t<description>Indicates the average fuel consumption in L/100km</description>\n-\t\t<state pattern=\"%.1f L/100km\" readOnly=\"true\"></state>\n+\t\t<description>Indicates the average fuel consumption in l/100km</description>\n+\t\t<state pattern=\"%.1f l/100km\" readOnly=\"true\"></state>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjA4Ng=="}, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyNDMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/handler/VolvoOnCallBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyMzoxN1rOHb-bCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyMzoxN1rOHb-bCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjMzMQ==", "bodyText": "Please catch specific exceptions, or at the very least catch RuntimeException instead.", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499096331", "createdAt": "2020-10-03T00:23:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/handler/VolvoOnCallBridgeHandler.java", "diffHunk": "@@ -58,144 +42,60 @@\n  */\n @NonNullByDefault\n public class VolvoOnCallBridgeHandler extends BaseBridgeHandler {\n-    private static final int REQUEST_TIMEOUT = (int) TimeUnit.SECONDS.toMillis(20);\n+\n     private final Logger logger = LoggerFactory.getLogger(VolvoOnCallBridgeHandler.class);\n-    private final Properties httpHeader = new Properties();\n-    private final List<ScheduledFuture<?>> pendingActions = new Stack<>();\n     private final Gson gson;\n+    private final HttpClient httpClient;\n \n-    private @NonNullByDefault({}) CustomerAccounts customerAccount;\n+    private @Nullable VocHttpApi api;\n \n-    public VolvoOnCallBridgeHandler(Bridge bridge) {\n+    public VolvoOnCallBridgeHandler(Bridge bridge, Gson gson, HttpClient httpClient) {\n         super(bridge);\n-\n-        httpHeader.put(\"cache-control\", \"no-cache\");\n-        httpHeader.put(\"content-type\", JSON_CONTENT_TYPE);\n-        httpHeader.put(\"x-device-id\", \"Device\");\n-        httpHeader.put(\"x-originator-type\", \"App\");\n-        httpHeader.put(\"x-os-type\", \"Android\");\n-        httpHeader.put(\"x-os-version\", \"22\");\n-        httpHeader.put(\"Accept\", \"*/*\");\n-\n-        gson = new GsonBuilder()\n-                .registerTypeAdapter(ZonedDateTime.class,\n-                        (JsonDeserializer<ZonedDateTime>) (json, type, jsonDeserializationContext) -> ZonedDateTime\n-                                .parse(json.getAsJsonPrimitive().getAsString().replaceAll(\"\\\\+0000\", \"Z\")))\n-                .registerTypeAdapter(OpenClosedType.class,\n-                        (JsonDeserializer<OpenClosedType>) (json, type,\n-                                jsonDeserializationContext) -> json.getAsBoolean() ? OpenClosedType.OPEN\n-                                        : OpenClosedType.CLOSED)\n-                .registerTypeAdapter(OnOffType.class,\n-                        (JsonDeserializer<OnOffType>) (json, type,\n-                                jsonDeserializationContext) -> json.getAsBoolean() ? OnOffType.ON : OnOffType.OFF)\n-                .create();\n+        this.gson = gson;\n+        this.httpClient = httpClient;\n     }\n \n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing VolvoOnCall API bridge handler.\");\n-        VolvoOnCallBridgeConfiguration configuration = getConfigAs(VolvoOnCallBridgeConfiguration.class);\n+        ApiBridgeConfiguration configuration = getConfigAs(ApiBridgeConfiguration.class);\n \n-        httpHeader.setProperty(\"Authorization\", configuration.getAuthorization());\n         try {\n-            customerAccount = getURL(SERVICE_URL + \"customeraccounts/\", CustomerAccounts.class);\n-            if (customerAccount.username != null) {\n-                updateStatus(ThingStatus.ONLINE);\n+            api = new VocHttpApi(configuration, gson, httpClient);\n+            CustomerAccounts account = api.getURL(\"customeraccounts/\", CustomerAccounts.class);\n+            if (account.username != null) {\n+                updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, account.username);\n             } else {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n-                        \"Incorrect username or password\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Incorrect login credentials\");\n             }\n-        } catch (JsonSyntaxException | VolvoOnCallException e) {\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDUyNTE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/handler/VehicleHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNDowNFrOHb-bfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QwMDoyNDowNFrOHb-bfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5NjQ0NQ==", "bodyText": "orphan semicolon", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499096445", "createdAt": "2020-10-03T00:24:04Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/handler/VehicleHandler.java", "diffHunk": "@@ -80,20 +82,77 @@\n     private final Logger logger = LoggerFactory.getLogger(VehicleHandler.class);\n     private final Map<String, String> activeOptions = new HashMap<>();\n     private @Nullable ScheduledFuture<?> refreshJob;\n+    private final List<ScheduledFuture<?>> pendingActions = new Stack<>();\n \n     private Vehicles vehicle = new Vehicles();\n     private VehiclePositionWrapper vehiclePosition = new VehiclePositionWrapper(new Position());\n     private Status vehicleStatus = new Status();\n     private @NonNullByDefault({}) VehicleConfiguration configuration;\n-    private Integer lastTripId = 0;\n+    private @NonNullByDefault({}) VolvoOnCallBridgeHandler bridgeHandler;\n+    private long lastTripId;\n \n     public VehicleHandler(Thing thing, VehicleStateDescriptionProvider stateDescriptionProvider) {\n         super(thing);\n     }\n \n-    private Map<String, String> discoverAttributes(VolvoOnCallBridgeHandler bridgeHandler)\n-            throws JsonSyntaxException, IOException, VolvoOnCallException {\n-        Attributes attributes = bridgeHandler.getURL(vehicle.attributesURL, Attributes.class);\n+    @Override\n+    public void initialize() {\n+        logger.trace(\"Initializing the Volvo On Call handler for {}\", getThing().getUID());\n+\n+        Bridge bridge = getBridge();\n+        initializeBridge(bridge == null ? null : bridge.getHandler(), bridge == null ? null : bridge.getStatus());\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"bridgeStatusChanged {} for thing {}\", bridgeStatusInfo, getThing().getUID());\n+\n+        Bridge bridge = getBridge();\n+        initializeBridge(bridge == null ? null : bridge.getHandler(), bridgeStatusInfo.getStatus());\n+    }\n+\n+    private void initializeBridge(@Nullable ThingHandler thingHandler, @Nullable ThingStatus bridgeStatus) {\n+        logger.debug(\"initializeBridge {} for thing {}\", bridgeStatus, getThing().getUID());\n+\n+        if (thingHandler != null && bridgeStatus != null) {\n+            bridgeHandler = (VolvoOnCallBridgeHandler) thingHandler;\n+            if (bridgeStatus == ThingStatus.ONLINE) {\n+                configuration = getConfigAs(VehicleConfiguration.class);\n+                VocHttpApi api = bridgeHandler.getApi();\n+                if (api != null) {\n+                    try {\n+                        vehicle = api.getURL(\"vehicles/\" + configuration.vin, Vehicles.class);\n+                        if (thing.getProperties().isEmpty()) {\n+                            Map<String, String> properties = discoverAttributes(api);\n+                            updateProperties(properties);\n+                        }\n+\n+                        activeOptions.putAll(\n+                                thing.getProperties().entrySet().stream().filter(p -> \"true\".equals(p.getValue()))\n+                                        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));\n+\n+                        if (thing.getProperties().containsKey(LAST_TRIP_ID)) {\n+                            lastTripId = Long.parseLong(thing.getProperties().get(LAST_TRIP_ID));\n+                        }\n+\n+                        updateStatus(ThingStatus.ONLINE);\n+                        startAutomaticRefresh(configuration.refresh, api);\n+                    } catch (VolvoOnCallException e) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.HANDLER_INITIALIZING_ERROR, e.getMessage());\n+                    }\n+\n+                }\n+                ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b68ddaf22b7c6a473866608429ee6a4dfe32ad"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDg5NTIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/VocHttpApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjoxODo1MlrOHcBR3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjoxODo1MlrOHcBR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0MzEzNA==", "bodyText": "Don't lose track of the source exception.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new VolvoOnCallException(new IOException(\"Unable to start Jetty HttpClient\"));\n          \n          \n            \n                        throw new VolvoOnCallException(new IOException(\"Unable to start Jetty HttpClient\", e));", "url": "https://github.com/openhab/openhab-addons/pull/8595#discussion_r499143134", "createdAt": "2020-10-03T12:18:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.volvooncall/src/main/java/org/openhab/binding/volvooncall/internal/api/VocHttpApi.java", "diffHunk": "@@ -60,14 +60,19 @@\n     private final HttpClient httpClient;\n     private final ApiBridgeConfiguration configuration;\n \n-    public VocHttpApi(ApiBridgeConfiguration configuration, Gson gson, HttpClient httpClient) throws Exception {\n+    public VocHttpApi(ApiBridgeConfiguration configuration, Gson gson, HttpClient httpClient)\n+            throws VolvoOnCallException {\n         this.gson = gson;\n         this.cache = new ExpiringCacheMap<>(120 * 1000);\n         this.configuration = configuration;\n         this.httpClient = httpClient;\n \n         httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT, \"openhab/voc_binding/\" + InstanceUUID.get()));\n-        httpClient.start();\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            throw new VolvoOnCallException(new IOException(\"Unable to start Jetty HttpClient\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a4c9c9947b62af47d82fc4cd26203db772b70c"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4384, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}