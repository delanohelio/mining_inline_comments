{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDUxMTQ1", "number": 8634, "title": "[modbus] Add convenience class for ThingHandlers", "bodyText": "The bindings extending the modbus binding have some redundant code in their handlers. In particular:\n\nRetrieve the ModbusCommunicationInterface\n\nCheck if a parent bridge is configured\nCheck if the parent bridge is a modbus bridge\nCheck if the ModbusCommunicationInterface is not null\n\n\nTake care that each regular poller is unregistered when the handler is disposed\nTake care that each one time poller is cancelled when the handler is disposed\n\nThe abstract class introduced in this PR handles the above points. It would reduce complexity in the extending bindings of dozens of lines. An example of how simple a handler could become, can be found in this modbus extension, I'm working on.\n@ssalonen As this is the first time I got in touch with Modbus and the modbus binding, I might have overlooked something. WDYT?", "createdAt": "2020-10-02T17:51:59Z", "url": "https://github.com/openhab/openhab-addons/pull/8634", "merged": true, "mergeCommit": {"oid": "d0b5267ff33a4e7d4c8272320f14ec7b4041ac11"}, "closed": true, "closedAt": "2020-11-24T02:38:08Z", "author": {"login": "fwolter"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXV-wngFqTUxOTkyMzMxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfgcUhgFqTUzNzAzMjcyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5OTIzMzEx", "url": "https://github.com/openhab/openhab-addons/pull/8634#pullrequestreview-519923311", "createdAt": "2020-10-29T17:45:03Z", "commit": {"oid": "662d864aaefab2d0ec87c69be22c427ec8494af8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NTowM1rOHqniLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0OToyMFrOHqntxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0OTk2NA==", "bodyText": "huh?", "url": "https://github.com/openhab/openhab-addons/pull/8634#discussion_r514449964", "createdAt": "2020-10-29T17:45:03Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+\n+/**\n+ * This is a convenience class to interact with the Thing's {@link ModbusCommunicationInterface}.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public abstract class BaseModbusThingHandler extends BaseThingHandler {\n+    private List<PollTask> periodicPollers = new ArrayList<>();\n+    private List<Future<?>> oneTimePollers = new ArrayList<>();\n+    private boolean initialized;\n+\n+    public BaseModbusThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * This method must be invoked in the base class' initialize() method before any other initialization is done.\n+     * It will throw an unchecked exception if the {@link ModbusCommunicationInterface} is not accessible (fail-fast).\n+     * This prevents any further initialization of the Thing. The framework will set the ThingStatus to\n+     * HANDLER_INITIALIZING_ERROR and display an appropriate error message.\n+     */\n+    @Override\n+    public void initialize() {\n+        getModbus();\n+\n+        initialized = true;\n+    }\n+\n+    /**\n+     * Register regularly polled task. The method returns immediately, and the execution of the poll task will happen in\n+     * the background.\n+     *\n+     * One can register only one regular poll task for triplet of (endpoint, request, callback).\n+     *\n+     * @param request request to send\n+     * @param pollPeriodMillis poll interval, in milliseconds\n+     * @param initialDelayMillis initial delay before starting polling, in milliseconds\n+     * @param callback callback to call with data\n+     * @param callback callback to call in case of failure\n+     * @return poll task representing the regular poll\n+     * @throws IllegalStateException when this communication has been closed already\n+     */\n+    public PollTask registerRegularPoll(ModbusReadRequestBlueprint request, long pollPeriodMillis,\n+            long initialDelayMillis, ModbusReadCallback resultCallback,\n+            ModbusFailureCallback<ModbusReadRequestBlueprint> failureCallback) {\n+        checkInitialized();\n+\n+        PollTask task = getModbus().registerRegularPoll(request, pollPeriodMillis, initialDelayMillis, resultCallback,\n+                failureCallback);\n+        periodicPollers.add(task);\n+\n+        return task;\n+    }\n+\n+    /**\n+     * Unregister regularly polled task\n+     *\n+     * If this communication interface is closed already, the method returns immediately with false return value\n+     *\n+     * @param task poll task to unregister\n+     * @return whether poll task was unregistered. Poll task is not unregistered in case of unexpected errors or\n+     *         in the case where the poll task is not registered in the first place\n+     * @throws SBCException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662d864aaefab2d0ec87c69be22c427ec8494af8"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MjkzNQ==", "bodyText": "I can see potential thread safety issues since the methods are not synchronised.\nEither use thread-safe collections or make methods concurrent?", "url": "https://github.com/openhab/openhab-addons/pull/8634#discussion_r514452935", "createdAt": "2020-10-29T17:49:20Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+\n+/**\n+ * This is a convenience class to interact with the Thing's {@link ModbusCommunicationInterface}.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public abstract class BaseModbusThingHandler extends BaseThingHandler {\n+    private List<PollTask> periodicPollers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662d864aaefab2d0ec87c69be22c427ec8494af8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c54397fbde8ec7054d0cb290aab3e9e7a07a73", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/48c54397fbde8ec7054d0cb290aab3e9e7a07a73", "committedDate": "2020-11-01T15:54:53Z", "message": "[modbus] Add convenience class for ThingHandlers\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ea109727d4695e1968e04c2bce004e7df2060f", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/45ea109727d4695e1968e04c2bce004e7df2060f", "committedDate": "2020-11-01T15:54:54Z", "message": "Address review findings\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "662d864aaefab2d0ec87c69be22c427ec8494af8", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/662d864aaefab2d0ec87c69be22c427ec8494af8", "committedDate": "2020-10-02T17:26:41Z", "message": "[modbus] Add convenience class for ThingHandlers"}, "afterCommit": {"oid": "45ea109727d4695e1968e04c2bce004e7df2060f", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/45ea109727d4695e1968e04c2bce004e7df2060f", "committedDate": "2020-11-01T15:54:54Z", "message": "Address review findings\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de60fead099068e573869ae5155f074b771f345", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/0de60fead099068e573869ae5155f074b771f345", "committedDate": "2020-11-01T17:16:48Z", "message": "Address review findings\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzk5MzIx", "url": "https://github.com/openhab/openhab-addons/pull/8634#pullrequestreview-522799321", "createdAt": "2020-11-03T19:09:41Z", "commit": {"oid": "0de60fead099068e573869ae5155f074b771f345"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowOTo0MlrOHs8yjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowOTo0MlrOHs8yjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NTM3NQ==", "bodyText": "Perhaps you could open in javadoc briefly how to use this and what the main benefit", "url": "https://github.com/openhab/openhab-addons/pull/8634#discussion_r516895375", "createdAt": "2020-11-03T19:09:42Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.handler;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+\n+/**\n+ * This is a convenience class to interact with the Thing's {@link ModbusCommunicationInterface}.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ *\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de60fead099068e573869ae5155f074b771f345"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b331ebf9dbf93954ba2f7bdb3bbacd8001debce8", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/b331ebf9dbf93954ba2f7bdb3bbacd8001debce8", "committedDate": "2020-11-15T19:52:42Z", "message": "Extend dev documentation\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTIwNTk3", "url": "https://github.com/openhab/openhab-addons/pull/8634#pullrequestreview-533120597", "createdAt": "2020-11-18T05:47:26Z", "commit": {"oid": "b331ebf9dbf93954ba2f7bdb3bbacd8001debce8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc61f890b33afa40bdbff07f3de7f64de73b8214", "author": {"user": {"login": "fwolter", "name": "Fabian Wolter"}}, "url": "https://github.com/openhab/openhab-addons/commit/fc61f890b33afa40bdbff07f3de7f64de73b8214", "committedDate": "2020-11-22T08:52:59Z", "message": "Minor change\n\nSigned-off-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODA3MTA0", "url": "https://github.com/openhab/openhab-addons/pull/8634#pullrequestreview-536807104", "createdAt": "2020-11-23T20:07:12Z", "commit": {"oid": "fc61f890b33afa40bdbff07f3de7f64de73b8214"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDMyNzI3", "url": "https://github.com/openhab/openhab-addons/pull/8634#pullrequestreview-537032727", "createdAt": "2020-11-24T02:36:48Z", "commit": {"oid": "fc61f890b33afa40bdbff07f3de7f64de73b8214"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4458, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}