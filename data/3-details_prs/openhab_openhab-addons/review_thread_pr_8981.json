{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MTg1ODQy", "number": 8981, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMjoyODo1NVrOE2j0QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo0Mzo1NFrOE9Wj-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjQ1Mzc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/cloud/MiCloudConnector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMjoyODo1NVrOHva6oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMjoyODo1NVrOHva6oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjExMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new MiCloudException();\n          \n          \n            \n                        throw new MiCloudException(e);", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r519486113", "createdAt": "2020-11-08T22:28:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/cloud/MiCloudConnector.java", "diffHunk": "@@ -176,10 +176,26 @@ public String getMapUrl(String vacuumMap, String country) throws MiCloudExceptio\n     }\n \n     public String getDeviceStatus(String device, String country) throws MiCloudException {\n-        String url = getApiUrl(country) + \"/home/device_list\";\n-        Map<String, String> map = new HashMap<String, String>();\n-        map.put(\"data\", \"{\\\"dids\\\":[\\\"\" + device + \"\\\"]}\");\n-        final String response = request(url, map);\n+        final String response = request(\"/home/device_list\", country, \"{\\\"dids\\\":[\\\"\" + device + \"\\\"]}\");\n+        logger.debug(\"response: {}\", response);\n+        return response;\n+    }\n+\n+    public String sendRPCCommand(String device, String country, String command) throws MiCloudException {\n+        if (device.length() != 8) {\n+            logger.debug(\"Device ID ('{}') incorrect or missing. Command not send: {}\", device, command);\n+        }\n+        if (country.length() > 3 || country.length() < 2) {\n+            logger.debug(\"Country ('{}') incorrect or missing. Command not send: {}\", device, command);\n+        }\n+        String id = \"\";\n+        try {\n+            id = String.valueOf(Long.parseUnsignedLong(device, 16));\n+        } catch (NumberFormatException e) {\n+            logger.debug(\"Could not parse device ID ('{}')\", device);\n+            throw new MiCloudException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e88c6fe49258340a8a50644a5b8ad2dde1b48e6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjQ1NTkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMjozMTowMVrOHva7pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowNjo1NlrOHvi7nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjM3NQ==", "bodyText": "Please make sure store the future to a field and cancel it when the handler is disposed.", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r519486375", "createdAt": "2020-11-08T22:31:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -240,14 +241,13 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             sendCommand(MiIoCommand.CONSUMABLES_RESET, \"[\" + command.toString() + \"]\");\n             updateState(CHANNEL_CONSUMABLE_RESET, new StringType(\"none\"));\n         }\n-        if (channelUID.getId().equals(CHANNEL_COMMAND)) {\n-            cmds.put(sendCommand(command.toString()), command.toString());\n-        }\n     }\n \n     private void forceStatusUpdate() {\n         status.invalidateValue();\n-        status.getValue();\n+        scheduler.schedule(() -> {\n+            status.getValue();\n+        }, 3000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e88c6fe49258340a8a50644a5b8ad2dde1b48e6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNzQzNw==", "bodyText": "thanks, will do that. similar issue may have caused #8655\nI will scan the binding as I think there are one or 2 more places where I have such a delayed execution", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r519617437", "createdAt": "2020-11-09T08:06:56Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoVacuumHandler.java", "diffHunk": "@@ -240,14 +241,13 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             sendCommand(MiIoCommand.CONSUMABLES_RESET, \"[\" + command.toString() + \"]\");\n             updateState(CHANNEL_CONSUMABLE_RESET, new StringType(\"none\"));\n         }\n-        if (channelUID.getId().equals(CHANNEL_COMMAND)) {\n-            cmds.put(sendCommand(command.toString()), command.toString());\n-        }\n     }\n \n     private void forceStatusUpdate() {\n         status.invalidateValue();\n-        status.getValue();\n+        scheduler.schedule(() -> {\n+            status.getValue();\n+        }, 3000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NjM3NQ=="}, "originalCommit": {"oid": "8e88c6fe49258340a8a50644a5b8ad2dde1b48e6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDcwNzk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMTo0NDo1OFrOHwC0pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMTo0NDo1OFrOHwC0pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzOTk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (ScheduledFuture<?> s : scheduledJobs) {\n          \n          \n            \n                        if (s.isDone()) {\n          \n          \n            \n                            scheduledJobs.remove(s);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    scheduledJobs.removeIf(Future::isDone);", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r520139941", "createdAt": "2020-11-09T21:44:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -163,6 +183,14 @@ private boolean tokenCheckPass(@Nullable String tokenSting) {\n         }\n     }\n \n+    protected void removedCompletedJobs() {\n+        for (ScheduledFuture<?> s : scheduledJobs) {\n+            if (s.isDone()) {\n+                scheduledJobs.remove(s);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26376330f4f3089859b07165bb2627b2a1525870"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDY1ODc4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMzoyOTowM1rOHzCtRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMjowNzo1OVrOHzjfWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4Mzc4Mw==", "bodyText": "You shouldn't perform shutdown of the threadpools returned by ThreadPoolManager.\nInstead you should create your own ScheduledThreadPoolExecutor instance as follows:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    miIoScheduler = ThreadPoolManager.getScheduledPool(getThing().getUID().getAsString());\n          \n          \n            \n                    miIoScheduler = new ScheduledThreadPoolExecutor(1,\n          \n          \n            \n                            new NamedThreadFactory(getThing().getUID().getAsString(), true));\n          \n          \n            \n                    miIoScheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n          \n          \n            \n                    miIoScheduler.setRemoveOnCancelPolicy(true);\n          \n      \n    \n    \n  \n\nThe example above creates a scheduler with only a single thread, but you can increase this number as you see fit.", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r523283783", "createdAt": "2020-11-13T23:29:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -93,18 +102,35 @@\n     private final Logger logger = LoggerFactory.getLogger(MiIoAbstractHandler.class);\n     protected MiIoDatabaseWatchService miIoDatabaseWatchService;\n \n-    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService) {\n+    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService,\n+            CloudConnector cloudConnector) {\n         super(thing);\n         this.miIoDatabaseWatchService = miIoDatabaseWatchService;\n+        this.cloudConnector = cloudConnector;\n     }\n \n     @Override\n     public abstract void handleCommand(ChannelUID channelUID, Command command);\n \n+    protected boolean handleCommandsChannels(ChannelUID channelUID, Command command) {\n+        if (channelUID.getId().equals(CHANNEL_COMMAND)) {\n+            cmds.put(sendCommand(command.toString(), \"\"), command.toString());\n+            return true;\n+        }\n+        if (channelUID.getId().equals(CHANNEL_RPC)) {\n+            cmds.put(sendCommand(command.toString(), cloudServer), command.toString());\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing Mi IO device handler '{}' with thingType {}\", getThing().getUID(),\n                 getThing().getThingTypeUID());\n+\n+        miIoScheduler = ThreadPoolManager.getScheduledPool(getThing().getUID().getAsString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67d3d0f8fcac5e4199d5e23c6ffa895d27494dbf"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3ODQ1NA==", "bodyText": "I was very hesitant to do that as in https://github.com/openhab/openhab-core/blob/master/bundles/org.openhab.core/src/main/java/org/openhab/core/common/ThreadPoolManager.java it was made clear that bindings really should not do that.\nI thought that that what the ThreadPoolManager was doing for me... if the name does not exist yet, create a new ScheduledThreadPoolExecutor. This is why I added the thingUID in there to make sure it was a unique one (for that thing) instead of some common one that might not like being shutdown", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r523778454", "createdAt": "2020-11-15T16:09:25Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -93,18 +102,35 @@\n     private final Logger logger = LoggerFactory.getLogger(MiIoAbstractHandler.class);\n     protected MiIoDatabaseWatchService miIoDatabaseWatchService;\n \n-    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService) {\n+    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService,\n+            CloudConnector cloudConnector) {\n         super(thing);\n         this.miIoDatabaseWatchService = miIoDatabaseWatchService;\n+        this.cloudConnector = cloudConnector;\n     }\n \n     @Override\n     public abstract void handleCommand(ChannelUID channelUID, Command command);\n \n+    protected boolean handleCommandsChannels(ChannelUID channelUID, Command command) {\n+        if (channelUID.getId().equals(CHANNEL_COMMAND)) {\n+            cmds.put(sendCommand(command.toString(), \"\"), command.toString());\n+            return true;\n+        }\n+        if (channelUID.getId().equals(CHANNEL_RPC)) {\n+            cmds.put(sendCommand(command.toString(), cloudServer), command.toString());\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing Mi IO device handler '{}' with thingType {}\", getThing().getUID(),\n                 getThing().getThingTypeUID());\n+\n+        miIoScheduler = ThreadPoolManager.getScheduledPool(getThing().getUID().getAsString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4Mzc4Mw=="}, "originalCommit": {"oid": "67d3d0f8fcac5e4199d5e23c6ffa895d27494dbf"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgxMzc0Mg==", "bodyText": "That class is more for use in the openHAB core, not necessarily the bindings. Thread pools managed by ThreadPoolManager live outside the standard handler lifecycle which means that they are a poor choice to use if you want a threadpool that is only dedicated for a specific handler. Many bindings manage their thread pools, so there is nothing unusual about doing this.\nIf you look at the ThreadPoolManager source code you will notice that it does not recreate a threadpool if it is shutdown. That means that if a handler is restarted it will shutdown the threadpool and then restart the handler with a dead threadpool. Since we need to be able to shutdown the threadpool we have no choice other than to manage the threadpool instance ourselves.", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r523813742", "createdAt": "2020-11-15T21:06:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -93,18 +102,35 @@\n     private final Logger logger = LoggerFactory.getLogger(MiIoAbstractHandler.class);\n     protected MiIoDatabaseWatchService miIoDatabaseWatchService;\n \n-    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService) {\n+    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService,\n+            CloudConnector cloudConnector) {\n         super(thing);\n         this.miIoDatabaseWatchService = miIoDatabaseWatchService;\n+        this.cloudConnector = cloudConnector;\n     }\n \n     @Override\n     public abstract void handleCommand(ChannelUID channelUID, Command command);\n \n+    protected boolean handleCommandsChannels(ChannelUID channelUID, Command command) {\n+        if (channelUID.getId().equals(CHANNEL_COMMAND)) {\n+            cmds.put(sendCommand(command.toString(), \"\"), command.toString());\n+            return true;\n+        }\n+        if (channelUID.getId().equals(CHANNEL_RPC)) {\n+            cmds.put(sendCommand(command.toString(), cloudServer), command.toString());\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing Mi IO device handler '{}' with thingType {}\", getThing().getUID(),\n                 getThing().getThingTypeUID());\n+\n+        miIoScheduler = ThreadPoolManager.getScheduledPool(getThing().getUID().getAsString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4Mzc4Mw=="}, "originalCommit": {"oid": "67d3d0f8fcac5e4199d5e23c6ffa895d27494dbf"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyMDg5MA==", "bodyText": "cool, will implement it like this than and will do some more testing", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r523820890", "createdAt": "2020-11-15T22:07:59Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -93,18 +102,35 @@\n     private final Logger logger = LoggerFactory.getLogger(MiIoAbstractHandler.class);\n     protected MiIoDatabaseWatchService miIoDatabaseWatchService;\n \n-    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService) {\n+    public MiIoAbstractHandler(Thing thing, MiIoDatabaseWatchService miIoDatabaseWatchService,\n+            CloudConnector cloudConnector) {\n         super(thing);\n         this.miIoDatabaseWatchService = miIoDatabaseWatchService;\n+        this.cloudConnector = cloudConnector;\n     }\n \n     @Override\n     public abstract void handleCommand(ChannelUID channelUID, Command command);\n \n+    protected boolean handleCommandsChannels(ChannelUID channelUID, Command command) {\n+        if (channelUID.getId().equals(CHANNEL_COMMAND)) {\n+            cmds.put(sendCommand(command.toString(), \"\"), command.toString());\n+            return true;\n+        }\n+        if (channelUID.getId().equals(CHANNEL_RPC)) {\n+            cmds.put(sendCommand(command.toString(), cloudServer), command.toString());\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing Mi IO device handler '{}' with thingType {}\", getThing().getUID(),\n                 getThing().getThingTypeUID());\n+\n+        miIoScheduler = ThreadPoolManager.getScheduledPool(getThing().getUID().getAsString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4Mzc4Mw=="}, "originalCommit": {"oid": "67d3d0f8fcac5e4199d5e23c6ffa895d27494dbf"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDY2MzIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMzozMToyMlrOHzCvtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNjoxMDo1MVrOHzg6og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4NDQwNQ==", "bodyText": "If since you need it to be non-null, but are going to override it anyway during initialization, then I see no problem with initially setting it to the BaseThingHandler scheduler.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected ScheduledExecutorService miIoScheduler = ThreadPoolManager.getScheduledPool(BINDING_ID);\n          \n          \n            \n                protected ScheduledExecutorService miIoScheduler = scheduler;", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r523284405", "createdAt": "2020-11-13T23:31:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -67,7 +71,10 @@\n     protected static final int MAX_QUEUE = 5;\n     protected static final Gson GSON = new GsonBuilder().create();\n \n+    protected ScheduledExecutorService miIoScheduler = ThreadPoolManager.getScheduledPool(BINDING_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67d3d0f8fcac5e4199d5e23c6ffa895d27494dbf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc3ODcyMg==", "bodyText": "yes, indeed that was the intention, will change it to your suggestion.", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r523778722", "createdAt": "2020-11-15T16:10:51Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -67,7 +71,10 @@\n     protected static final int MAX_QUEUE = 5;\n     protected static final Gson GSON = new GsonBuilder().create();\n \n+    protected ScheduledExecutorService miIoScheduler = ThreadPoolManager.getScheduledPool(BINDING_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4NDQwNQ=="}, "originalCommit": {"oid": "67d3d0f8fcac5e4199d5e23c6ffa895d27494dbf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzU4Nzk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODoxMzowOFrOH5_BOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODoxMzowOFrOH5_BOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MzM4NQ==", "bodyText": "Don't set it to scheduler here, it would just allow further tasks to be scheduled after disposal.", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r530563385", "createdAt": "2020-11-25T18:13:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -216,7 +220,8 @@ public void dispose() {\n             }\n         }\n         scheduledJobs.clear();\n-        miIoScheduler = ThreadPoolManager.getScheduledPool(BINDING_ID);\n+        miIoScheduler.shutdownNow();\n+        miIoScheduler = scheduler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5557b15bb6ee5419e7669e0553bc218e07876620"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzYxNzQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/cloud/MiCloudConnector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODoyMjowOVrOH5_TFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODoyMjowOVrOH5_TFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2Nzk1OQ==", "bodyText": "Always pass the cause exception.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new MiCloudException(err);\n          \n          \n            \n                        throw new MiCloudException(err, e);", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r530567959", "createdAt": "2020-11-25T18:22:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/cloud/MiCloudConnector.java", "diffHunk": "@@ -176,10 +176,27 @@ public String getMapUrl(String vacuumMap, String country) throws MiCloudExceptio\n     }\n \n     public String getDeviceStatus(String device, String country) throws MiCloudException {\n-        String url = getApiUrl(country) + \"/home/device_list\";\n-        Map<String, String> map = new HashMap<String, String>();\n-        map.put(\"data\", \"{\\\"dids\\\":[\\\"\" + device + \"\\\"]}\");\n-        final String response = request(url, map);\n+        final String response = request(\"/home/device_list\", country, \"{\\\"dids\\\":[\\\"\" + device + \"\\\"]}\");\n+        logger.debug(\"response: {}\", response);\n+        return response;\n+    }\n+\n+    public String sendRPCCommand(String device, String country, String command) throws MiCloudException {\n+        if (device.length() != 8) {\n+            logger.debug(\"Device ID ('{}') incorrect or missing. Command not send: {}\", device, command);\n+        }\n+        if (country.length() > 3 || country.length() < 2) {\n+            logger.debug(\"Country ('{}') incorrect or missing. Command not send: {}\", device, command);\n+        }\n+        String id = \"\";\n+        try {\n+            id = String.valueOf(Long.parseUnsignedLong(device, 16));\n+        } catch (NumberFormatException e) {\n+            String err = \"Could not parse device ID ('\" + device.toString() + \"')\";\n+            logger.debug(\"{}\", err);\n+            throw new MiCloudException(err);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78f0e74b76b03920d71688058d8ca818a81fbe56"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzY4MjQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo0Mzo1NFrOH5_7_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo0Mzo1NFrOH5_7_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3ODQzMA==", "bodyText": "miIoScheduler.shutdownNow() will automatically cancel any running tasks. So I don't think you need to track the scheduledJobs manually since the miIoScheduler handles it for you.", "url": "https://github.com/openhab/openhab-addons/pull/8981#discussion_r530578430", "createdAt": "2020-11-25T18:43:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -67,7 +72,9 @@\n     protected static final int MAX_QUEUE = 5;\n     protected static final Gson GSON = new GsonBuilder().create();\n \n+    protected ScheduledExecutorService miIoScheduler = scheduler;\n     protected @Nullable ScheduledFuture<?> pollingJob;\n+    protected CopyOnWriteArraySet<ScheduledFuture<?>> scheduledJobs = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78f0e74b76b03920d71688058d8ca818a81fbe56"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3890, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}