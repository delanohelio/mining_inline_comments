{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDg4MTUw", "number": 9404, "title": "Add Jython Scripting", "bodyText": "Ports #7208 to OH3 and addresses review comments like removing the bnd.bnd file and using an annotation for the dynamic import.\nI'm not a Jython expert but some Hello World examples seemed to work in rules so at least something is functional.\nPerhaps some seasoned Jython users can further test and improve it?\nAs expected it is also a pretty big add-on with a size of 42 MB, so it will have a big impact on the add-ons KAR file.\nSee also #4801 (comment)", "createdAt": "2020-12-16T22:56:35Z", "url": "https://github.com/openhab/openhab-addons/pull/9404", "merged": true, "mergeCommit": {"oid": "e7734449bc1414ffbf6c0e8d2f752282b001a90b"}, "closed": true, "closedAt": "2020-12-17T19:24:44Z", "author": {"login": "wborn"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm3EHhAH2gAyNTQxNDg4MTUwOjM2YWIxNzlmNWJiNDZkZWFkNzY5OTc1MTU0MjUwYjFiMTE0NmY4Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnImhgAFqTU1NDkxNTE4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867", "author": {"user": {"login": "wborn", "name": "Wouter Born"}}, "url": "https://github.com/openhab/openhab-addons/commit/36ab179f5bb46dead769975154250b1b1146f867", "committedDate": "2020-12-16T22:55:38Z", "message": "Add Jython Scripting\n\nAlso-by: Scott Rushworth <openhab@5iver.com>\nSigned-off-by: Wouter Born <github@maindrain.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTYxMjQ2", "url": "https://github.com/openhab/openhab-addons/pull/9404#pullrequestreview-554161246", "createdAt": "2020-12-16T23:13:55Z", "commit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTgxOTMw", "url": "https://github.com/openhab/openhab-addons/pull/9404#pullrequestreview-554181930", "createdAt": "2020-12-17T00:02:16Z", "commit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDowMjoxNlrOIHehBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDowNTo1MVrOIHemjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMDkxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Set<String> newPythonPathList = new TreeSet<>(\n          \n          \n            \n                                new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n          \n          \n            \n                        Set<String> newPythonPathList = new TreeSet<>(Arrays.asList(existingPythonPath.split(File.pathSeparator)));", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544710917", "createdAt": "2020-12-17T00:02:16Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTE4Mw==", "bodyText": "Not sure why you would need to copy it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return List.copyOf(scriptTypes);\n          \n          \n            \n                    return scriptTypes;", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544711183", "createdAt": "2020-12-17T00:02:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.add(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);\n+        }\n+\n+        System.setProperty(PYTHON_CACHEDIR,\n+                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n+                        .toString());\n+\n+        logPythonPaths();\n+    }\n+\n+    private void logPythonPaths() {\n+        logger.trace(\"{}: {}, {}: {}, {}: {}\", //\n+                PYTHON_HOME, System.getProperty(PYTHON_HOME), //\n+                PYTHON_PATH, System.getProperty(PYTHON_PATH), //\n+                PYTHON_CACHEDIR, System.getProperty(PYTHON_CACHEDIR));\n+    }\n+\n+    @Override\n+    public List<String> getScriptTypes() {\n+        List<String> scriptTypes = new ArrayList<>();\n+\n+        for (javax.script.ScriptEngineFactory factory : ENGINE_MANAGER.getEngineFactories()) {\n+            List<String> extensions = factory.getExtensions();\n+\n+            if (extensions.contains(SCRIPT_TYPE)) {\n+                scriptTypes.addAll(extensions);\n+                scriptTypes.addAll(factory.getMimeTypes());\n+            }\n+        }\n+        return List.copyOf(scriptTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTg5Nw==", "bodyText": "This looks to be duplicate code from above.", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544711897", "createdAt": "2020-12-17T00:04:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.add(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);\n+        }\n+\n+        System.setProperty(PYTHON_CACHEDIR,\n+                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n+                        .toString());\n+\n+        logPythonPaths();\n+    }\n+\n+    private void logPythonPaths() {\n+        logger.trace(\"{}: {}, {}: {}, {}: {}\", //\n+                PYTHON_HOME, System.getProperty(PYTHON_HOME), //\n+                PYTHON_PATH, System.getProperty(PYTHON_PATH), //\n+                PYTHON_CACHEDIR, System.getProperty(PYTHON_CACHEDIR));\n+    }\n+\n+    @Override\n+    public List<String> getScriptTypes() {\n+        List<String> scriptTypes = new ArrayList<>();\n+\n+        for (javax.script.ScriptEngineFactory factory : ENGINE_MANAGER.getEngineFactories()) {\n+            List<String> extensions = factory.getExtensions();\n+\n+            if (extensions.contains(SCRIPT_TYPE)) {\n+                scriptTypes.addAll(extensions);\n+                scriptTypes.addAll(factory.getMimeTypes());\n+            }\n+        }\n+        return List.copyOf(scriptTypes);\n+    }\n+\n+    @Override\n+    public @Nullable ScriptEngine createScriptEngine(String scriptType) {\n+        ScriptEngine scriptEngine = ENGINE_MANAGER.getEngineByExtension(scriptType);\n+        if (scriptEngine == null) {\n+            scriptEngine = ENGINE_MANAGER.getEngineByMimeType(scriptType);\n+        }\n+        if (scriptEngine == null) {\n+            scriptEngine = ENGINE_MANAGER.getEngineByName(scriptType);\n+        }\n+        return scriptEngine;\n+    }\n+\n+    @Deactivate\n+    public void removePythonPath() {\n+        logger.debug(\"Unloading JythonScriptEngineFactory\");\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath != null && existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.remove(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMjMzMg==", "bodyText": "What do these changes have to do with this PR?", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544712332", "createdAt": "2020-12-17T00:05:51Z", "author": {"login": "cpmeister"}, "path": "pom.xml", "diffHunk": "@@ -153,7 +154,8 @@ Import-Package: \\\\\n   ${bnd.exportpackage}\n -sources: false\n -contract: *\n--includeresource: ${bnd.includeresource}]]></bnd>\n+-includeresource: ${bnd.includeresource}\n+-fixupmessages: ${bnd.fixupmessages}]]></bnd>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "560a6bf9899300c313aab98924db41998a01a746", "author": {"user": {"login": "wborn", "name": "Wouter Born"}}, "url": "https://github.com/openhab/openhab-addons/commit/560a6bf9899300c313aab98924db41998a01a746", "committedDate": "2020-12-17T08:11:41Z", "message": "Address review comments\n\nSigned-off-by: Wouter Born <github@maindrain.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NzI3MjEy", "url": "https://github.com/openhab/openhab-addons/pull/9404#pullrequestreview-554727212", "createdAt": "2020-12-17T15:41:31Z", "commit": {"oid": "560a6bf9899300c313aab98924db41998a01a746"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNTo0MTozMVrOIH7rrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNTo0MTozMVrOIH7rrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ==", "bodyText": "See #7208 (comment)", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545188781", "createdAt": "2020-12-17T15:41:31Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560a6bf9899300c313aab98924db41998a01a746"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTE1MTg5", "url": "https://github.com/openhab/openhab-addons/pull/9404#pullrequestreview-554915189", "createdAt": "2020-12-17T19:21:36Z", "commit": {"oid": "560a6bf9899300c313aab98924db41998a01a746"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3810, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}