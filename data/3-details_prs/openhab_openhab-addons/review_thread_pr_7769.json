{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzk0NDkw", "number": 7769, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjowOTozNFrOD_Pr1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1NDowM1rOD_vQXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQzODYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.siemensrds/src/test/java/org/openhab/binding/siemensrds/test/RdsTestData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjowOTozNFrOGZzHgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzo1MDoxMlrOGaHF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNTA4OQ==", "bodyText": "Data this large should not be stored in the code. Please put this data in a file and load it at runtime.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429705089", "createdAt": "2020-05-25T02:09:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.siemensrds/src/test/java/org/openhab/binding/siemensrds/test/RdsTestData.java", "diffHunk": "@@ -0,0 +1,3416 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.siemensrds.test;\n+\n+import static org.junit.Assert.*;\n+import static org.openhab.binding.siemensrds.internal.RdsBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.junit.Test;\n+import org.openhab.binding.siemensrds.internal.RdsAccessToken;\n+import org.openhab.binding.siemensrds.internal.RdsCloudException;\n+import org.openhab.binding.siemensrds.internal.RdsDataPoints;\n+import org.openhab.binding.siemensrds.internal.RdsPlants;\n+import org.openhab.binding.siemensrds.internal.RdsPlants.PlantInfo;\n+import org.openhab.binding.siemensrds.points.BasePoint;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * test suite\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class RdsTestData {\n+\n+    /*\n+     * note: temperature symbols with a degree sign: the MVN Spotless formatter\n+     * trashes the \"degree\" (looks like *) symbol, so we must escape these symbols\n+     * as octal \\260 or unicode \\u00B00 in the following JSON test strings\n+     * \n+     * note: (at)formatter on/off tags instruct spotless not to reformat the JSON,\n+     * (and perhaps also attempt to stop it trashing the degree symbols - see above)\n+     */\n+    //@formatter:off\n+    private static final String DATAPOINTS_JSON_FULL_SET = ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMTEzMw==", "bodyText": "@cpmeister I need some help with this; I would be happy to move the data into a file; but I need to know what path the file should be in, so as to ensure it is properly handled by GitHub, your MVN build environment, and the automated JUnit tests.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429901133", "createdAt": "2020-05-25T12:09:36Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.siemensrds/src/test/java/org/openhab/binding/siemensrds/test/RdsTestData.java", "diffHunk": "@@ -0,0 +1,3416 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.siemensrds.test;\n+\n+import static org.junit.Assert.*;\n+import static org.openhab.binding.siemensrds.internal.RdsBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.junit.Test;\n+import org.openhab.binding.siemensrds.internal.RdsAccessToken;\n+import org.openhab.binding.siemensrds.internal.RdsCloudException;\n+import org.openhab.binding.siemensrds.internal.RdsDataPoints;\n+import org.openhab.binding.siemensrds.internal.RdsPlants;\n+import org.openhab.binding.siemensrds.internal.RdsPlants.PlantInfo;\n+import org.openhab.binding.siemensrds.points.BasePoint;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * test suite\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class RdsTestData {\n+\n+    /*\n+     * note: temperature symbols with a degree sign: the MVN Spotless formatter\n+     * trashes the \"degree\" (looks like *) symbol, so we must escape these symbols\n+     * as octal \\260 or unicode \\u00B00 in the following JSON test strings\n+     * \n+     * note: (at)formatter on/off tags instruct spotless not to reformat the JSON,\n+     * (and perhaps also attempt to stop it trashing the degree symbols - see above)\n+     */\n+    //@formatter:off\n+    private static final String DATAPOINTS_JSON_FULL_SET = ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNTA4OQ=="}, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMjM1Nw==", "bodyText": "Ok. I think I figured it out.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r430032357", "createdAt": "2020-05-25T17:50:12Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.siemensrds/src/test/java/org/openhab/binding/siemensrds/test/RdsTestData.java", "diffHunk": "@@ -0,0 +1,3416 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.siemensrds.test;\n+\n+import static org.junit.Assert.*;\n+import static org.openhab.binding.siemensrds.internal.RdsBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.junit.Test;\n+import org.openhab.binding.siemensrds.internal.RdsAccessToken;\n+import org.openhab.binding.siemensrds.internal.RdsCloudException;\n+import org.openhab.binding.siemensrds.internal.RdsDataPoints;\n+import org.openhab.binding.siemensrds.internal.RdsPlants;\n+import org.openhab.binding.siemensrds.internal.RdsPlants.PlantInfo;\n+import org.openhab.binding.siemensrds.points.BasePoint;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * test suite\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class RdsTestData {\n+\n+    /*\n+     * note: temperature symbols with a degree sign: the MVN Spotless formatter\n+     * trashes the \"degree\" (looks like *) symbol, so we must escape these symbols\n+     * as octal \\260 or unicode \\u00B00 in the following JSON test strings\n+     * \n+     * note: (at)formatter on/off tags instruct spotless not to reformat the JSON,\n+     * (and perhaps also attempt to stop it trashing the degree symbols - see above)\n+     */\n+    //@formatter:off\n+    private static final String DATAPOINTS_JSON_FULL_SET = ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNTA4OQ=="}, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ0MTkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjoxMjoyNlrOGZzJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjo0MDoxNVrOGZ_22Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNTU3Nw==", "bodyText": "Ok, instead of using instanceof to do your null check, I suggest instead to just change the map type to\nprivate final Map<ThingUID, @Nullable ServiceRegistration<?>> discos = new HashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429705577", "createdAt": "2020-05-25T02:12:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsHandlerFactory.java", "diffHunk": "@@ -103,10 +106,13 @@ private synchronized void createDiscoveryService(RdsCloudHandler handler) {\n      */\n     private synchronized void destroyDiscoveryService(RdsCloudHandler handler) {\n         // fetch the respective thing's service registration from our list\n-        ServiceRegistration<?> serviceReg = discos.remove(handler.getThing().getUID());\n+        @Nullable\n+        Object object = discos.remove(handler.getThing().getUID());\n+\n+        // retrieve the respective discovery service\n+        if (object instanceof ServiceRegistration<?>) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxMzgxNw==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429913817", "createdAt": "2020-05-25T12:40:15Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsHandlerFactory.java", "diffHunk": "@@ -103,10 +106,13 @@ private synchronized void createDiscoveryService(RdsCloudHandler handler) {\n      */\n     private synchronized void destroyDiscoveryService(RdsCloudHandler handler) {\n         // fetch the respective thing's service registration from our list\n-        ServiceRegistration<?> serviceReg = discos.remove(handler.getThing().getUID());\n+        @Nullable\n+        Object object = discos.remove(handler.getThing().getUID());\n+\n+        // retrieve the respective discovery service\n+        if (object instanceof ServiceRegistration<?>) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNTU3Nw=="}, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ0MjY2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjoxMzowM1rOGZzJ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjoyMjo0MFrOGZ_Z-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNTY5MQ==", "bodyText": "orphan semicolon", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429705691", "createdAt": "2020-05-25T02:13:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDiscoveryService.java", "diffHunk": "@@ -86,53 +105,110 @@ protected void startBackgroundDiscovery() {\n     protected void stopBackgroundDiscovery() {\n         logger.debug(\"stop background discovery..\");\n \n+        ScheduledFuture<?> discoveryScheduler = this.discoveryScheduler;\n         if (discoveryScheduler != null && !discoveryScheduler.isCancelled()) {\n             discoveryScheduler.cancel(true);\n+            this.discoveryScheduler = null;\n         }\n     }\n \n     private void discoverPlants() {\n+        RdsCloudHandler cloud = this.cloud;\n+\n         if (cloud != null) {\n-            RdsPlants plants = RdsPlants.create(cloud.getApiKey(), cloud.getToken());\n-            if (plants != null) {\n-                for (RdsPlants.PlantInfo plant : plants.getPlants()) {\n-                    publishPlant(plant);\n+            @Nullable\n+            RdsPlants plantClass = null;\n+\n+            try {\n+                String url = URL_PLANTS;\n+\n+                logger.debug(LOG_HTTP_COMMAND, HTTP_GET, url.length());\n+                logger.debug(LOG_PAYLOAD_FMT, LOG_SENDING_MARK, url);\n+\n+                String json = RdsDataPoints.httpGenericGetJson(cloud.getApiKey(), cloud.getToken(), url);\n+\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(LOG_CONTENT_LENGTH, LOG_RECEIVED_MSG, json.length());\n+                    logger.trace(LOG_PAYLOAD_FMT, LOG_RECEIVED_MARK, json);\n+                } else if (logger.isDebugEnabled()) {\n+                    logger.debug(LOG_CONTENT_LENGTH_ABR, LOG_RECEIVED_MSG, json.length());\n+                    logger.debug(LOG_PAYLOAD_FMT_ABR, LOG_RECEIVED_MARK,\n+                            json.substring(0, Math.min(json.length(), 30)));\n+                }\n+\n+                plantClass = RdsPlants.createFromJson(json);\n+                ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNjQyNQ==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429906425", "createdAt": "2020-05-25T12:22:40Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDiscoveryService.java", "diffHunk": "@@ -86,53 +105,110 @@ protected void startBackgroundDiscovery() {\n     protected void stopBackgroundDiscovery() {\n         logger.debug(\"stop background discovery..\");\n \n+        ScheduledFuture<?> discoveryScheduler = this.discoveryScheduler;\n         if (discoveryScheduler != null && !discoveryScheduler.isCancelled()) {\n             discoveryScheduler.cancel(true);\n+            this.discoveryScheduler = null;\n         }\n     }\n \n     private void discoverPlants() {\n+        RdsCloudHandler cloud = this.cloud;\n+\n         if (cloud != null) {\n-            RdsPlants plants = RdsPlants.create(cloud.getApiKey(), cloud.getToken());\n-            if (plants != null) {\n-                for (RdsPlants.PlantInfo plant : plants.getPlants()) {\n-                    publishPlant(plant);\n+            @Nullable\n+            RdsPlants plantClass = null;\n+\n+            try {\n+                String url = URL_PLANTS;\n+\n+                logger.debug(LOG_HTTP_COMMAND, HTTP_GET, url.length());\n+                logger.debug(LOG_PAYLOAD_FMT, LOG_SENDING_MARK, url);\n+\n+                String json = RdsDataPoints.httpGenericGetJson(cloud.getApiKey(), cloud.getToken(), url);\n+\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(LOG_CONTENT_LENGTH, LOG_RECEIVED_MSG, json.length());\n+                    logger.trace(LOG_PAYLOAD_FMT, LOG_RECEIVED_MARK, json);\n+                } else if (logger.isDebugEnabled()) {\n+                    logger.debug(LOG_CONTENT_LENGTH_ABR, LOG_RECEIVED_MSG, json.length());\n+                    logger.debug(LOG_PAYLOAD_FMT_ABR, LOG_RECEIVED_MARK,\n+                            json.substring(0, Math.min(json.length(), 30)));\n+                }\n+\n+                plantClass = RdsPlants.createFromJson(json);\n+                ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNTY5MQ=="}, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ0NjYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDebouncer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjoxNzoxMVrOGZzMUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjoxNzoxMVrOGZzMUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNjMyMw==", "bodyText": "Same comment I made earlier", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429706323", "createdAt": "2020-05-25T02:17:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDebouncer.java", "diffHunk": "@@ -51,6 +57,13 @@ public void initialize(String channelId) {\n     }\n \n     public Boolean timeExpired(String channelId) {\n-        return (channels.containsKey(channelId) ? channels.get(channelId).timeExpired() : true);\n+        if (channels.containsKey(channelId)) {\n+            @Nullable\n+            Object debounceDelay = channels.get(channelId);\n+            if (debounceDelay instanceof DebounceDelay) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ1MzY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDataPoints.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjoyMzo1M1rOGZzQpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDo1MjoxNFrOGaY7_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNzQzMA==", "bodyText": "If you want another way around the null checker map issue, you can also do this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BasePoint point = points.get(pointId);\n          \n          \n            \n                        if (point instanceof BasePoint) {\n          \n          \n            \n                            return point;\n          \n          \n            \n                        }\n          \n          \n            \n                        if (points.contains(pointId)) {\n          \n          \n            \n                            return points.get(pointId);\n          \n          \n            \n                        }", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429707430", "createdAt": "2020-05-25T02:23:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDataPoints.java", "diffHunk": "@@ -166,150 +158,99 @@ private void httpSetPointValueJson(String apiKey, String token, String pointId,\n         }\n \n         if (https.getResponseCode() != HttpURLConnection.HTTP_OK) {\n-            throw new RdsCloudException(\"invalid HTTP response\");\n+            throw new IOException(https.getResponseMessage());\n         }\n     }\n \n     /*\n-     * private method: retrieve the data point with the given hierarchyName\n+     * public method: retrieve the data point with the given pointClass\n      */\n-    private BasePoint getPoint(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return point;\n-                }\n-            }\n+    public BasePoint getPointByClass(String pointClass) throws RdsCloudException {\n+        if (indexClassToId.isEmpty()) {\n+            initClassToIdNameIndex();\n         }\n-        return null;\n-    }\n-\n-    /*\n-     * private method: retrieve the data point with the given hierarchyName\n-     */\n-    private String getPointId(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return entry.getKey();\n-                }\n+        @Nullable\n+        String pointId = indexClassToId.get(pointClass);\n+        if (pointId instanceof String) {\n+            BasePoint point = getPointById(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }\n         }\n-        return null;\n+        throw new RdsCloudException(String.format(\"pointClass \\\"%s\\\" not found\", pointClass));\n     }\n \n     /*\n-     * public method: retrieve the state of the data point with the given\n-     * hierarchyName\n+     * public method: retrieve the data point with the given pointId\n      */\n-    public synchronized State getRaw(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            State state = point.getRaw();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getRaw: {}={}\", hierarchyName, state.toString());\n-            }\n-            return state;\n-        }\n-        LOGGER.warn(\"getRaw: {}=No Value!\", hierarchyName);\n-        return null;\n-    }\n-\n-    /*\n-     * public method: return the presentPriority of the data point with the given\n-     * hierarchyName\n-     */\n-    public synchronized int getPresPrio(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            int presentPriority = point.getPresentPriority();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getPresentPriority: {}={}\", hierarchyName, presentPriority);\n+    public BasePoint getPointById(String pointId) throws RdsCloudException {\n+        Map<String, BasePoint> points = this.points;\n+        if (points != null) {\n+            @Nullable\n+            BasePoint point = points.get(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxMzY2MA==", "bodyText": "If you want another way around the null checker map issue\n\nPersonally I was quite happy using instanceof -- your suggestion to use contains() followed by get() would work, but it has a performance penalty, I think.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429913660", "createdAt": "2020-05-25T12:39:50Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDataPoints.java", "diffHunk": "@@ -166,150 +158,99 @@ private void httpSetPointValueJson(String apiKey, String token, String pointId,\n         }\n \n         if (https.getResponseCode() != HttpURLConnection.HTTP_OK) {\n-            throw new RdsCloudException(\"invalid HTTP response\");\n+            throw new IOException(https.getResponseMessage());\n         }\n     }\n \n     /*\n-     * private method: retrieve the data point with the given hierarchyName\n+     * public method: retrieve the data point with the given pointClass\n      */\n-    private BasePoint getPoint(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return point;\n-                }\n-            }\n+    public BasePoint getPointByClass(String pointClass) throws RdsCloudException {\n+        if (indexClassToId.isEmpty()) {\n+            initClassToIdNameIndex();\n         }\n-        return null;\n-    }\n-\n-    /*\n-     * private method: retrieve the data point with the given hierarchyName\n-     */\n-    private String getPointId(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return entry.getKey();\n-                }\n+        @Nullable\n+        String pointId = indexClassToId.get(pointClass);\n+        if (pointId instanceof String) {\n+            BasePoint point = getPointById(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }\n         }\n-        return null;\n+        throw new RdsCloudException(String.format(\"pointClass \\\"%s\\\" not found\", pointClass));\n     }\n \n     /*\n-     * public method: retrieve the state of the data point with the given\n-     * hierarchyName\n+     * public method: retrieve the data point with the given pointId\n      */\n-    public synchronized State getRaw(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            State state = point.getRaw();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getRaw: {}={}\", hierarchyName, state.toString());\n-            }\n-            return state;\n-        }\n-        LOGGER.warn(\"getRaw: {}=No Value!\", hierarchyName);\n-        return null;\n-    }\n-\n-    /*\n-     * public method: return the presentPriority of the data point with the given\n-     * hierarchyName\n-     */\n-    public synchronized int getPresPrio(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            int presentPriority = point.getPresentPriority();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getPresentPriority: {}={}\", hierarchyName, presentPriority);\n+    public BasePoint getPointById(String pointId) throws RdsCloudException {\n+        Map<String, BasePoint> points = this.points;\n+        if (points != null) {\n+            @Nullable\n+            BasePoint point = points.get(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNzQzMA=="}, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5Mzg4NA==", "bodyText": "There is a performance hit, but it would be minimal. Personally, I prefer just making the map value nullable. I was just showing here one of the many ways you can work around the null checker's poor handling of Map classes.\nBut at the very least, please don't use instanceof  for your null checks. It makes the code very misleading to read.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r430093884", "createdAt": "2020-05-25T23:10:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDataPoints.java", "diffHunk": "@@ -166,150 +158,99 @@ private void httpSetPointValueJson(String apiKey, String token, String pointId,\n         }\n \n         if (https.getResponseCode() != HttpURLConnection.HTTP_OK) {\n-            throw new RdsCloudException(\"invalid HTTP response\");\n+            throw new IOException(https.getResponseMessage());\n         }\n     }\n \n     /*\n-     * private method: retrieve the data point with the given hierarchyName\n+     * public method: retrieve the data point with the given pointClass\n      */\n-    private BasePoint getPoint(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return point;\n-                }\n-            }\n+    public BasePoint getPointByClass(String pointClass) throws RdsCloudException {\n+        if (indexClassToId.isEmpty()) {\n+            initClassToIdNameIndex();\n         }\n-        return null;\n-    }\n-\n-    /*\n-     * private method: retrieve the data point with the given hierarchyName\n-     */\n-    private String getPointId(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return entry.getKey();\n-                }\n+        @Nullable\n+        String pointId = indexClassToId.get(pointClass);\n+        if (pointId instanceof String) {\n+            BasePoint point = getPointById(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }\n         }\n-        return null;\n+        throw new RdsCloudException(String.format(\"pointClass \\\"%s\\\" not found\", pointClass));\n     }\n \n     /*\n-     * public method: retrieve the state of the data point with the given\n-     * hierarchyName\n+     * public method: retrieve the data point with the given pointId\n      */\n-    public synchronized State getRaw(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            State state = point.getRaw();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getRaw: {}={}\", hierarchyName, state.toString());\n-            }\n-            return state;\n-        }\n-        LOGGER.warn(\"getRaw: {}=No Value!\", hierarchyName);\n-        return null;\n-    }\n-\n-    /*\n-     * public method: return the presentPriority of the data point with the given\n-     * hierarchyName\n-     */\n-    public synchronized int getPresPrio(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            int presentPriority = point.getPresentPriority();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getPresentPriority: {}={}\", hierarchyName, presentPriority);\n+    public BasePoint getPointById(String pointId) throws RdsCloudException {\n+        Map<String, BasePoint> points = this.points;\n+        if (points != null) {\n+            @Nullable\n+            BasePoint point = points.get(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNzQzMA=="}, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyNDczNA==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r430324734", "createdAt": "2020-05-26T10:52:14Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDataPoints.java", "diffHunk": "@@ -166,150 +158,99 @@ private void httpSetPointValueJson(String apiKey, String token, String pointId,\n         }\n \n         if (https.getResponseCode() != HttpURLConnection.HTTP_OK) {\n-            throw new RdsCloudException(\"invalid HTTP response\");\n+            throw new IOException(https.getResponseMessage());\n         }\n     }\n \n     /*\n-     * private method: retrieve the data point with the given hierarchyName\n+     * public method: retrieve the data point with the given pointClass\n      */\n-    private BasePoint getPoint(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return point;\n-                }\n-            }\n+    public BasePoint getPointByClass(String pointClass) throws RdsCloudException {\n+        if (indexClassToId.isEmpty()) {\n+            initClassToIdNameIndex();\n         }\n-        return null;\n-    }\n-\n-    /*\n-     * private method: retrieve the data point with the given hierarchyName\n-     */\n-    private String getPointId(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return entry.getKey();\n-                }\n+        @Nullable\n+        String pointId = indexClassToId.get(pointClass);\n+        if (pointId instanceof String) {\n+            BasePoint point = getPointById(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }\n         }\n-        return null;\n+        throw new RdsCloudException(String.format(\"pointClass \\\"%s\\\" not found\", pointClass));\n     }\n \n     /*\n-     * public method: retrieve the state of the data point with the given\n-     * hierarchyName\n+     * public method: retrieve the data point with the given pointId\n      */\n-    public synchronized State getRaw(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            State state = point.getRaw();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getRaw: {}={}\", hierarchyName, state.toString());\n-            }\n-            return state;\n-        }\n-        LOGGER.warn(\"getRaw: {}=No Value!\", hierarchyName);\n-        return null;\n-    }\n-\n-    /*\n-     * public method: return the presentPriority of the data point with the given\n-     * hierarchyName\n-     */\n-    public synchronized int getPresPrio(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            int presentPriority = point.getPresentPriority();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getPresentPriority: {}={}\", hierarchyName, presentPriority);\n+    public BasePoint getPointById(String pointId) throws RdsCloudException {\n+        Map<String, BasePoint> points = this.points;\n+        if (points != null) {\n+            @Nullable\n+            BasePoint point = points.get(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNzQzMA=="}, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQ1NDAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDataPoints.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjoyNDoyM1rOGZzQ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMjoyNDoyM1rOGZzQ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwNzQ4OA==", "bodyText": "orphan semicolon", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r429707488", "createdAt": "2020-05-25T02:24:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsDataPoints.java", "diffHunk": "@@ -166,150 +158,99 @@ private void httpSetPointValueJson(String apiKey, String token, String pointId,\n         }\n \n         if (https.getResponseCode() != HttpURLConnection.HTTP_OK) {\n-            throw new RdsCloudException(\"invalid HTTP response\");\n+            throw new IOException(https.getResponseMessage());\n         }\n     }\n \n     /*\n-     * private method: retrieve the data point with the given hierarchyName\n+     * public method: retrieve the data point with the given pointClass\n      */\n-    private BasePoint getPoint(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return point;\n-                }\n-            }\n+    public BasePoint getPointByClass(String pointClass) throws RdsCloudException {\n+        if (indexClassToId.isEmpty()) {\n+            initClassToIdNameIndex();\n         }\n-        return null;\n-    }\n-\n-    /*\n-     * private method: retrieve the data point with the given hierarchyName\n-     */\n-    private String getPointId(String hierarchyName) {\n-        if (hierarchyName != null) {\n-            for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-                BasePoint point = entry.getValue();\n-                if (point != null && point.hierarchyName != null && point.hierarchyName.contains(hierarchyName)) {\n-                    return entry.getKey();\n-                }\n+        @Nullable\n+        String pointId = indexClassToId.get(pointClass);\n+        if (pointId instanceof String) {\n+            BasePoint point = getPointById(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }\n         }\n-        return null;\n+        throw new RdsCloudException(String.format(\"pointClass \\\"%s\\\" not found\", pointClass));\n     }\n \n     /*\n-     * public method: retrieve the state of the data point with the given\n-     * hierarchyName\n+     * public method: retrieve the data point with the given pointId\n      */\n-    public synchronized State getRaw(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            State state = point.getRaw();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getRaw: {}={}\", hierarchyName, state.toString());\n-            }\n-            return state;\n-        }\n-        LOGGER.warn(\"getRaw: {}=No Value!\", hierarchyName);\n-        return null;\n-    }\n-\n-    /*\n-     * public method: return the presentPriority of the data point with the given\n-     * hierarchyName\n-     */\n-    public synchronized int getPresPrio(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            int presentPriority = point.getPresentPriority();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getPresentPriority: {}={}\", hierarchyName, presentPriority);\n+    public BasePoint getPointById(String pointId) throws RdsCloudException {\n+        Map<String, BasePoint> points = this.points;\n+        if (points != null) {\n+            @Nullable\n+            BasePoint point = points.get(pointId);\n+            if (point instanceof BasePoint) {\n+                return point;\n             }\n-            return presentPriority;\n         }\n-        LOGGER.warn(\"getPresentPriority: {}=No Value!\", hierarchyName);\n-        return 0;\n+        throw new RdsCloudException(String.format(\"pointId \\\"%s\\\" not found\", pointId));\n     }\n \n     /*\n-     * public method: return the presentPriority of the data point with the given\n-     * hierarchyName\n+     * private method: retrieve Id of data point with the given pointClass\n      */\n-    public synchronized int asInt(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            int value = point.asInt();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"asInt: {}={}\", hierarchyName, value);\n-            }\n-            return value;\n+    public String pointClassToId(String pointClass) throws RdsCloudException {\n+        if (indexClassToId.isEmpty()) {\n+            initClassToIdNameIndex();\n         }\n-        LOGGER.warn(\"getAsInt: {}=No Value!\", hierarchyName);\n-        return 0;\n-    }\n-\n-    /*\n-     * public method: retrieve the enum state of the data point with the given\n-     * hierarchyName\n-     */\n-    public synchronized State getEnum(String hierarchyName) {\n-        BasePoint point = getPoint(hierarchyName);\n-        if (point != null) {\n-            State state = point.getEnum();\n-\n-            if (LOGGER.isDebugEnabled()) {\n-                LOGGER.debug(\"getEnum: {}={}\", hierarchyName, state.toString());\n-            }\n-            return state;\n+        @Nullable\n+        String pointId = indexClassToId.get(pointClass);\n+        if (pointId instanceof String) {\n+            return pointId;\n         }\n-        LOGGER.warn(\"getEnum: {}=No Value!\", hierarchyName);\n-        return null;\n+        throw new RdsCloudException(String.format(\"no pointId to match pointClass \\\"%s\\\"\", pointClass));\n     }\n \n     /*\n      * public method: return the state of the \"Online\" data point\n      */\n-    public Boolean isOnline() {\n-        for (Map.Entry<String, BasePoint> entry : points.entrySet()) {\n-            BasePoint point = entry.getValue();\n-            if (point != null && point.memberName != null && point.memberName.equals(\"Online\")) {\n-                return (point.asInt() == 1);\n-            }\n-        }\n-        return false;\n+    public boolean isOnline() throws RdsCloudException {\n+        BasePoint point = getPointByClass(HIE_ONLINE);\n+        return \"Online\".equals(point.getEnum().toString());\n     }\n \n     /*\n      * public method: set a new data point value on the server\n      */\n-    public void setValue(String apiKey, String token, String hierarchyName, String value) {\n-        String pointId = getPointId(hierarchyName);\n-        BasePoint point = getPoint(hierarchyName);\n-\n-        if (pointId != null && point != null) {\n-            String json = point.commandJson(value);\n-\n-            LOGGER.debug(\"setValue: {}=>{}\", hierarchyName, json);\n-\n-            try {\n-                httpSetPointValueJson(apiKey, token, pointId, json);\n-            } catch (RdsCloudException | IOException e) {\n-                LOGGER.warn(\"setValue {} {}: \\\"{}\\\"\", hierarchyName, e.getClass().getName(), e.getMessage());\n-                return;\n+    public void setValue(String apiKey, String token, String pointClass, String value) {\n+        try {\n+            String pointId = pointClassToId(pointClass);\n+            BasePoint point = getPointByClass(pointClass);\n+\n+            String url = String.format(URL_SETVAL, pointId);\n+            String payload = point.commandJson(value);\n+\n+            if (logger.isTraceEnabled()) {\n+                logger.trace(LOG_HTTP_COMMAND, HTTP_PUT, url.length());\n+                logger.trace(LOG_PAYLOAD_FMT, LOG_SENDING_MARK, url);\n+                logger.trace(LOG_PAYLOAD_FMT, LOG_SENDING_MARK, payload);\n+            } else if (logger.isDebugEnabled()) {\n+                logger.debug(LOG_HTTP_COMMAND_ABR, HTTP_PUT, url.length());\n+                logger.debug(LOG_PAYLOAD_FMT_ABR, LOG_SENDING_MARK, url.substring(0, Math.min(url.length(), 30)));\n+                logger.debug(LOG_PAYLOAD_FMT_ABR, LOG_SENDING_MARK,\n+                        payload.substring(0, Math.min(payload.length(), 30)));\n             }\n-        } else {\n-            LOGGER.warn(\"setValue: point or pointId not found for {}\", hierarchyName);\n+\n+            httpSetPointValueJson(apiKey, token, url, payload);\n+            ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e361d3477357cae3c6480c2c1a17c1413643be3a"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTYwMjg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsCloudHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1MjoxMFrOGak6Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjoxNDoxM1rOGal3nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyMDkyNw==", "bodyText": "orphan semicolon", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r430520927", "createdAt": "2020-05-26T15:52:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsCloudHandler.java", "diffHunk": "@@ -84,17 +87,53 @@ public void dispose() {\n      * public method: used by RDS smart thermostat handlers return the polling\n      * interval (seconds)\n      */\n-    public int getPollInterval() {\n-        return (config != null ? config.pollingInterval : -1);\n+    public int getPollInterval() throws RdsCloudException {\n+        RdsCloudConfiguration config = this.config;\n+        if (config != null) {\n+            return config.pollingInterval;\n+        }\n+        throw new RdsCloudException(\"missing polling interval\");\n     }\n \n     /*\n      * private method: check if the current token is valid, and renew it if\n      * necessary\n      */\n     private synchronized void refreshToken() {\n+        RdsCloudConfiguration config = this.config;\n+        RdsAccessToken accessToken = this.accessToken;\n+\n         if (accessToken == null || accessToken.isExpired()) {\n-            accessToken = RdsAccessToken.create(config.apiKey, config.userEmail, config.userPassword);\n+            try {\n+                if (config == null) {\n+                    throw new RdsCloudException(\"missing configuration\");\n+                }\n+\n+                String url = URL_TOKEN;\n+                String payload = String.format(TOKEN_REQUEST, config.userEmail, config.userPassword);\n+\n+                logger.debug(LOG_HTTP_COMMAND, HTTP_POST, url.length());\n+                logger.debug(LOG_PAYLOAD_FMT, LOG_SENDING_MARK, url);\n+                logger.debug(LOG_PAYLOAD_FMT, LOG_SENDING_MARK, payload);\n+\n+                String json = RdsAccessToken.httpGetTokenJson(config.apiKey, payload);\n+\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(LOG_CONTENT_LENGTH, LOG_RECEIVED_MSG, json.length());\n+                    logger.trace(LOG_PAYLOAD_FMT, LOG_RECEIVED_MARK, json);\n+                } else if (logger.isDebugEnabled()) {\n+                    logger.debug(LOG_CONTENT_LENGTH_ABR, LOG_RECEIVED_MSG, json.length());\n+                    logger.debug(LOG_PAYLOAD_FMT_ABR, LOG_RECEIVED_MARK,\n+                            json.substring(0, Math.min(json.length(), 30)));\n+                }\n+\n+                accessToken = this.accessToken = RdsAccessToken.createFromJson(json);\n+                ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27eed7c9c257a9f963e447538ef794852722a2a7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNjYwNw==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r430536607", "createdAt": "2020-05-26T16:14:13Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsCloudHandler.java", "diffHunk": "@@ -84,17 +87,53 @@ public void dispose() {\n      * public method: used by RDS smart thermostat handlers return the polling\n      * interval (seconds)\n      */\n-    public int getPollInterval() {\n-        return (config != null ? config.pollingInterval : -1);\n+    public int getPollInterval() throws RdsCloudException {\n+        RdsCloudConfiguration config = this.config;\n+        if (config != null) {\n+            return config.pollingInterval;\n+        }\n+        throw new RdsCloudException(\"missing polling interval\");\n     }\n \n     /*\n      * private method: check if the current token is valid, and renew it if\n      * necessary\n      */\n     private synchronized void refreshToken() {\n+        RdsCloudConfiguration config = this.config;\n+        RdsAccessToken accessToken = this.accessToken;\n+\n         if (accessToken == null || accessToken.isExpired()) {\n-            accessToken = RdsAccessToken.create(config.apiKey, config.userEmail, config.userPassword);\n+            try {\n+                if (config == null) {\n+                    throw new RdsCloudException(\"missing configuration\");\n+                }\n+\n+                String url = URL_TOKEN;\n+                String payload = String.format(TOKEN_REQUEST, config.userEmail, config.userPassword);\n+\n+                logger.debug(LOG_HTTP_COMMAND, HTTP_POST, url.length());\n+                logger.debug(LOG_PAYLOAD_FMT, LOG_SENDING_MARK, url);\n+                logger.debug(LOG_PAYLOAD_FMT, LOG_SENDING_MARK, payload);\n+\n+                String json = RdsAccessToken.httpGetTokenJson(config.apiKey, payload);\n+\n+                if (logger.isTraceEnabled()) {\n+                    logger.trace(LOG_CONTENT_LENGTH, LOG_RECEIVED_MSG, json.length());\n+                    logger.trace(LOG_PAYLOAD_FMT, LOG_RECEIVED_MARK, json);\n+                } else if (logger.isDebugEnabled()) {\n+                    logger.debug(LOG_CONTENT_LENGTH_ABR, LOG_RECEIVED_MSG, json.length());\n+                    logger.debug(LOG_PAYLOAD_FMT_ABR, LOG_RECEIVED_MARK,\n+                            json.substring(0, Math.min(json.length(), 30)));\n+                }\n+\n+                accessToken = this.accessToken = RdsAccessToken.createFromJson(json);\n+                ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyMDkyNw=="}, "originalCommit": {"oid": "27eed7c9c257a9f963e447538ef794852722a2a7"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTYxMTE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1NDowM1rOGak_qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1NDowM1rOGak_qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyMjI4Mw==", "bodyText": "orphan semicolon.", "url": "https://github.com/openhab/openhab-addons/pull/7769#discussion_r430522283", "createdAt": "2020-05-26T15:54:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.siemensrds/src/main/java/org/openhab/binding/siemensrds/internal/RdsHandler.java", "diffHunk": "@@ -73,50 +82,54 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n     public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n \n-        config = getConfigAs(RdsConfiguration.class);\n+        RdsConfiguration config = this.config = getConfigAs(RdsConfiguration.class);\n \n-        if (config == null || config.plantId == null || config.plantId.isEmpty()) {\n+        if (config.plantId.isEmpty()) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing Plant Id\");\n             return;\n         }\n \n-        RdsCloudHandler cloud = getCloudHandler();\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.CONFIGURATION_PENDING);\n \n-        if (cloud == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing cloud server handler\");\n-            return;\n-        }\n+        try {\n+            RdsCloudHandler cloud = getCloudHandler();\n+\n+            if (cloud.getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, \"cloud server offline\");\n+                return;\n+            }\n \n-        if (cloud.getThing().getStatus() != ThingStatus.ONLINE) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, \"cloud server offline\");\n+            initializePolling();\n+        } catch (RdsCloudException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"missing cloud server handler\");\n             return;\n         }\n-\n-        initializePolling();\n     }\n \n     public void initializePolling() {\n-        RdsCloudHandler cloud = getCloudHandler();\n-\n-        if (cloud != null) {\n-            int pollInterval = cloud.getPollInterval();\n-\n-            if (pollInterval > 0) {\n-                // create a \"lazy\" polling scheduler\n-                if (lazyPollingScheduler == null || lazyPollingScheduler.isCancelled()) {\n-                    lazyPollingScheduler = scheduler.scheduleWithFixedDelay(this::lazyPollingSchedulerExecute,\n-                            pollInterval, pollInterval, TimeUnit.SECONDS);\n-                }\n-\n-                // create a \"fast\" polling scheduler\n-                fastPollingCallsToGo.set(FAST_POLL_CYCLES);\n-                if (fastPollingScheduler == null || fastPollingScheduler.isCancelled()) {\n-                    fastPollingScheduler = scheduler.scheduleWithFixedDelay(this::fastPollingSchedulerExecute,\n-                            FAST_POLL_INTERVAL, FAST_POLL_INTERVAL, TimeUnit.SECONDS);\n-                }\n+        try {\n+            int pollInterval = getCloudHandler().getPollInterval();\n+\n+            // create a \"lazy\" polling scheduler\n+            ScheduledFuture<?> lazyPollingScheduler = this.lazyPollingScheduler;\n+            if (lazyPollingScheduler == null || lazyPollingScheduler.isCancelled()) {\n+                this.lazyPollingScheduler = scheduler.scheduleWithFixedDelay(this::lazyPollingSchedulerExecute,\n+                        pollInterval, pollInterval, TimeUnit.SECONDS);\n+            }\n \n-                startFastPollingBurst();\n+            // create a \"fast\" polling scheduler\n+            fastPollingCallsToGo.set(FAST_POLL_CYCLES);\n+            ScheduledFuture<?> fastPollingScheduler = this.fastPollingScheduler;\n+            if (fastPollingScheduler == null || fastPollingScheduler.isCancelled()) {\n+                this.fastPollingScheduler = scheduler.scheduleWithFixedDelay(this::fastPollingSchedulerExecute,\n+                        FAST_POLL_INTERVAL, FAST_POLL_INTERVAL, TimeUnit.SECONDS);\n             }\n+\n+            startFastPollingBurst();\n+            ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27eed7c9c257a9f963e447538ef794852722a2a7"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4912, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}