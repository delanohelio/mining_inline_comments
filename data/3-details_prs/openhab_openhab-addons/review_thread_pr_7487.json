{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NDQ5Mzcy", "number": 7487, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzowMjowOFrOD3SxFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDoyMTo0OVrOD4ugrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzA1NzUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/handler/DaikinAcUnitHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzowMjowOFrOGNeC7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzowMjowOFrOGNeC7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3Njk0Mg==", "bodyText": "You should still log this", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416776942", "createdAt": "2020-04-28T17:02:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/handler/DaikinAcUnitHandler.java", "diffHunk": "@@ -131,4 +131,13 @@ protected void changeFanDir(String fanDir) throws DaikinCommunicationException {\n         info.fanMovement = FanMovement.valueOf(fanDir);\n         webTargets.setControlInfo(info);\n     }\n+\n+    @Override\n+    protected void registerUuid(String key) {\n+        try {\n+            webTargets.registerUuid(key);\n+        } catch (Exception e) {\n+            // suppress exceptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzMwOTYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNDoyMFrOGNggSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNDoyMFrOGNggSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNzIyNQ==", "bodyText": "You should also pass e in your constructor as a cause exception.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416817225", "createdAt": "2020-04-28T18:04:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -145,13 +192,39 @@ private String invoke(String uri, Map<String, String> params) throws DaikinCommu\n         }\n \n         if (response == null) {\n-            throw new DaikinCommunicationException(\n-                    String.format(\"Daikin controller returned error while invoking %s\", uriWithParams));\n+            throw new DaikinCommunicationException(\"Daikin controller returned error while invoking \" + uriWithParams);\n         }\n \n         return response;\n     }\n \n+    private String executeUrl(String url) throws DaikinCommunicationException {\n+        try {\n+            Request request = httpClient.newRequest(url)\n+                                        .method(HttpMethod.GET)\n+                                        .timeout(TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+            if (uuid != null) {\n+                request.header(\"X-Daikin-uuid\", uuid);\n+                logger.debug(\"Header: X-Daikin-uuid: {}\", uuid);\n+            }\n+            ContentResponse response = request.send();\n+\n+            if (response.getStatus() == HttpStatus.FORBIDDEN_403) {\n+                throw new DaikinCommunicationForbiddenException(\"Daikin controller access denied. Check uuid/key.\");\n+            }\n+\n+            if (response.getStatus() != HttpStatus.OK_200) {\n+                logger.debug(\"Daikin controller HTTP status: {} - {}\", response.getStatus(), response.getReason());\n+            }\n+\n+            return response.getContentAsString();\n+        } catch (DaikinCommunicationException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new DaikinCommunicationException(\"Daikin HTTP error: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzMxNDMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNTo0MFrOGNgjTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODozNzo1N1rOGNhxEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNzk5Nw==", "bodyText": "Does DaikinCommunicationException extend an IOException? If not then you don't need to catch it here.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416817997", "createdAt": "2020-04-28T18:05:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -136,7 +176,14 @@ private String invoke(String uri, Map<String, String> params) throws DaikinCommu\n         String response;\n         synchronized (this) {\n             try {\n-                response = HttpUtil.executeUrl(\"GET\", uriWithParams, TIMEOUT_MS);\n+                if (httpClient != null) {\n+                    response = executeUrl(uriWithParams);\n+                } else {\n+                    // a fall back method\n+                    response = HttpUtil.executeUrl(\"GET\", uriWithParams, TIMEOUT_MS);\n+                }\n+            } catch (DaikinCommunicationException ex) {\n+                throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzNzkwNg==", "bodyText": "Yes it does", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416837906", "createdAt": "2020-04-28T18:37:57Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -136,7 +176,14 @@ private String invoke(String uri, Map<String, String> params) throws DaikinCommu\n         String response;\n         synchronized (this) {\n             try {\n-                response = HttpUtil.executeUrl(\"GET\", uriWithParams, TIMEOUT_MS);\n+                if (httpClient != null) {\n+                    response = executeUrl(uriWithParams);\n+                } else {\n+                    // a fall back method\n+                    response = HttpUtil.executeUrl(\"GET\", uriWithParams, TIMEOUT_MS);\n+                }\n+            } catch (DaikinCommunicationException ex) {\n+                throw ex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNzk5Nw=="}, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzMxOTkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/config/DaikinConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNzowMVrOGNgmng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0MDoxMFrOGNh2Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODg0Ng==", "bodyText": "Are these new configs backwards compatible with existing setups?", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416818846", "createdAt": "2020-04-28T18:07:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/config/DaikinConfiguration.java", "diffHunk": "@@ -16,12 +16,18 @@\n  * Holds configuration data for a Daikin air conditioning unit.\n  *\n  * @author Tim Waterhouse - Initial contribution\n+ * @author Jimmy Tanagra - Add secure, uuid\n  *\n  */\n public class DaikinConfiguration {\n     public static final String HOST = \"host\";\n+    public static final String SECURE = \"secure\";\n+    public static final String UUID = \"uuid\";\n+    public static final String KEY = \"key\";\n \n     public String host;\n-\n+    public Boolean secure;\n+    public String uuid;\n+    public String key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgzOTE5OA==", "bodyText": "Yes they are. Existing config especially those using .things file that don't specify these configs will continue to work. The new configs are not required, at least for the existing adapters. They do need to be provided for the new adapter to work, otherwise a CONFIGURATION_ERROR will be issued on thing status.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416839198", "createdAt": "2020-04-28T18:40:10Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/config/DaikinConfiguration.java", "diffHunk": "@@ -16,12 +16,18 @@\n  * Holds configuration data for a Daikin air conditioning unit.\n  *\n  * @author Tim Waterhouse - Initial contribution\n+ * @author Jimmy Tanagra - Add secure, uuid\n  *\n  */\n public class DaikinConfiguration {\n     public static final String HOST = \"host\";\n+    public static final String SECURE = \"secure\";\n+    public static final String UUID = \"uuid\";\n+    public static final String KEY = \"key\";\n \n     public String host;\n-\n+    public Boolean secure;\n+    public String uuid;\n+    public String key;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODg0Ng=="}, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIzMzcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowMDoxNFrOGO2ZTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjozMzowN1rOGO8oYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNDQ2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<context>network_address</context>\n          \n          \n            \n            \t\t\t\t<context>network-address</context>", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418224461", "createdAt": "2020-04-30T19:00:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -5,16 +5,28 @@\n \txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n \n \t<config-description uri=\"thing-type:daikin:config\">\n-\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n-\t\t\t<label>Host</label>\n-\t\t\t<description>The Host address of the Daikin AC unit.</description>\n-\t\t\t<context>network_address</context>\n-\t\t</parameter>\n-\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n-\t\t\t<label>Refresh Interval</label>\n-\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n-\t\t\t<default>60</default>\n-\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<description>The Host address of the Daikin AC unit.</description>\n+\t\t\t\t<context>network_address</context>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjYyNg==", "bodyText": "this was inherited - will change it in the next commit", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418326626", "createdAt": "2020-04-30T22:33:07Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -5,16 +5,28 @@\n \txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n \n \t<config-description uri=\"thing-type:daikin:config\">\n-\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n-\t\t\t<label>Host</label>\n-\t\t\t<description>The Host address of the Daikin AC unit.</description>\n-\t\t\t<context>network_address</context>\n-\t\t</parameter>\n-\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n-\t\t\t<label>Refresh Interval</label>\n-\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n-\t\t\t<default>60</default>\n-\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<description>The Host address of the Daikin AC unit.</description>\n+\t\t\t\t<context>network_address</context>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNDQ2MQ=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIzNDg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowMDo0MVrOGO2aNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjozMzoyN1rOGO8o1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNDY5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n          \n          \n            \n            \t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418224694", "createdAt": "2020-04-30T19:00:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -5,16 +5,28 @@\n \txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n \n \t<config-description uri=\"thing-type:daikin:config\">\n-\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n-\t\t\t<label>Host</label>\n-\t\t\t<description>The Host address of the Daikin AC unit.</description>\n-\t\t\t<context>network_address</context>\n-\t\t</parameter>\n-\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n-\t\t\t<label>Refresh Interval</label>\n-\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n-\t\t\t<default>60</default>\n-\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<description>The Host address of the Daikin AC unit.</description>\n+\t\t\t\t<context>network_address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"secure\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Secure/HTTPS</label>\n+\t\t\t\t<description>Whether to access using https (default:false).</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"uuid\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>UUID</label>\n+\t\t\t\t<description>A unique UUID for authentication if required.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"key\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Key</label>\n+\t\t\t\t<description>The key obtained from the Daikin adapter.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjc0Mg==", "bodyText": "this was inherited - will change it in the next commit", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418326742", "createdAt": "2020-04-30T22:33:27Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -5,16 +5,28 @@\n \txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n \n \t<config-description uri=\"thing-type:daikin:config\">\n-\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n-\t\t\t<label>Host</label>\n-\t\t\t<description>The Host address of the Daikin AC unit.</description>\n-\t\t\t<context>network_address</context>\n-\t\t</parameter>\n-\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n-\t\t\t<label>Refresh Interval</label>\n-\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n-\t\t\t<default>60</default>\n-\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<description>The Host address of the Daikin AC unit.</description>\n+\t\t\t\t<context>network_address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"secure\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Secure/HTTPS</label>\n+\t\t\t\t<description>Whether to access using https (default:false).</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"uuid\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>UUID</label>\n+\t\t\t\t<description>A unique UUID for authentication if required.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"key\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Key</label>\n+\t\t\t\t<description>The key obtained from the Daikin adapter.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNDY5NA=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIzNzI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowMToxOVrOGO2bzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjozMzozOFrOGO8pFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNTEwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n          \n          \n            \n            \t\t\t\t<description>Time between fetches of the AC unit state.</description>", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418225103", "createdAt": "2020-04-30T19:01:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -5,16 +5,28 @@\n \txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n \n \t<config-description uri=\"thing-type:daikin:config\">\n-\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n-\t\t\t<label>Host</label>\n-\t\t\t<description>The Host address of the Daikin AC unit.</description>\n-\t\t\t<context>network_address</context>\n-\t\t</parameter>\n-\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n-\t\t\t<label>Refresh Interval</label>\n-\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n-\t\t\t<default>60</default>\n-\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<description>The Host address of the Daikin AC unit.</description>\n+\t\t\t\t<context>network_address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"secure\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Secure/HTTPS</label>\n+\t\t\t\t<description>Whether to access using https (default:false).</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"uuid\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>UUID</label>\n+\t\t\t\t<description>A unique UUID for authentication if required.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"key\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Key</label>\n+\t\t\t\t<description>The key obtained from the Daikin adapter.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyNjgwNQ==", "bodyText": "this was inherited - will change it in the next commit", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418326805", "createdAt": "2020-04-30T22:33:38Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -5,16 +5,28 @@\n \txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n \n \t<config-description uri=\"thing-type:daikin:config\">\n-\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n-\t\t\t<label>Host</label>\n-\t\t\t<description>The Host address of the Daikin AC unit.</description>\n-\t\t\t<context>network_address</context>\n-\t\t</parameter>\n-\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n-\t\t\t<label>Refresh Interval</label>\n-\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n-\t\t\t<default>60</default>\n-\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<description>The Host address of the Daikin AC unit.</description>\n+\t\t\t\t<context>network_address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"secure\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Secure/HTTPS</label>\n+\t\t\t\t<description>Whether to access using https (default:false).</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"uuid\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>UUID</label>\n+\t\t\t\t<description>A unique UUID for authentication if required.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"key\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Key</label>\n+\t\t\t\t<description>The key obtained from the Daikin adapter.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNTEwMw=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjI1Nzk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowNzo1MlrOGO2o8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyNjoxMVrOGO-u8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODQ2Ng==", "bodyText": "You should be creating client instances from the osgi org.eclipse.smarthome.io.net.http.HttpClientFactory service.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418228466", "createdAt": "2020-04-30T19:07:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;\n+\n     private Logger logger = LoggerFactory.getLogger(DaikinWebTargets.class);\n \n-    public DaikinWebTargets(String ipAddress) {\n-        String baseUri = \"http://\" + ipAddress + \"/\";\n+    public DaikinWebTargets(String host, Boolean secure, String uuid) {\n+        if (httpClient == null) {\n+            httpClient = new HttpClient(new SslContextFactory(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTI2Ng==", "bodyText": "I tried this. It didn't work because we need \"trust all\" from SslContextFactory. We're dealing with name mismatch - the adapter is accessed using https://192.168.1.x (ip address) and possibly self signed certificate. The Common Name (CN) of the certificate is something like \"0ADF1002341228818192.srv\", so clearly no way to get this name to match without creating a static DNS entry on the user's network. I have even tried httpClient.getSslContextFactory().setTrustAll(true) but that didn't seem to work. So this method of creating a custom HttpClient is the only way that seems to work.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418329266", "createdAt": "2020-04-30T22:40:36Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;\n+\n     private Logger logger = LoggerFactory.getLogger(DaikinWebTargets.class);\n \n-    public DaikinWebTargets(String ipAddress) {\n-        String baseUri = \"http://\" + ipAddress + \"/\";\n+    public DaikinWebTargets(String host, Boolean secure, String uuid) {\n+        if (httpClient == null) {\n+            httpClient = new HttpClient(new SslContextFactory(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODQ2Ng=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MTA3NA==", "bodyText": "Ok, since you had a good reason to create the client instance yourself I'll allow it.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418361074", "createdAt": "2020-05-01T00:26:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;\n+\n     private Logger logger = LoggerFactory.getLogger(DaikinWebTargets.class);\n \n-    public DaikinWebTargets(String ipAddress) {\n-        String baseUri = \"http://\" + ipAddress + \"/\";\n+    public DaikinWebTargets(String host, Boolean secure, String uuid) {\n+        if (httpClient == null) {\n+            httpClient = new HttpClient(new SslContextFactory(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODQ2Ng=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjI2MDgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowODo0M1rOGO2qvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMzo1ODozMlrOGPjbbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ==", "bodyText": "Make this non-static and final.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418228925", "createdAt": "2020-04-30T19:08:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMDUzNA==", "bodyText": "I opted to use static to reduce the number of instances of HttpClient within the binding. Using non-static and final, and creating the HttpClient without using the HttpClientFactory will result in the creation of HttpClient multiple times especially each time the discovery process runs.\nThere is a warning in HttpClientFactory.java (core code) that says in ALL CAPS:\nDO NOT CREATE NEW CLIENTS FOR EACH REQUEST", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418330534", "createdAt": "2020-04-30T22:44:20Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NzgzMA==", "bodyText": "Why not just supply the client instance through the constructor?", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418357830", "createdAt": "2020-05-01T00:13:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MjIyNg==", "bodyText": "Why not just supply the client instance through the constructor?\n\nI did that at first. There are two places the instances will need to be created: in the handlerfactory service and in the discovery service. I thought I'd simplify the overall complexity by just creating it inside the DaikinWebTargets. In any case, it will still need to be created, not using the HttpClientFactory.\nShould I move back the creation/instantiation into the two services and pass the object through the constructor of DaikinWebTargets?", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418362226", "createdAt": "2020-05-01T00:29:58Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzgxNw==", "bodyText": "If we were to move the instantiation to the services, there will be two instances of HttpClient created instead of one.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418363817", "createdAt": "2020-05-01T00:34:57Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NjY2Ng==", "bodyText": "You can make your own http client factory service that the discovery service and handler factory service can get a reference to.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418366666", "createdAt": "2020-05-01T00:46:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3OTAwNw==", "bodyText": "I would be happy to do this, but I'd like to better understand the problem.\nCould you please clarify: are you suggesting to create a separate osgi service that would create the httpclient, and that you're not referring to org.eclipse.smarthome.io.net.http.HttpClientFactory::createHttpClient()?\nCould you explain what is the reasoning behind this and the benefit over the current approach?", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418379007", "createdAt": "2020-05-01T01:39:39Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM4NTI2Nw==", "bodyText": "Well your current approach of using a static field makes it unclear what controls the lifecycle of the http client. Openhab runs in an osgi environment so it is exepcted that osgi should control the lifecycle of every service and object, either directly or indirectly. Right now if osgi wants to shut down your binding there is no way for it to shut down your static client instance.\n\nCould you please clarify: are you suggesting to create a separate osgi service that would create the httpclient\n\nI was suggesting that you create a separate service, since it didn't seem appropriate for your handler factory to have references to the discovery service or vice versa. Having an independent service that could be referenced by both seemed like the best approach.\nIf you don't want to create a separate osgi service then you could just have your handler factory manually register the http client factory through the bundle context.\n\nand that you're not referring to org.eclipse.smarthome.io.net.http.HttpClientFactory::createHttpClient()?\n\nNo, I am not suggesting to create your own subclass of org.eclipse.smarthome.io.net.http.HttpClientFactory since you wouldn't want to have any conflicts in the osgi registry. You would need to create your own factory interface instead.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418385267", "createdAt": "2020-05-01T02:07:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2MjI4Ng==", "bodyText": "I've created a separate osgi service for the HttpClient.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418962286", "createdAt": "2020-05-02T13:58:32Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ=="}, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzcxOTEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoxMzozN1rOGPl4kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoxMzozN1rOGPl4kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjUxMw==", "bodyText": "Just to be safe\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void initialize() {\n          \n          \n            \n                private synchronized void initialize() {", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419002513", "createdAt": "2020-05-02T20:13:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.error(\"error while stopping Daikin http client\", e);\n+                // nothing else we can do here\n+            }\n+            httpClient = null;\n+            logger.debug(\"Daikin http client stopped\");\n+        }\n+    }\n+\n+    @Override\n+    public HttpClient getHttpClient() {\n+        initialize();\n+        return httpClient;\n+    }\n+\n+    private void initialize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655260ba80811864c880c5c313b17b763d943bb5"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzcyMTEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/discovery/DaikinACUnitDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoxNjoxMVrOGPl5hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODoxMDoyOFrOGPpyHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjc1Ng==", "bodyText": "The default charset varies from system to system so it is better to specify it yourself instead of using the default.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419002756", "createdAt": "2020-05-02T20:16:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/discovery/DaikinACUnitDiscoveryService.java", "diffHunk": "@@ -117,33 +128,54 @@ private Runnable createScanner() {\n \n     private boolean receivePacketAndDiscover(DatagramSocket socket) {\n         try {\n-            // Use a one byte buffer since we don't really care about the contents.\n-            byte[] buffer = new byte[1];\n+            byte[] buffer = new byte[512];\n             DatagramPacket incomingPacket = new DatagramPacket(buffer, buffer.length);\n             socket.setSoTimeout(1000 /* one second */);\n             socket.receive(incomingPacket);\n \n             String host = incomingPacket.getAddress().toString().substring(1);\n-            logger.debug(\"Received packet from {}\", host);\n+            String data = new String(incomingPacket.getData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98aeb2d2306b50a9ca1b96c5e76e067861edaab"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNzE3MA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419017170", "createdAt": "2020-05-02T22:43:06Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/discovery/DaikinACUnitDiscoveryService.java", "diffHunk": "@@ -117,33 +128,54 @@ private Runnable createScanner() {\n \n     private boolean receivePacketAndDiscover(DatagramSocket socket) {\n         try {\n-            // Use a one byte buffer since we don't really care about the contents.\n-            byte[] buffer = new byte[1];\n+            byte[] buffer = new byte[512];\n             DatagramPacket incomingPacket = new DatagramPacket(buffer, buffer.length);\n             socket.setSoTimeout(1000 /* one second */);\n             socket.receive(incomingPacket);\n \n             String host = incomingPacket.getAddress().toString().substring(1);\n-            logger.debug(\"Received packet from {}\", host);\n+            String data = new String(incomingPacket.getData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjc1Ng=="}, "originalCommit": {"oid": "e98aeb2d2306b50a9ca1b96c5e76e067861edaab"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NjM5Ng==", "bodyText": "I've changed it to US-ASCII", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419066396", "createdAt": "2020-05-03T08:10:28Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/discovery/DaikinACUnitDiscoveryService.java", "diffHunk": "@@ -117,33 +128,54 @@ private Runnable createScanner() {\n \n     private boolean receivePacketAndDiscover(DatagramSocket socket) {\n         try {\n-            // Use a one byte buffer since we don't really care about the contents.\n-            byte[] buffer = new byte[1];\n+            byte[] buffer = new byte[512];\n             DatagramPacket incomingPacket = new DatagramPacket(buffer, buffer.length);\n             socket.setSoTimeout(1000 /* one second */);\n             socket.receive(incomingPacket);\n \n             String host = incomingPacket.getAddress().toString().substring(1);\n-            logger.debug(\"Received packet from {}\", host);\n+            String data = new String(incomingPacket.getData());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjc1Ng=="}, "originalCommit": {"oid": "e98aeb2d2306b50a9ca1b96c5e76e067861edaab"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzcyMzM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoxODo1NVrOGPl6pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMjo0MzoyN1rOGPmx6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMzA0Nw==", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.\nMy general rule for logging levels is:\n\ntrace - used for normal expected execution paths\ndebug - used for unexepected execution paths, but well within normal operation\ninfo - used for notable points in an execution path, like a milestone. (in openhab we try reserve this logging level for the core, so bindings should rarely ever call this.)\nwarn - used for notable unexpected execution paths that a regular user (not just a developer) should be notified of. Warnings should be used to indicate that something not-normal occurred and user intervention is required to resolve. Warnings do not indicate a failure to operate merely an abnormal condition of operation that can still be handled by the binding. Failures in binding operation should be indicated by changing the thing status to offline.\nerror - used to indicate catastrophic program failure. This should be used to indicate a catastrophic failure in openhab's ability to operate. A failure in a binding would never cause openhab as a whole to fail so a failure in a bindings should never log an error. Instead that failure should be indicated by changing the thing status.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419003047", "createdAt": "2020-05-02T20:18:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.error(\"error while stopping Daikin http client\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98aeb2d2306b50a9ca1b96c5e76e067861edaab"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAxNzE5Mw==", "bodyText": "changed to debug", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419017193", "createdAt": "2020-05-02T22:43:27Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.error(\"error while stopping Daikin http client\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMzA0Nw=="}, "originalCommit": {"oid": "e98aeb2d2306b50a9ca1b96c5e76e067861edaab"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODA4NTQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDoxNzoxMFrOGPocgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODowOTo1MVrOGPpx1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NDQ4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Could not start Daikin http client\", e);\n          \n          \n            \n                            logger.debug(\"Could not start Daikin http client\", e);", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419044480", "createdAt": "2020-05-03T04:17:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+                logger.debug(\"Daikin http client stopped\");\n+            } catch (Exception e) {\n+                logger.debug(\"error while stopping Daikin http client\", e);\n+            }\n+            httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public HttpClient getHttpClient() {\n+        initialize();\n+        return httpClient;\n+    }\n+\n+    private synchronized void initialize() {\n+        if (httpClient == null) {\n+            httpClient = new HttpClient(new SslContextFactory(true));\n+            try {\n+                httpClient.start();\n+                logger.debug(\"Daikin http client started\");\n+            } catch (Exception e) {\n+                logger.error(\"Could not start Daikin http client\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b83636f48eb36cba4e83f85344da39ac8e70455"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NjMyNQ==", "bodyText": "Oops I missed that one. Needed more sleep!", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419066325", "createdAt": "2020-05-03T08:09:51Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+                logger.debug(\"Daikin http client stopped\");\n+            } catch (Exception e) {\n+                logger.debug(\"error while stopping Daikin http client\", e);\n+            }\n+            httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public HttpClient getHttpClient() {\n+        initialize();\n+        return httpClient;\n+    }\n+\n+    private synchronized void initialize() {\n+        if (httpClient == null) {\n+            httpClient = new HttpClient(new SslContextFactory(true));\n+            try {\n+                httpClient.start();\n+                logger.debug(\"Daikin http client started\");\n+            } catch (Exception e) {\n+                logger.error(\"Could not start Daikin http client\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NDQ4MA=="}, "originalCommit": {"oid": "6b83636f48eb36cba4e83f85344da39ac8e70455"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODA4ODc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDoyMTo0OVrOGPod_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwODowOToxOFrOGPpxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NDg2Mw==", "bodyText": "I can understand the hassle of dealing with the null checker, but please don't try to bypass it with @NonNullByDefault({}), it just hides potential concurrency issues.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @NonNullByDefault({}) HttpClient httpClient;\n          \n          \n            \n                private @Nullable HttpClient httpClient;", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419044863", "createdAt": "2020-05-03T04:21:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b83636f48eb36cba4e83f85344da39ac8e70455"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA2NjI2Mg==", "bodyText": "I added @NonNullByDefault to all the classes to remove the compile warnings and went through the affected code to adjust accordingly.\nI'm sorry that it would add more things to be reviewed.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419066262", "createdAt": "2020-05-03T08:09:18Z", "author": {"login": "jimtng"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NDg2Mw=="}, "originalCommit": {"oid": "6b83636f48eb36cba4e83f85344da39ac8e70455"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 378, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}