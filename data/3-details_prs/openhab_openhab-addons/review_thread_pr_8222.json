{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NDEyMjEy", "number": 8222, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTozOTozN1rOEVLWmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NTo0NVrOEec61w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjQxNTYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/actions/AVMFritzHeatingActions.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTozOTozN1rOG7ycMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOTozODoyN1rOHJha9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NTU4NQ==", "bodyText": "I am actually not certain myself anymore, but shouldn't actions be in exported packages, so that they can be seen by the rule engine? Scanning our repo here, I noticed that we have a few bindings putting actions in exported packages, while others have it in internal packages...", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r465345585", "createdAt": "2020-08-04T21:39:37Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.actions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce0f1aa0000a1270952578de164e25812b38876"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0NjM1Ng==", "bodyText": "Me neither. But does the rule engine really need to know them? I don't think so because we use a wrapper action to access all available ThingActions by filtering on scope and ThingUID.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r465946356", "createdAt": "2020-08-05T19:14:39Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.actions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NTU4NQ=="}, "originalCommit": {"oid": "1ce0f1aa0000a1270952578de164e25812b38876"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NjczOQ==", "bodyText": "It is using the wrapper at runtime, but for the DSL and specifically the content completion in the editor, it is imho required:\n\nThe mail action is so far the only one I am using, but that one is in an exported package, so I'd suggest to do the same with the others.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r465996739", "createdAt": "2020-08-05T20:52:25Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.actions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NTU4NQ=="}, "originalCommit": {"oid": "1ce0f1aa0000a1270952578de164e25812b38876"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMDk5Nw==", "bodyText": "Good point. I moved them.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r466600997", "createdAt": "2020-08-06T18:19:20Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.actions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NTU4NQ=="}, "originalCommit": {"oid": "1ce0f1aa0000a1270952578de164e25812b38876"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcwNjg4Mw==", "bodyText": "I see that you moved not only the Actions class, but also the AVMFritzHeatingActionsHandler interface - is this necessary to be exposed? If not, I'd say it should stay internal.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r476706883", "createdAt": "2020-08-25T20:07:03Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.actions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NTU4NQ=="}, "originalCommit": {"oid": "1ce0f1aa0000a1270952578de164e25812b38876"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0NjgwNA==", "bodyText": "I moved it back to an internal package.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r479746804", "createdAt": "2020-08-30T09:38:27Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.actions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NTU4NQ=="}, "originalCommit": {"oid": "1ce0f1aa0000a1270952578de164e25812b38876"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjQzMjc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/dto/HeatingModel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTo0NTozN1rOG7ymmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo0NjozMlrOG8aAXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODI1MA==", "bodyText": "I know, it has not been introduced by you, but is it intentionally getWindowopenactiv and not getWindowopenactive?", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r465348250", "createdAt": "2020-08-04T21:45:37Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/dto/HeatingModel.java", "diffHunk": "@@ -153,14 +155,26 @@ public void setBatterylow(BigDecimal batterylow) {\n         this.batterylow = batterylow;\n     }\n \n-    public BigDecimal getWindowopenactiv() {\n+    public @Nullable BigDecimal getWindowopenactiv() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce0f1aa0000a1270952578de164e25812b38876"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0NDk4NA==", "bodyText": "It has been introduced by me some years ago. I just reused the names of the XML tags for DTOs. And it is written in that way over there too.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r465944984", "createdAt": "2020-08-05T19:12:03Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/dto/HeatingModel.java", "diffHunk": "@@ -153,14 +155,26 @@ public void setBatterylow(BigDecimal batterylow) {\n         this.batterylow = batterylow;\n     }\n \n-    public BigDecimal getWindowopenactiv() {\n+    public @Nullable BigDecimal getWindowopenactiv() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODI1MA=="}, "originalCommit": {"oid": "1ce0f1aa0000a1270952578de164e25812b38876"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5MzgyMA==", "bodyText": "ok :-)", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r465993820", "createdAt": "2020-08-05T20:46:32Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/dto/HeatingModel.java", "diffHunk": "@@ -153,14 +155,26 @@ public void setBatterylow(BigDecimal batterylow) {\n         this.batterylow = batterylow;\n     }\n \n-    public BigDecimal getWindowopenactiv() {\n+    public @Nullable BigDecimal getWindowopenactiv() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODI1MA=="}, "originalCommit": {"oid": "1ce0f1aa0000a1270952578de164e25812b38876"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTI4NTE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/AVMFritzBindingConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODozNzozMVrOHHYvjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOTozODoyMVrOHJha5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNzQ3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .of(SUPPORTED_BUTTON_THING_TYPES_UIDS.stream(), SUPPORTED_HEATING_THING_TYPES.stream(),\n          \n          \n            \n                                SUPPORTED_DEVICE_THING_TYPES_UIDS.stream(), SUPPORTED_GROUP_THING_TYPES_UIDS.stream(),\n          \n          \n            \n                                SUPPORTED_BRIDGE_THING_TYPES_UIDS.stream())\n          \n          \n            \n                        .reduce(Stream::concat).orElseGet(Stream::empty).collect(Collectors.toSet()));\n          \n          \n            \n                        .of(SUPPORTED_BUTTON_THING_TYPES_UIDS, SUPPORTED_HEATING_THING_TYPES,\n          \n          \n            \n                                SUPPORTED_DEVICE_THING_TYPES_UIDS, SUPPORTED_GROUP_THING_TYPES_UIDS,\n          \n          \n            \n                                SUPPORTED_BRIDGE_THING_TYPES_UIDS)\n          \n          \n            \n                        .flatMap(Set::stream).orElseGet(Stream::empty).collect(Collectors.toSet()));", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r477507470", "createdAt": "2020-08-26T18:37:31Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/AVMFritzBindingConstants.java", "diffHunk": "@@ -149,7 +150,8 @@\n             .unmodifiableSet(Stream.of(BRIDGE_THING_TYPE, PL546E_STANDALONE_THING_TYPE).collect(Collectors.toSet()));\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n-            .of(SUPPORTED_BUTTON_THING_TYPES_UIDS.stream(), SUPPORTED_DEVICE_THING_TYPES_UIDS.stream(),\n-                    SUPPORTED_GROUP_THING_TYPES_UIDS.stream(), SUPPORTED_BRIDGE_THING_TYPES_UIDS.stream())\n+            .of(SUPPORTED_BUTTON_THING_TYPES_UIDS.stream(), SUPPORTED_HEATING_THING_TYPES.stream(),\n+                    SUPPORTED_DEVICE_THING_TYPES_UIDS.stream(), SUPPORTED_GROUP_THING_TYPES_UIDS.stream(),\n+                    SUPPORTED_BRIDGE_THING_TYPES_UIDS.stream())\n             .reduce(Stream::concat).orElseGet(Stream::empty).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0Njc5MQ==", "bodyText": "Thanks for the hint. I changed it. But we do not need orElseGet(...) combined with flatMap(...).", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r479746791", "createdAt": "2020-08-30T09:38:21Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/AVMFritzBindingConstants.java", "diffHunk": "@@ -149,7 +150,8 @@\n             .unmodifiableSet(Stream.of(BRIDGE_THING_TYPE, PL546E_STANDALONE_THING_TYPE).collect(Collectors.toSet()));\n \n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n-            .of(SUPPORTED_BUTTON_THING_TYPES_UIDS.stream(), SUPPORTED_DEVICE_THING_TYPES_UIDS.stream(),\n-                    SUPPORTED_GROUP_THING_TYPES_UIDS.stream(), SUPPORTED_BRIDGE_THING_TYPES_UIDS.stream())\n+            .of(SUPPORTED_BUTTON_THING_TYPES_UIDS.stream(), SUPPORTED_HEATING_THING_TYPES.stream(),\n+                    SUPPORTED_DEVICE_THING_TYPES_UIDS.stream(), SUPPORTED_GROUP_THING_TYPES_UIDS.stream(),\n+                    SUPPORTED_BRIDGE_THING_TYPES_UIDS.stream())\n             .reduce(Stream::concat).orElseGet(Stream::empty).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwNzQ3MA=="}, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTMwNjIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo0Mzo1OVrOHHY8zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwOTozODoxNVrOHJha2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMDg2MA==", "bodyText": "Proxy instances can only be interfaces, not concrete classes. So you need to make an interface that has all of your methods your actions are going to use.\nThis invokeMethodOf method should likewise return an interface instead.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r477510860", "createdAt": "2020-08-26T18:43:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.actions;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AVMFritzHeatingActions} defines thing actions for heating devices / groups of the avmfritz binding.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ThingActionsScope(name = \"avmfritz\")\n+@NonNullByDefault\n+public class AVMFritzHeatingActions implements ThingActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AVMFritzHeatingActions.class);\n+\n+    private @Nullable AVMFritzHeatingActionsHandler handler;\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        this.handler = (AVMFritzHeatingActionsHandler) handler;\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return handler;\n+    }\n+\n+    @RuleAction(label = \"@text/setBoostModeModeActionLabel\", description = \"@text/setBoostModeActionDescription\")\n+    public void setBoostMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setBoostModeDurationInputLabel\", description = \"@text/setBoostModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setBoostMode(duration.longValue());\n+    }\n+\n+    public static void setBoostMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setBoostMode(duration);\n+    }\n+\n+    @RuleAction(label = \"@text/setWindowOpenModeActionLabel\", description = \"@text/setWindowOpenModeActionDescription\")\n+    public void setWindowOpenMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setWindowOpenModeDurationInputLabel\", description = \"@text/setWindowOpenModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setWindowOpenMode(duration.longValue());\n+    }\n+\n+    public static void setWindowOpenMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setWindowOpenMode(duration);\n+    }\n+\n+    private static AVMFritzHeatingActions invokeMethodOf(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"Actions cannot be null\");\n+        }\n+        if (actions.getClass().getName().equals(AVMFritzHeatingActions.class.getName())) {\n+            if (actions instanceof AVMFritzHeatingActions) {\n+                return (AVMFritzHeatingActions) actions;\n+            } else {\n+                return (AVMFritzHeatingActions) Proxy.newProxyInstance(AVMFritzHeatingActions.class.getClassLoader(),\n+                        new Class[] { AVMFritzHeatingActions.class }, (Object proxy, Method method, Object[] args) -> {\n+                            Method m = actions.getClass().getDeclaredMethod(method.getName(),\n+                                    method.getParameterTypes());\n+                            return m.invoke(actions, args);\n+                        });\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Actions is not an instance of AVMFritzHeatingActions\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMTkwNw==", "bodyText": "Isn't that the pattern that was just done on ALL our thing actions in this repo?", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r477531907", "createdAt": "2020-08-26T19:15:56Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.actions;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AVMFritzHeatingActions} defines thing actions for heating devices / groups of the avmfritz binding.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ThingActionsScope(name = \"avmfritz\")\n+@NonNullByDefault\n+public class AVMFritzHeatingActions implements ThingActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AVMFritzHeatingActions.class);\n+\n+    private @Nullable AVMFritzHeatingActionsHandler handler;\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        this.handler = (AVMFritzHeatingActionsHandler) handler;\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return handler;\n+    }\n+\n+    @RuleAction(label = \"@text/setBoostModeModeActionLabel\", description = \"@text/setBoostModeActionDescription\")\n+    public void setBoostMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setBoostModeDurationInputLabel\", description = \"@text/setBoostModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setBoostMode(duration.longValue());\n+    }\n+\n+    public static void setBoostMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setBoostMode(duration);\n+    }\n+\n+    @RuleAction(label = \"@text/setWindowOpenModeActionLabel\", description = \"@text/setWindowOpenModeActionDescription\")\n+    public void setWindowOpenMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setWindowOpenModeDurationInputLabel\", description = \"@text/setWindowOpenModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setWindowOpenMode(duration.longValue());\n+    }\n+\n+    public static void setWindowOpenMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setWindowOpenMode(duration);\n+    }\n+\n+    private static AVMFritzHeatingActions invokeMethodOf(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"Actions cannot be null\");\n+        }\n+        if (actions.getClass().getName().equals(AVMFritzHeatingActions.class.getName())) {\n+            if (actions instanceof AVMFritzHeatingActions) {\n+                return (AVMFritzHeatingActions) actions;\n+            } else {\n+                return (AVMFritzHeatingActions) Proxy.newProxyInstance(AVMFritzHeatingActions.class.getClassLoader(),\n+                        new Class[] { AVMFritzHeatingActions.class }, (Object proxy, Method method, Object[] args) -> {\n+                            Method m = actions.getClass().getDeclaredMethod(method.getName(),\n+                                    method.getParameterTypes());\n+                            return m.invoke(actions, args);\n+                        });\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Actions is not an instance of AVMFritzHeatingActions\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMDg2MA=="}, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc0MTc4NA==", "bodyText": "Isn't that the pattern that was just done on ALL our thing actions in this repo?\n\nIt is, but the pattern wasn't done correctly in this particular instance. All of the other ones (or at least the ones that I approved) require an additional interface class to be created.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r477741784", "createdAt": "2020-08-27T00:12:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.actions;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AVMFritzHeatingActions} defines thing actions for heating devices / groups of the avmfritz binding.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ThingActionsScope(name = \"avmfritz\")\n+@NonNullByDefault\n+public class AVMFritzHeatingActions implements ThingActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AVMFritzHeatingActions.class);\n+\n+    private @Nullable AVMFritzHeatingActionsHandler handler;\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        this.handler = (AVMFritzHeatingActionsHandler) handler;\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return handler;\n+    }\n+\n+    @RuleAction(label = \"@text/setBoostModeModeActionLabel\", description = \"@text/setBoostModeActionDescription\")\n+    public void setBoostMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setBoostModeDurationInputLabel\", description = \"@text/setBoostModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setBoostMode(duration.longValue());\n+    }\n+\n+    public static void setBoostMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setBoostMode(duration);\n+    }\n+\n+    @RuleAction(label = \"@text/setWindowOpenModeActionLabel\", description = \"@text/setWindowOpenModeActionDescription\")\n+    public void setWindowOpenMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setWindowOpenModeDurationInputLabel\", description = \"@text/setWindowOpenModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setWindowOpenMode(duration.longValue());\n+    }\n+\n+    public static void setWindowOpenMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setWindowOpenMode(duration);\n+    }\n+\n+    private static AVMFritzHeatingActions invokeMethodOf(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"Actions cannot be null\");\n+        }\n+        if (actions.getClass().getName().equals(AVMFritzHeatingActions.class.getName())) {\n+            if (actions instanceof AVMFritzHeatingActions) {\n+                return (AVMFritzHeatingActions) actions;\n+            } else {\n+                return (AVMFritzHeatingActions) Proxy.newProxyInstance(AVMFritzHeatingActions.class.getClassLoader(),\n+                        new Class[] { AVMFritzHeatingActions.class }, (Object proxy, Method method, Object[] args) -> {\n+                            Method m = actions.getClass().getDeclaredMethod(method.getName(),\n+                                    method.getParameterTypes());\n+                            return m.invoke(actions, args);\n+                        });\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Actions is not an instance of AVMFritzHeatingActions\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMDg2MA=="}, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc0Njc3Nw==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r479746777", "createdAt": "2020-08-30T09:38:15Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.actions;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AVMFritzHeatingActions} defines thing actions for heating devices / groups of the avmfritz binding.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ThingActionsScope(name = \"avmfritz\")\n+@NonNullByDefault\n+public class AVMFritzHeatingActions implements ThingActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AVMFritzHeatingActions.class);\n+\n+    private @Nullable AVMFritzHeatingActionsHandler handler;\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        this.handler = (AVMFritzHeatingActionsHandler) handler;\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return handler;\n+    }\n+\n+    @RuleAction(label = \"@text/setBoostModeModeActionLabel\", description = \"@text/setBoostModeActionDescription\")\n+    public void setBoostMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setBoostModeDurationInputLabel\", description = \"@text/setBoostModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setBoostMode(duration.longValue());\n+    }\n+\n+    public static void setBoostMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setBoostMode(duration);\n+    }\n+\n+    @RuleAction(label = \"@text/setWindowOpenModeActionLabel\", description = \"@text/setWindowOpenModeActionDescription\")\n+    public void setWindowOpenMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setWindowOpenModeDurationInputLabel\", description = \"@text/setWindowOpenModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setWindowOpenMode(duration.longValue());\n+    }\n+\n+    public static void setWindowOpenMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setWindowOpenMode(duration);\n+    }\n+\n+    private static AVMFritzHeatingActions invokeMethodOf(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"Actions cannot be null\");\n+        }\n+        if (actions.getClass().getName().equals(AVMFritzHeatingActions.class.getName())) {\n+            if (actions instanceof AVMFritzHeatingActions) {\n+                return (AVMFritzHeatingActions) actions;\n+            } else {\n+                return (AVMFritzHeatingActions) Proxy.newProxyInstance(AVMFritzHeatingActions.class.getClassLoader(),\n+                        new Class[] { AVMFritzHeatingActions.class }, (Object proxy, Method method, Object[] args) -> {\n+                            Method m = actions.getClass().getDeclaredMethod(method.getName(),\n+                                    method.getParameterTypes());\n+                            return m.invoke(actions, args);\n+                        });\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Actions is not an instance of AVMFritzHeatingActions\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMDg2MA=="}, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTMxMTI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.avmfritz/src/main/resources/ESH-INF/i18n/avmfritz.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo0NToxMVrOHHY_3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToxNTowOVrOHHaNfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMTY0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            setWindowOpenModeActionDescription = Activates the Window Open mode of the heating thermostat.\n          \n          \n            \n            setWindowOpenModeActionDescription = Activates the Window Open Mode of the heating thermostat.\n          \n      \n    \n    \n  \n\nShould mode be capitalized here?", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r477511645", "createdAt": "2020-08-26T18:45:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/resources/ESH-INF/i18n/avmfritz.properties", "diffHunk": "@@ -0,0 +1,10 @@\n+# thing actions\n+setBoostModeModeActionLabel = Set Boost Mode\n+setBoostModeActionDescription = Activates the Boost mode of the heating thermostat.\n+setBoostModeDurationInputLabel = Duration\n+setBoostModeDurationInputDescription = Duration in seconds, min. 1, max. 86400, 0 for deactivation.\n+\n+setWindowOpenModeActionLabel = Set Window Open Mode\n+setWindowOpenModeActionDescription = Activates the Window Open mode of the heating thermostat.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMTUxNw==", "bodyText": "I would say no.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r477531517", "createdAt": "2020-08-26T19:15:09Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/resources/ESH-INF/i18n/avmfritz.properties", "diffHunk": "@@ -0,0 +1,10 @@\n+# thing actions\n+setBoostModeModeActionLabel = Set Boost Mode\n+setBoostModeActionDescription = Activates the Boost mode of the heating thermostat.\n+setBoostModeDurationInputLabel = Duration\n+setBoostModeDurationInputDescription = Duration in seconds, min. 1, max. 86400, 0 for deactivation.\n+\n+setWindowOpenModeActionLabel = Set Window Open Mode\n+setWindowOpenModeActionDescription = Activates the Window Open mode of the heating thermostat.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMTY0NQ=="}, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTMxMTkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.avmfritz/src/main/resources/ESH-INF/i18n/avmfritz.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo0NToyMFrOHHZANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToxNToyMlrOHHaN6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMTczMg==", "bodyText": "same question here", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r477511732", "createdAt": "2020-08-26T18:45:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/resources/ESH-INF/i18n/avmfritz.properties", "diffHunk": "@@ -0,0 +1,10 @@\n+# thing actions\n+setBoostModeModeActionLabel = Set Boost Mode\n+setBoostModeActionDescription = Activates the Boost mode of the heating thermostat.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMTYyNw==", "bodyText": "Then I would say no again ;-)", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r477531627", "createdAt": "2020-08-26T19:15:22Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/resources/ESH-INF/i18n/avmfritz.properties", "diffHunk": "@@ -0,0 +1,10 @@\n+# thing actions\n+setBoostModeModeActionLabel = Set Boost Mode\n+setBoostModeActionDescription = Activates the Boost mode of the heating thermostat.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxMTczMg=="}, "originalCommit": {"oid": "42a2361578c9c3077e8c5e8138cab01291e687ec"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzYyNDEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo0MjoyN1rOHKGvRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo0MjoyN1rOHKGvRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1ODIxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (actions.getClass().getName().equals(AVMFritzHeatingActionsHandler.class.getName())) {\n          \n          \n            \n                    if (actions.getClass().getName().equals(AVMFritzHeatingActions.class.getName())) {\n          \n      \n    \n    \n  \n\nThe class name should be compared against the name of the concrete action class since you would never receive an instance of a non-concrete class as a parameter.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r480358213", "createdAt": "2020-08-31T19:42:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -78,22 +79,24 @@ public static void setWindowOpenMode(@Nullable ThingActions actions, Long durati\n         invokeMethodOf(actions).setWindowOpenMode(duration);\n     }\n \n-    private static AVMFritzHeatingActions invokeMethodOf(@Nullable ThingActions actions) {\n+    private static AVMFritzHeatingActionsHandler invokeMethodOf(@Nullable ThingActions actions) {\n         if (actions == null) {\n             throw new IllegalArgumentException(\"Actions cannot be null\");\n         }\n-        if (actions.getClass().getName().equals(AVMFritzHeatingActions.class.getName())) {\n-            if (actions instanceof AVMFritzHeatingActions) {\n-                return (AVMFritzHeatingActions) actions;\n+        if (actions.getClass().getName().equals(AVMFritzHeatingActionsHandler.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de1c09f64c8305e2266372ccf2e9b9399e5752c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzY2NTUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo1NTo0NVrOHKHIrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0OTo0MFrOHLDv4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NDcxNw==", "bodyText": "Although yes AVMFritzHeatingActionsHandler is an interface, I think it is the wrong interface here since it extends ThingHandler. The interface returned by the invokeMethodOf should be an interface implemented by AVMFritzHeatingActions so it would reason that it would be a type of ThingHandlerService not a ThingHandler.\nYou should create a new interface that has only two methods: setBoostMode(Long) and setWindowOpenMode(Long) and have AVMFritzHeatingActions implement that new interface. Likewise it is that new interface which would be returned from invokeMethodOf. So you would need to change your usages of AVMFritzHeatingActionsHandler here use the new interface instead.\nSorry if this has all been confusing but you are almost there. If you need a concrete reference to follow then you can look at the way the Ecobee binding has done it.\nhttps://github.com/openhab/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/action/EcobeeActions.java#L89", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r480364717", "createdAt": "2020-08-31T19:55:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.actions;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.avmfritz.internal.actions.AVMFritzHeatingActionsHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AVMFritzHeatingActions} defines thing actions for heating devices / groups of the avmfritz binding.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ThingActionsScope(name = \"avmfritz\")\n+@NonNullByDefault\n+public class AVMFritzHeatingActions implements ThingActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AVMFritzHeatingActions.class);\n+\n+    private @Nullable AVMFritzHeatingActionsHandler handler;\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        this.handler = (AVMFritzHeatingActionsHandler) handler;\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return handler;\n+    }\n+\n+    @RuleAction(label = \"@text/setBoostModeModeActionLabel\", description = \"@text/setBoostModeActionDescription\")\n+    public void setBoostMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setBoostModeDurationInputLabel\", description = \"@text/setBoostModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setBoostMode(duration.longValue());\n+    }\n+\n+    public static void setBoostMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setBoostMode(duration);\n+    }\n+\n+    @RuleAction(label = \"@text/setWindowOpenModeActionLabel\", description = \"@text/setWindowOpenModeActionDescription\")\n+    public void setWindowOpenMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setWindowOpenModeDurationInputLabel\", description = \"@text/setWindowOpenModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setWindowOpenMode(duration.longValue());\n+    }\n+\n+    public static void setWindowOpenMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setWindowOpenMode(duration);\n+    }\n+\n+    private static AVMFritzHeatingActionsHandler invokeMethodOf(@Nullable ThingActions actions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de1c09f64c8305e2266372ccf2e9b9399e5752c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1Nzc5NA==", "bodyText": "Thanks for your details explanation. I think I now got the point.", "url": "https://github.com/openhab/openhab-addons/pull/8222#discussion_r481357794", "createdAt": "2020-09-01T18:49:40Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/actions/AVMFritzHeatingActions.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.actions;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.avmfritz.internal.actions.AVMFritzHeatingActionsHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AVMFritzHeatingActions} defines thing actions for heating devices / groups of the avmfritz binding.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ThingActionsScope(name = \"avmfritz\")\n+@NonNullByDefault\n+public class AVMFritzHeatingActions implements ThingActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AVMFritzHeatingActions.class);\n+\n+    private @Nullable AVMFritzHeatingActionsHandler handler;\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        this.handler = (AVMFritzHeatingActionsHandler) handler;\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return handler;\n+    }\n+\n+    @RuleAction(label = \"@text/setBoostModeModeActionLabel\", description = \"@text/setBoostModeActionDescription\")\n+    public void setBoostMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setBoostModeDurationInputLabel\", description = \"@text/setBoostModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setBoostMode(duration.longValue());\n+    }\n+\n+    public static void setBoostMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setBoostMode(duration);\n+    }\n+\n+    @RuleAction(label = \"@text/setWindowOpenModeActionLabel\", description = \"@text/setWindowOpenModeActionDescription\")\n+    public void setWindowOpenMode(\n+            @ActionInput(name = \"Duration\", label = \"@text/setWindowOpenModeDurationInputLabel\", description = \"@text/setWindowOpenModeDurationInputDescription\", type = \"java.lang.Long\", required = true) Long duration) {\n+        AVMFritzHeatingActionsHandler actionsHandler = handler;\n+        if (actionsHandler == null) {\n+            logger.warn(\"AVMFritzHeatingActions ThingHandler is null!\");\n+            return;\n+        }\n+        actionsHandler.setWindowOpenMode(duration.longValue());\n+    }\n+\n+    public static void setWindowOpenMode(@Nullable ThingActions actions, Long duration) {\n+        invokeMethodOf(actions).setWindowOpenMode(duration);\n+    }\n+\n+    private static AVMFritzHeatingActionsHandler invokeMethodOf(@Nullable ThingActions actions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2NDcxNw=="}, "originalCommit": {"oid": "1de1c09f64c8305e2266372ccf2e9b9399e5752c"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4539, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}