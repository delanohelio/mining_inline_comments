{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjIxMDgw", "number": 8909, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzoyOTozMlrOE1BLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwOToyNToyMFrOE5JcnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDI5MjgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/discovery/RemoteopenhabDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzoyOTozMlrOHtEHBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo1NDo1OVrOHuPX6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNTMwMg==", "bodyText": "I suggest that you change your discovery service into a ThingHandlerService so that you don't have to manage osgi registration of this class. It is a bit verbose to explain how to make the change but I've found another PR that shows exactly the changes that are required: https://github.com/openhab/openhab-addons/pull/6396/files", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r517015302", "createdAt": "2020-11-03T23:29:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/discovery/RemoteopenhabDiscoveryService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.remoteopenhab.internal.discovery;\n+\n+import static org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabThingConfiguration.THING_UID;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.remoteopenhab.internal.RemoteopenhabBindingConstants;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabStatusInfo;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabThing;\n+import org.openhab.binding.remoteopenhab.internal.exceptions.RemoteopenhabException;\n+import org.openhab.binding.remoteopenhab.internal.handler.RemoteopenhabBridgeHandler;\n+import org.openhab.binding.remoteopenhab.internal.listener.RemoteopenhabThingsDataListener;\n+import org.openhab.binding.remoteopenhab.internal.rest.RemoteopenhabRestClient;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RemoteopenhabDiscoveryService} is responsible for discovering all the remote things\n+ * available in the remote openHAB server.\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RemoteopenhabDiscoveryService extends AbstractDiscoveryService implements RemoteopenhabThingsDataListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13bbe622cfedb4d3194f83d6b90af769dbee3111"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzMDQ3NA==", "bodyText": "Looks like a great feature.\nLots of bindings are not using this feature.", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r518030474", "createdAt": "2020-11-05T12:57:39Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/discovery/RemoteopenhabDiscoveryService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.remoteopenhab.internal.discovery;\n+\n+import static org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabThingConfiguration.THING_UID;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.remoteopenhab.internal.RemoteopenhabBindingConstants;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabStatusInfo;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabThing;\n+import org.openhab.binding.remoteopenhab.internal.exceptions.RemoteopenhabException;\n+import org.openhab.binding.remoteopenhab.internal.handler.RemoteopenhabBridgeHandler;\n+import org.openhab.binding.remoteopenhab.internal.listener.RemoteopenhabThingsDataListener;\n+import org.openhab.binding.remoteopenhab.internal.rest.RemoteopenhabRestClient;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RemoteopenhabDiscoveryService} is responsible for discovering all the remote things\n+ * available in the remote openHAB server.\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RemoteopenhabDiscoveryService extends AbstractDiscoveryService implements RemoteopenhabThingsDataListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNTMwMg=="}, "originalCommit": {"oid": "13bbe622cfedb4d3194f83d6b90af769dbee3111"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0ODQyNA==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r518248424", "createdAt": "2020-11-05T17:54:59Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/discovery/RemoteopenhabDiscoveryService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.remoteopenhab.internal.discovery;\n+\n+import static org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabThingConfiguration.THING_UID;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.remoteopenhab.internal.RemoteopenhabBindingConstants;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabStatusInfo;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabThing;\n+import org.openhab.binding.remoteopenhab.internal.exceptions.RemoteopenhabException;\n+import org.openhab.binding.remoteopenhab.internal.handler.RemoteopenhabBridgeHandler;\n+import org.openhab.binding.remoteopenhab.internal.listener.RemoteopenhabThingsDataListener;\n+import org.openhab.binding.remoteopenhab.internal.rest.RemoteopenhabRestClient;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RemoteopenhabDiscoveryService} is responsible for discovering all the remote things\n+ * available in the remote openHAB server.\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RemoteopenhabDiscoveryService extends AbstractDiscoveryService implements RemoteopenhabThingsDataListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNTMwMg=="}, "originalCommit": {"oid": "13bbe622cfedb4d3194f83d6b90af769dbee3111"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDMwMDMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/handler/RemoteopenhabThingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzozMjo0NlrOHtELLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxOToxN1rOHtkQZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNjM2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                scheduler.schedule(() -> {\n          \n          \n            \n                                    try {\n          \n          \n            \n                                        RemoteopenhabThing thing = client.getRemoteThing(uid);\n          \n          \n            \n                                        createTriggerChannels(thing, config.buildChannels);\n          \n          \n            \n                                        RemoteopenhabStatusInfo statusInfo = thing.statusInfo;\n          \n          \n            \n                                        if (statusInfo != null) {\n          \n          \n            \n                                            updateThingStatus(uid, statusInfo);\n          \n          \n            \n                                        }\n          \n          \n            \n                                    } catch (RemoteopenhabException e) {\n          \n          \n            \n                                        logger.debug(\"{}\", e.getMessage(), e);\n          \n          \n            \n                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                                    }\n          \n          \n            \n                                }, 0, TimeUnit.SECONDS);\n          \n          \n            \n                                scheduler.execute(() -> {\n          \n          \n            \n                                    try {\n          \n          \n            \n                                        RemoteopenhabThing thing = client.getRemoteThing(uid);\n          \n          \n            \n                                        createTriggerChannels(thing, config.buildChannels);\n          \n          \n            \n                                        RemoteopenhabStatusInfo statusInfo = thing.statusInfo;\n          \n          \n            \n                                        if (statusInfo != null) {\n          \n          \n            \n                                            updateThingStatus(uid, statusInfo);\n          \n          \n            \n                                        }\n          \n          \n            \n                                    } catch (RemoteopenhabException e) {\n          \n          \n            \n                                        logger.debug(\"{}\", e.getMessage(), e);\n          \n          \n            \n                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                                    }\n          \n          \n            \n                                });", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r517016367", "createdAt": "2020-11-03T23:32:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/handler/RemoteopenhabThingHandler.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.remoteopenhab.internal.handler;\n+\n+import static org.openhab.binding.remoteopenhab.internal.RemoteopenhabBindingConstants.*;\n+import static org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabTriggerChannelConfiguration.CHANNEL_UID;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabThingConfiguration;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabChannel;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabStatusInfo;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabThing;\n+import org.openhab.binding.remoteopenhab.internal.exceptions.RemoteopenhabException;\n+import org.openhab.binding.remoteopenhab.internal.listener.RemoteopenhabThingsDataListener;\n+import org.openhab.binding.remoteopenhab.internal.rest.RemoteopenhabRestClient;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RemoteopenhabThingHandler} is responsible for handling status updates associated to\n+ * any remote thing.\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RemoteopenhabThingHandler extends BaseThingHandler implements RemoteopenhabThingsDataListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RemoteopenhabThingHandler.class);\n+\n+    private @Nullable RemoteopenhabRestClient restClient;\n+\n+    private @NonNullByDefault({}) RemoteopenhabThingConfiguration config;\n+\n+    public RemoteopenhabThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // No state channel defined for this thing type and so no command to handle\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing remote openHAB handler for thing {}\", getThing().getUID());\n+        Bridge bridge = getBridge();\n+        initializeThing(bridge != null ? bridge.getStatus() : null);\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"bridgeStatusChanged {} for thing {}\", bridgeStatusInfo, getThing().getUID());\n+        initializeThing(bridgeStatusInfo.getStatus());\n+    }\n+\n+    private void initializeThing(@Nullable ThingStatus bridgeStatus) {\n+        Bridge bridge = getBridge();\n+        BridgeHandler bridgeHandler = bridge != null ? bridge.getHandler() : null;\n+        RemoteopenhabRestClient oldClient = this.restClient;\n+        if (oldClient != null) {\n+            oldClient.removeThingsDataListener(this);\n+            this.restClient = null;\n+        }\n+        if (bridgeHandler != null && bridgeStatus != null) {\n+            if (bridgeStatus == ThingStatus.ONLINE) {\n+                config = getConfigAs(RemoteopenhabThingConfiguration.class);\n+\n+                String uid = getConfigThingUID();\n+                if (uid.length() == 0) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"Undefined thing UID setting in the thing configuration\");\n+                } else {\n+                    RemoteopenhabRestClient client = ((RemoteopenhabBridgeHandler) bridgeHandler).gestRestClient();\n+                    client.addThingsDataListener(this);\n+                    this.restClient = client;\n+\n+                    updateStatus(ThingStatus.UNKNOWN);\n+\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            RemoteopenhabThing thing = client.getRemoteThing(uid);\n+                            createTriggerChannels(thing, config.buildChannels);\n+                            RemoteopenhabStatusInfo statusInfo = thing.statusInfo;\n+                            if (statusInfo != null) {\n+                                updateThingStatus(uid, statusInfo);\n+                            }\n+                        } catch (RemoteopenhabException e) {\n+                            logger.debug(\"{}\", e.getMessage(), e);\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        }\n+                    }, 0, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13bbe622cfedb4d3194f83d6b90af769dbee3111"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MTk4OA==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r517541988", "createdAt": "2020-11-04T18:19:17Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/handler/RemoteopenhabThingHandler.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.remoteopenhab.internal.handler;\n+\n+import static org.openhab.binding.remoteopenhab.internal.RemoteopenhabBindingConstants.*;\n+import static org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabTriggerChannelConfiguration.CHANNEL_UID;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.remoteopenhab.internal.config.RemoteopenhabThingConfiguration;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabChannel;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabStatusInfo;\n+import org.openhab.binding.remoteopenhab.internal.data.RemoteopenhabThing;\n+import org.openhab.binding.remoteopenhab.internal.exceptions.RemoteopenhabException;\n+import org.openhab.binding.remoteopenhab.internal.listener.RemoteopenhabThingsDataListener;\n+import org.openhab.binding.remoteopenhab.internal.rest.RemoteopenhabRestClient;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelKind;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link RemoteopenhabThingHandler} is responsible for handling status updates associated to\n+ * any remote thing.\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RemoteopenhabThingHandler extends BaseThingHandler implements RemoteopenhabThingsDataListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RemoteopenhabThingHandler.class);\n+\n+    private @Nullable RemoteopenhabRestClient restClient;\n+\n+    private @NonNullByDefault({}) RemoteopenhabThingConfiguration config;\n+\n+    public RemoteopenhabThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // No state channel defined for this thing type and so no command to handle\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"initializing remote openHAB handler for thing {}\", getThing().getUID());\n+        Bridge bridge = getBridge();\n+        initializeThing(bridge != null ? bridge.getStatus() : null);\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        logger.debug(\"bridgeStatusChanged {} for thing {}\", bridgeStatusInfo, getThing().getUID());\n+        initializeThing(bridgeStatusInfo.getStatus());\n+    }\n+\n+    private void initializeThing(@Nullable ThingStatus bridgeStatus) {\n+        Bridge bridge = getBridge();\n+        BridgeHandler bridgeHandler = bridge != null ? bridge.getHandler() : null;\n+        RemoteopenhabRestClient oldClient = this.restClient;\n+        if (oldClient != null) {\n+            oldClient.removeThingsDataListener(this);\n+            this.restClient = null;\n+        }\n+        if (bridgeHandler != null && bridgeStatus != null) {\n+            if (bridgeStatus == ThingStatus.ONLINE) {\n+                config = getConfigAs(RemoteopenhabThingConfiguration.class);\n+\n+                String uid = getConfigThingUID();\n+                if (uid.length() == 0) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"Undefined thing UID setting in the thing configuration\");\n+                } else {\n+                    RemoteopenhabRestClient client = ((RemoteopenhabBridgeHandler) bridgeHandler).gestRestClient();\n+                    client.addThingsDataListener(this);\n+                    this.restClient = client;\n+\n+                    updateStatus(ThingStatus.UNKNOWN);\n+\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            RemoteopenhabThing thing = client.getRemoteThing(uid);\n+                            createTriggerChannels(thing, config.buildChannels);\n+                            RemoteopenhabStatusInfo statusInfo = thing.statusInfo;\n+                            if (statusInfo != null) {\n+                                updateThingStatus(uid, statusInfo);\n+                            }\n+                        } catch (RemoteopenhabException e) {\n+                            logger.debug(\"{}\", e.getMessage(), e);\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                        }\n+                    }, 0, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNjM2Nw=="}, "originalCommit": {"oid": "13bbe622cfedb4d3194f83d6b90af769dbee3111"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA2OTQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/RemoteopenhabHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1MTo0MFrOHv8vFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTozOTozMVrOHv-tcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MDIxNA==", "bodyText": "super.deactivate should be called last", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520040214", "createdAt": "2020-11-09T18:51:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/RemoteopenhabHandlerFactory.java", "diffHunk": "@@ -44,22 +63,103 @@\n @Component(service = ThingHandlerFactory.class, configurationPid = \"binding.remoteopenhab\")\n public class RemoteopenhabHandlerFactory extends BaseThingHandlerFactory {\n \n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Stream\n+            .concat(RemoteopenhabBindingConstants.SUPPORTED_BRIDGE_TYPES_UIDS.stream(),\n+                    RemoteopenhabBindingConstants.SUPPORTED_THING_TYPES_UIDS.stream())\n+            .collect(Collectors.toSet());\n+\n+    private final Logger logger = LoggerFactory.getLogger(RemoteopenhabHandlerFactory.class);\n+\n+    private final HttpClient httpClient;\n     private final ClientBuilder clientBuilder;\n     private final SseEventSourceFactory eventSourceFactory;\n     private final RemoteopenhabChannelTypeProvider channelTypeProvider;\n     private final RemoteopenhabStateDescriptionOptionProvider stateDescriptionProvider;\n     private final Gson jsonParser;\n \n+    private HttpClient httpClientTrustingCert;\n+\n     @Activate\n-    public RemoteopenhabHandlerFactory(final @Reference ClientBuilder clientBuilder,\n-            final @Reference SseEventSourceFactory eventSourceFactory,\n+    public RemoteopenhabHandlerFactory(final @Reference HttpClientFactory httpClientFactory,\n+            final @Reference ClientBuilder clientBuilder, final @Reference SseEventSourceFactory eventSourceFactory,\n             final @Reference RemoteopenhabChannelTypeProvider channelTypeProvider,\n             final @Reference RemoteopenhabStateDescriptionOptionProvider stateDescriptionProvider) {\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+        this.httpClientTrustingCert = httpClientFactory.createHttpClient(RemoteopenhabBindingConstants.BINDING_ID);\n         this.clientBuilder = clientBuilder;\n         this.eventSourceFactory = eventSourceFactory;\n         this.channelTypeProvider = channelTypeProvider;\n         this.stateDescriptionProvider = stateDescriptionProvider;\n-        jsonParser = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.IDENTITY).create();\n+        this.jsonParser = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.IDENTITY).create();\n+\n+        try {\n+            SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n+\n+            TrustManager[] trustAllCerts = new TrustManager[] { new X509ExtendedTrustManager() {\n+                @Override\n+                public void checkClientTrusted(X509Certificate @Nullable [] chain, @Nullable String authType)\n+                        throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkServerTrusted(X509Certificate @Nullable [] chain, @Nullable String authType)\n+                        throws CertificateException {\n+                }\n+\n+                @Override\n+                public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                    return null;\n+                }\n+\n+                @Override\n+                public void checkClientTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable Socket socket) throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkServerTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable Socket socket) throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkClientTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable SSLEngine engine) throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkServerTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable SSLEngine engine) throws CertificateException {\n+                }\n+            } };\n+            sslContext.init(null, trustAllCerts, null);\n+\n+            this.httpClientTrustingCert.getSslContextFactory().setSslContext(sslContext);\n+        } catch (NoSuchAlgorithmException e) {\n+            logger.warn(\"An exception occurred while requesting the SSL encryption algorithm : '{}'\", e.getMessage(),\n+                    e);\n+        } catch (KeyManagementException e) {\n+            logger.warn(\"An exception occurred while initialising the SSL context : '{}'\", e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    protected void activate(ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        try {\n+            httpClientTrustingCert.start();\n+        } catch (Exception e) {\n+            logger.warn(\"Unable to start Jetty HttpClient\", e);\n+        }\n+    }\n+\n+    @Override\n+    protected void deactivate(ComponentContext componentContext) {\n+        super.deactivate(componentContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3MjU2MA==", "bodyText": "Ok", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520072560", "createdAt": "2020-11-09T19:39:31Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/RemoteopenhabHandlerFactory.java", "diffHunk": "@@ -44,22 +63,103 @@\n @Component(service = ThingHandlerFactory.class, configurationPid = \"binding.remoteopenhab\")\n public class RemoteopenhabHandlerFactory extends BaseThingHandlerFactory {\n \n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Stream\n+            .concat(RemoteopenhabBindingConstants.SUPPORTED_BRIDGE_TYPES_UIDS.stream(),\n+                    RemoteopenhabBindingConstants.SUPPORTED_THING_TYPES_UIDS.stream())\n+            .collect(Collectors.toSet());\n+\n+    private final Logger logger = LoggerFactory.getLogger(RemoteopenhabHandlerFactory.class);\n+\n+    private final HttpClient httpClient;\n     private final ClientBuilder clientBuilder;\n     private final SseEventSourceFactory eventSourceFactory;\n     private final RemoteopenhabChannelTypeProvider channelTypeProvider;\n     private final RemoteopenhabStateDescriptionOptionProvider stateDescriptionProvider;\n     private final Gson jsonParser;\n \n+    private HttpClient httpClientTrustingCert;\n+\n     @Activate\n-    public RemoteopenhabHandlerFactory(final @Reference ClientBuilder clientBuilder,\n-            final @Reference SseEventSourceFactory eventSourceFactory,\n+    public RemoteopenhabHandlerFactory(final @Reference HttpClientFactory httpClientFactory,\n+            final @Reference ClientBuilder clientBuilder, final @Reference SseEventSourceFactory eventSourceFactory,\n             final @Reference RemoteopenhabChannelTypeProvider channelTypeProvider,\n             final @Reference RemoteopenhabStateDescriptionOptionProvider stateDescriptionProvider) {\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+        this.httpClientTrustingCert = httpClientFactory.createHttpClient(RemoteopenhabBindingConstants.BINDING_ID);\n         this.clientBuilder = clientBuilder;\n         this.eventSourceFactory = eventSourceFactory;\n         this.channelTypeProvider = channelTypeProvider;\n         this.stateDescriptionProvider = stateDescriptionProvider;\n-        jsonParser = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.IDENTITY).create();\n+        this.jsonParser = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.IDENTITY).create();\n+\n+        try {\n+            SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n+\n+            TrustManager[] trustAllCerts = new TrustManager[] { new X509ExtendedTrustManager() {\n+                @Override\n+                public void checkClientTrusted(X509Certificate @Nullable [] chain, @Nullable String authType)\n+                        throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkServerTrusted(X509Certificate @Nullable [] chain, @Nullable String authType)\n+                        throws CertificateException {\n+                }\n+\n+                @Override\n+                public X509Certificate @Nullable [] getAcceptedIssuers() {\n+                    return null;\n+                }\n+\n+                @Override\n+                public void checkClientTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable Socket socket) throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkServerTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable Socket socket) throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkClientTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable SSLEngine engine) throws CertificateException {\n+                }\n+\n+                @Override\n+                public void checkServerTrusted(X509Certificate @Nullable [] chain, @Nullable String authType,\n+                        @Nullable SSLEngine engine) throws CertificateException {\n+                }\n+            } };\n+            sslContext.init(null, trustAllCerts, null);\n+\n+            this.httpClientTrustingCert.getSslContextFactory().setSslContext(sslContext);\n+        } catch (NoSuchAlgorithmException e) {\n+            logger.warn(\"An exception occurred while requesting the SSL encryption algorithm : '{}'\", e.getMessage(),\n+                    e);\n+        } catch (KeyManagementException e) {\n+            logger.warn(\"An exception occurred while initialising the SSL context : '{}'\", e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    protected void activate(ComponentContext componentContext) {\n+        super.activate(componentContext);\n+        try {\n+            httpClientTrustingCert.start();\n+        } catch (Exception e) {\n+            logger.warn(\"Unable to start Jetty HttpClient\", e);\n+        }\n+    }\n+\n+    @Override\n+    protected void deactivate(ComponentContext componentContext) {\n+        super.deactivate(componentContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MDIxNA=="}, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA4MDIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/RemoteopenhabHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1NDoyNFrOHv81jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDo0Njo1MFrOHwA-GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MTg2OQ==", "bodyText": "What is the benefit of overriding this method?", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520041869", "createdAt": "2020-11-09T18:54:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/RemoteopenhabHandlerFactory.java", "diffHunk": "@@ -70,16 +170,36 @@ public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n         return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n     }\n \n+    @Override\n+    public @Nullable Thing createThing(ThingTypeUID thingTypeUID, Configuration configuration,\n+            @Nullable ThingUID thingUID, @Nullable ThingUID bridgeUID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NjgxMg==", "bodyText": "The purpose is to inject the bridgeId in the thing UID. You can find the same method in a lot of bindings. Is it something no more needed because already done by the core framework ?", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520096812", "createdAt": "2020-11-09T20:22:35Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/RemoteopenhabHandlerFactory.java", "diffHunk": "@@ -70,16 +170,36 @@ public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n         return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n     }\n \n+    @Override\n+    public @Nullable Thing createThing(ThingTypeUID thingTypeUID, Configuration configuration,\n+            @Nullable ThingUID thingUID, @Nullable ThingUID bridgeUID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MTg2OQ=="}, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwOTU5Mg==", "bodyText": "It is still needed I think. I was just curious.", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520109592", "createdAt": "2020-11-09T20:46:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/RemoteopenhabHandlerFactory.java", "diffHunk": "@@ -70,16 +170,36 @@ public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n         return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n     }\n \n+    @Override\n+    public @Nullable Thing createThing(ThingTypeUID thingTypeUID, Configuration configuration,\n+            @Nullable ThingUID thingUID, @Nullable ThingUID bridgeUID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MTg2OQ=="}, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDEzMDUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowNTowMFrOHv9Ufw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowNTowMFrOHv9Ufw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0OTc5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | useHttps           | no       | Set it to true in case you want to use HTTPS to communicate with the remote openHAB server. Default is false.     |\n          \n          \n            \n            | useHttps           | no       | Set to true if you want to use HTTPS to communicate with the remote openHAB server. Default is false.     |", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520049791", "createdAt": "2020-11-09T19:05:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "diffHunk": "@@ -24,39 +26,73 @@ You will find in the inbox one discovery thing per remote server interface.\n So if your remote server has one IPv4 address and one IPv6 address, you will discover two things in the inbox.\n Just choose one of the two things.\n \n+Once a bridge thing representing a remote openHAB server is created, all things from this remote server are discovered when you scan for new things.\n+\n ## Binding Configuration\n \n The binding has no configuration options, all configuration is done at Thing level.\n \n ## Thing Configuration\n \n-The thing has the following configuration parameters:\n+The `server` thing has the following configuration parameters:\n+\n+| Parameter          | Required | Description                                                                                                       |\n+|--------------------|----------|-------------------------------------------------------------------------------------------------------------------|\n+| host               | yes      | The host name or IP address of the remote openHAB server.                                                         |\n+| useHttps           | no       | Set it to true in case you want to use HTTPS to communicate with the remote openHAB server. Default is false.     |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDE1MDUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowODoyOVrOHv9hPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowODoyOVrOHv9hPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1MzA1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | trustedCertificate | no       | Set it to true in case you want to use HTTPS even without a valid SSL certificate provided by your remote server. |\n          \n          \n            \n            | trustedCertificate | no       | Set to true if you want to use HTTPS even without a valid SSL certificate provided by your remote server. |", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520053053", "createdAt": "2020-11-09T19:08:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "diffHunk": "@@ -24,39 +26,73 @@ You will find in the inbox one discovery thing per remote server interface.\n So if your remote server has one IPv4 address and one IPv6 address, you will discover two things in the inbox.\n Just choose one of the two things.\n \n+Once a bridge thing representing a remote openHAB server is created, all things from this remote server are discovered when you scan for new things.\n+\n ## Binding Configuration\n \n The binding has no configuration options, all configuration is done at Thing level.\n \n ## Thing Configuration\n \n-The thing has the following configuration parameters:\n+The `server` thing has the following configuration parameters:\n+\n+| Parameter          | Required | Description                                                                                                       |\n+|--------------------|----------|-------------------------------------------------------------------------------------------------------------------|\n+| host               | yes      | The host name or IP address of the remote openHAB server.                                                         |\n+| useHttps           | no       | Set it to true in case you want to use HTTPS to communicate with the remote openHAB server. Default is false.     |\n+| port               | yes      | The HTTP port to use to communicate with the remote openHAB server. Default is 8080.                              |\n+| trustedCertificate | no       | Set it to true in case you want to use HTTPS even without a valid SSL certificate provided by your remote server. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDE2OTI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToxMTozOFrOHv9tlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowODozNFrOHv_tsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NjIxNQ==", "bodyText": "I feel that this param should be renamed to buildTriggerChannels since from the description this config only affects trigger channels and not all channels.", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520056215", "createdAt": "2020-11-09T19:11:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "diffHunk": "@@ -24,39 +26,73 @@ You will find in the inbox one discovery thing per remote server interface.\n So if your remote server has one IPv4 address and one IPv6 address, you will discover two things in the inbox.\n Just choose one of the two things.\n \n+Once a bridge thing representing a remote openHAB server is created, all things from this remote server are discovered when you scan for new things.\n+\n ## Binding Configuration\n \n The binding has no configuration options, all configuration is done at Thing level.\n \n ## Thing Configuration\n \n-The thing has the following configuration parameters:\n+The `server` thing has the following configuration parameters:\n+\n+| Parameter          | Required | Description                                                                                                       |\n+|--------------------|----------|-------------------------------------------------------------------------------------------------------------------|\n+| host               | yes      | The host name or IP address of the remote openHAB server.                                                         |\n+| useHttps           | no       | Set it to true in case you want to use HTTPS to communicate with the remote openHAB server. Default is false.     |\n+| port               | yes      | The HTTP port to use to communicate with the remote openHAB server. Default is 8080.                              |\n+| trustedCertificate | no       | Set it to true in case you want to use HTTPS even without a valid SSL certificate provided by your remote server. |\n+| restPath           | yes      | The subpath of the REST API on the remote openHAB server. Default is /rest                                        |\n+| token              | no       | The token to use when the remote openHAB server is setup to require authorization to run its REST API.            |\n+\n+The `thing` thing has the following configuration parameters:\n+\n+| Parameter     | Required | Description                                 |\n+|---------------|----------|---------------------------------------------|\n+| thingUID      | yes      | The thing UID in the remote openHAB server. |\n+| buildChannels | no       | If set to true, a trigger channel will be automatically created and linked to each trigger channel from the remote thing. Default is true. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4OTAwOA==", "bodyText": "Renamed", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520089008", "createdAt": "2020-11-09T20:08:34Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "diffHunk": "@@ -24,39 +26,73 @@ You will find in the inbox one discovery thing per remote server interface.\n So if your remote server has one IPv4 address and one IPv6 address, you will discover two things in the inbox.\n Just choose one of the two things.\n \n+Once a bridge thing representing a remote openHAB server is created, all things from this remote server are discovered when you scan for new things.\n+\n ## Binding Configuration\n \n The binding has no configuration options, all configuration is done at Thing level.\n \n ## Thing Configuration\n \n-The thing has the following configuration parameters:\n+The `server` thing has the following configuration parameters:\n+\n+| Parameter          | Required | Description                                                                                                       |\n+|--------------------|----------|-------------------------------------------------------------------------------------------------------------------|\n+| host               | yes      | The host name or IP address of the remote openHAB server.                                                         |\n+| useHttps           | no       | Set it to true in case you want to use HTTPS to communicate with the remote openHAB server. Default is false.     |\n+| port               | yes      | The HTTP port to use to communicate with the remote openHAB server. Default is 8080.                              |\n+| trustedCertificate | no       | Set it to true in case you want to use HTTPS even without a valid SSL certificate provided by your remote server. |\n+| restPath           | yes      | The subpath of the REST API on the remote openHAB server. Default is /rest                                        |\n+| token              | no       | The token to use when the remote openHAB server is setup to require authorization to run its REST API.            |\n+\n+The `thing` thing has the following configuration parameters:\n+\n+| Parameter     | Required | Description                                 |\n+|---------------|----------|---------------------------------------------|\n+| thingUID      | yes      | The thing UID in the remote openHAB server. |\n+| buildChannels | no       | If set to true, a trigger channel will be automatically created and linked to each trigger channel from the remote thing. Default is true. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NjIxNQ=="}, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDE4OTk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToxNzowOVrOHv96tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToxNzowOVrOHv96tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1OTU3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            One first usage of this binding is the distribution of your home automation system on a set of openHAB servers.\n          \n          \n            \n            One use of this binding is to distribute your home automation system on multiple of openHAB servers.", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520059572", "createdAt": "2020-11-09T19:17:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "diffHunk": "@@ -3,9 +3,11 @@\n The Remote openHAB binding allows to communicate with remote openHAB servers.\n The communication is bidirectional.\n The binding on the local server listens to any item state updates on the remote server and updates accordingly the linked channel on the local server.\n-It also transfers any item command from the local server to the remote server.\n+It transfers any item command from the local server to the remote server.\n+It can map any remote thing to a local thing.\n+Through this mapping, in your rules (local server), you can take actions based upon status updates or status changes generated by remote things and you can take actions based upon trigger events generated by the trigger channels defined in the remote thing.\n \n-One first usage is the distribution of your home automation system on a set of openHAB servers.\n+One first usage of this binding is the distribution of your home automation system on a set of openHAB servers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDE5NTg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToxODo0OVrOHv9-VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToxODo0OVrOHv9-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2MDUwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A second usage is for users having old openHAB v1 bindings running that were not migrated to openHAB v2 or openHAB v3.\n          \n          \n            \n            Another use is for users to interact with older versions of openHAB that may support old openHAB v1 bindings that were not migrated to openHAB v2 or openHAB v3.", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520060500", "createdAt": "2020-11-09T19:18:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "diffHunk": "@@ -3,9 +3,11 @@\n The Remote openHAB binding allows to communicate with remote openHAB servers.\n The communication is bidirectional.\n The binding on the local server listens to any item state updates on the remote server and updates accordingly the linked channel on the local server.\n-It also transfers any item command from the local server to the remote server.\n+It transfers any item command from the local server to the remote server.\n+It can map any remote thing to a local thing.\n+Through this mapping, in your rules (local server), you can take actions based upon status updates or status changes generated by remote things and you can take actions based upon trigger events generated by the trigger channels defined in the remote thing.\n \n-One first usage is the distribution of your home automation system on a set of openHAB servers.\n+One first usage of this binding is the distribution of your home automation system on a set of openHAB servers.\n \n A second usage is for users having old openHAB v1 bindings running that were not migrated to openHAB v2 or openHAB v3.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDIxNzU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyNDoyMlrOHv-LdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyNDoyMlrOHv-LdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2Mzg2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please note that every remote status different from UNKNOWN, ONLINE and OFFLINE will then be considered as OFFLINE on the local server.\n          \n          \n            \n            Please note that every remote status other than UNKNOWN, ONLINE and OFFLINE will then be considered as OFFLINE on the local server.", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520063861", "createdAt": "2020-11-09T19:24:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "diffHunk": "@@ -24,39 +26,73 @@ You will find in the inbox one discovery thing per remote server interface.\n So if your remote server has one IPv4 address and one IPv6 address, you will discover two things in the inbox.\n Just choose one of the two things.\n \n+Once a bridge thing representing a remote openHAB server is created, all things from this remote server are discovered when you scan for new things.\n+\n ## Binding Configuration\n \n The binding has no configuration options, all configuration is done at Thing level.\n \n ## Thing Configuration\n \n-The thing has the following configuration parameters:\n+The `server` thing has the following configuration parameters:\n+\n+| Parameter          | Required | Description                                                                                                       |\n+|--------------------|----------|-------------------------------------------------------------------------------------------------------------------|\n+| host               | yes      | The host name or IP address of the remote openHAB server.                                                         |\n+| useHttps           | no       | Set it to true in case you want to use HTTPS to communicate with the remote openHAB server. Default is false.     |\n+| port               | yes      | The HTTP port to use to communicate with the remote openHAB server. Default is 8080.                              |\n+| trustedCertificate | no       | Set it to true in case you want to use HTTPS even without a valid SSL certificate provided by your remote server. |\n+| restPath           | yes      | The subpath of the REST API on the remote openHAB server. Default is /rest                                        |\n+| token              | no       | The token to use when the remote openHAB server is setup to require authorization to run its REST API.            |\n+\n+The `thing` thing has the following configuration parameters:\n+\n+| Parameter     | Required | Description                                 |\n+|---------------|----------|---------------------------------------------|\n+| thingUID      | yes      | The thing UID in the remote openHAB server. |\n+| buildChannels | no       | If set to true, a trigger channel will be automatically created and linked to each trigger channel from the remote thing. Default is true. |\n+\n+Setting the `buildChannels` parameter to false is for the main following advanced usages :\n \n-| Parameter | Required | Description                                                                                            |\n-|-----------|-------------------------------------------------------------------------------------------------------------------|\n-| host      | yes      | The host name or IP address of the remote openHAB server.                                              |\n-| port      | yes      | The HTTP port to be used to communicate with the remote openHAB server. Default is 8080.               |\n-| restPath  | yes      | The subpath of the REST API on the remote openHAB server. Default is /rest                             |\n-| token     | no       | The token to use when the remote openHAB server is setup to require authorization to run its REST API. |\n+* you don't care about the trigger channels of this remote thing and you don't want the binding to create them locally,\n+* you want to define the trigger channels in your configuration file, and only the channels that you will finally need,\n+* you want to set a specific channel ID rather than using the channel ID created by the binding.\n+\n+## Thing Status\n+\n+The status of any `thing` thing is a mapping of the remote thing status.\n+A mapping is done only when the `server` bridge is ONLINE (meaning the local server is connected to the remote server).\n+Please note that every remote status different from UNKNOWN, ONLINE and OFFLINE will then be considered as OFFLINE on the local server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDIyMjAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyNToyOVrOHv-OJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOToyNToyOVrOHv-OJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NDU0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once a bridge thing representing a remote openHAB server is created, all things from this remote server are discovered when you scan for new things.\n          \n          \n            \n            Once a bridge thing representing a remote openHAB server is created, all things from this remote server will be discovered when you scan for new things.", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r520064548", "createdAt": "2020-11-09T19:25:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.remoteopenhab/README.md", "diffHunk": "@@ -24,39 +26,73 @@ You will find in the inbox one discovery thing per remote server interface.\n So if your remote server has one IPv4 address and one IPv6 address, you will discover two things in the inbox.\n Just choose one of the two things.\n \n+Once a bridge thing representing a remote openHAB server is created, all things from this remote server are discovered when you scan for new things.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ec5ad2f6ca3e15034af7794a684355f681cafe"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzU4NDg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/rest/RemoteopenhabRestClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwOToxOToyMlrOHzeCYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwOTozODowNVrOHzeKkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMTU1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String url = String.format(\"%s?recursive=fasle\", getRestApiUrl(\"items\"));\n          \n          \n            \n                        String url = String.format(\"%s?recursive=false\", getRestApiUrl(\"items\"));", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523731553", "createdAt": "2020-11-15T09:19:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/rest/RemoteopenhabRestClient.java", "diffHunk": "@@ -62,124 +75,150 @@\n     private final ClientBuilder clientBuilder;\n     private final SseEventSourceFactory eventSourceFactory;\n     private final Gson jsonParser;\n-    private String accessToken;\n-    private final String restUrl;\n \n     private final Object startStopLock = new Object();\n     private final List<RemoteopenhabStreamingDataListener> listeners = new CopyOnWriteArrayList<>();\n+    private final List<RemoteopenhabItemsDataListener> itemsListeners = new CopyOnWriteArrayList<>();\n+    private final List<RemoteopenhabThingsDataListener> thingsListeners = new CopyOnWriteArrayList<>();\n \n+    private HttpClient httpClient;\n+    private @Nullable String restUrl;\n     private @Nullable String restApiVersion;\n-    private @Nullable String restApiItems;\n-    private @Nullable String restApiEvents;\n+    private Map<String, @Nullable String> apiEndPointsUrls = new HashMap<>();\n     private @Nullable String topicNamespace;\n+    private String accessToken;\n+    private boolean trustedCertificate;\n     private boolean connected;\n \n     private @Nullable SseEventSource eventSource;\n     private long lastEventTimestamp;\n \n-    public RemoteopenhabRestClient(final ClientBuilder clientBuilder, final SseEventSourceFactory eventSourceFactory,\n-            final Gson jsonParser, final String accessToken, final String restUrl) {\n+    public RemoteopenhabRestClient(final HttpClient httpClient, final ClientBuilder clientBuilder,\n+            final SseEventSourceFactory eventSourceFactory, final Gson jsonParser) {\n+        this.httpClient = httpClient;\n         this.clientBuilder = clientBuilder;\n         this.eventSourceFactory = eventSourceFactory;\n         this.jsonParser = jsonParser;\n-        this.accessToken = accessToken;\n+        this.accessToken = \"\";\n+    }\n+\n+    public void setHttpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public String getRestUrl() throws RemoteopenhabException {\n+        String url = restUrl;\n+        if (url == null) {\n+            throw new RemoteopenhabException(\"REST client not correctly setup\");\n+        }\n+        return url;\n+    }\n+\n+    public void setRestUrl(String restUrl) {\n         this.restUrl = restUrl;\n     }\n \n+    public void setAccessToken(String accessToken) {\n+        this.accessToken = accessToken;\n+    }\n+\n+    public void setTrustedCertificate(boolean trustedCertificate) {\n+        this.trustedCertificate = trustedCertificate;\n+    }\n+\n     public void tryApi() throws RemoteopenhabException {\n         try {\n-            Properties httpHeaders = new Properties();\n-            if (!accessToken.isEmpty()) {\n-                httpHeaders.put(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken);\n-            }\n-            httpHeaders.put(HttpHeaders.ACCEPT, \"application/json\");\n-            String jsonResponse = HttpUtil.executeUrl(\"GET\", restUrl, httpHeaders, null, null, REQUEST_TIMEOUT);\n+            String jsonResponse = executeUrl(HttpMethod.GET, getRestUrl(), \"application/json\", null, null);\n             if (jsonResponse.isEmpty()) {\n-                throw new RemoteopenhabException(\"Failed to execute the root REST API\");\n+                throw new RemoteopenhabException(\"JSON response is empty\");\n             }\n-            RestApi restApi = jsonParser.fromJson(jsonResponse, RestApi.class);\n+            RemoteopenhabRestApi restApi = jsonParser.fromJson(jsonResponse, RemoteopenhabRestApi.class);\n             restApiVersion = restApi.version;\n             logger.debug(\"REST API version = {}\", restApiVersion);\n-            restApiItems = null;\n+            apiEndPointsUrls.clear();\n             for (int i = 0; i < restApi.links.length; i++) {\n-                if (\"items\".equals(restApi.links[i].type)) {\n-                    restApiItems = restApi.links[i].url;\n-                } else if (\"events\".equals(restApi.links[i].type)) {\n-                    restApiEvents = restApi.links[i].url;\n-                }\n+                apiEndPointsUrls.put(restApi.links[i].type, restApi.links[i].url);\n             }\n-            logger.debug(\"REST API items = {}\", restApiItems);\n-            logger.debug(\"REST API events = {}\", restApiEvents);\n+            logger.debug(\"REST API items = {}\", apiEndPointsUrls.get(\"items\"));\n+            logger.debug(\"REST API things = {}\", apiEndPointsUrls.get(\"things\"));\n+            logger.debug(\"REST API events = {}\", apiEndPointsUrls.get(\"events\"));\n             topicNamespace = restApi.runtimeInfo != null ? \"openhab\" : \"smarthome\";\n             logger.debug(\"topic namespace = {}\", topicNamespace);\n-        } catch (RemoteopenhabException e) {\n-            throw new RemoteopenhabException(e.getMessage());\n-        } catch (JsonSyntaxException e) {\n-            throw new RemoteopenhabException(\"Failed to parse the result of the root REST API\", e);\n-        } catch (IOException e) {\n-            throw new RemoteopenhabException(\"Failed to execute the root REST API\", e);\n+        } catch (RemoteopenhabException | JsonSyntaxException e) {\n+            throw new RemoteopenhabException(\"Failed to execute the root REST API: \" + e.getMessage(), e);\n         }\n     }\n \n-    public List<Item> getRemoteItems() throws RemoteopenhabException {\n+    public List<RemoteopenhabItem> getRemoteItems() throws RemoteopenhabException {\n         try {\n-            Properties httpHeaders = new Properties();\n-            if (!accessToken.isEmpty()) {\n-                httpHeaders.put(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken);\n+            String url = String.format(\"%s?recursive=fasle\", getRestApiUrl(\"items\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMzY0OQ==", "bodyText": "Woohhhh, bravo to find that tipo.", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523733649", "createdAt": "2020-11-15T09:38:05Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/java/org/openhab/binding/remoteopenhab/internal/rest/RemoteopenhabRestClient.java", "diffHunk": "@@ -62,124 +75,150 @@\n     private final ClientBuilder clientBuilder;\n     private final SseEventSourceFactory eventSourceFactory;\n     private final Gson jsonParser;\n-    private String accessToken;\n-    private final String restUrl;\n \n     private final Object startStopLock = new Object();\n     private final List<RemoteopenhabStreamingDataListener> listeners = new CopyOnWriteArrayList<>();\n+    private final List<RemoteopenhabItemsDataListener> itemsListeners = new CopyOnWriteArrayList<>();\n+    private final List<RemoteopenhabThingsDataListener> thingsListeners = new CopyOnWriteArrayList<>();\n \n+    private HttpClient httpClient;\n+    private @Nullable String restUrl;\n     private @Nullable String restApiVersion;\n-    private @Nullable String restApiItems;\n-    private @Nullable String restApiEvents;\n+    private Map<String, @Nullable String> apiEndPointsUrls = new HashMap<>();\n     private @Nullable String topicNamespace;\n+    private String accessToken;\n+    private boolean trustedCertificate;\n     private boolean connected;\n \n     private @Nullable SseEventSource eventSource;\n     private long lastEventTimestamp;\n \n-    public RemoteopenhabRestClient(final ClientBuilder clientBuilder, final SseEventSourceFactory eventSourceFactory,\n-            final Gson jsonParser, final String accessToken, final String restUrl) {\n+    public RemoteopenhabRestClient(final HttpClient httpClient, final ClientBuilder clientBuilder,\n+            final SseEventSourceFactory eventSourceFactory, final Gson jsonParser) {\n+        this.httpClient = httpClient;\n         this.clientBuilder = clientBuilder;\n         this.eventSourceFactory = eventSourceFactory;\n         this.jsonParser = jsonParser;\n-        this.accessToken = accessToken;\n+        this.accessToken = \"\";\n+    }\n+\n+    public void setHttpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    public String getRestUrl() throws RemoteopenhabException {\n+        String url = restUrl;\n+        if (url == null) {\n+            throw new RemoteopenhabException(\"REST client not correctly setup\");\n+        }\n+        return url;\n+    }\n+\n+    public void setRestUrl(String restUrl) {\n         this.restUrl = restUrl;\n     }\n \n+    public void setAccessToken(String accessToken) {\n+        this.accessToken = accessToken;\n+    }\n+\n+    public void setTrustedCertificate(boolean trustedCertificate) {\n+        this.trustedCertificate = trustedCertificate;\n+    }\n+\n     public void tryApi() throws RemoteopenhabException {\n         try {\n-            Properties httpHeaders = new Properties();\n-            if (!accessToken.isEmpty()) {\n-                httpHeaders.put(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken);\n-            }\n-            httpHeaders.put(HttpHeaders.ACCEPT, \"application/json\");\n-            String jsonResponse = HttpUtil.executeUrl(\"GET\", restUrl, httpHeaders, null, null, REQUEST_TIMEOUT);\n+            String jsonResponse = executeUrl(HttpMethod.GET, getRestUrl(), \"application/json\", null, null);\n             if (jsonResponse.isEmpty()) {\n-                throw new RemoteopenhabException(\"Failed to execute the root REST API\");\n+                throw new RemoteopenhabException(\"JSON response is empty\");\n             }\n-            RestApi restApi = jsonParser.fromJson(jsonResponse, RestApi.class);\n+            RemoteopenhabRestApi restApi = jsonParser.fromJson(jsonResponse, RemoteopenhabRestApi.class);\n             restApiVersion = restApi.version;\n             logger.debug(\"REST API version = {}\", restApiVersion);\n-            restApiItems = null;\n+            apiEndPointsUrls.clear();\n             for (int i = 0; i < restApi.links.length; i++) {\n-                if (\"items\".equals(restApi.links[i].type)) {\n-                    restApiItems = restApi.links[i].url;\n-                } else if (\"events\".equals(restApi.links[i].type)) {\n-                    restApiEvents = restApi.links[i].url;\n-                }\n+                apiEndPointsUrls.put(restApi.links[i].type, restApi.links[i].url);\n             }\n-            logger.debug(\"REST API items = {}\", restApiItems);\n-            logger.debug(\"REST API events = {}\", restApiEvents);\n+            logger.debug(\"REST API items = {}\", apiEndPointsUrls.get(\"items\"));\n+            logger.debug(\"REST API things = {}\", apiEndPointsUrls.get(\"things\"));\n+            logger.debug(\"REST API events = {}\", apiEndPointsUrls.get(\"events\"));\n             topicNamespace = restApi.runtimeInfo != null ? \"openhab\" : \"smarthome\";\n             logger.debug(\"topic namespace = {}\", topicNamespace);\n-        } catch (RemoteopenhabException e) {\n-            throw new RemoteopenhabException(e.getMessage());\n-        } catch (JsonSyntaxException e) {\n-            throw new RemoteopenhabException(\"Failed to parse the result of the root REST API\", e);\n-        } catch (IOException e) {\n-            throw new RemoteopenhabException(\"Failed to execute the root REST API\", e);\n+        } catch (RemoteopenhabException | JsonSyntaxException e) {\n+            throw new RemoteopenhabException(\"Failed to execute the root REST API: \" + e.getMessage(), e);\n         }\n     }\n \n-    public List<Item> getRemoteItems() throws RemoteopenhabException {\n+    public List<RemoteopenhabItem> getRemoteItems() throws RemoteopenhabException {\n         try {\n-            Properties httpHeaders = new Properties();\n-            if (!accessToken.isEmpty()) {\n-                httpHeaders.put(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken);\n+            String url = String.format(\"%s?recursive=fasle\", getRestApiUrl(\"items\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMTU1Mw=="}, "originalCommit": {"oid": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzU5MDY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.remoteopenhab/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwOToyNToyMFrOHzeFEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMDowODozMFrOHzeX4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMjI0MA==", "bodyText": "The required tag is deprecated.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"useHttps\" type=\"boolean\">\n          \n          \n            \n            \t\t\t<parameter name=\"useHttps\" type=\"boolean\" required=\"true\">", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523732240", "createdAt": "2020-11-15T09:25:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -18,14 +18,32 @@\n \t\t\t\t<required>true</required>\n \t\t\t</parameter>\n \n+\t\t\t<parameter name=\"useHttps\" type=\"boolean\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczNDA5NA==", "bodyText": "I did not know. Where is it mentioned ?", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523734094", "createdAt": "2020-11-15T09:42:12Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -18,14 +18,32 @@\n \t\t\t\t<required>true</required>\n \t\t\t</parameter>\n \n+\t\t\t<parameter name=\"useHttps\" type=\"boolean\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMjI0MA=="}, "originalCommit": {"oid": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczNDI3MA==", "bodyText": "It is only for channel parameter ? Not for thing type parameter ?", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523734270", "createdAt": "2020-11-15T09:44:11Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -18,14 +18,32 @@\n \t\t\t\t<required>true</required>\n \t\t\t</parameter>\n \n+\t\t\t<parameter name=\"useHttps\" type=\"boolean\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMjI0MA=="}, "originalCommit": {"oid": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczNDM4Mg==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523734382", "createdAt": "2020-11-15T09:45:03Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -18,14 +18,32 @@\n \t\t\t\t<required>true</required>\n \t\t\t</parameter>\n \n+\t\t\t<parameter name=\"useHttps\" type=\"boolean\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMjI0MA=="}, "originalCommit": {"oid": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczNTYyMg==", "bodyText": "It's deprecated for config-description. AFAIK these can be used for both channel and thing type parameters. That'd imply it's deprecated for both. https://www.openhab.org/docs/developer/bindings/config-xml.html#xml-structure-for-configuration-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523735622", "createdAt": "2020-11-15T09:56:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -18,14 +18,32 @@\n \t\t\t\t<required>true</required>\n \t\t\t</parameter>\n \n+\t\t\t<parameter name=\"useHttps\" type=\"boolean\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMjI0MA=="}, "originalCommit": {"oid": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczNzA1Ng==", "bodyText": "In this case, it should be updated for things too, I will submit a fix later.", "url": "https://github.com/openhab/openhab-addons/pull/8909#discussion_r523737056", "createdAt": "2020-11-15T10:08:30Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.remoteopenhab/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -18,14 +18,32 @@\n \t\t\t\t<required>true</required>\n \t\t\t</parameter>\n \n+\t\t\t<parameter name=\"useHttps\" type=\"boolean\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczMjI0MA=="}, "originalCommit": {"oid": "acbfeb8bd6bcc5cded0b4d66bf554a1f6ec148be"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3987, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}