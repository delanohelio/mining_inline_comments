{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTc0NjU0", "number": 8252, "reviewThreads": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0ODoxNVrOEWM5yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxOTo0ODo0MFrOEgoJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE1NTMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0ODoxNVrOG9YiqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MDoxM1rOG-sB_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODQwOA==", "bodyText": "What type of exception do you expect here? Can you specify the concrete type?", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467018408", "createdAt": "2020-08-07T12:48:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NjMwMg==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468386302", "createdAt": "2020-08-11T07:40:13Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODQwOA=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE1OTUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0OTo0MFrOG9YlTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MDo1MFrOG-sDQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTA4Ng==", "bodyText": "You should store the ScheduledFuture returned by scheduleWithFixedDelay() to a field, to be able to cancel it in dispose().", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467019086", "createdAt": "2020-08-07T12:49:40Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NjYyNw==", "bodyText": "add cancel parts in dispose().", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468386627", "createdAt": "2020-08-11T07:40:50Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTA4Ng=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE2NDk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1MTowNlrOG9YoRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MTowNFrOG-sDxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTg0Nw==", "bodyText": "Since you specified a delay of 0 sec. when scheduling the runnable above, refresh() is invoked instantly. So, this is invocation of refresh() is redundant and could be removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467019847", "createdAt": "2020-08-07T12:51:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4Njc1OQ==", "bodyText": "removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468386759", "createdAt": "2020-08-11T07:41:04Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTg0Nw=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE3NDI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1Mzo0OFrOG9YttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MTo1NFrOG-sFlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMTIzNw==", "bodyText": "As getConfigAs() is an expensive operation, can you move it to initialize()?", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467021237", "createdAt": "2020-08-07T12:53:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NzIyMw==", "bodyText": "codes moved.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468387223", "createdAt": "2020-08-11T07:41:54Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMTIzNw=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE5MDIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1Nzo1NVrOG9Y2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzozNzo1NFrOHJbjug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMzUyMw==", "bodyText": "I think the stream must be closed after using it.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467023523", "createdAt": "2020-08-07T12:57:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4Njk5OA==", "bodyText": "stream close code added.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468386998", "createdAt": "2020-08-11T07:41:28Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMzUyMw=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDc0Ng==", "bodyText": "To close a stream you should use try-with-resources:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n          \n          \n            \n                        try (InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8))) {\n          \n      \n    \n    \n  \n\nThan you can omit the call to close and it will also be closed in case an exception happens.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479650746", "createdAt": "2020-08-29T13:37:54Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMzUyMw=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzIwOTE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowMzo0OVrOG9ZCTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MjoxMlrOG-sGLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjUwOA==", "bodyText": "You should specify the concrete exception you want to catch, since catching Exception catches also all runtime exceptions.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467026508", "createdAt": "2020-08-07T13:03:49Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            updateStatus(ThingStatus.ONLINE);\n+        // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NzM3NQ==", "bodyText": "edited.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468387375", "createdAt": "2020-08-11T07:42:12Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            updateStatus(ThingStatus.ONLINE);\n+        // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjUwOA=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzIxMTUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowNDozNFrOG9ZDwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MjozMlrOG-sGxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjg4MQ==", "bodyText": "Do you log the stack trace by intention?", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467026881", "createdAt": "2020-08-07T13:04:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            updateStatus(ThingStatus.ONLINE);\n+        // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        } catch (Exception e) {\n+            logger.warn(\"Error refreshing source {}: {}\", getThing().getUID(), e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NzUyNQ==", "bodyText": "logger removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468387525", "createdAt": "2020-08-11T07:42:32Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            updateStatus(ThingStatus.ONLINE);\n+        // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        } catch (Exception e) {\n+            logger.warn(\"Error refreshing source {}: {}\", getThing().getUID(), e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyNjg4MQ=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzIyMTA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/binding/binding.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowNzoyNVrOG9ZJbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0Mjo1MlrOG-sHaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyODMzNQ==", "bodyText": "Can you be a bit more specific, that somebody who isn't aware of Iammeter gets a clue what this is about?", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467028335", "createdAt": "2020-08-07T13:07:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"iammeter\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Iammeter Binding</name>\n+\t<description>This is the binding for Iammeter.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NzY4OA==", "bodyText": "edited.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468387688", "createdAt": "2020-08-11T07:42:52Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"iammeter\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Iammeter Binding</name>\n+\t<description>This is the binding for Iammeter.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyODMzNQ=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzIyMTQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/binding/binding.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowNzozNFrOG9ZJtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MzowNFrOG-sHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyODQwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<author>yang bo</author>\n          \n          \n            \n            \t<author>Yang Bo</author>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467028406", "createdAt": "2020-08-07T13:07:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"iammeter\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Iammeter Binding</name>\n+\t<description>This is the binding for Iammeter.</description>\n+\t<author>yang bo</author>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4Nzc4OQ==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468387789", "createdAt": "2020-08-11T07:43:04Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"iammeter\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Iammeter Binding</name>\n+\t<description>This is the binding for Iammeter.</description>\n+\t<author>yang bo</author>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyODQwNg=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzIyMjE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/i18n/iammeter_xx_XX.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowNzo0N1rOG9ZKIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0NToxOFrOG-sMow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyODUxMw==", "bodyText": "Can this file be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467028513", "createdAt": "2020-08-07T13:07:47Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/i18n/iammeter_xx_XX.properties", "diffHunk": "@@ -0,0 +1,15 @@\n+# binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4OTAyNw==", "bodyText": "file removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468389027", "createdAt": "2020-08-11T07:45:18Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/i18n/iammeter_xx_XX.properties", "diffHunk": "@@ -0,0 +1,15 @@\n+# binding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyODUxMw=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzIyNTkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowODo1NVrOG9ZMcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MzoxOFrOG-sIUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyOTEwNA==", "bodyText": "See https://www.openhab.org/docs/concepts/units-of-measurement.html#list-of-units\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number:V</item-type>\n          \n          \n            \n            \t\t<item-type>Number:ElectricPotential</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467029104", "createdAt": "2020-08-07T13:08:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,182 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\" />\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\" />\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\" />\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\" />\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\" />\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\" />\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\" />\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\" />\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\" />\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\" />\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\" />\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\" />\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\" />\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\" />\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\" />\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\" />\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\" />\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\" />\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\" />\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\" />\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:V</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4NzkyMw==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468387923", "createdAt": "2020-08-11T07:43:18Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,182 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\" />\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\" />\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\" />\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\" />\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\" />\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\" />\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\" />\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\" />\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\" />\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\" />\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\" />\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\" />\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\" />\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\" />\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\" />\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\" />\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\" />\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\" />\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\" />\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\" />\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:V</item-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyOTEwNA=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzIyNjQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowOTowN1rOG9ZM0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MzoyOFrOG-sIpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyOTIwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number:A</item-type>\n          \n          \n            \n            \t\t<item-type>Number:ElectricCurrent</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467029200", "createdAt": "2020-08-07T13:09:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,182 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\" />\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\" />\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\" />\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\" />\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\" />\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\" />\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\" />\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\" />\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\" />\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\" />\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\" />\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\" />\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\" />\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\" />\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\" />\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\" />\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\" />\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\" />\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\" />\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\" />\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:V</item-type>\n+\t\t<label>Voltage A</label>\n+\t\t<description>voltage for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"current_a\">\n+\t\t<item-type>Number:A</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4ODAwNQ==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468388005", "createdAt": "2020-08-11T07:43:28Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,182 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\" />\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\" />\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\" />\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\" />\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\" />\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\" />\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\" />\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\" />\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\" />\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\" />\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\" />\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\" />\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\" />\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\" />\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\" />\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\" />\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\" />\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\" />\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\" />\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\" />\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:V</item-type>\n+\t\t<label>Voltage A</label>\n+\t\t<description>voltage for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"current_a\">\n+\t\t<item-type>Number:A</item-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyOTIwMA=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzIyNzA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzowOToxNlrOG9ZNLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0MzozOFrOG-sI9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyOTI5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number:W</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Power</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467029295", "createdAt": "2020-08-07T13:09:16Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,182 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\" />\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\" />\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\" />\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\" />\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\" />\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\" />\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\" />\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\" />\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\" />\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\" />\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\" />\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\" />\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\" />\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\" />\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\" />\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\" />\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\" />\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\" />\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\" />\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\" />\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:V</item-type>\n+\t\t<label>Voltage A</label>\n+\t\t<description>voltage for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"current_a\">\n+\t\t<item-type>Number:A</item-type>\n+\t\t<label>Current A</label>\n+\t\t<description>current for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"power_a\">\n+\t\t<item-type>Number:W</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4ODA4NQ==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468388085", "createdAt": "2020-08-11T07:43:38Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,182 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\" />\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\" />\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\" />\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\" />\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\" />\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\" />\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\" />\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\" />\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\" />\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\" />\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\" />\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\" />\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\" />\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\" />\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\" />\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\" />\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\" />\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\" />\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\" />\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\" />\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:V</item-type>\n+\t\t<label>Voltage A</label>\n+\t\t<description>voltage for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"current_a\">\n+\t\t<item-type>Number:A</item-type>\n+\t\t<label>Current A</label>\n+\t\t<description>current for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"power_a\">\n+\t\t<item-type>Number:W</item-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyOTI5NQ=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzI0Mjc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzoxMzo0MlrOG9ZWmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0Mzo1M1rOG-sJgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMTcwNg==", "bodyText": "You need to use QuantityType to make use of Units of Measure. You could store the unit type in IammeterWEM3080Channel.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return new DecimalType(new BigDecimal(value));\n          \n          \n            \n                        return QuantityType.valueOf(Float.parseFloat(value), SmartHomeUnits.VOLT);", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467031706", "createdAt": "2020-08-07T13:13:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            updateStatus(ThingStatus.ONLINE);\n+        // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        } catch (Exception e) {\n+            logger.warn(\"Error refreshing source {}: {}\", getThing().getUID(), e.getMessage(), e);\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {\n+        List<ChannelUID> noUsedItems = new ArrayList<>();\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_c\"));\n+        ThingBuilder thingBuilder = editThing();\n+        for (ChannelUID chl : noUsedItems) {\n+            thingBuilder.withoutChannel(chl);\n+        }\n+        updateThing(thingBuilder.build());\n+        bExtraChannelRemoved = true;\n+    }\n+\n+    private State getDecimal(String value) {\n+        try {\n+            return new DecimalType(new BigDecimal(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4ODIyNg==", "bodyText": "code changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468388226", "createdAt": "2020-08-11T07:43:53Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        IammeterConfiguration config = getConfiguration();\n+\n+        Runnable runnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                try{\n+                    refresh();\n+                } catch (Exception ex) {\n+                    logger.warn(\"refresh error {}\" , ex.getMessage());\n+                }\n+            }\n+        };\n+        scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduler.execute(() -> {\n+            try{\n+                refresh();\n+            } catch (Exception ex) {\n+                logger.warn(\"refresh error {}\" , ex.getMessage());\n+            }\n+        });\n+    }\n+\n+    private void refresh() throws Exception {\n+        try {\n+            IammeterConfiguration config = getConfiguration();\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null){\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            updateStatus(ThingStatus.ONLINE);\n+        // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        } catch (Exception e) {\n+            logger.warn(\"Error refreshing source {}: {}\", getThing().getUID(), e.getMessage(), e);\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {\n+        List<ChannelUID> noUsedItems = new ArrayList<>();\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_c\"));\n+        ThingBuilder thingBuilder = editThing();\n+        for (ChannelUID chl : noUsedItems) {\n+            thingBuilder.withoutChannel(chl);\n+        }\n+        updateThing(thingBuilder.build());\n+        bExtraChannelRemoved = true;\n+    }\n+\n+    private State getDecimal(String value) {\n+        try {\n+            return new DecimalType(new BigDecimal(value));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMTcwNg=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzI1MDc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzoxNjowNlrOG9ZbwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0NDowNVrOG-sJ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMzAyNA==", "bodyText": "Can you add the @NonNullByDefault annotation?", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r467033024", "createdAt": "2020-08-07T13:16:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+/**\n+ * The {@link IammeterConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+public class IammeterConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4ODMxNg==", "bodyText": "added.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468388316", "createdAt": "2020-08-11T07:44:05Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+/**\n+ * The {@link IammeterConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+public class IammeterConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAzMzAyNA=="}, "originalCommit": {"oid": "19ce9bcc47bc2393f4814b1602bdcaddd2275d1b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU3ODM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozMzozM1rOG-_-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0Nzo1OFrOG_T9gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzIxMg==", "bodyText": "This can be made static. Also it's good practice to append the unit to the field name e.g. TIMEOUT_MS. Please move it to the other fields.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468713212", "createdAt": "2020-08-11T16:33:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDUxMg==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040512", "createdAt": "2020-08-12T06:47:58Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxMzIxMg=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU4NTI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozNToyM1rOG_ADMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0ODoxMFrOG_T93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDI5MQ==", "bodyText": "The configuration is only assigned to the local variable. You might want to assign it to the class field.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468714291", "createdAt": "2020-08-11T16:35:23Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDYwNg==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040606", "createdAt": "2020-08-12T06:48:10Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNDI5MQ=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU5MDg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozNjo1NVrOG_AG2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0ODoyNVrOG_T-Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNTIyNw==", "bodyText": "typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void thingStructureChanged(String channelProfix) {\n          \n          \n            \n                protected void thingStructureChanged(String channelPrefix) {", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468715227", "createdAt": "2020-08-11T16:36:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDcyNw==", "bodyText": "fixed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040727", "createdAt": "2020-08-12T06:48:25Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNTIyNw=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU5MzU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozNzozOVrOG_AIfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0ODozOFrOG_T-rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNTY0NQ==", "bodyText": "No harm in canceling a task that is already cancelled.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (refreshJob != null && !refreshJob.isCancelled()) {\n          \n          \n            \n                    if (refreshJob != null) {", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468715645", "createdAt": "2020-08-11T16:37:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {\n+        List<ChannelUID> noUsedItems = new ArrayList<>();\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_c\"));\n+        ThingBuilder thingBuilder = editThing();\n+        for (ChannelUID chl : noUsedItems) {\n+            thingBuilder.withoutChannel(chl);\n+        }\n+        updateThing(thingBuilder.build());\n+        bExtraChannelRemoved = true;\n+    }\n+\n+    private State getDecimal(String value) {\n+        try {\n+            return QuantityType.valueOf(Float.parseFloat(value), SmartHomeUnits.VOLT);\n+        } catch (NumberFormatException e) {\n+            return UnDefType.UNDEF;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDgxNQ==", "bodyText": "removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040815", "createdAt": "2020-08-12T06:48:38Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {\n+        List<ChannelUID> noUsedItems = new ArrayList<>();\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_c\"));\n+        ThingBuilder thingBuilder = editThing();\n+        for (ChannelUID chl : noUsedItems) {\n+            thingBuilder.withoutChannel(chl);\n+        }\n+        updateThing(thingBuilder.build());\n+        bExtraChannelRemoved = true;\n+    }\n+\n+    private State getDecimal(String value) {\n+        try {\n+            return QuantityType.valueOf(Float.parseFloat(value), SmartHomeUnits.VOLT);\n+        } catch (NumberFormatException e) {\n+            return UnDefType.UNDEF;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNTY0NQ=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODU5NzA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080Channel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjozODozNFrOG_AKtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0ODo1NFrOG_T_Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNjIxNQ==", "bodyText": "Is there some implementation missing?", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468716215", "createdAt": "2020-08-11T16:38:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080Channel.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import javax.measure.Unit;\n+\n+/**\n+ * The {@link IammeterWEM3080Channel} Enum defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+public enum IammeterWEM3080Channel {\n+\n+    CHANNEL_VOLTAGE(\"voltage_a\", 0),\n+    CHANNEL_CURRENT(\"current_a\", 1),\n+    CHANNEL_POWER(\"power_a\", 2),\n+    CHANNEL_IMPORTENERGY(\"importenergy_a\", 3),\n+    CHANNEL_EXPORTGRID(\"exportgrid_a\", 4);\n+\n+    private final String id;\n+    private final int index;\n+    private final Unit<?> unit;\n+\n+    IammeterWEM3080Channel(String id, int index) {\n+        this.id = id;\n+        this.index = index;\n+        this.unit = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MDkyNw==", "bodyText": "codes added.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469040927", "createdAt": "2020-08-12T06:48:54Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080Channel.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import javax.measure.Unit;\n+\n+/**\n+ * The {@link IammeterWEM3080Channel} Enum defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+public enum IammeterWEM3080Channel {\n+\n+    CHANNEL_VOLTAGE(\"voltage_a\", 0),\n+    CHANNEL_CURRENT(\"current_a\", 1),\n+    CHANNEL_POWER(\"power_a\", 2),\n+    CHANNEL_IMPORTENERGY(\"importenergy_a\", 3),\n+    CHANNEL_EXPORTGRID(\"exportgrid_a\", 4);\n+\n+    private final String id;\n+    private final int index;\n+    private final Unit<?> unit;\n+\n+    IammeterWEM3080Channel(String id, int index) {\n+        this.id = id;\n+        this.index = index;\n+        this.unit = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNjIxNQ=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYwMzY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MDoxNVrOG_AO0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0OTowOFrOG_T_fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzI2NQ==", "bodyText": "As you catch these exceptions, the throws delcaration can be removed.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void refresh() throws IOException, JsonSyntaxException {\n          \n          \n            \n                private void refresh() {", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468717265", "createdAt": "2020-08-11T16:40:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTAyMw==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041023", "createdAt": "2020-08-12T06:49:08Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzI2NQ=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYwNzU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MToxN1rOG_ARQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0OToyM1rOG_T_-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzg4OQ==", "bodyText": "After removing the throws declaration from refresh(), this can be reduced:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Runnable runnable = new Runnable() {\n          \n          \n            \n                            @Override\n          \n          \n            \n                            public void run() {\n          \n          \n            \n                                try {\n          \n          \n            \n                                    refresh();\n          \n          \n            \n                                } catch (IOException | JsonSyntaxException ex) {\n          \n          \n            \n                                    logger.warn(\"refresh error {}\", ex.getMessage());\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                        };\n          \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n          \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468717889", "createdAt": "2020-08-11T16:41:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTE0Nw==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041147", "createdAt": "2020-08-12T06:49:23Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxNzg4OQ=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYxNTU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0MzoyN1rOG_AWaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MDoyOVrOG_UCDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTIwOQ==", "bodyText": "The annotation has no effect since getConfigAs() always returns NonNull and can therefore removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468719209", "createdAt": "2020-08-11T16:43:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {\n+        List<ChannelUID> noUsedItems = new ArrayList<>();\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_c\"));\n+        ThingBuilder thingBuilder = editThing();\n+        for (ChannelUID chl : noUsedItems) {\n+            thingBuilder.withoutChannel(chl);\n+        }\n+        updateThing(thingBuilder.build());\n+        bExtraChannelRemoved = true;\n+    }\n+\n+    private State getDecimal(String value) {\n+        try {\n+            return QuantityType.valueOf(Float.parseFloat(value), SmartHomeUnits.VOLT);\n+        } catch (NumberFormatException e) {\n+            return UnDefType.UNDEF;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+        super.dispose();\n+    }\n+\n+    @NonNullByDefault", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTY3Ng==", "bodyText": "removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041676", "createdAt": "2020-08-12T06:50:29Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author yang bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    private final int timeout = 5000;\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            try {\n+                refresh();\n+            } catch (IOException | JsonSyntaxException ex) {\n+                logger.warn(\"refresh error {}\", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        IammeterConfiguration config = this.config;\n+        config = getConfiguration();\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        refresh();\n+                    } catch (IOException | JsonSyntaxException ex) {\n+                        logger.warn(\"refresh error {}\", ex.getMessage());\n+                    }\n+                }\n+            };\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() throws IOException, JsonSyntaxException {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            logger.trace(\"Starting refresh handler\");\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, timeout);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelProfix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelProfix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelProfix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelProfix) {\n+        List<ChannelUID> noUsedItems = new ArrayList<>();\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_a\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_b\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":voltage_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":current_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":power_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":importenergy_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":exportgrid_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":frequency_c\"));\n+        noUsedItems.add(new ChannelUID(channelProfix + \":pf_c\"));\n+        ThingBuilder thingBuilder = editThing();\n+        for (ChannelUID chl : noUsedItems) {\n+            thingBuilder.withoutChannel(chl);\n+        }\n+        updateThing(thingBuilder.build());\n+        bExtraChannelRemoved = true;\n+    }\n+\n+    private State getDecimal(String value) {\n+        try {\n+            return QuantityType.valueOf(Float.parseFloat(value), SmartHomeUnits.VOLT);\n+        } catch (NumberFormatException e) {\n+            return UnDefType.UNDEF;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+        super.dispose();\n+    }\n+\n+    @NonNullByDefault", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTIwOQ=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYxODUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080TChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0NDoxN1rOG_AYOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo1MDoxNVrOG_UBlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTY3NA==", "bodyText": "See above.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468719674", "createdAt": "2020-08-11T16:44:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080TChannel.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import javax.measure.Unit;\n+\n+/**\n+ * The {@link IammeterWEM3080TChannel} Enum defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Johann Richard - Initial contribution\n+ */\n+public enum IammeterWEM3080TChannel {\n+\n+    CHANNEL_VOLTAGE_A(\"voltage_a\", 0, 0),\n+    CHANNEL_CURRENT_A(\"current_a\", 0, 1),\n+    CHANNEL_POWER_A(\"power_a\", 0, 2),\n+    CHANNEL_IMPORTENERGY_A(\"importenergy_a\", 0, 3),\n+    CHANNEL_EXPORTGRID_A(\"exportgrid_a\", 0, 4),\n+    CHANNEL_FREQUENCY_A(\"frequency_a\", 0, 5),\n+    CHANNEL_PF_A(\"pf_a\", 0, 6),\n+    CHANNEL_VOLTAGE_B(\"voltage_b\", 1, 0),\n+    CHANNEL_CURRENT_B(\"current_b\", 1, 1),\n+    CHANNEL_POWER_B(\"power_b\", 1, 2),\n+    CHANNEL_IMPORTENERGY_B(\"importenergy_b\", 1, 3),\n+    CHANNEL_EXPORTGRID_B(\"exportgrid_b\", 1, 4),\n+    CHANNEL_FREQUENCY_B(\"frequency_b\", 1, 5),\n+    CHANNEL_PF_B(\"pf_b\", 1, 6),\n+    CHANNEL_VOLTAGE_C(\"voltage_c\", 2, 0),\n+    CHANNEL_CURRENT_C(\"current_c\", 2, 1),\n+    CHANNEL_POWER_C(\"power_c\", 2, 2),\n+    CHANNEL_IMPORTENERGY_C(\"importenergy_c\", 2, 3),\n+    CHANNEL_EXPORTGRID_C(\"exportgrid_c\", 2, 4),\n+    CHANNEL_FREQUENCY_C(\"frequency_c\", 2, 5),\n+    CHANNEL_PF_C(\"pf_c\", 2, 6);\n+\n+    private final String id;\n+    private final int row;\n+    private final int col;\n+    private final Unit<?> unit;\n+\n+    IammeterWEM3080TChannel(String id, int r, int c) {\n+        this.id = id;\n+        this.row = r;\n+        this.col = c;\n+        this.unit = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTU1Nw==", "bodyText": "code added.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041557", "createdAt": "2020-08-12T06:50:15Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterWEM3080TChannel.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import javax.measure.Unit;\n+\n+/**\n+ * The {@link IammeterWEM3080TChannel} Enum defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Johann Richard - Initial contribution\n+ */\n+public enum IammeterWEM3080TChannel {\n+\n+    CHANNEL_VOLTAGE_A(\"voltage_a\", 0, 0),\n+    CHANNEL_CURRENT_A(\"current_a\", 0, 1),\n+    CHANNEL_POWER_A(\"power_a\", 0, 2),\n+    CHANNEL_IMPORTENERGY_A(\"importenergy_a\", 0, 3),\n+    CHANNEL_EXPORTGRID_A(\"exportgrid_a\", 0, 4),\n+    CHANNEL_FREQUENCY_A(\"frequency_a\", 0, 5),\n+    CHANNEL_PF_A(\"pf_a\", 0, 6),\n+    CHANNEL_VOLTAGE_B(\"voltage_b\", 1, 0),\n+    CHANNEL_CURRENT_B(\"current_b\", 1, 1),\n+    CHANNEL_POWER_B(\"power_b\", 1, 2),\n+    CHANNEL_IMPORTENERGY_B(\"importenergy_b\", 1, 3),\n+    CHANNEL_EXPORTGRID_B(\"exportgrid_b\", 1, 4),\n+    CHANNEL_FREQUENCY_B(\"frequency_b\", 1, 5),\n+    CHANNEL_PF_B(\"pf_b\", 1, 6),\n+    CHANNEL_VOLTAGE_C(\"voltage_c\", 2, 0),\n+    CHANNEL_CURRENT_C(\"current_c\", 2, 1),\n+    CHANNEL_POWER_C(\"power_c\", 2, 2),\n+    CHANNEL_IMPORTENERGY_C(\"importenergy_c\", 2, 3),\n+    CHANNEL_EXPORTGRID_C(\"exportgrid_c\", 2, 4),\n+    CHANNEL_FREQUENCY_C(\"frequency_c\", 2, 5),\n+    CHANNEL_PF_C(\"pf_c\", 2, 6);\n+\n+    private final String id;\n+    private final int row;\n+    private final int col;\n+    private final Unit<?> unit;\n+\n+    IammeterWEM3080TChannel(String id, int r, int c) {\n+        this.id = id;\n+        this.row = r;\n+        this.col = c;\n+        this.unit = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcxOTY3NA=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYyMDYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0NDo1MlrOG_AZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0OTozNFrOG_UARA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDAwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>Refresh interval in seconds.</label>\n          \n          \n            \n            \t\t\t\t<label>Refresh interval in seconds</label>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468720008", "createdAt": "2020-08-11T16:44:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\"/>\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\"/>\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\"/>\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\"/>\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\"/>\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\"/>\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\"/>\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\"/>\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\"/>\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\"/>\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\"/>\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\"/>\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\"/>\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\"/>\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\"/>\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\"/>\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\"/>\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\"/>\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\"/>\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Refresh interval in seconds.</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTIyMA==", "bodyText": "removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041220", "createdAt": "2020-08-12T06:49:34Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\"/>\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\"/>\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\"/>\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\"/>\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\"/>\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\"/>\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\"/>\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\"/>\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\"/>\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\"/>\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\"/>\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\"/>\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\"/>\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\"/>\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\"/>\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\"/>\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\"/>\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\"/>\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\"/>\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Refresh interval in seconds.</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDAwOA=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYyMzE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0NToyOVrOG_AbFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0OTo0NlrOG_UAlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDQwNg==", "bodyText": "Same for below\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number:kWh</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Power</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468720406", "createdAt": "2020-08-11T16:45:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\"/>\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\"/>\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\"/>\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\"/>\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\"/>\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\"/>\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\"/>\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\"/>\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\"/>\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\"/>\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\"/>\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\"/>\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\"/>\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\"/>\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\"/>\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\"/>\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\"/>\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\"/>\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\"/>\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Refresh interval in seconds.</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage A</label>\n+\t\t<description>voltage for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"current_a\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current A</label>\n+\t\t<description>current for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"power_a\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power A</label>\n+\t\t<description>power for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"importenergy_a\">\n+\t\t<item-type>Number:kWh</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTMwMg==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041302", "createdAt": "2020-08-12T06:49:46Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\"/>\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\"/>\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\"/>\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\"/>\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\"/>\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\"/>\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\"/>\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\"/>\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\"/>\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\"/>\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\"/>\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\"/>\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\"/>\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\"/>\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\"/>\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\"/>\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\"/>\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\"/>\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\"/>\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Refresh interval in seconds.</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage A</label>\n+\t\t<description>voltage for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"current_a\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current A</label>\n+\t\t<description>current for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"power_a\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power A</label>\n+\t\t<description>power for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"importenergy_a\">\n+\t\t<item-type>Number:kWh</item-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDQwNg=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODYyNTA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo0NjowMFrOG_AcTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjo0OTo1OVrOG_UBFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDcxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number:Hz</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Frequency</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r468720717", "createdAt": "2020-08-11T16:46:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\"/>\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\"/>\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\"/>\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\"/>\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\"/>\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\"/>\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\"/>\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\"/>\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\"/>\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\"/>\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\"/>\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\"/>\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\"/>\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\"/>\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\"/>\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\"/>\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\"/>\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\"/>\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\"/>\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Refresh interval in seconds.</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage A</label>\n+\t\t<description>voltage for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"current_a\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current A</label>\n+\t\t<description>current for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"power_a\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power A</label>\n+\t\t<description>power for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"importenergy_a\">\n+\t\t<item-type>Number:kWh</item-type>\n+\t\t<label>ImportEnergy A</label>\n+\t\t<description>importenergy for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"exportgrid_a\">\n+\t\t<item-type>Number:kWh</item-type>\n+\t\t<label>Exportgrid A</label>\n+\t\t<description>exportgrid for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"frequency_a\">\n+\t\t<item-type>Number:Hz</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA0MTQyOA==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r469041428", "createdAt": "2020-08-12T06:49:59Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\"/>\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\"/>\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\"/>\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\"/>\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\"/>\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\"/>\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\"/>\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\"/>\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\"/>\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\"/>\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\"/>\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\"/>\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\"/>\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\"/>\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\"/>\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\"/>\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\"/>\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\"/>\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\"/>\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Refresh interval in seconds.</label>\n+\t\t\t\t<default>60</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"voltage_a\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage A</label>\n+\t\t<description>voltage for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"current_a\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current A</label>\n+\t\t<description>current for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"power_a\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power A</label>\n+\t\t<description>power for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"importenergy_a\">\n+\t\t<item-type>Number:kWh</item-type>\n+\t\t<label>ImportEnergy A</label>\n+\t\t<description>importenergy for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"exportgrid_a\">\n+\t\t<item-type>Number:kWh</item-type>\n+\t\t<label>Exportgrid A</label>\n+\t\t<description>exportgrid for phase A</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"frequency_a\">\n+\t\t<item-type>Number:Hz</item-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMDcxNw=="}, "originalCommit": {"oid": "30cf5bf3a79d9f807137ce751d45e4b8f6a6bf8c"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY0MzkxOnYy", "diffSide": "RIGHT", "path": ".project", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzoyNzowOFrOHJbgDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo1MToxNVrOHNQpTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTgwNQ==", "bodyText": "Please remove this file", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479649805", "createdAt": "2020-08-29T13:27:08Z", "author": {"login": "Hilbrand"}, "path": ".project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMjI4MA==", "bodyText": "file removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483632280", "createdAt": "2020-09-04T13:57:25Z", "author": {"login": "yangbo1979"}, "path": ".project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTgwNQ=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2NjI1NQ==", "bodyText": "You've removed the wrong file \ud83d\ude09 This file is at the root, you removed the file in the binding. That file should not be removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483666255", "createdAt": "2020-09-04T14:51:15Z", "author": {"login": "Hilbrand"}, "path": ".project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTgwNQ=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY0NDY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzoyODoxOFrOHJbgaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo1Nzo0NVrOHNOlhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTg5Nw==", "bodyText": "Can you format the tables. You can use http://markdowntable.com/", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479649897", "createdAt": "2020-08-29T13:28:18Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/README.md", "diffHunk": "@@ -0,0 +1,54 @@\n+# Iammeter Binding \n+\n+[Iammeter](https://www.iammeter.com) provides real-time readings of single-phase (WEM3080, WEM3162) and three-phase (WEM3080T) meters from IAMMETER over Wi-Fi.\n+\n+## Use of the binding\n+\n+The Iammeter is exposed as one thing with a number of channels that can be used to read the values for different aspects of your Iammeter devices. \n+\n+## Setup of the binding\n+\n+You can add the Iammeter device via the openHAB UI manually.\n+\n+\n+## Available channels\n+\n+The following table is taken from the official manual and contains all available channels.\n+\n+Single-phase energy meter (WEM3080/WEM3162)\n+|Name|Unit|Description|Type|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMjUxOA==", "bodyText": "tables formated.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483632518", "createdAt": "2020-09-04T13:57:45Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/README.md", "diffHunk": "@@ -0,0 +1,54 @@\n+# Iammeter Binding \n+\n+[Iammeter](https://www.iammeter.com) provides real-time readings of single-phase (WEM3080, WEM3162) and three-phase (WEM3080T) meters from IAMMETER over Wi-Fi.\n+\n+## Use of the binding\n+\n+The Iammeter is exposed as one thing with a number of channels that can be used to read the values for different aspects of your Iammeter devices. \n+\n+## Setup of the binding\n+\n+You can add the Iammeter device via the openHAB UI manually.\n+\n+\n+## Available channels\n+\n+The following table is taken from the official manual and contains all available channels.\n+\n+Single-phase energy meter (WEM3080/WEM3162)\n+|Name|Unit|Description|Type|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTg5Nw=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY0NDg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzoyODo0MVrOHJbggA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo1ODowMFrOHNOmQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTkyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>2.5.8-SNAPSHOT</version>\n          \n          \n            \n                <version>2.5.9-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479649920", "createdAt": "2020-08-29T13:28:41Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/pom.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>2.5.8-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMjcwNA==", "bodyText": "version changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483632704", "createdAt": "2020-09-04T13:58:00Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/pom.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>2.5.8-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY0OTkyMA=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY0NjAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzozMDowNFrOHJbg_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo1ODoyMVrOHNOm_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDA0Ng==", "bodyText": "Make sure to state the complete type:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |voltage_a|V|Voltage|Number|\n          \n          \n            \n            |voltage_a|V|Voltage|Number:ElectricPotential|", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479650046", "createdAt": "2020-08-29T13:30:04Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/README.md", "diffHunk": "@@ -0,0 +1,54 @@\n+# Iammeter Binding \n+\n+[Iammeter](https://www.iammeter.com) provides real-time readings of single-phase (WEM3080, WEM3162) and three-phase (WEM3080T) meters from IAMMETER over Wi-Fi.\n+\n+## Use of the binding\n+\n+The Iammeter is exposed as one thing with a number of channels that can be used to read the values for different aspects of your Iammeter devices. \n+\n+## Setup of the binding\n+\n+You can add the Iammeter device via the openHAB UI manually.\n+\n+\n+## Available channels\n+\n+The following table is taken from the official manual and contains all available channels.\n+\n+Single-phase energy meter (WEM3080/WEM3162)\n+|Name|Unit|Description|Type|\n+|----|----|----|----|\n+|voltage_a|V|Voltage|Number|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMjg5NA==", "bodyText": "modified.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483632894", "createdAt": "2020-09-04T13:58:21Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/README.md", "diffHunk": "@@ -0,0 +1,54 @@\n+# Iammeter Binding \n+\n+[Iammeter](https://www.iammeter.com) provides real-time readings of single-phase (WEM3080, WEM3162) and three-phase (WEM3080T) meters from IAMMETER over Wi-Fi.\n+\n+## Use of the binding\n+\n+The Iammeter is exposed as one thing with a number of channels that can be used to read the values for different aspects of your Iammeter devices. \n+\n+## Setup of the binding\n+\n+You can add the Iammeter device via the openHAB UI manually.\n+\n+\n+## Available channels\n+\n+The following table is taken from the official manual and contains all available channels.\n+\n+Single-phase energy meter (WEM3080/WEM3162)\n+|Name|Unit|Description|Type|\n+|----|----|----|----|\n+|voltage_a|V|Voltage|Number|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDA0Ng=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY0NjY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzozMTowN1rOHJbhSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzozMTowN1rOHJbhSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDEyMw==", "bodyText": "Can you add a section about the Thing, it's name an a table with the paramets.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479650123", "createdAt": "2020-08-29T13:31:07Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/README.md", "diffHunk": "@@ -0,0 +1,54 @@\n+# Iammeter Binding \n+\n+[Iammeter](https://www.iammeter.com) provides real-time readings of single-phase (WEM3080, WEM3162) and three-phase (WEM3080T) meters from IAMMETER over Wi-Fi.\n+\n+## Use of the binding\n+\n+The Iammeter is exposed as one thing with a number of channels that can be used to read the values for different aspects of your Iammeter devices. \n+\n+## Setup of the binding\n+\n+You can add the Iammeter device via the openHAB UI manually.\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY0Nzc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzozMTo1MlrOHJbhwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzozMTo1MlrOHJbhwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDI0MA==", "bodyText": "Can you add an Example section. With examples for text file configuration of Thing and Items.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479650240", "createdAt": "2020-08-29T13:31:52Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/README.md", "diffHunk": "@@ -0,0 +1,54 @@\n+# Iammeter Binding \n+\n+[Iammeter](https://www.iammeter.com) provides real-time readings of single-phase (WEM3080, WEM3162) and three-phase (WEM3080T) meters from IAMMETER over Wi-Fi.\n+\n+## Use of the binding\n+\n+The Iammeter is exposed as one thing with a number of channels that can be used to read the values for different aspects of your Iammeter devices. \n+\n+## Setup of the binding\n+\n+You can add the Iammeter device via the openHAB UI manually.\n+\n+\n+## Available channels\n+\n+The following table is taken from the official manual and contains all available channels.\n+\n+Single-phase energy meter (WEM3080/WEM3162)\n+|Name|Unit|Description|Type|\n+|----|----|----|----|\n+|voltage_a|V|Voltage|Number|\n+|current_a|A|Current|Number|\n+|power_a|W|Active power|Number|\n+|importenergy_a|kWh|Energy consumption from gird|Number|\n+|exportgrid_a|kWh|Energy export to grid|Number|\n+\n+Three-phase energy meter (WEM3080T)\n+|Name|Unit|Description|Type|\n+|----|----|----|----|\n+|voltage_a|V|A phase voltage|Number|\n+|current_a|A|A phase current|Number|\n+|power_a|W|A phase active power|Number|\n+|importenergy_a|kWh|A phase import energy|Number|\n+|exportgrid_a|kWh|A phase export energy|Number|\n+|frequency_a|kWh|A phase frequency|Number|\n+|pf_a|kWh|A phase power factor|Number|\n+|voltage_b|V|B phase voltage|Number|\n+|current_b|A|B phase current|Number|\n+|power_b|W|B phase active power|Number|\n+|importenergy_b|kWh|B phase import energy|Number|\n+|exportgrid_b|kWh|B phase export energy|Number|\n+|frequency_b|kWh|B phase frequency|Number|\n+|pf_b|kWh|B phase power factor|Number|\n+|voltage_c|V|C phase voltage|Number|\n+|current_c|A|C phase current|Number|\n+|power_c|W|C phase active power|Number|\n+|importenergy_c|kWh|C phase import energy|Number|\n+|exportgrid_c|kWh|C phase export energy|Number|\n+|frequency_c|kWh|C phase frequency|Number|\n+|pf_c|kWh|C phase power factor|Number|\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODY1MDU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxMzozNjoxMFrOHJbjDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo1ODo1OVrOHNOosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDU3NQ==", "bodyText": "This method is called for every channel linked. So if you have 5 items this method is called 5 times. That doesn't seem right. Better to cache the data. You can use the openHAB ExpiringCache. You call the object and if the time has exceeded it will retreive the data. For example I've used it with a 3 seconds timeout.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479650575", "createdAt": "2020-08-29T13:36:10Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMzMyOQ==", "bodyText": "codes changed to use ExpiringCache now.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483633329", "createdAt": "2020-09-04T13:58:59Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MDU3NQ=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODcwMzI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDo1MDo0OFrOHJb7ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo1OTowOVrOHNOpNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1Njg5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @author yangbo - Initial contribution\n          \n          \n            \n             * @author Yang Bo - Initial contribution", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479656899", "createdAt": "2020-08-29T14:50:48Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandlerFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import static org.openhab.binding.iammeter.internal.IammeterBindingConstants.THING_TYPE_POWERMETER;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link IammeterHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author yangbo - Initial contribution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMzQ2MQ==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483633461", "createdAt": "2020-09-04T13:59:09Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandlerFactory.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import static org.openhab.binding.iammeter.internal.IammeterBindingConstants.THING_TYPE_POWERMETER;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link IammeterHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author yangbo - Initial contribution", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1Njg5OQ=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODcwNDEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDo1MjowOVrOHJb8Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzo1OToyMVrOHNOptw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NzAwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\">\n          \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479657002", "createdAt": "2020-08-29T14:52:09Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\"/>\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\"/>\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\"/>\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\"/>\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\"/>\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\"/>\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\"/>\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\"/>\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\"/>\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\"/>\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\"/>\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\"/>\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\"/>\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\"/>\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\"/>\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\"/>\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\"/>\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\"/>\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\"/>\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzMzU5MQ==", "bodyText": "added.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483633591", "createdAt": "2020-09-04T13:59:21Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>\n+\t\t\t<channel id=\"current_a\" typeId=\"current_a\"/>\n+\t\t\t<channel id=\"power_a\" typeId=\"power_a\"/>\n+\t\t\t<channel id=\"importenergy_a\" typeId=\"importenergy_a\"/>\n+\t\t\t<channel id=\"exportgrid_a\" typeId=\"exportgrid_a\"/>\n+\t\t\t<channel id=\"frequency_a\" typeId=\"frequency_a\"/>\n+\t\t\t<channel id=\"pf_a\" typeId=\"pf_a\"/>\n+\t\t\t<channel id=\"voltage_b\" typeId=\"voltage_b\"/>\n+\t\t\t<channel id=\"current_b\" typeId=\"current_b\"/>\n+\t\t\t<channel id=\"power_b\" typeId=\"power_b\"/>\n+\t\t\t<channel id=\"importenergy_b\" typeId=\"importenergy_b\"/>\n+\t\t\t<channel id=\"exportgrid_b\" typeId=\"exportgrid_b\"/>\n+\t\t\t<channel id=\"frequency_b\" typeId=\"frequency_b\"/>\n+\t\t\t<channel id=\"pf_b\" typeId=\"pf_b\"/>\n+\t\t\t<channel id=\"voltage_c\" typeId=\"voltage_c\"/>\n+\t\t\t<channel id=\"current_c\" typeId=\"current_c\"/>\n+\t\t\t<channel id=\"power_c\" typeId=\"power_c\"/>\n+\t\t\t<channel id=\"importenergy_c\" typeId=\"importenergy_c\"/>\n+\t\t\t<channel id=\"exportgrid_c\" typeId=\"exportgrid_c\"/>\n+\t\t\t<channel id=\"frequency_c\" typeId=\"frequency_c\"/>\n+\t\t\t<channel id=\"pf_c\" typeId=\"pf_c\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"text\" required=\"false\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NzAwMg=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODcwNjQ2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNDo1NTozMVrOHJb9Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDowMDoxM1rOHNOr6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NzI4Nw==", "bodyText": "You can just create 1 channel type voltage and then specify the label per channel.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>\n          \n          \n            \n            \t\t\t<channel id=\"voltage_a\" typeId=\"voltage\">\n          \n          \n            \n            \t\t\t    <label>Voltage A</label>\n          \n          \n            \n            \t\t\t</channel>\n          \n      \n    \n    \n  \n\nor maybe even better. Create 3 channel groups, a, b, anc c as all these groups have the same channels.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479657287", "createdAt": "2020-08-29T14:55:31Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNDE1NA==", "bodyText": "thanks for your advice,I'm using 3 channel groups now.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483634154", "createdAt": "2020-09-04T14:00:13Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter</label>\n+\t\t<description>PowerMeter thing for Iammeter Binding</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_a\" typeId=\"voltage_a\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1NzI4Nw=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODcxNDI3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNTowNjozOFrOHJcA-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDowMTowMlrOHNOtvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1ODIzMg==", "bodyText": "This is not right. You should model the different types as different things. So in the xml you would see 2 things, 1 with all channels and 1 with the limited set of channels. You can then create 2 different classes, or maybe create 2 classes that each parse the specific data. and in the handler factory you can than pass that specific class to this handler based on the specific thing created.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479658232", "createdAt": "2020-08-29T15:06:38Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelPrefix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelPrefix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString(),\n+                                channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString(), channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelPrefix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelPrefix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNDYyMQ==", "bodyText": "thanks for your advice,I have separated those into 2 thingHandler now.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483634621", "createdAt": "2020-09-04T14:01:02Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelPrefix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelPrefix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString(),\n+                                channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString(), channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelPrefix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+    }\n+\n+    protected void thingStructureChanged(String channelPrefix) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1ODIzMg=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODcyMTQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNToxNjoyNVrOHJcEiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDowMTo1OFrOHNOvxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTE0Nw==", "bodyText": "Is the user/password configurable? In that case it should be a thing parameter. Also it's better to pass it as a header parameter instead of putting in the url.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479659147", "createdAt": "2020-08-29T15:16:25Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNTE0Mw==", "bodyText": "it's configurable now.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483635143", "createdAt": "2020-09-04T14:01:58Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTE0Nw=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODcyMjMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNToxNzoxMFrOHJcE6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNToxMjoxOVrOHNRhsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTI0MA==", "bodyText": "In this case the status should probaly also be set to OFFLINE.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r479659240", "createdAt": "2020-08-29T15:17:10Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelPrefix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelPrefix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString(),\n+                                channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString(), channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelPrefix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYzNTMzOA==", "bodyText": "status set.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483635338", "createdAt": "2020-09-04T14:02:19Z", "author": {"login": "yangbo1979"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelPrefix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelPrefix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString(),\n+                                channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString(), channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelPrefix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTI0MA=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4MDY4OA==", "bodyText": "I don't see the updateStatus here. Is it done somewhere else?", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483680688", "createdAt": "2020-09-04T15:12:19Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+        }\n+    }\n+\n+    private boolean bExtraChannelRemoved = false;\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private void refresh() {\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://admin:admin@\" + config.host + \":\" + config.port + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Data\";\n+            boolean bRemoveChannels = false;\n+            String channelPrefix = \"\";\n+            if (iammeterData.has(\"data\") || (iammeterData.has(\"Data\") && iammeterData.has(\"SN\"))) {\n+                bRemoveChannels = true;\n+                if (iammeterData.has(\"data\")) {\n+                    keyWord = \"data\";\n+                }\n+                for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        channelPrefix = IammeterBindingConstants.THING_TYPE_POWERMETER + \":\"\n+                                + channel.getUID().getThingUID().getId();\n+                        State state = getDecimal(\n+                                iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getIndex()).toString(),\n+                                channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            } else if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                keyWord = \"Datas\";\n+                for (IammeterWEM3080TChannel channelConfig : IammeterWEM3080TChannel.values()) {\n+                    Channel channel = getThing().getChannel(channelConfig.getId());\n+                    if (channel != null) {\n+                        State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(channelConfig.getRow())\n+                                .getAsJsonArray().get(channelConfig.getCol()).toString(), channelConfig.getUnit());\n+                        updateState(channel.getUID(), state);\n+                    }\n+                }\n+            }\n+            if (bRemoveChannels) {\n+                if (!bExtraChannelRemoved) {\n+                    thingStructureChanged(channelPrefix);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1OTI0MA=="}, "originalCommit": {"oid": "a906d2babeae254dbc4fecf7848545dfd3acca17"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDI3MTA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/3080.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo1NzoxMlrOHNRAag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMzozOTowNlrOHNfQTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3MjE3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>User name</label>\n          \n          \n            \n            \t\t\t\t<label>User Name</label>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483672170", "createdAt": "2020-09-04T14:57:12Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/3080.xml", "diffHunk": "@@ -0,0 +1,76 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter 3162/3080</label>\n+\t\t<description>Single phase PowerMeter for Iammeter Binding</description>\n+\t\t\t<channels>\n+\t\t\t\t<channel id=\"voltage\" typeId=\"voltage\"/>\n+\t\t\t\t<channel id=\"current\" typeId=\"current\"/>\n+\t\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t\t<channel id=\"importenergy\" typeId=\"importenergy\"/>\n+\t\t\t\t<channel id=\"exportgrid\" typeId=\"exportgrid\"/>\n+\t\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"username\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>User name</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTYxNA==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905614", "createdAt": "2020-09-05T03:39:06Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/3080.xml", "diffHunk": "@@ -0,0 +1,76 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter 3162/3080</label>\n+\t\t<description>Single phase PowerMeter for Iammeter Binding</description>\n+\t\t\t<channels>\n+\t\t\t\t<channel id=\"voltage\" typeId=\"voltage\"/>\n+\t\t\t\t<channel id=\"current\" typeId=\"current\"/>\n+\t\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t\t<channel id=\"importenergy\" typeId=\"importenergy\"/>\n+\t\t\t\t<channel id=\"exportgrid\" typeId=\"exportgrid\"/>\n+\t\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Device's IP Address</label>\n+\t\t\t\t<description>IP address for your device</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<default>127.0.0.1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"text\" required=\"true\" min=\"1\" max=\"65535\">\n+\t\t\t\t<label>Device's Port</label>\n+\t\t\t\t<description>Port</description>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"username\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>User name</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3MjE3MA=="}, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDI3OTA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/3080.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDo1OToxM1rOHNRFGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMzozOToyNVrOHNfQcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3MzM3MQ==", "bodyText": "Because all configuration parameters for the 2 things are the same you can also put the configuration in a config/config.xml and reference here to that config. See some other bindings, search for config-description-ref.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483673371", "createdAt": "2020-09-04T14:59:13Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/3080.xml", "diffHunk": "@@ -0,0 +1,76 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter 3162/3080</label>\n+\t\t<description>Single phase PowerMeter for Iammeter Binding</description>\n+\t\t\t<channels>\n+\t\t\t\t<channel id=\"voltage\" typeId=\"voltage\"/>\n+\t\t\t\t<channel id=\"current\" typeId=\"current\"/>\n+\t\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t\t<channel id=\"importenergy\" typeId=\"importenergy\"/>\n+\t\t\t\t<channel id=\"exportgrid\" typeId=\"exportgrid\"/>\n+\t\t\t</channels>\n+\t\t<config-description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTY0OA==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905648", "createdAt": "2020-09-05T03:39:25Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/3080.xml", "diffHunk": "@@ -0,0 +1,76 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter\">\n+\t\t<label>Iammeter Power Meter 3162/3080</label>\n+\t\t<description>Single phase PowerMeter for Iammeter Binding</description>\n+\t\t\t<channels>\n+\t\t\t\t<channel id=\"voltage\" typeId=\"voltage\"/>\n+\t\t\t\t<channel id=\"current\" typeId=\"current\"/>\n+\t\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t\t<channel id=\"importenergy\" typeId=\"importenergy\"/>\n+\t\t\t\t<channel id=\"exportgrid\" typeId=\"exportgrid\"/>\n+\t\t\t</channels>\n+\t\t<config-description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3MzM3MQ=="}, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDI4NTgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/3080T.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTowMDo1NFrOHNRJCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMzozOTozOFrOHNfQdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NDM3Nw==", "bodyText": "You only need 1 group powerPhaseGroup. And for each group set label and description here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<channel-group id=\"powerPhaseA\" typeId=\"powerPhaseGroupA\" />\n          \n          \n            \n            \t\t\t<channel-group id=\"powerPhaseA\" typeId=\"powerPhaseGroup\" >\n          \n          \n            \n            \t\t\t    <label>Power Phase A</label>\n          \n          \n            \n            \t\t            <description>Power phase 1 for Iammeter device</description>\n          \n          \n            \n            \t\t\t</channel-group>", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483674377", "createdAt": "2020-09-04T15:00:54Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/3080T.xml", "diffHunk": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter3080T\">\n+\t\t<label>Iammeter Power Meter 3080T</label>\n+\t\t<description>3 phases PowerMeter for Iammeter 3080T Binding</description>\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"powerPhaseA\" typeId=\"powerPhaseGroupA\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTY1Mg==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905652", "createdAt": "2020-09-05T03:39:38Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/resources/ESH-INF/thing/3080T.xml", "diffHunk": "@@ -0,0 +1,124 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"iammeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"powermeter3080T\">\n+\t\t<label>Iammeter Power Meter 3080T</label>\n+\t\t<description>3 phases PowerMeter for Iammeter 3080T Binding</description>\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"powerPhaseA\" typeId=\"powerPhaseGroupA\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NDM3Nw=="}, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDMwNTM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTowNjoyMVrOHNRVLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMzozOTo0OVrOHNfQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NzQ4NQ==", "bodyText": "The stream is an empty String. Do you need to send something or does it also work to use:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n          \n          \n            \n                        String response = HttpUtil.executeUrl(httpMethod, url, TIMEOUT_MS);\n          \n      \n    \n    \n  \n\nSame applies to the other handler", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483677485", "createdAt": "2020-09-04T15:06:21Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTY3Nw==", "bodyText": "both changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905677", "createdAt": "2020-09-05T03:39:49Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterHandler.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NzQ4NQ=="}, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDM1MDI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNToxODo0NFrOHNRwNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMzo0MDowNFrOHNfQvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDQwNg==", "bodyText": "Related to the class splitting. I didn't intend for you to completely copy paste the code as it duplicates a lot of code. Better make an abstract base class with all the logic and let it call methods to do the specific code. The code I selected here would be in the sub class. The method would get the response as parameter. You can make the method getDecimal  protected (better rename it getQuantityState probably`.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483684406", "createdAt": "2020-09-04T15:18:44Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class Iammeter3080THandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Iammeter3080THandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public Iammeter3080THandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Datas\";\n+            if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                String groups[] = { \"powerPhaseA\", \"powerPhaseB\", \"powerPhaseC\" };\n+                for (int row = 0; row < groups.length; row++) {\n+                    String gpName = groups[row];\n+                    List<Channel> chnList = getThing().getChannelsOfGroup(gpName);\n+                    for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                        Channel chnl = chnList.get(channelConfig.ordinal());\n+                        if (chnl != null) {\n+                            State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(row)\n+                                    .getAsJsonArray().get(channelConfig.ordinal()).toString(), channelConfig.getUnit());\n+                            updateState(chnl.getUID(), state);\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTU3NA==", "bodyText": "abstract class made.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905574", "createdAt": "2020-09-05T03:38:32Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class Iammeter3080THandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Iammeter3080THandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public Iammeter3080THandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Datas\";\n+            if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                String groups[] = { \"powerPhaseA\", \"powerPhaseB\", \"powerPhaseC\" };\n+                for (int row = 0; row < groups.length; row++) {\n+                    String gpName = groups[row];\n+                    List<Channel> chnList = getThing().getChannelsOfGroup(gpName);\n+                    for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                        Channel chnl = chnList.get(channelConfig.ordinal());\n+                        if (chnl != null) {\n+                            State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(row)\n+                                    .getAsJsonArray().get(channelConfig.ordinal()).toString(), channelConfig.getUnit());\n+                            updateState(chnl.getUID(), state);\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDQwNg=="}, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTcyNQ==", "bodyText": "abstract class made.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905725", "createdAt": "2020-09-05T03:40:04Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class Iammeter3080THandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Iammeter3080THandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public Iammeter3080THandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Datas\";\n+            if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                String groups[] = { \"powerPhaseA\", \"powerPhaseB\", \"powerPhaseC\" };\n+                for (int row = 0; row < groups.length; row++) {\n+                    String gpName = groups[row];\n+                    List<Channel> chnList = getThing().getChannelsOfGroup(gpName);\n+                    for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                        Channel chnl = chnList.get(channelConfig.ordinal());\n+                        if (chnl != null) {\n+                            State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(row)\n+                                    .getAsJsonArray().get(channelConfig.ordinal()).toString(), channelConfig.getUnit());\n+                            updateState(chnl.getUID(), state);\n+                        }\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDQwNg=="}, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDM1MzAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNToxOTozMVrOHNRx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMzozODowMlrOHNfQDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDg0MQ==", "bodyText": "You need to set the field to null:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshJob = null;\n          \n          \n            \n                        this.refreshJob = null;", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483684841", "createdAt": "2020-09-04T15:19:31Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class Iammeter3080THandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Iammeter3080THandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public Iammeter3080THandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Datas\";\n+            if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                String groups[] = { \"powerPhaseA\", \"powerPhaseB\", \"powerPhaseC\" };\n+                for (int row = 0; row < groups.length; row++) {\n+                    String gpName = groups[row];\n+                    List<Channel> chnList = getThing().getChannelsOfGroup(gpName);\n+                    for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                        Channel chnl = chnList.get(channelConfig.ordinal());\n+                        if (chnl != null) {\n+                            State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(row)\n+                                    .getAsJsonArray().get(channelConfig.ordinal()).toString(), channelConfig.getUnit());\n+                            updateState(chnl.getUID(), state);\n+                        }\n+                    }\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            return true;\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    private State getDecimal(String value, Unit<?> unit) {\n+        try {\n+            return QuantityType.valueOf(Float.parseFloat(value), unit);\n+        } catch (NumberFormatException e) {\n+            return UnDefType.UNDEF;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwNTU0OA==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483905548", "createdAt": "2020-09-05T03:38:02Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/Iammeter3080THandler.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class Iammeter3080THandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Iammeter3080THandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public Iammeter3080THandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, stream, null, TIMEOUT_MS);\n+            JsonElement iammeterDataElement = new JsonParser().parse(response);\n+            JsonObject iammeterData = iammeterDataElement.getAsJsonObject();\n+            String keyWord = \"Datas\";\n+            if (iammeterData.has(\"Datas\") && iammeterData.has(\"SN\")) {\n+                String groups[] = { \"powerPhaseA\", \"powerPhaseB\", \"powerPhaseC\" };\n+                for (int row = 0; row < groups.length; row++) {\n+                    String gpName = groups[row];\n+                    List<Channel> chnList = getThing().getChannelsOfGroup(gpName);\n+                    for (IammeterWEM3080Channel channelConfig : IammeterWEM3080Channel.values()) {\n+                        Channel chnl = chnList.get(channelConfig.ordinal());\n+                        if (chnl != null) {\n+                            State state = getDecimal(iammeterData.get(keyWord).getAsJsonArray().get(row)\n+                                    .getAsJsonArray().get(channelConfig.ordinal()).toString(), channelConfig.getUnit());\n+                            updateState(chnl.getUID(), state);\n+                        }\n+                    }\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            }\n+            stream.close();\n+            updateStatus(ThingStatus.ONLINE);\n+            return true;\n+            // Very rudimentary Exception differentiation\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Communication error with the device: \" + e.getMessage());\n+        } catch (JsonSyntaxException je) {\n+            logger.warn(\"Invalid JSON when refreshing source {}: {}\", getThing().getUID(), je.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    private State getDecimal(String value, Unit<?> unit) {\n+        try {\n+            return QuantityType.valueOf(Float.parseFloat(value), unit);\n+        } catch (NumberFormatException e) {\n+            return UnDefType.UNDEF;\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4NDg0MQ=="}, "originalCommit": {"oid": "c8d53011af0031e25c6619a26b9e384a0a1ad9ed"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjQ3NTIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxOTo0NTo1NVrOHNj6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNDowODo1OVrOHNmI7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTg3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class IammeterBaseHandler extends BaseThingHandler {\n          \n          \n            \n            public abstract class IammeterBaseHandler extends BaseThingHandler {", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483981872", "createdAt": "2020-09-05T19:45:55Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODQwNQ==", "bodyText": "added.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018405", "createdAt": "2020-09-06T04:08:32Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTg3Mg=="}, "originalCommit": {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODQxNQ==", "bodyText": "codes reformated using mvn spotless:apply.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018415", "createdAt": "2020-09-06T04:08:59Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTg3Mg=="}, "originalCommit": {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjQ3NjAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxOTo0Njo1N1rOHNj6kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNDowODoyM1rOHNmI1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTk3MA==", "bodyText": "This is not used anymore and can be removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483981970", "createdAt": "2020-09-05T19:46:57Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterBaseHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterBaseHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    protected void resolveData(String response) {\n+\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODM4OQ==", "bodyText": "removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018389", "createdAt": "2020-09-06T04:08:23Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterBaseHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterBaseHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    protected void resolveData(String response) {\n+\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MTk3MA=="}, "originalCommit": {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjQ3NjIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxOTo0NzoyMFrOHNj6sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNDowODowNVrOHNmIwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjAwMQ==", "bodyText": "Can you remove this commented out code.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483982001", "createdAt": "2020-09-05T19:47:20Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterBaseHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterBaseHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    protected void resolveData(String response) {\n+\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, TIMEOUT_MS);\n+\n+            resolveData(response);\n+\n+            // JsonElement iammeterDataElement = new JsonParser().parse(response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODM3MA==", "bodyText": "removed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018370", "createdAt": "2020-09-06T04:08:05Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterBaseHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterBaseHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    protected void resolveData(String response) {\n+\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private boolean refresh() {\n+        refreshCache.invalidateValue();\n+        IammeterConfiguration config = this.config;\n+        try {\n+            String httpMethod = \"GET\";\n+            String url = \"http://\" + config.username + \":\" + config.password + \"@\" + config.host + \":\" + config.port\n+                    + \"/monitorjson\";\n+            String content = \"\";\n+            InputStream stream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));\n+\n+            String response = HttpUtil.executeUrl(httpMethod, url, TIMEOUT_MS);\n+\n+            resolveData(response);\n+\n+            // JsonElement iammeterDataElement = new JsonParser().parse(response);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjAwMQ=="}, "originalCommit": {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNjQ3NzA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQxOTo0ODo0MFrOHNj7Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQwNDowNzo1N1rOHNmIwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjA5OQ==", "bodyText": "By maing this class abstract you can also make this method abstract:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void resolveData(String response) {\n          \n          \n            \n                protected abstract void resolveData(String response);", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r483982099", "createdAt": "2020-09-05T19:48:40Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterBaseHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterBaseHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    protected void resolveData(String response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDAxODM2OQ==", "bodyText": "changed.", "url": "https://github.com/openhab/openhab-addons/pull/8252#discussion_r484018369", "createdAt": "2020-09-06T04:07:57Z", "author": {"login": "lewei50"}, "path": "bundles/org.openhab.binding.iammeter/src/main/java/org/openhab/binding/iammeter/internal/IammeterBaseHandler.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.iammeter.internal;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link IammeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Yang Bo - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class IammeterBaseHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(IammeterBaseHandler.class);\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private IammeterConfiguration config;\n+    private static final int TIMEOUT_MS = 5000;\n+    private final ExpiringCache<Boolean> refreshCache = new ExpiringCache<>(Duration.ofSeconds(5), this::refresh);\n+\n+    public IammeterBaseHandler(Thing thing) {\n+        super(thing);\n+        config = getConfiguration();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refreshCache.getValue();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        config = getConfiguration();\n+        if (refreshJob == null) {\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, config.refreshInterval, TimeUnit.SECONDS);\n+            this.refreshJob = refreshJob;\n+            updateStatus(ThingStatus.UNKNOWN);\n+        }\n+    }\n+\n+    protected void resolveData(String response) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzk4MjA5OQ=="}, "originalCommit": {"oid": "e59269aba0c217e462afb7f6b7a535166c43c952"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4603, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}