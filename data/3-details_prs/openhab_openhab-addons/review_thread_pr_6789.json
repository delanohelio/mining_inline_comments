{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMjEyNzE3", "number": 6789, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxODoyMTo0M1rODWoPzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToyNzo1NVrODXdUfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDU0NjY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/TelegramHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxODoyMTo0M1rOFbfqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMTo1NTowNlrOFcpGHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3NDUzOQ==", "bodyText": "Are errors repeated every <10sec? Otherwise the thing would go back to online with this function call (like described in the initial post)", "url": "https://github.com/openhab/openhab-addons/pull/6789#discussion_r364374539", "createdAt": "2020-01-08T18:21:43Z", "author": {"login": "bjoernbrings"}, "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/TelegramHandler.java", "diffHunk": "@@ -143,90 +148,115 @@ public void initialize() {\n \r\n         botLibClient = new OkHttpClient.Builder().connectTimeout(75, TimeUnit.SECONDS).readTimeout(75, TimeUnit.SECONDS)\r\n                 .build();\r\n-        updateStatus(ThingStatus.ONLINE);\r\n+        updateStatus(ThingStatus.UNKNOWN);\r\n+        delayThingOnlineStatus();\r\n         TelegramBot localBot = bot = new TelegramBot.Builder(botToken).okHttpClient(botLibClient).build();\r\n         localBot.setUpdatesListener(updates -> {\r\n-                for (Update update : updates) {\r\n-                    String lastMessageText = null;\r\n-                    Integer lastMessageDate = null;\r\n-                    String lastMessageFirstName = null;\r\n-                    String lastMessageLastName = null;\r\n-                    String lastMessageUsername = null;\r\n-                    Long chatId = null;\r\n-                    String replyId = null;\r\n-                    if (update.message() != null && update.message().text() != null) {\r\n-                        Message message = update.message();\r\n-                        chatId = message.chat().id();\r\n-                        if (!chatIds.contains(chatId)) {\r\n-                            logger.warn(\r\n-                                    \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n-                                    chatId);\r\n-                            continue; // this is very important regarding security to avoid commands from an unknown\r\n-                                      // chat\r\n-                        }\r\n-\r\n-                        lastMessageText = message.text();\r\n-                        lastMessageDate = message.date();\r\n-                        lastMessageFirstName = message.from().firstName();\r\n-                        lastMessageLastName = message.from().lastName();\r\n-                        lastMessageUsername = message.from().username();\r\n-                    } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n-                            && update.callbackQuery().message().text() != null) {\r\n-                        String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n-\r\n-                        if (callbackData.length == 2) {\r\n-                            replyId = callbackData[0];\r\n-                            lastMessageText = callbackData[1];\r\n-                            lastMessageDate = update.callbackQuery().message().date();\r\n-                            lastMessageFirstName = update.callbackQuery().from().firstName();\r\n-                            lastMessageLastName = update.callbackQuery().from().lastName();\r\n-                            lastMessageUsername = update.callbackQuery().from().username();\r\n-                            chatId = update.callbackQuery().message().chat().id();\r\n-                            replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n-                            logger.debug(\"Received callbackId {} for chatId {} and replyId {}\",\r\n-                                    update.callbackQuery().id(), chatId, replyId);\r\n-                        } else {\r\n-                            logger.warn(\r\n-                                    \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n-                                    update.callbackQuery().data());\r\n-                        }\r\n+            cancelThingOnlineStatusJob();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+            for (Update update : updates) {\r\n+                String lastMessageText = null;\r\n+                Integer lastMessageDate = null;\r\n+                String lastMessageFirstName = null;\r\n+                String lastMessageLastName = null;\r\n+                String lastMessageUsername = null;\r\n+                Long chatId = null;\r\n+                String replyId = null;\r\n+                if (update.message() != null && update.message().text() != null) {\r\n+                    Message message = update.message();\r\n+                    chatId = message.chat().id();\r\n+                    if (!chatIds.contains(chatId)) {\r\n+                        logger.warn(\r\n+                                \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n+                                chatId);\r\n+                        continue; // this is very important regarding security to avoid commands from an unknown\r\n+                                  // chat\r\n+                    }\r\n+\r\n+                    lastMessageText = message.text();\r\n+                    lastMessageDate = message.date();\r\n+                    lastMessageFirstName = message.from().firstName();\r\n+                    lastMessageLastName = message.from().lastName();\r\n+                    lastMessageUsername = message.from().username();\r\n+                } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n+                        && update.callbackQuery().message().text() != null) {\r\n+                    String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n+\r\n+                    if (callbackData.length == 2) {\r\n+                        replyId = callbackData[0];\r\n+                        lastMessageText = callbackData[1];\r\n+                        lastMessageDate = update.callbackQuery().message().date();\r\n+                        lastMessageFirstName = update.callbackQuery().from().firstName();\r\n+                        lastMessageLastName = update.callbackQuery().from().lastName();\r\n+                        lastMessageUsername = update.callbackQuery().from().username();\r\n+                        chatId = update.callbackQuery().message().chat().id();\r\n+                        replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n+                        logger.debug(\"Received callbackId {} for chatId {} and replyId {}\", update.callbackQuery().id(),\r\n+                                chatId, replyId);\r\n+                    } else {\r\n+                        logger.warn(\r\n+                                \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n+                                update.callbackQuery().data());\r\n                     }\r\n-                    updateChannel(LASTMESSAGETEXT,\r\n-                            lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEDATE,\r\n-                            lastMessageDate != null\r\n-                                    ? new DateTimeType(ZonedDateTime.ofInstant(\r\n-                                            Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGENAME,\r\n-                            (lastMessageFirstName != null || lastMessageLastName != null)\r\n-                                    ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n-                                            + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEUSERNAME,\r\n-                            lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n-                    updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n-                    updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n                 }\r\n-                return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n+                updateChannel(LASTMESSAGETEXT,\r\n+                        lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEDATE,\r\n+                        lastMessageDate != null\r\n+                                ? new DateTimeType(ZonedDateTime\r\n+                                        .ofInstant(Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n+                                : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGENAME, (lastMessageFirstName != null || lastMessageLastName != null)\r\n+                        ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n+                                + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n+                        : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEUSERNAME,\r\n+                        lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n+                updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n+                updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n+            }\r\n+            return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n         }, exception -> {\r\n-                if (exception != null) {\r\n-                    logger.warn(\"Telegram exception: {}\", exception.getMessage());\r\n-                    if (exception.response() != null) {\r\n-                        BaseResponse localResponse = exception.response();\r\n-                        if (localResponse.errorCode() == 401) {\r\n-                            logger.error(\"Bot token invalid, disable thing {}\", getThing().getUID());\r\n-                            localBot.removeGetUpdatesListener();\r\n-                            updateStatus(ThingStatus.OFFLINE);\r\n-                        }\r\n+            if (exception != null) {\r\n+                if (exception.response() != null) {\r\n+                    BaseResponse localResponse = exception.response();\r\n+                    if (localResponse.errorCode() == 401) { // unauthorized\r\n+                        cancelThingOnlineStatusJob();\r\n+                        localBot.removeGetUpdatesListener();\r\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                                \"Unauthorized attempt to connect to the Telegram server, please check if the bot token is valid\");\r\n+                        return;\r\n                     }\r\n+                }\r\n+                if (exception.getCause() != null) { // cause is only non-null in case of an IOException\r\n+                    cancelThingOnlineStatusJob();\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, exception.getMessage());\r\n+                    delayThingOnlineStatus();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37f2a091c0633f07abf6990ebcf9fce04f4e9bb"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwMzQxMA==", "bodyText": "Yes, let's say the connection is broken an an IOException is reported, the Telegram library puts the thread to sleep for 100ms (default value) before it creates a new request (that might fail again with an IOException) and thus produces a lot of messages in the log.\nIf you like the previous \"optimistic\" solution better (Thing went ONLINE immediately, and only with an error went to OFFLINE), then I'm also happy to keep the \"Status quo\". I think the most important change is that the updateStatus() call doesn't produce more log entries when the Thing was already set to OFFLINE.", "url": "https://github.com/openhab/openhab-addons/pull/6789#discussion_r364403410", "createdAt": "2020-01-08T19:27:35Z", "author": {"login": "ZzetT"}, "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/TelegramHandler.java", "diffHunk": "@@ -143,90 +148,115 @@ public void initialize() {\n \r\n         botLibClient = new OkHttpClient.Builder().connectTimeout(75, TimeUnit.SECONDS).readTimeout(75, TimeUnit.SECONDS)\r\n                 .build();\r\n-        updateStatus(ThingStatus.ONLINE);\r\n+        updateStatus(ThingStatus.UNKNOWN);\r\n+        delayThingOnlineStatus();\r\n         TelegramBot localBot = bot = new TelegramBot.Builder(botToken).okHttpClient(botLibClient).build();\r\n         localBot.setUpdatesListener(updates -> {\r\n-                for (Update update : updates) {\r\n-                    String lastMessageText = null;\r\n-                    Integer lastMessageDate = null;\r\n-                    String lastMessageFirstName = null;\r\n-                    String lastMessageLastName = null;\r\n-                    String lastMessageUsername = null;\r\n-                    Long chatId = null;\r\n-                    String replyId = null;\r\n-                    if (update.message() != null && update.message().text() != null) {\r\n-                        Message message = update.message();\r\n-                        chatId = message.chat().id();\r\n-                        if (!chatIds.contains(chatId)) {\r\n-                            logger.warn(\r\n-                                    \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n-                                    chatId);\r\n-                            continue; // this is very important regarding security to avoid commands from an unknown\r\n-                                      // chat\r\n-                        }\r\n-\r\n-                        lastMessageText = message.text();\r\n-                        lastMessageDate = message.date();\r\n-                        lastMessageFirstName = message.from().firstName();\r\n-                        lastMessageLastName = message.from().lastName();\r\n-                        lastMessageUsername = message.from().username();\r\n-                    } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n-                            && update.callbackQuery().message().text() != null) {\r\n-                        String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n-\r\n-                        if (callbackData.length == 2) {\r\n-                            replyId = callbackData[0];\r\n-                            lastMessageText = callbackData[1];\r\n-                            lastMessageDate = update.callbackQuery().message().date();\r\n-                            lastMessageFirstName = update.callbackQuery().from().firstName();\r\n-                            lastMessageLastName = update.callbackQuery().from().lastName();\r\n-                            lastMessageUsername = update.callbackQuery().from().username();\r\n-                            chatId = update.callbackQuery().message().chat().id();\r\n-                            replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n-                            logger.debug(\"Received callbackId {} for chatId {} and replyId {}\",\r\n-                                    update.callbackQuery().id(), chatId, replyId);\r\n-                        } else {\r\n-                            logger.warn(\r\n-                                    \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n-                                    update.callbackQuery().data());\r\n-                        }\r\n+            cancelThingOnlineStatusJob();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+            for (Update update : updates) {\r\n+                String lastMessageText = null;\r\n+                Integer lastMessageDate = null;\r\n+                String lastMessageFirstName = null;\r\n+                String lastMessageLastName = null;\r\n+                String lastMessageUsername = null;\r\n+                Long chatId = null;\r\n+                String replyId = null;\r\n+                if (update.message() != null && update.message().text() != null) {\r\n+                    Message message = update.message();\r\n+                    chatId = message.chat().id();\r\n+                    if (!chatIds.contains(chatId)) {\r\n+                        logger.warn(\r\n+                                \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n+                                chatId);\r\n+                        continue; // this is very important regarding security to avoid commands from an unknown\r\n+                                  // chat\r\n+                    }\r\n+\r\n+                    lastMessageText = message.text();\r\n+                    lastMessageDate = message.date();\r\n+                    lastMessageFirstName = message.from().firstName();\r\n+                    lastMessageLastName = message.from().lastName();\r\n+                    lastMessageUsername = message.from().username();\r\n+                } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n+                        && update.callbackQuery().message().text() != null) {\r\n+                    String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n+\r\n+                    if (callbackData.length == 2) {\r\n+                        replyId = callbackData[0];\r\n+                        lastMessageText = callbackData[1];\r\n+                        lastMessageDate = update.callbackQuery().message().date();\r\n+                        lastMessageFirstName = update.callbackQuery().from().firstName();\r\n+                        lastMessageLastName = update.callbackQuery().from().lastName();\r\n+                        lastMessageUsername = update.callbackQuery().from().username();\r\n+                        chatId = update.callbackQuery().message().chat().id();\r\n+                        replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n+                        logger.debug(\"Received callbackId {} for chatId {} and replyId {}\", update.callbackQuery().id(),\r\n+                                chatId, replyId);\r\n+                    } else {\r\n+                        logger.warn(\r\n+                                \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n+                                update.callbackQuery().data());\r\n                     }\r\n-                    updateChannel(LASTMESSAGETEXT,\r\n-                            lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEDATE,\r\n-                            lastMessageDate != null\r\n-                                    ? new DateTimeType(ZonedDateTime.ofInstant(\r\n-                                            Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGENAME,\r\n-                            (lastMessageFirstName != null || lastMessageLastName != null)\r\n-                                    ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n-                                            + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEUSERNAME,\r\n-                            lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n-                    updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n-                    updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n                 }\r\n-                return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n+                updateChannel(LASTMESSAGETEXT,\r\n+                        lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEDATE,\r\n+                        lastMessageDate != null\r\n+                                ? new DateTimeType(ZonedDateTime\r\n+                                        .ofInstant(Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n+                                : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGENAME, (lastMessageFirstName != null || lastMessageLastName != null)\r\n+                        ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n+                                + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n+                        : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEUSERNAME,\r\n+                        lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n+                updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n+                updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n+            }\r\n+            return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n         }, exception -> {\r\n-                if (exception != null) {\r\n-                    logger.warn(\"Telegram exception: {}\", exception.getMessage());\r\n-                    if (exception.response() != null) {\r\n-                        BaseResponse localResponse = exception.response();\r\n-                        if (localResponse.errorCode() == 401) {\r\n-                            logger.error(\"Bot token invalid, disable thing {}\", getThing().getUID());\r\n-                            localBot.removeGetUpdatesListener();\r\n-                            updateStatus(ThingStatus.OFFLINE);\r\n-                        }\r\n+            if (exception != null) {\r\n+                if (exception.response() != null) {\r\n+                    BaseResponse localResponse = exception.response();\r\n+                    if (localResponse.errorCode() == 401) { // unauthorized\r\n+                        cancelThingOnlineStatusJob();\r\n+                        localBot.removeGetUpdatesListener();\r\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                                \"Unauthorized attempt to connect to the Telegram server, please check if the bot token is valid\");\r\n+                        return;\r\n                     }\r\n+                }\r\n+                if (exception.getCause() != null) { // cause is only non-null in case of an IOException\r\n+                    cancelThingOnlineStatusJob();\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, exception.getMessage());\r\n+                    delayThingOnlineStatus();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3NDUzOQ=="}, "originalCommit": {"oid": "b37f2a091c0633f07abf6990ebcf9fce04f4e9bb"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1ODA3MQ==", "bodyText": "The 100ms feels a bit strange, but when this is the default for the library ...", "url": "https://github.com/openhab/openhab-addons/pull/6789#discussion_r364458071", "createdAt": "2020-01-08T21:43:51Z", "author": {"login": "bjoernbrings"}, "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/TelegramHandler.java", "diffHunk": "@@ -143,90 +148,115 @@ public void initialize() {\n \r\n         botLibClient = new OkHttpClient.Builder().connectTimeout(75, TimeUnit.SECONDS).readTimeout(75, TimeUnit.SECONDS)\r\n                 .build();\r\n-        updateStatus(ThingStatus.ONLINE);\r\n+        updateStatus(ThingStatus.UNKNOWN);\r\n+        delayThingOnlineStatus();\r\n         TelegramBot localBot = bot = new TelegramBot.Builder(botToken).okHttpClient(botLibClient).build();\r\n         localBot.setUpdatesListener(updates -> {\r\n-                for (Update update : updates) {\r\n-                    String lastMessageText = null;\r\n-                    Integer lastMessageDate = null;\r\n-                    String lastMessageFirstName = null;\r\n-                    String lastMessageLastName = null;\r\n-                    String lastMessageUsername = null;\r\n-                    Long chatId = null;\r\n-                    String replyId = null;\r\n-                    if (update.message() != null && update.message().text() != null) {\r\n-                        Message message = update.message();\r\n-                        chatId = message.chat().id();\r\n-                        if (!chatIds.contains(chatId)) {\r\n-                            logger.warn(\r\n-                                    \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n-                                    chatId);\r\n-                            continue; // this is very important regarding security to avoid commands from an unknown\r\n-                                      // chat\r\n-                        }\r\n-\r\n-                        lastMessageText = message.text();\r\n-                        lastMessageDate = message.date();\r\n-                        lastMessageFirstName = message.from().firstName();\r\n-                        lastMessageLastName = message.from().lastName();\r\n-                        lastMessageUsername = message.from().username();\r\n-                    } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n-                            && update.callbackQuery().message().text() != null) {\r\n-                        String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n-\r\n-                        if (callbackData.length == 2) {\r\n-                            replyId = callbackData[0];\r\n-                            lastMessageText = callbackData[1];\r\n-                            lastMessageDate = update.callbackQuery().message().date();\r\n-                            lastMessageFirstName = update.callbackQuery().from().firstName();\r\n-                            lastMessageLastName = update.callbackQuery().from().lastName();\r\n-                            lastMessageUsername = update.callbackQuery().from().username();\r\n-                            chatId = update.callbackQuery().message().chat().id();\r\n-                            replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n-                            logger.debug(\"Received callbackId {} for chatId {} and replyId {}\",\r\n-                                    update.callbackQuery().id(), chatId, replyId);\r\n-                        } else {\r\n-                            logger.warn(\r\n-                                    \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n-                                    update.callbackQuery().data());\r\n-                        }\r\n+            cancelThingOnlineStatusJob();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+            for (Update update : updates) {\r\n+                String lastMessageText = null;\r\n+                Integer lastMessageDate = null;\r\n+                String lastMessageFirstName = null;\r\n+                String lastMessageLastName = null;\r\n+                String lastMessageUsername = null;\r\n+                Long chatId = null;\r\n+                String replyId = null;\r\n+                if (update.message() != null && update.message().text() != null) {\r\n+                    Message message = update.message();\r\n+                    chatId = message.chat().id();\r\n+                    if (!chatIds.contains(chatId)) {\r\n+                        logger.warn(\r\n+                                \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n+                                chatId);\r\n+                        continue; // this is very important regarding security to avoid commands from an unknown\r\n+                                  // chat\r\n+                    }\r\n+\r\n+                    lastMessageText = message.text();\r\n+                    lastMessageDate = message.date();\r\n+                    lastMessageFirstName = message.from().firstName();\r\n+                    lastMessageLastName = message.from().lastName();\r\n+                    lastMessageUsername = message.from().username();\r\n+                } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n+                        && update.callbackQuery().message().text() != null) {\r\n+                    String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n+\r\n+                    if (callbackData.length == 2) {\r\n+                        replyId = callbackData[0];\r\n+                        lastMessageText = callbackData[1];\r\n+                        lastMessageDate = update.callbackQuery().message().date();\r\n+                        lastMessageFirstName = update.callbackQuery().from().firstName();\r\n+                        lastMessageLastName = update.callbackQuery().from().lastName();\r\n+                        lastMessageUsername = update.callbackQuery().from().username();\r\n+                        chatId = update.callbackQuery().message().chat().id();\r\n+                        replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n+                        logger.debug(\"Received callbackId {} for chatId {} and replyId {}\", update.callbackQuery().id(),\r\n+                                chatId, replyId);\r\n+                    } else {\r\n+                        logger.warn(\r\n+                                \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n+                                update.callbackQuery().data());\r\n                     }\r\n-                    updateChannel(LASTMESSAGETEXT,\r\n-                            lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEDATE,\r\n-                            lastMessageDate != null\r\n-                                    ? new DateTimeType(ZonedDateTime.ofInstant(\r\n-                                            Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGENAME,\r\n-                            (lastMessageFirstName != null || lastMessageLastName != null)\r\n-                                    ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n-                                            + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEUSERNAME,\r\n-                            lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n-                    updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n-                    updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n                 }\r\n-                return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n+                updateChannel(LASTMESSAGETEXT,\r\n+                        lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEDATE,\r\n+                        lastMessageDate != null\r\n+                                ? new DateTimeType(ZonedDateTime\r\n+                                        .ofInstant(Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n+                                : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGENAME, (lastMessageFirstName != null || lastMessageLastName != null)\r\n+                        ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n+                                + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n+                        : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEUSERNAME,\r\n+                        lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n+                updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n+                updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n+            }\r\n+            return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n         }, exception -> {\r\n-                if (exception != null) {\r\n-                    logger.warn(\"Telegram exception: {}\", exception.getMessage());\r\n-                    if (exception.response() != null) {\r\n-                        BaseResponse localResponse = exception.response();\r\n-                        if (localResponse.errorCode() == 401) {\r\n-                            logger.error(\"Bot token invalid, disable thing {}\", getThing().getUID());\r\n-                            localBot.removeGetUpdatesListener();\r\n-                            updateStatus(ThingStatus.OFFLINE);\r\n-                        }\r\n+            if (exception != null) {\r\n+                if (exception.response() != null) {\r\n+                    BaseResponse localResponse = exception.response();\r\n+                    if (localResponse.errorCode() == 401) { // unauthorized\r\n+                        cancelThingOnlineStatusJob();\r\n+                        localBot.removeGetUpdatesListener();\r\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                                \"Unauthorized attempt to connect to the Telegram server, please check if the bot token is valid\");\r\n+                        return;\r\n                     }\r\n+                }\r\n+                if (exception.getCause() != null) { // cause is only non-null in case of an IOException\r\n+                    cancelThingOnlineStatusJob();\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, exception.getMessage());\r\n+                    delayThingOnlineStatus();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3NDUzOQ=="}, "originalCommit": {"oid": "b37f2a091c0633f07abf6990ebcf9fce04f4e9bb"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5Njk5Mg==", "bodyText": "I can confirm this and I also find it strange. Mainly this happens when internet is down or Telegram servers are down, I don't know why 100ms is default there...", "url": "https://github.com/openhab/openhab-addons/pull/6789#discussion_r364496992", "createdAt": "2020-01-08T23:36:38Z", "author": {"login": "radokristof"}, "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/TelegramHandler.java", "diffHunk": "@@ -143,90 +148,115 @@ public void initialize() {\n \r\n         botLibClient = new OkHttpClient.Builder().connectTimeout(75, TimeUnit.SECONDS).readTimeout(75, TimeUnit.SECONDS)\r\n                 .build();\r\n-        updateStatus(ThingStatus.ONLINE);\r\n+        updateStatus(ThingStatus.UNKNOWN);\r\n+        delayThingOnlineStatus();\r\n         TelegramBot localBot = bot = new TelegramBot.Builder(botToken).okHttpClient(botLibClient).build();\r\n         localBot.setUpdatesListener(updates -> {\r\n-                for (Update update : updates) {\r\n-                    String lastMessageText = null;\r\n-                    Integer lastMessageDate = null;\r\n-                    String lastMessageFirstName = null;\r\n-                    String lastMessageLastName = null;\r\n-                    String lastMessageUsername = null;\r\n-                    Long chatId = null;\r\n-                    String replyId = null;\r\n-                    if (update.message() != null && update.message().text() != null) {\r\n-                        Message message = update.message();\r\n-                        chatId = message.chat().id();\r\n-                        if (!chatIds.contains(chatId)) {\r\n-                            logger.warn(\r\n-                                    \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n-                                    chatId);\r\n-                            continue; // this is very important regarding security to avoid commands from an unknown\r\n-                                      // chat\r\n-                        }\r\n-\r\n-                        lastMessageText = message.text();\r\n-                        lastMessageDate = message.date();\r\n-                        lastMessageFirstName = message.from().firstName();\r\n-                        lastMessageLastName = message.from().lastName();\r\n-                        lastMessageUsername = message.from().username();\r\n-                    } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n-                            && update.callbackQuery().message().text() != null) {\r\n-                        String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n-\r\n-                        if (callbackData.length == 2) {\r\n-                            replyId = callbackData[0];\r\n-                            lastMessageText = callbackData[1];\r\n-                            lastMessageDate = update.callbackQuery().message().date();\r\n-                            lastMessageFirstName = update.callbackQuery().from().firstName();\r\n-                            lastMessageLastName = update.callbackQuery().from().lastName();\r\n-                            lastMessageUsername = update.callbackQuery().from().username();\r\n-                            chatId = update.callbackQuery().message().chat().id();\r\n-                            replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n-                            logger.debug(\"Received callbackId {} for chatId {} and replyId {}\",\r\n-                                    update.callbackQuery().id(), chatId, replyId);\r\n-                        } else {\r\n-                            logger.warn(\r\n-                                    \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n-                                    update.callbackQuery().data());\r\n-                        }\r\n+            cancelThingOnlineStatusJob();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+            for (Update update : updates) {\r\n+                String lastMessageText = null;\r\n+                Integer lastMessageDate = null;\r\n+                String lastMessageFirstName = null;\r\n+                String lastMessageLastName = null;\r\n+                String lastMessageUsername = null;\r\n+                Long chatId = null;\r\n+                String replyId = null;\r\n+                if (update.message() != null && update.message().text() != null) {\r\n+                    Message message = update.message();\r\n+                    chatId = message.chat().id();\r\n+                    if (!chatIds.contains(chatId)) {\r\n+                        logger.warn(\r\n+                                \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n+                                chatId);\r\n+                        continue; // this is very important regarding security to avoid commands from an unknown\r\n+                                  // chat\r\n+                    }\r\n+\r\n+                    lastMessageText = message.text();\r\n+                    lastMessageDate = message.date();\r\n+                    lastMessageFirstName = message.from().firstName();\r\n+                    lastMessageLastName = message.from().lastName();\r\n+                    lastMessageUsername = message.from().username();\r\n+                } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n+                        && update.callbackQuery().message().text() != null) {\r\n+                    String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n+\r\n+                    if (callbackData.length == 2) {\r\n+                        replyId = callbackData[0];\r\n+                        lastMessageText = callbackData[1];\r\n+                        lastMessageDate = update.callbackQuery().message().date();\r\n+                        lastMessageFirstName = update.callbackQuery().from().firstName();\r\n+                        lastMessageLastName = update.callbackQuery().from().lastName();\r\n+                        lastMessageUsername = update.callbackQuery().from().username();\r\n+                        chatId = update.callbackQuery().message().chat().id();\r\n+                        replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n+                        logger.debug(\"Received callbackId {} for chatId {} and replyId {}\", update.callbackQuery().id(),\r\n+                                chatId, replyId);\r\n+                    } else {\r\n+                        logger.warn(\r\n+                                \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n+                                update.callbackQuery().data());\r\n                     }\r\n-                    updateChannel(LASTMESSAGETEXT,\r\n-                            lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEDATE,\r\n-                            lastMessageDate != null\r\n-                                    ? new DateTimeType(ZonedDateTime.ofInstant(\r\n-                                            Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGENAME,\r\n-                            (lastMessageFirstName != null || lastMessageLastName != null)\r\n-                                    ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n-                                            + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEUSERNAME,\r\n-                            lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n-                    updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n-                    updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n                 }\r\n-                return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n+                updateChannel(LASTMESSAGETEXT,\r\n+                        lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEDATE,\r\n+                        lastMessageDate != null\r\n+                                ? new DateTimeType(ZonedDateTime\r\n+                                        .ofInstant(Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n+                                : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGENAME, (lastMessageFirstName != null || lastMessageLastName != null)\r\n+                        ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n+                                + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n+                        : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEUSERNAME,\r\n+                        lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n+                updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n+                updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n+            }\r\n+            return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n         }, exception -> {\r\n-                if (exception != null) {\r\n-                    logger.warn(\"Telegram exception: {}\", exception.getMessage());\r\n-                    if (exception.response() != null) {\r\n-                        BaseResponse localResponse = exception.response();\r\n-                        if (localResponse.errorCode() == 401) {\r\n-                            logger.error(\"Bot token invalid, disable thing {}\", getThing().getUID());\r\n-                            localBot.removeGetUpdatesListener();\r\n-                            updateStatus(ThingStatus.OFFLINE);\r\n-                        }\r\n+            if (exception != null) {\r\n+                if (exception.response() != null) {\r\n+                    BaseResponse localResponse = exception.response();\r\n+                    if (localResponse.errorCode() == 401) { // unauthorized\r\n+                        cancelThingOnlineStatusJob();\r\n+                        localBot.removeGetUpdatesListener();\r\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                                \"Unauthorized attempt to connect to the Telegram server, please check if the bot token is valid\");\r\n+                        return;\r\n                     }\r\n+                }\r\n+                if (exception.getCause() != null) { // cause is only non-null in case of an IOException\r\n+                    cancelThingOnlineStatusJob();\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, exception.getMessage());\r\n+                    delayThingOnlineStatus();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3NDUzOQ=="}, "originalCommit": {"oid": "b37f2a091c0633f07abf6990ebcf9fce04f4e9bb"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU3Nzc1OQ==", "bodyText": "It's possible to increase that number. But would it make a big difference to increase it? (ok, it would produce a bit less load in case of a connection error). But I don't know what a \"suitable\" value would be here.", "url": "https://github.com/openhab/openhab-addons/pull/6789#discussion_r365577759", "createdAt": "2020-01-12T11:55:06Z", "author": {"login": "ZzetT"}, "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/TelegramHandler.java", "diffHunk": "@@ -143,90 +148,115 @@ public void initialize() {\n \r\n         botLibClient = new OkHttpClient.Builder().connectTimeout(75, TimeUnit.SECONDS).readTimeout(75, TimeUnit.SECONDS)\r\n                 .build();\r\n-        updateStatus(ThingStatus.ONLINE);\r\n+        updateStatus(ThingStatus.UNKNOWN);\r\n+        delayThingOnlineStatus();\r\n         TelegramBot localBot = bot = new TelegramBot.Builder(botToken).okHttpClient(botLibClient).build();\r\n         localBot.setUpdatesListener(updates -> {\r\n-                for (Update update : updates) {\r\n-                    String lastMessageText = null;\r\n-                    Integer lastMessageDate = null;\r\n-                    String lastMessageFirstName = null;\r\n-                    String lastMessageLastName = null;\r\n-                    String lastMessageUsername = null;\r\n-                    Long chatId = null;\r\n-                    String replyId = null;\r\n-                    if (update.message() != null && update.message().text() != null) {\r\n-                        Message message = update.message();\r\n-                        chatId = message.chat().id();\r\n-                        if (!chatIds.contains(chatId)) {\r\n-                            logger.warn(\r\n-                                    \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n-                                    chatId);\r\n-                            continue; // this is very important regarding security to avoid commands from an unknown\r\n-                                      // chat\r\n-                        }\r\n-\r\n-                        lastMessageText = message.text();\r\n-                        lastMessageDate = message.date();\r\n-                        lastMessageFirstName = message.from().firstName();\r\n-                        lastMessageLastName = message.from().lastName();\r\n-                        lastMessageUsername = message.from().username();\r\n-                    } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n-                            && update.callbackQuery().message().text() != null) {\r\n-                        String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n-\r\n-                        if (callbackData.length == 2) {\r\n-                            replyId = callbackData[0];\r\n-                            lastMessageText = callbackData[1];\r\n-                            lastMessageDate = update.callbackQuery().message().date();\r\n-                            lastMessageFirstName = update.callbackQuery().from().firstName();\r\n-                            lastMessageLastName = update.callbackQuery().from().lastName();\r\n-                            lastMessageUsername = update.callbackQuery().from().username();\r\n-                            chatId = update.callbackQuery().message().chat().id();\r\n-                            replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n-                            logger.debug(\"Received callbackId {} for chatId {} and replyId {}\",\r\n-                                    update.callbackQuery().id(), chatId, replyId);\r\n-                        } else {\r\n-                            logger.warn(\r\n-                                    \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n-                                    update.callbackQuery().data());\r\n-                        }\r\n+            cancelThingOnlineStatusJob();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+            for (Update update : updates) {\r\n+                String lastMessageText = null;\r\n+                Integer lastMessageDate = null;\r\n+                String lastMessageFirstName = null;\r\n+                String lastMessageLastName = null;\r\n+                String lastMessageUsername = null;\r\n+                Long chatId = null;\r\n+                String replyId = null;\r\n+                if (update.message() != null && update.message().text() != null) {\r\n+                    Message message = update.message();\r\n+                    chatId = message.chat().id();\r\n+                    if (!chatIds.contains(chatId)) {\r\n+                        logger.warn(\r\n+                                \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n+                                chatId);\r\n+                        continue; // this is very important regarding security to avoid commands from an unknown\r\n+                                  // chat\r\n+                    }\r\n+\r\n+                    lastMessageText = message.text();\r\n+                    lastMessageDate = message.date();\r\n+                    lastMessageFirstName = message.from().firstName();\r\n+                    lastMessageLastName = message.from().lastName();\r\n+                    lastMessageUsername = message.from().username();\r\n+                } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n+                        && update.callbackQuery().message().text() != null) {\r\n+                    String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n+\r\n+                    if (callbackData.length == 2) {\r\n+                        replyId = callbackData[0];\r\n+                        lastMessageText = callbackData[1];\r\n+                        lastMessageDate = update.callbackQuery().message().date();\r\n+                        lastMessageFirstName = update.callbackQuery().from().firstName();\r\n+                        lastMessageLastName = update.callbackQuery().from().lastName();\r\n+                        lastMessageUsername = update.callbackQuery().from().username();\r\n+                        chatId = update.callbackQuery().message().chat().id();\r\n+                        replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n+                        logger.debug(\"Received callbackId {} for chatId {} and replyId {}\", update.callbackQuery().id(),\r\n+                                chatId, replyId);\r\n+                    } else {\r\n+                        logger.warn(\r\n+                                \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n+                                update.callbackQuery().data());\r\n                     }\r\n-                    updateChannel(LASTMESSAGETEXT,\r\n-                            lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEDATE,\r\n-                            lastMessageDate != null\r\n-                                    ? new DateTimeType(ZonedDateTime.ofInstant(\r\n-                                            Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGENAME,\r\n-                            (lastMessageFirstName != null || lastMessageLastName != null)\r\n-                                    ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n-                                            + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEUSERNAME,\r\n-                            lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n-                    updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n-                    updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n                 }\r\n-                return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n+                updateChannel(LASTMESSAGETEXT,\r\n+                        lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEDATE,\r\n+                        lastMessageDate != null\r\n+                                ? new DateTimeType(ZonedDateTime\r\n+                                        .ofInstant(Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n+                                : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGENAME, (lastMessageFirstName != null || lastMessageLastName != null)\r\n+                        ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n+                                + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n+                        : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEUSERNAME,\r\n+                        lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n+                updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n+                updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n+            }\r\n+            return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n         }, exception -> {\r\n-                if (exception != null) {\r\n-                    logger.warn(\"Telegram exception: {}\", exception.getMessage());\r\n-                    if (exception.response() != null) {\r\n-                        BaseResponse localResponse = exception.response();\r\n-                        if (localResponse.errorCode() == 401) {\r\n-                            logger.error(\"Bot token invalid, disable thing {}\", getThing().getUID());\r\n-                            localBot.removeGetUpdatesListener();\r\n-                            updateStatus(ThingStatus.OFFLINE);\r\n-                        }\r\n+            if (exception != null) {\r\n+                if (exception.response() != null) {\r\n+                    BaseResponse localResponse = exception.response();\r\n+                    if (localResponse.errorCode() == 401) { // unauthorized\r\n+                        cancelThingOnlineStatusJob();\r\n+                        localBot.removeGetUpdatesListener();\r\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                                \"Unauthorized attempt to connect to the Telegram server, please check if the bot token is valid\");\r\n+                        return;\r\n                     }\r\n+                }\r\n+                if (exception.getCause() != null) { // cause is only non-null in case of an IOException\r\n+                    cancelThingOnlineStatusJob();\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, exception.getMessage());\r\n+                    delayThingOnlineStatus();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3NDUzOQ=="}, "originalCommit": {"oid": "b37f2a091c0633f07abf6990ebcf9fce04f4e9bb"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTI0MjIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/TelegramHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToyNzo1NVrOFcw26w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwOToyNzo1NVrOFcw26w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwNDkzOQ==", "bodyText": "Is this message always set?", "url": "https://github.com/openhab/openhab-addons/pull/6789#discussion_r365704939", "createdAt": "2020-01-13T09:27:55Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.telegram/src/main/java/org/openhab/binding/telegram/internal/TelegramHandler.java", "diffHunk": "@@ -143,90 +148,115 @@ public void initialize() {\n \r\n         botLibClient = new OkHttpClient.Builder().connectTimeout(75, TimeUnit.SECONDS).readTimeout(75, TimeUnit.SECONDS)\r\n                 .build();\r\n-        updateStatus(ThingStatus.ONLINE);\r\n+        updateStatus(ThingStatus.UNKNOWN);\r\n+        delayThingOnlineStatus();\r\n         TelegramBot localBot = bot = new TelegramBot.Builder(botToken).okHttpClient(botLibClient).build();\r\n         localBot.setUpdatesListener(updates -> {\r\n-                for (Update update : updates) {\r\n-                    String lastMessageText = null;\r\n-                    Integer lastMessageDate = null;\r\n-                    String lastMessageFirstName = null;\r\n-                    String lastMessageLastName = null;\r\n-                    String lastMessageUsername = null;\r\n-                    Long chatId = null;\r\n-                    String replyId = null;\r\n-                    if (update.message() != null && update.message().text() != null) {\r\n-                        Message message = update.message();\r\n-                        chatId = message.chat().id();\r\n-                        if (!chatIds.contains(chatId)) {\r\n-                            logger.warn(\r\n-                                    \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n-                                    chatId);\r\n-                            continue; // this is very important regarding security to avoid commands from an unknown\r\n-                                      // chat\r\n-                        }\r\n-\r\n-                        lastMessageText = message.text();\r\n-                        lastMessageDate = message.date();\r\n-                        lastMessageFirstName = message.from().firstName();\r\n-                        lastMessageLastName = message.from().lastName();\r\n-                        lastMessageUsername = message.from().username();\r\n-                    } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n-                            && update.callbackQuery().message().text() != null) {\r\n-                        String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n-\r\n-                        if (callbackData.length == 2) {\r\n-                            replyId = callbackData[0];\r\n-                            lastMessageText = callbackData[1];\r\n-                            lastMessageDate = update.callbackQuery().message().date();\r\n-                            lastMessageFirstName = update.callbackQuery().from().firstName();\r\n-                            lastMessageLastName = update.callbackQuery().from().lastName();\r\n-                            lastMessageUsername = update.callbackQuery().from().username();\r\n-                            chatId = update.callbackQuery().message().chat().id();\r\n-                            replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n-                            logger.debug(\"Received callbackId {} for chatId {} and replyId {}\",\r\n-                                    update.callbackQuery().id(), chatId, replyId);\r\n-                        } else {\r\n-                            logger.warn(\r\n-                                    \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n-                                    update.callbackQuery().data());\r\n-                        }\r\n+            cancelThingOnlineStatusJob();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+            for (Update update : updates) {\r\n+                String lastMessageText = null;\r\n+                Integer lastMessageDate = null;\r\n+                String lastMessageFirstName = null;\r\n+                String lastMessageLastName = null;\r\n+                String lastMessageUsername = null;\r\n+                Long chatId = null;\r\n+                String replyId = null;\r\n+                if (update.message() != null && update.message().text() != null) {\r\n+                    Message message = update.message();\r\n+                    chatId = message.chat().id();\r\n+                    if (!chatIds.contains(chatId)) {\r\n+                        logger.warn(\r\n+                                \"Ignored message from unknown chat id {}. If you know the sender of that chat, add it to the list of chat ids in the thing configuration to authorize it\",\r\n+                                chatId);\r\n+                        continue; // this is very important regarding security to avoid commands from an unknown\r\n+                                  // chat\r\n+                    }\r\n+\r\n+                    lastMessageText = message.text();\r\n+                    lastMessageDate = message.date();\r\n+                    lastMessageFirstName = message.from().firstName();\r\n+                    lastMessageLastName = message.from().lastName();\r\n+                    lastMessageUsername = message.from().username();\r\n+                } else if (update.callbackQuery() != null && update.callbackQuery().message() != null\r\n+                        && update.callbackQuery().message().text() != null) {\r\n+                    String[] callbackData = update.callbackQuery().data().split(\" \", 2);\r\n+\r\n+                    if (callbackData.length == 2) {\r\n+                        replyId = callbackData[0];\r\n+                        lastMessageText = callbackData[1];\r\n+                        lastMessageDate = update.callbackQuery().message().date();\r\n+                        lastMessageFirstName = update.callbackQuery().from().firstName();\r\n+                        lastMessageLastName = update.callbackQuery().from().lastName();\r\n+                        lastMessageUsername = update.callbackQuery().from().username();\r\n+                        chatId = update.callbackQuery().message().chat().id();\r\n+                        replyIdToCallbackId.put(new ReplyKey(chatId, replyId), update.callbackQuery().id());\r\n+                        logger.debug(\"Received callbackId {} for chatId {} and replyId {}\", update.callbackQuery().id(),\r\n+                                chatId, replyId);\r\n+                    } else {\r\n+                        logger.warn(\r\n+                                \"The received callback query {} has not the right format (must be seperated by spaces)\",\r\n+                                update.callbackQuery().data());\r\n                     }\r\n-                    updateChannel(LASTMESSAGETEXT,\r\n-                            lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEDATE,\r\n-                            lastMessageDate != null\r\n-                                    ? new DateTimeType(ZonedDateTime.ofInstant(\r\n-                                            Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGENAME,\r\n-                            (lastMessageFirstName != null || lastMessageLastName != null)\r\n-                                    ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n-                                            + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n-                                    : UnDefType.NULL);\r\n-                    updateChannel(LASTMESSAGEUSERNAME,\r\n-                            lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n-                    updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n-                    updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n                 }\r\n-                return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n+                updateChannel(LASTMESSAGETEXT,\r\n+                        lastMessageText != null ? new StringType(lastMessageText) : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEDATE,\r\n+                        lastMessageDate != null\r\n+                                ? new DateTimeType(ZonedDateTime\r\n+                                        .ofInstant(Instant.ofEpochSecond(lastMessageDate.intValue()), ZoneOffset.UTC))\r\n+                                : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGENAME, (lastMessageFirstName != null || lastMessageLastName != null)\r\n+                        ? new StringType((lastMessageFirstName != null ? lastMessageFirstName + \" \" : \"\")\r\n+                                + (lastMessageLastName != null ? lastMessageLastName : \"\"))\r\n+                        : UnDefType.NULL);\r\n+                updateChannel(LASTMESSAGEUSERNAME,\r\n+                        lastMessageUsername != null ? new StringType(lastMessageUsername) : UnDefType.NULL);\r\n+                updateChannel(CHATID, chatId != null ? new StringType(chatId.toString()) : UnDefType.NULL);\r\n+                updateChannel(REPLYID, replyId != null ? new StringType(replyId) : UnDefType.NULL);\r\n+            }\r\n+            return UpdatesListener.CONFIRMED_UPDATES_ALL;\r\n         }, exception -> {\r\n-                if (exception != null) {\r\n-                    logger.warn(\"Telegram exception: {}\", exception.getMessage());\r\n-                    if (exception.response() != null) {\r\n-                        BaseResponse localResponse = exception.response();\r\n-                        if (localResponse.errorCode() == 401) {\r\n-                            logger.error(\"Bot token invalid, disable thing {}\", getThing().getUID());\r\n-                            localBot.removeGetUpdatesListener();\r\n-                            updateStatus(ThingStatus.OFFLINE);\r\n-                        }\r\n+            if (exception != null) {\r\n+                if (exception.response() != null) {\r\n+                    BaseResponse localResponse = exception.response();\r\n+                    if (localResponse.errorCode() == 401) { // unauthorized\r\n+                        cancelThingOnlineStatusJob();\r\n+                        localBot.removeGetUpdatesListener();\r\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                                \"Unauthorized attempt to connect to the Telegram server, please check if the bot token is valid\");\r\n+                        return;\r\n                     }\r\n+                }\r\n+                if (exception.getCause() != null) { // cause is only non-null in case of an IOException\r\n+                    cancelThingOnlineStatusJob();\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, exception.getMessage());\r\n+                    delayThingOnlineStatus();\r\n+                    return;\r\n+                }\r\n+                logger.warn(\"Telegram exception: {}\", exception.getMessage());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff68f2e5161d95015a2f5854e71da0732e4dc800"}, "originalPosition": 217}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1045, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}