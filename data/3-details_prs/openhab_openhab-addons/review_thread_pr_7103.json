{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTIxMTk2", "number": 7103, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxNzo1NVrODluivg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoxNToyNlrODzCEYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg2NDYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxNzo1NVrOFyx4WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo1MzoyNlrOFzNfPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDM2MA==", "bodyText": "Isn't it too much to send the packet 10 times ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388790360", "createdAt": "2020-03-06T09:17:55Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,20 +32,44 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjY4Nw==", "bodyText": "this is based on the implementation in SamsungTvHandler  and reused the wakeonlanutility class.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389242687", "createdAt": "2020-03-07T09:53:26Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,20 +32,44 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDM2MA=="}, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg2NjMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxODozMFrOFyx5Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo0NjoyNlrOFzNd1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDYyMg==", "bodyText": "Typo: teh => the", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388790622", "createdAt": "2020-03-06T09:18:30Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();\n+                        logger.trace(\"Sent WOL packet to {} {}\", broadcast, macAddress);\n+                    } catch (IOException e) {\n+                        logger.warn(\"Problem sending WOL packet to {} {}\", broadcast, macAddress);\n+                    }\n+                }\n+            }\n+\n+        } catch (IOException e) {\n+            logger.warn(\"Problem with interface while sending WOL packet to {}\", macAddress);\n+        }\n+    }\n+\n+    /**\n+     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated\n+     *\n+     * @param macStr String representation of teh MAC address (either with : or -)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjMyNA==", "bodyText": "corrected", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389242324", "createdAt": "2020-03-07T09:46:26Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();\n+                        logger.trace(\"Sent WOL packet to {} {}\", broadcast, macAddress);\n+                    } catch (IOException e) {\n+                        logger.warn(\"Problem sending WOL packet to {} {}\", broadcast, macAddress);\n+                    }\n+                }\n+            }\n+\n+        } catch (IOException e) {\n+            logger.warn(\"Problem with interface while sending WOL packet to {}\", macAddress);\n+        }\n+    }\n+\n+    /**\n+     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated\n+     *\n+     * @param macStr String representation of teh MAC address (either with : or -)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDYyMg=="}, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg2Nzk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxOTowM1rOFyx6aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo0Njo0NVrOFzNd8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDg4OQ==", "bodyText": "Is it 6 times or 16 times like I understand with the code ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388790889", "createdAt": "2020-03-06T09:19:03Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();\n+                        logger.trace(\"Sent WOL packet to {} {}\", broadcast, macAddress);\n+                    } catch (IOException e) {\n+                        logger.warn(\"Problem sending WOL packet to {} {}\", broadcast, macAddress);\n+                    }\n+                }\n+            }\n+\n+        } catch (IOException e) {\n+            logger.warn(\"Problem with interface while sending WOL packet to {}\", macAddress);\n+        }\n+    }\n+\n+    /**\n+     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjM1NA==", "bodyText": "yes 16 times", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389242354", "createdAt": "2020-03-07T09:46:45Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();\n+                        logger.trace(\"Sent WOL packet to {} {}\", broadcast, macAddress);\n+                    } catch (IOException e) {\n+                        logger.warn(\"Problem sending WOL packet to {} {}\", broadcast, macAddress);\n+                    }\n+                }\n+            }\n+\n+        } catch (IOException e) {\n+            logger.warn(\"Problem with interface while sending WOL packet to {}\", macAddress);\n+        }\n+    }\n+\n+    /**\n+     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDg4OQ=="}, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg5MTk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/discovery/LGWebOSUpnpShutdownDetector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToyNjozM1rOFyyI9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo1MToyOVrOFzNe5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5NDYxNQ==", "bodyText": "Rather than reimplementing something existing from the core framework (using directly JUPnP stuff) and creating a dependency between your binding and the thing registry (which is normally unexpected), why not updating your discovery service to consider urn:schemas-upnp-org:device:MediaRenderer:1 rather than urn:schemas-upnp-org:device:Basic:1 ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388794615", "createdAt": "2020-03-06T09:26:33Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/discovery/LGWebOSUpnpShutdownDetector.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal.discovery;\n+\n+import static org.openhab.binding.lgwebos.internal.LGWebOSBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ThingRegistry;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.jupnp.UpnpService;\n+import org.jupnp.model.meta.LocalDevice;\n+import org.jupnp.model.meta.RemoteDevice;\n+import org.jupnp.model.meta.RemoteService;\n+import org.jupnp.registry.Registry;\n+import org.jupnp.registry.RegistryListener;\n+import org.openhab.binding.lgwebos.internal.handler.LGWebOSHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class detects TV shutdown much before TV closes the websocket by listening to the upnp registry.\n+ *\n+ * Upnp devices send a good-bye broadcast on normal shutdown. This is true also for webos devices.\n+ * This seems to be the only way to detect instantly that the TV was turned off by remote control and much before the\n+ * device actually closes the websocket connection.\n+ *\n+ * However, not all users do use Upnp, so this use case is an optional optimization.\n+ *\n+ * The only Upnp device in webos that sends an event on shut down is of type\n+ * urn:schemas-upnp-org:device:MediaRenderer:1, with services types:\n+ * urn:schemas-upnp-org:service:AVTransport:1\n+ * urn:schemas-upnp-org:service:ConnectionManager:1\n+ * urn:schemas-upnp-org:service:RenderingControl:1\n+ *\n+ * 20 to 30 seconds later the websocket connection will close.\n+ * Arround this point in time device type: urn:schemas-upnp-org:device:Basic:1 de-registers with service type:\n+ * urn:lge-com:service:webos-second-screen:1 - the same, which is used for thing discovery.\n+ * Thus, thingRemoved of DiscoveryListener implementation in LGWebOSHandler will only be called at this point.\n+ *\n+ *\n+ * @author Sebastian Prehn - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+@Component(immediate = true, configurationPid = \"discovery.lgwebos.shutdown\")\n+public class LGWebOSUpnpShutdownDetector implements RegistryListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjU5Ng==", "bodyText": "I noticed as well, but how can I reliably detect LG WebOS devices only?\nThe connectsdk implementation from LG did search for urn:schemas-upnp-org:device:Basic:1 and this worked reliably in the past.\nIf we react to urn:schemas-upnp-org:device:MediaRenderer:1 how can we make sure we filter for webos. I don't have any documentation from LG on what would be sent in meta data every time.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389242596", "createdAt": "2020-03-07T09:51:29Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/discovery/LGWebOSUpnpShutdownDetector.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal.discovery;\n+\n+import static org.openhab.binding.lgwebos.internal.LGWebOSBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ThingRegistry;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.jupnp.UpnpService;\n+import org.jupnp.model.meta.LocalDevice;\n+import org.jupnp.model.meta.RemoteDevice;\n+import org.jupnp.model.meta.RemoteService;\n+import org.jupnp.registry.Registry;\n+import org.jupnp.registry.RegistryListener;\n+import org.openhab.binding.lgwebos.internal.handler.LGWebOSHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class detects TV shutdown much before TV closes the websocket by listening to the upnp registry.\n+ *\n+ * Upnp devices send a good-bye broadcast on normal shutdown. This is true also for webos devices.\n+ * This seems to be the only way to detect instantly that the TV was turned off by remote control and much before the\n+ * device actually closes the websocket connection.\n+ *\n+ * However, not all users do use Upnp, so this use case is an optional optimization.\n+ *\n+ * The only Upnp device in webos that sends an event on shut down is of type\n+ * urn:schemas-upnp-org:device:MediaRenderer:1, with services types:\n+ * urn:schemas-upnp-org:service:AVTransport:1\n+ * urn:schemas-upnp-org:service:ConnectionManager:1\n+ * urn:schemas-upnp-org:service:RenderingControl:1\n+ *\n+ * 20 to 30 seconds later the websocket connection will close.\n+ * Arround this point in time device type: urn:schemas-upnp-org:device:Basic:1 de-registers with service type:\n+ * urn:lge-com:service:webos-second-screen:1 - the same, which is used for thing discovery.\n+ * Thus, thingRemoved of DiscoveryListener implementation in LGWebOSHandler will only be called at this point.\n+ *\n+ *\n+ * @author Sebastian Prehn - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+@Component(immediate = true, configurationPid = \"discovery.lgwebos.shutdown\")\n+public class LGWebOSUpnpShutdownDetector implements RegistryListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5NDYxNQ=="}, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTg1NTI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxOTozOVrOFzN_oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMDoyNDoxMVrOFzRkvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDk3Nw==", "bodyText": "Take care, you have to filter to not run your code for any thing discovered.\nIn fact, I even don't understand why you run this code depending on a thing discovery ?!\nThis looks simply like something to run at init time, doesn't it ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389250977", "createdAt": "2020-03-07T12:19:39Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +352,41 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    @Override\n+    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519f1fbf1acb3f9a38b865c9315267abb1abc2f5"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NzQzOA==", "bodyText": "you are right about filtering to avoid this happening too often\nif we put this into initialize it may execute even before the TV appears on the network.\nthere may be situations when arp is not yet filled.\nhm, on the other hand, it is optional to detect the mac, and it typically only needs to run once.\nhave prepared the code change, but need to run some tests", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389257438", "createdAt": "2020-03-07T14:12:54Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +352,41 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    @Override\n+    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDk3Nw=="}, "originalCommit": {"oid": "519f1fbf1acb3f9a38b865c9315267abb1abc2f5"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1ODEwMw==", "bodyText": "I was thinking during the init process, not necessarly in initialize method. I let you check but maybe you can do that after the web socket connection is established ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389258103", "createdAt": "2020-03-07T14:24:21Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +352,41 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    @Override\n+    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDk3Nw=="}, "originalCommit": {"oid": "519f1fbf1acb3f9a38b865c9315267abb1abc2f5"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwOTYzMQ==", "bodyText": "Ok, pushed a new version. This has DiscoveryListener removed as well.\nMAC address detection in thingDiscovered has moved into initialize and after websocket connect phase.\nthingRemoved was called at the same time as websocket disconnect, so no point in keeping it.\nPls have a look...", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389309631", "createdAt": "2020-03-07T20:24:11Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +352,41 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    @Override\n+    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDk3Nw=="}, "originalCommit": {"oid": "519f1fbf1acb3f9a38b865c9315267abb1abc2f5"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjMxNDUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMjo0NjowMVrOFzSEyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwODoyMTowM1rOFzT15g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNzgzNQ==", "bodyText": "Is it necessary to call it twice, once here and once more after web socket connection ?\nIs this one really necessary ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389317835", "createdAt": "2020-03-07T22:46:01Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -127,7 +130,9 @@ public void initialize() {\n         s.setListener(this);\n         socket = s;\n \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"TV is off\");\n         startReconnectJob();\n+        findMacAddress(); // host config value could have changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0Njc5MA==", "bodyText": "Initially thought this should cover the case when config gets updated and TV  is offline. But in this case arping won't return anthing. removing it from initialize", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389346790", "createdAt": "2020-03-08T08:21:03Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -127,7 +130,9 @@ public void initialize() {\n         s.setListener(this);\n         socket = s;\n \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"TV is off\");\n         startReconnectJob();\n+        findMacAddress(); // host config value could have changed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNzgzNQ=="}, "originalCommit": {"oid": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjMxNzI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMjo1MzoxOFrOFzSGIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwODoyNjozNlrOFzT3VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxODE3Nw==", "bodyText": "I was playing with simiilar code in my own PR to update the discovered UDN and this leads to weird behaviour, probably because my thing is defined in a config file (and so with a readonly configuration). I have the feeling that at a certain time (after binding restart), the framework detects a change and restore the original configuration.\nBut leave it like that until this is more clear for me.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389318177", "createdAt": "2020-03-07T22:53:18Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +340,29 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    /**\n+     * Make a best effort to automatically detect the MAC address of the TV.\n+     * If this does not work automatically, users can still set it manually in the Thing config.\n+     */\n+    private void findMacAddress() {\n+        LGWebOSConfiguration c = getLGWebOSConfig();\n+        String host = c.getHost();\n+        if (!host.isEmpty()) {\n+            try {\n+                // validate host, so that no command can be injected\n+                String macAddress = WakeOnLanUtility.getMACAddress(InetAddress.getByName(host).getHostAddress());\n+                logger.debug(\"Determined MAC address: {} for host: {}\", macAddress, host);\n+                if (macAddress != null && !macAddress.equals(c.macAddress)) {\n+                    c.macAddress = macAddress;\n+                    // persist the configuration change\n+                    Configuration configuration = editConfiguration();\n+                    configuration.put(LGWebOSBindingConstants.CONFIG_MAC_ADDRESS, macAddress);\n+                    updateConfiguration(configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NzA0Nw==", "bodyText": "OK, let me know if there is a better solution.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389347047", "createdAt": "2020-03-08T08:25:15Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +340,29 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    /**\n+     * Make a best effort to automatically detect the MAC address of the TV.\n+     * If this does not work automatically, users can still set it manually in the Thing config.\n+     */\n+    private void findMacAddress() {\n+        LGWebOSConfiguration c = getLGWebOSConfig();\n+        String host = c.getHost();\n+        if (!host.isEmpty()) {\n+            try {\n+                // validate host, so that no command can be injected\n+                String macAddress = WakeOnLanUtility.getMACAddress(InetAddress.getByName(host).getHostAddress());\n+                logger.debug(\"Determined MAC address: {} for host: {}\", macAddress, host);\n+                if (macAddress != null && !macAddress.equals(c.macAddress)) {\n+                    c.macAddress = macAddress;\n+                    // persist the configuration change\n+                    Configuration configuration = editConfiguration();\n+                    configuration.put(LGWebOSBindingConstants.CONFIG_MAC_ADDRESS, macAddress);\n+                    updateConfiguration(configuration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxODE3Nw=="}, "originalCommit": {"oid": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NzE1Nw==", "bodyText": "maybe users with thing file should also put the macAddress into their configuration. So we could update the readme accordingly.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389347157", "createdAt": "2020-03-08T08:26:36Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +340,29 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    /**\n+     * Make a best effort to automatically detect the MAC address of the TV.\n+     * If this does not work automatically, users can still set it manually in the Thing config.\n+     */\n+    private void findMacAddress() {\n+        LGWebOSConfiguration c = getLGWebOSConfig();\n+        String host = c.getHost();\n+        if (!host.isEmpty()) {\n+            try {\n+                // validate host, so that no command can be injected\n+                String macAddress = WakeOnLanUtility.getMACAddress(InetAddress.getByName(host).getHostAddress());\n+                logger.debug(\"Determined MAC address: {} for host: {}\", macAddress, host);\n+                if (macAddress != null && !macAddress.equals(c.macAddress)) {\n+                    c.macAddress = macAddress;\n+                    // persist the configuration change\n+                    Configuration configuration = editConfiguration();\n+                    configuration.put(LGWebOSBindingConstants.CONFIG_MAC_ADDRESS, macAddress);\n+                    updateConfiguration(configuration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxODE3Nw=="}, "originalCommit": {"oid": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjU1MDAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDo1NjozM1rOFz5FGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDoyNzoyNVrOF0fwGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Njg5MA==", "bodyText": "Is it possible to change this so it stops sending packets once you succeed?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389956890", "createdAt": "2020-03-09T20:56:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,20 +32,44 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n         if (!handler.getSocket().isConnected()) {\n             /*\n              * Unable to send anything to a not connected device.\n              * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n              * Therefore setting state to OFF\n              */\n             handler.postUpdate(channelId, OnOffType.OFF);\n+        }\n+\n+        if (OnOffType.ON == command) {\n+            String macAddress = configProvider.getMacAddress();\n+            if (macAddress.isEmpty()) {\n+                logger.debug(\n+                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n+            } else {\n+                for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            WakeOnLanUtility.sendWOLPacket(macAddress);\n+                        } catch (IllegalArgumentException e) {\n+                            logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                        }\n+                    }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45609b1dfdabab6471d339ebdcea55c0001f2614"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU5MDQ4OA==", "bodyText": "Thought about storing the scheduled job and cancelling it when the power channel updates to ON. But it takes way more than 1 sec  (10x 100ms) for the TV to become responsive and accept a connection, so that the power channel would be updated. So I think the answer is no.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390590488", "createdAt": "2020-03-10T20:27:25Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,20 +32,44 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n         if (!handler.getSocket().isConnected()) {\n             /*\n              * Unable to send anything to a not connected device.\n              * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n              * Therefore setting state to OFF\n              */\n             handler.postUpdate(channelId, OnOffType.OFF);\n+        }\n+\n+        if (OnOffType.ON == command) {\n+            String macAddress = configProvider.getMacAddress();\n+            if (macAddress.isEmpty()) {\n+                logger.debug(\n+                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n+            } else {\n+                for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            WakeOnLanUtility.sendWOLPacket(macAddress);\n+                        } catch (IllegalArgumentException e) {\n+                            logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                        }\n+                    }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Njg5MA=="}, "originalCommit": {"oid": "45609b1dfdabab6471d339ebdcea55c0001f2614"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjU2MzI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTowMDo0N1rOFz5NYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDoyMTozN1rOF0fjgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTAwOQ==", "bodyText": "Just in case you don't know, readLine() doesn't include the \\n character in the result.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389959009", "createdAt": "2020-03-09T21:00:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NzI2Ng==", "bodyText": "That is fine in this case. We only expect one line or none.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390587266", "createdAt": "2020-03-10T20:21:37Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTAwOQ=="}, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjU2NDU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTowMToxM1rOFz5ORQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDoyMTo1MFrOF0fkBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTIzNw==", "bodyText": "make this Pattern static", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389959237", "createdAt": "2020-03-09T21:01:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NzM5Ng==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390587396", "createdAt": "2020-03-10T20:21:50Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTIzNw=="}, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjU3MDg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTowMzoxOVrOFz5SHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDoyMTo1NVrOF0fkMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MDIyMQ==", "bodyText": "Please wrap socket in a try-with-resources", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389960221", "createdAt": "2020-03-09T21:03:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NzQ0MA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390587440", "createdAt": "2020-03-10T20:21:55Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MDIyMQ=="}, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjU3Mzk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTowNDoyMFrOFz5UAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDoyMjowMVrOF0fkZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MDcwNA==", "bodyText": "Please include mac address format in the description.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389960704", "createdAt": "2020-03-09T21:04:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -15,6 +15,10 @@\n \t\t\t<label>Access Key</label>\n \t\t\t<description>Key exchanged with TV after pairing.</description>\n \t\t</parameter>\n+\t\t<parameter name=\"macAddress\" type=\"text\" required=\"false\">\n+\t\t\t<label>MAC Address</label>\n+\t\t\t<description>If MAC Address of TV is entered here, the binding will attempt to power on the device via Wake On Lan (WOL), when it receives command ON on channel power.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4NzQ5NA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390587494", "createdAt": "2020-03-10T20:22:01Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -15,6 +15,10 @@\n \t\t\t<label>Access Key</label>\n \t\t\t<description>Key exchanged with TV after pairing.</description>\n \t\t</parameter>\n+\t\t<parameter name=\"macAddress\" type=\"text\" required=\"false\">\n+\t\t\t<label>MAC Address</label>\n+\t\t\t<description>If MAC Address of TV is entered here, the binding will attempt to power on the device via Wake On Lan (WOL), when it receives command ON on channel power.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MDcwNA=="}, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDc5NzA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTozODoyNlrOF0h9aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToxNTowMlrOF1r2Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA==", "bodyText": "The arping utility might not be present on the user's machine (like a windows machine). Is there any way you can make this work on a windows machine as well?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390626664", "createdAt": "2020-03-10T21:38:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    /**\n+     * Get MAC address for host usesing \"arping\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ab7a5c3353665b368926978b05891db0fba5ad"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NTczNQ==", "bodyText": "that is actually why I changed the code to find the mac address with a regular expression.\njust don't know how to detect arp for windows, arp for linux.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390665735", "createdAt": "2020-03-10T23:18:51Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    /**\n+     * Get MAC address for host usesing \"arping\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA=="}, "originalCommit": {"oid": "47ab7a5c3353665b368926978b05891db0fba5ad"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4MjAyMQ==", "bodyText": "I found this. Looks a little complicated but if it works, it works.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390682021", "createdAt": "2020-03-11T00:15:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    /**\n+     * Get MAC address for host usesing \"arping\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA=="}, "originalCommit": {"oid": "47ab7a5c3353665b368926978b05891db0fba5ad"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1ODU2OQ==", "bodyText": "yes, the examples show that arp can be used as an alternative. This is what I meant earlier.\non linux arp <ip>. On windows arp -a <ip>.\nJust pushed a new version. I have tested on linux/docker and mac successfully.\nI don't have  OH installed on windows.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391258569", "createdAt": "2020-03-11T20:47:13Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    /**\n+     * Get MAC address for host usesing \"arping\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA=="}, "originalCommit": {"oid": "47ab7a5c3353665b368926978b05891db0fba5ad"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzNzIyMw==", "bodyText": "It is alright if you can't test on windows. It is a bit unreasonable to expect you to have every kind of environment to test on. I'll accept it as long as you use an approach that the wider internet generally agrees would work.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391837223", "createdAt": "2020-03-12T19:15:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    /**\n+     * Get MAC address for host usesing \"arping\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA=="}, "originalCommit": {"oid": "47ab7a5c3353665b368926978b05891db0fba5ad"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDk0MzMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozNjozNVrOF1J-3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDozNjoyN1rOF2RyLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MjM5OQ==", "bodyText": "Shouldn't you break at this point? Or do you always want the last mac address?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391282399", "createdAt": "2020-03-11T21:36:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                LOGGER.debug(\"{} failed with error: {}\", cmd, builder.toString());\n+            } else {\n+                Matcher matcher = MAC_REGEX.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1ODc5Ng==", "bodyText": "you are right. can break at this point.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r392458796", "createdAt": "2020-03-13T20:36:27Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                LOGGER.debug(\"{} failed with error: {}\", cmd, builder.toString());\n+            } else {\n+                Matcher matcher = MAC_REGEX.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MjM5OQ=="}, "originalCommit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTMzMTcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyOTo1NlrOF1NtUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1MDozMlrOGEEI1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzQ0MQ==", "bodyText": "I suggest using org.eclipse.smarthome.io.net.exec.ExecUtil instead since it would simplify this method a bit while making this command line call a bit more robust", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391343441", "createdAt": "2020-03-12T00:29:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2NTU0OA==", "bodyText": "Right now have to pause the work. No access to the TV for a while due to Corona precautions. Schools closed in Germany, had to move temporarily", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r392465548", "createdAt": "2020-03-13T20:46:50Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzQ0MQ=="}, "originalCommit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3NDE3Nw==", "bodyText": "Np, stay safe.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r392474177", "createdAt": "2020-03-13T21:01:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzQ0MQ=="}, "originalCommit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNTI4Ng==", "bodyText": "change implemented, but unable to test myself", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r406915286", "createdAt": "2020-04-10T19:50:32Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzQ0MQ=="}, "originalCommit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODE5MjQ2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMDoxNDowOVrOGEZz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODo0OToxNlrOGHFfZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3MDM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ScheduledExecutorService scheduler;\n          \n          \n            \n                private final ScheduledExecutorService scheduler;", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407270364", "createdAt": "2020-04-13T00:14:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -30,6 +33,15 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4MzE3NA==", "bodyText": "addressed, also reordered: final static before final", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410083174", "createdAt": "2020-04-17T08:49:16Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -30,6 +33,15 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3MDM2NA=="}, "originalCommit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTMyMjQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMToyOTowMlrOGEj8_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowODoxNlrOGEnm8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzNjU0Mg==", "bodyText": "As host and macAdress are nullable, could you please replace host by getHost() and macAdress by getMacAdress() (which can't return null) to avoid a potential NPE ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407436542", "createdAt": "2020-04-13T11:29:02Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSConfiguration.java", "diffHunk": "@@ -43,9 +45,15 @@ public int getPort() {\n         return port;\n     }\n \n+    public String getMacAddress() {\n+        String m = macAddress;\n+        return m == null ? \"\" : m;\n+    }\n+\n     @Override\n     public String toString() {\n-        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length() + \"]\";\n+        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length()\n+                + \", macAddress=\" + macAddress + \"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ4ODUzMQ==", "bodyText": "this will just print \u201cnull\u201d no NPE. but sure, can also use getters", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407488531", "createdAt": "2020-04-13T13:52:09Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSConfiguration.java", "diffHunk": "@@ -43,9 +45,15 @@ public int getPort() {\n         return port;\n     }\n \n+    public String getMacAddress() {\n+        String m = macAddress;\n+        return m == null ? \"\" : m;\n+    }\n+\n     @Override\n     public String toString() {\n-        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length() + \"]\";\n+        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length()\n+                + \", macAddress=\" + macAddress + \"]\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzNjU0Mg=="}, "originalCommit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NjQzMw==", "bodyText": "If no NPE, keep it unchanged.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407496433", "createdAt": "2020-04-13T14:08:16Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSConfiguration.java", "diffHunk": "@@ -43,9 +45,15 @@ public int getPort() {\n         return port;\n     }\n \n+    public String getMacAddress() {\n+        String m = macAddress;\n+        return m == null ? \"\" : m;\n+    }\n+\n     @Override\n     public String toString() {\n-        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length() + \"]\";\n+        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length()\n+                + \", macAddress=\" + macAddress + \"]\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzNjU0Mg=="}, "originalCommit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDYzMjU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTowNzowNVrOGG3LSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODo0OToyNFrOGHFftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0ODY0OQ==", "bodyText": "remove blank line", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r409848649", "createdAt": "2020-04-16T21:07:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.io.net.exec.ExecUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+    private static final int CMD_TIMEOUT_MS = 1000;\n+\n+    private static final String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux\n+            if (checkIfLinuxCommandExists(\"arp\")) {\n+                COMMAND = \"arp %s\";\n+            } else if (checkIfLinuxCommandExists(\"arping\")) { // typically OH provided docker image\n+                COMMAND = \"arping -r -c 1 -C 1 %s\";\n+            } else {\n+                COMMAND = \"\";\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        if (COMMAND.isEmpty()) {\n+            LOGGER.debug(\"MAC address detection not possible. No command to identify MAC found.\");\n+            return null;\n+        }\n+\n+        String cmd = String.format(COMMAND, hostName);\n+        String response = ExecUtil.executeCommandLineAndWaitResponse(cmd, CMD_TIMEOUT_MS);\n+        Matcher matcher = MAC_REGEX.matcher(response);\n+        String macAddress = null;\n+\n+        while (matcher.find()) {\n+            String group = matcher.group();\n+\n+            if (group.length() == 17) {\n+                macAddress = group;\n+                break;\n+            }\n+        }\n+\n+        if (macAddress != null) {\n+            LOGGER.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+        } else {\n+            LOGGER.debug(\"Problem executing command {} to retrieve MAC address for {}: {}\", cmd, hostName, response);\n+        }\n+        return macAddress;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407bd9ca02fb69521b84014a28be01262fd75375"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA4MzI1NQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410083255", "createdAt": "2020-04-17T08:49:24Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.io.net.exec.ExecUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+    private static final int CMD_TIMEOUT_MS = 1000;\n+\n+    private static final String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux\n+            if (checkIfLinuxCommandExists(\"arp\")) {\n+                COMMAND = \"arp %s\";\n+            } else if (checkIfLinuxCommandExists(\"arping\")) { // typically OH provided docker image\n+                COMMAND = \"arping -r -c 1 -C 1 %s\";\n+            } else {\n+                COMMAND = \"\";\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        if (COMMAND.isEmpty()) {\n+            LOGGER.debug(\"MAC address detection not possible. No command to identify MAC found.\");\n+            return null;\n+        }\n+\n+        String cmd = String.format(COMMAND, hostName);\n+        String response = ExecUtil.executeCommandLineAndWaitResponse(cmd, CMD_TIMEOUT_MS);\n+        Matcher matcher = MAC_REGEX.matcher(response);\n+        String macAddress = null;\n+\n+        while (matcher.find()) {\n+            String group = matcher.group();\n+\n+            if (group.length() == 17) {\n+                macAddress = group;\n+                break;\n+            }\n+        }\n+\n+        if (macAddress != null) {\n+            LOGGER.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+        } else {\n+            LOGGER.debug(\"Problem executing command {} to retrieve MAC address for {}: {}\", cmd, hostName, response);\n+        }\n+        return macAddress;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0ODY0OQ=="}, "originalCommit": {"oid": "407bd9ca02fb69521b84014a28be01262fd75375"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzkxOTYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0MDowNVrOGHXL0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTowOTo0OVrOGHZ82A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg==", "bodyText": "can you run the spotless formatter on this? This string is too long and should be split into multiple lines.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410373072", "createdAt": "2020-04-17T17:40:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,81 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\n+                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM5NTk0NQ==", "bodyText": "can you give a hint how to do this? spotless formatter is completely new to me", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410395945", "createdAt": "2020-04-17T18:23:54Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,81 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\n+                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQwMDg2Mg==", "bodyText": "This is how you would do it, but it would apply to the whole project not just that file.\nmvn spotless:apply -p1 :org.openhab.binding.lgwebos\nYou don't need to commit all the changes it makes, I'm more just concerned about the formatting of the PowerControlPower file. Feel free to ignore changes it makes to other files since I feel it would be outside the scope of this PR.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410400862", "createdAt": "2020-04-17T18:33:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,81 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\n+                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxMTI5Ng==", "bodyText": "this has only changed xml files\n\tmodified:   pom.xml\n\tmodified:   src/main/feature/feature.xml\n\tmodified:   src/main/resources/ESH-INF/config/config.xml\n\n?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410411296", "createdAt": "2020-04-17T18:54:44Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,81 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\n+                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxODM5Mg==", "bodyText": "Well, I guess I misunderstood what it would change... nvm then. I still need the string to less long so just do this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n          \n          \n            \n                                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. \" \n          \n          \n            \n                                        + \"You may succeed using wake on lan (WOL). \"\n          \n          \n            \n                                        +\"Please set the macAddress config value in Thing configuration to enable this.\");", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410418392", "createdAt": "2020-04-17T19:09:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,81 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\n+                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMzMjU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1ODozMVrOGHbUDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyMjowOVrOGHexnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ==", "bodyText": "Why a first if and then a switch ??\nJust reading that change, I already know that it will no more work for me.\nYou must absolutely consider DISCONNECTING too and send a WOL. The state DISCONNECTING is a state that remains a long time in my case. I need the ability to turn on the TV in this case too.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410440719", "createdAt": "2020-04-17T19:58:31Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -46,13 +47,11 @@ public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n         } else if (OnOffType.ON == command) {\n-            if (handler.getSocket().isConnected()) {\n-                logger.debug(\"Received ON - TV is already on.\");\n-                handler.postUpdate(channelId, OnOffType.ON);\n-            } else {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0NzY3Mg==", "bodyText": "I have to agree with this, you are already sending WOL packets even after it wakes up, so why would it matter sending it while it is disconnecting?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410447672", "createdAt": "2020-04-17T20:14:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -46,13 +47,11 @@ public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n         } else if (OnOffType.ON == command) {\n-            if (handler.getSocket().isConnected()) {\n-                logger.debug(\"Received ON - TV is already on.\");\n-                handler.postUpdate(channelId, OnOffType.ON);\n-            } else {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1Mjg5Nw==", "bodyText": "the problem is not so much sending the WOL, the problem is, it will be ignored by the TV. It will still shut down, but then our item will be in an incorrect state, until the disconnect finally happens.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410452897", "createdAt": "2020-04-17T20:25:41Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -46,13 +47,11 @@ public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n         } else if (OnOffType.ON == command) {\n-            if (handler.getSocket().isConnected()) {\n-                logger.debug(\"Received ON - TV is already on.\");\n-                handler.postUpdate(channelId, OnOffType.ON);\n-            } else {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1NTM3NA==", "bodyText": "I cxn certify that it is not in my case.\nDISCONNECTING is a state while the TV is turned off but the websocket is still alive. So sending the WOL is turning on the TV and you receive at this time a new app value from the subscription and the binding is switching from DISCONNECTING to REGISTERED with a refresh of all subscriptions and a channel state setting to ON.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410455374", "createdAt": "2020-04-17T20:31:37Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -46,13 +47,11 @@ public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n         } else if (OnOffType.ON == command) {\n-            if (handler.getSocket().isConnected()) {\n-                logger.debug(\"Received ON - TV is already on.\");\n-                handler.postUpdate(channelId, OnOffType.ON);\n-            } else {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NzM5Nw==", "bodyText": "the updated version will now send the WOL packet also in DISCONNECTING state.\nI will not have any effect if the TV is still shutting down, but it also has no negative effect. And since we are sending multiple packets with a bit of delay there is a chance that it works a few ms later.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410497397", "createdAt": "2020-04-17T22:21:58Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -46,13 +47,11 @@ public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n         } else if (OnOffType.ON == command) {\n-            if (handler.getSocket().isConnected()) {\n-                logger.debug(\"Received ON - TV is already on.\");\n-                handler.postUpdate(channelId, OnOffType.ON);\n-            } else {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NzQzOQ==", "bodyText": "it should be resolved", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410497439", "createdAt": "2020-04-17T22:22:09Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -46,13 +47,11 @@ public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n         } else if (OnOffType.ON == command) {\n-            if (handler.getSocket().isConnected()) {\n-                logger.debug(\"Received ON - TV is already on.\");\n-                handler.postUpdate(channelId, OnOffType.ON);\n-            } else {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMzNjE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1OTo0OFrOGHbWaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODozMzowOVrOGHpM_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTMyMA==", "bodyText": "All your logic was to consider the channel as ON only when REGISTERED. So why setting the channel state to ON when the state is CONNECTING or REGISTERING ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410441320", "createdAt": "2020-04-17T19:59:48Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MDI0OA==", "bodyText": "you gave me:\n            if (handler.getSocket().isConnected()) {\n                logger.debug(\"Received ON - TV is already on.\");\n                handler.postUpdate(channelId, OnOffType.ON);\n\nisConnected is true in CONNECTING, REGISTERING, REGISTERED, DISCONNECTING\nthis is fine for the first three states, but the problematic state is DISCONNECTING\nin LGWebOSHandler::onStateChanged\n            case DISCONNECTING:\n                postUpdate(CHANNEL_POWER, OnOffType.OFF);\n\nwe should not reset it to ON", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410470248", "createdAt": "2020-04-17T21:07:11Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTMyMA=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2ODI4Ng==", "bodyText": "isConnected is true only when in state REGISTERED:\n    public boolean isConnected() {\n        return state == State.REGISTERED;\n    }", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410668286", "createdAt": "2020-04-18T08:33:09Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTMyMA=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODMzNzgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDowMDoyNVrOGHbXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo1NDo0MlrOGHcyeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTU4Mg==", "bodyText": "As already mentioned, I disagree here. We need the ability to turn on the TV with WOL when in this state.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410441582", "createdAt": "2020-04-17T20:00:25Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NDg4OQ==", "bodyText": "but it does not work. the tv does not react to WOL when it is on and specifically when it is in the shutdown process. WOL will not stopping a running shutdown process", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410464889", "createdAt": "2020-04-17T20:54:42Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTU4Mg=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODM0MjE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDowMjoxM1rOGHbaVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMTozNDoyMFrOGHdwuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MjMyNA==", "bodyText": "Are you sure that you can send command when in REGISTERING ?\nLook at sendCommand, you allow sending commands only when state is REGISTERED.\nAnd once again, why a first if and then a switch ??", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410442324", "createdAt": "2020-04-17T20:02:13Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MDgyNw==", "bodyText": "moved the if into switch statement\nREGISTERING moved to CONNECTING", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410480827", "createdAt": "2020-04-17T21:34:20Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MjMyNA=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODM0NTA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDowMzoxMFrOGHbcEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODozOToxMFrOGHpPfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0Mjc3MA==", "bodyText": "No coherent with your logic.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410442770", "createdAt": "2020-04-17T20:03:10Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                        logger.debug(\"Received OFF - TV is currently connecting.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MDYzOQ==", "bodyText": "you proposed:\n            if (!handler.getSocket().isConnected()) {\n                logger.debug(\"Received OFF - TV is already off.\");\n                handler.postUpdate(channelId, OnOffType.OFF);\n            } else {\n                handler.getSocket().powerOff(getDefaultResponseListener());\n            }\n\npowerOff would be executed in states CONNECTING, REGISTERING, REGISTERED and DISCONNECTING but it would only actually send a message in REGISTERED state.\nin case DISCONNECTED it would not attempt to send sth and update the channel to OFF.\nIndeed this should work as well.\nso the difference now is instead of no operation in states\nCONNECTING, REGISTERING, DISCONNECTING\nCONNECTING, REGISTERING would update the state to ON <- we definitely should not set it to OFF\nand DISCONNECTING to OFF <- same as in onStateChanged\nThis should not cause any issue, but happy to modify the code and not update the channel in those cases", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410480639", "createdAt": "2020-04-17T21:33:52Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                        logger.debug(\"Received OFF - TV is currently connecting.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0Mjc3MA=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4NzY4OA==", "bodyText": "just thought it should be updated in analogy to the ON command case", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410487688", "createdAt": "2020-04-17T21:52:31Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                        logger.debug(\"Received OFF - TV is currently connecting.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0Mjc3MA=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2ODkyNQ==", "bodyText": "Your logic since the beginning is that the power channel must be set to ON only when the state is REGISTERED, that means when the binding is ready to handle commands. In all other cases, it must be OFF. I finally agree with your initial logic.\nSo if you receive a command on this channel when the current state is other than REGISTERED, you must reject the command and you must be sure that the channel state remains OFF.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410668925", "createdAt": "2020-04-18T08:39:10Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                        logger.debug(\"Received OFF - TV is currently connecting.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0Mjc3MA=="}, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODM3ODAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoxNToxNVrOGHbwpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0MDo0MlrOGHcblw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODAzOA==", "bodyText": "Please move this to the switch statement", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410448038", "createdAt": "2020-04-17T20:15:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,82 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\"Received ON - Turning TV on via API is not supported by LG WebOS TVs. \"\n+                            + \"You may succeed using wake on lan (WOL). \"\n+                            + \"Please set the macAddress config value in Thing configuration to enable this.\");\n+                    handler.postUpdate(channelId, OnOffType.OFF);\n+                } else {\n+                    for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                        scheduler.schedule(() -> {\n+                            try {\n+                                WakeOnLanUtility.sendWOLPacket(macAddress);\n+                            } catch (IllegalArgumentException e) {\n+                                logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                            }\n+                        }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n+                    }\n+                }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n+            }\n         } else if (OnOffType.OFF == command) {\n-            handler.getSocket().powerOff(getDefaultResponseListener());\n+            if (State.REGISTERED == state || State.REGISTERING == state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae0c60c670e6b7b70bb79b872b205d608a1a303"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1OTAzMQ==", "bodyText": "yes indeed", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410459031", "createdAt": "2020-04-17T20:40:42Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,82 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\"Received ON - Turning TV on via API is not supported by LG WebOS TVs. \"\n+                            + \"You may succeed using wake on lan (WOL). \"\n+                            + \"Please set the macAddress config value in Thing configuration to enable this.\");\n+                    handler.postUpdate(channelId, OnOffType.OFF);\n+                } else {\n+                    for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                        scheduler.schedule(() -> {\n+                            try {\n+                                WakeOnLanUtility.sendWOLPacket(macAddress);\n+                            } catch (IllegalArgumentException e) {\n+                                logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                            }\n+                        }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n+                    }\n+                }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n+            }\n         } else if (OnOffType.OFF == command) {\n-            handler.getSocket().powerOff(getDefaultResponseListener());\n+            if (State.REGISTERED == state || State.REGISTERING == state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODAzOA=="}, "originalCommit": {"oid": "1ae0c60c670e6b7b70bb79b872b205d608a1a303"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODM3ODU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoxNToyNlrOGHbw_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDo0MDo0OFrOGHcbwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODEyNQ==", "bodyText": "Please move this to the switch statement", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410448125", "createdAt": "2020-04-17T20:15:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,82 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae0c60c670e6b7b70bb79b872b205d608a1a303"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ1OTA3Mg==", "bodyText": "will do", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410459072", "createdAt": "2020-04-17T20:40:48Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,82 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODEyNQ=="}, "originalCommit": {"oid": "1ae0c60c670e6b7b70bb79b872b205d608a1a303"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 636, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}